package randoop;

import junit.framework.*;

public class RandoopTest3 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test1");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sourceforge.schemaspy.util.Version var1 = new net.sourceforge.schemaspy.util.Version("net.sourceforge.schemaspy.ui.MainFrame[frame1,0,23,500x312,invalid,hidden,layout=java.awt.BorderLayout,title=SchemaSpy,resizable,normal,defaultCloseOperation=HIDE_ON_CLOSE,rootPane=javax.swing.JRootPane[,0,0,0x0,invalid,layout=javax.swing.JRootPane$RootLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777673,maximumSize=,minimumSize=,preferredSize=],rootPaneCheckingEnabled=true]");
      fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
    }

  }

  public void test2() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test2");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    java.awt.Color var7 = var0.getForeground();
    net.sourceforge.schemaspy.model.Routine var18 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var19 = var18.getDataAccess();
    java.util.List var20 = var18.getParameters();
    net.sourceforge.schemaspy.view.WriteStats var21 = new net.sourceforge.schemaspy.view.WriteStats((java.util.Collection)var20);
    int var22 = var21.getNumViewsWritten();
    java.util.Set var23 = var21.getExcludedColumns();
    net.sourceforge.schemaspy.view.WriteStats var24 = new net.sourceforge.schemaspy.view.WriteStats(var21);
    java.util.Set var25 = var24.getExcludedColumns();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setFocusTraversalKeys(312, var25);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test3() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test3");


    net.sourceforge.schemaspy.util.CaseInsensitiveMap var1 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.Set var2 = var1.entrySet();
    java.util.Set var3 = var1.entrySet();
    java.util.List var4 = net.sourceforge.schemaspy.DbAnalyzer.getTablesWithOneColumn((java.util.Collection)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test4() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test4");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    java.awt.Window.Type var1 = var0.getType();
    var0.setFocusCycleRoot(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test5() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test5");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    net.sourceforge.schemaspy.ui.DbConfigPanel var6 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var6.requestFocus();
    java.beans.PropertyChangeListener[] var8 = var6.getPropertyChangeListeners();
    var6.paintImmediately(0, (-1), (-1), 0);
    java.awt.event.KeyListener[] var14 = var6.getKeyListeners();
    net.sourceforge.schemaspy.ui.DbConfigPanel var15 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var15.requestFocus();
    var15.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var19 = var15.insets();
    var15.setAlignmentX(1.0f);
    java.awt.Color var22 = var15.getForeground();
    var6.setForeground(var22);
    var0.setBackground(var22);
    java.awt.image.BufferStrategy var25 = var0.getBufferStrategy();
    boolean var26 = var0.isUndecorated();
    boolean var27 = var0.isFocusTraversalPolicySet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);

  }

  public void test6() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test6");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    var0.setConnectionPropertiesFile("ISO-8859-1s");
    var0.setUser("DbSpecificOption name: 'DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'' value: 'null' description: 'net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]'");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test7() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test7");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.firePropertyChange("ISO-8859-1", 0L, (-1L));
    java.awt.Color var6 = var0.getBackground();
    var0.firePropertyChange("java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)", '#', ' ');
    javax.swing.KeyStroke[] var11 = var0.getRegisteredKeyStrokes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test8() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test8");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    net.sourceforge.schemaspy.model.Routine var11 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var12 = var11.getDataAccess();
    java.lang.String var13 = var11.getDefinitionLanguage();
    java.util.List var14 = var11.getParameters();
    var0.setColumnDetails(var14);
    var0.setPort((java.lang.Integer)0);
    var0.setRailsEnabled(false);
    boolean var20 = var0.isImpliedConstraintsEnabled();
    java.lang.String var21 = var0.getServer();
    var0.setRailsEnabled(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "a"+ "'", var13.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test9() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test9");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    java.awt.Toolkit var6 = var0.getToolkit();
    java.awt.Container var7 = var0.getContentPane();
    var7.enable(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test10() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test10");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Point var5 = var0.getMousePosition(true);
    var0.disable();
    var0.firePropertyChange("", 10.0d, 1.0d);
    java.awt.image.ColorModel var11 = var0.getColorModel();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test11() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test11");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var7 = var0.getModalExclusionType();
    boolean var8 = var0.isAutoRequestFocus();
    java.awt.im.InputContext var9 = var0.getInputContext();
    java.awt.Dimension var10 = var0.minimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test12() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test12");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    java.awt.Color var7 = var0.getForeground();
    javax.swing.InputVerifier var8 = var0.getInputVerifier();
    var0.repaint(100L, 10, 1, 0, 100);
    java.awt.Component.BaselineResizeBehavior var15 = var0.getBaselineResizeBehavior();
    var0.hide();
    javax.swing.InputVerifier var17 = var0.getInputVerifier();
    boolean var18 = var0.isEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);

  }

  public void test13() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test13");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.requestFocus();
    var0.setOpaque(false);
    var0.enable();
    java.awt.ComponentOrientation var9 = var0.getComponentOrientation();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test14() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test14");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    boolean var7 = var0.hasFocus();
    net.sourceforge.schemaspy.ui.DbConfigPanel var8 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var8.requestFocus();
    var8.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var12 = var8.insets();
    float var13 = var8.getAlignmentX();
    var8.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var19 = var8.getMouseListeners();
    boolean var20 = var0.isAncestorOf((java.awt.Component)var8);
    var0.setFocusTraversalPolicyProvider(true);
    var0.revalidate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test15() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test15");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    java.lang.Object var5 = var0.getTreeLock();
    var0.validate();
    boolean var7 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var0);
    net.sourceforge.schemaspy.ui.DbConfigPanel var8 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var8.requestFocus();
    var8.setFocusTraversalPolicyProvider(true);
    boolean var12 = var8.requestFocusInWindow();
    java.awt.Cursor var13 = var8.getCursor();
    net.sourceforge.schemaspy.ui.DbConfigPanel var14 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var14.requestFocus();
    var14.setFocusTraversalPolicyProvider(true);
    java.awt.Point var19 = var14.getMousePosition(true);
    int var20 = var14.getComponentCount();
    int var21 = var14.getHeight();
    var14.setName("hi!s");
    net.sourceforge.schemaspy.ui.DbConfigPanel var24 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var24.requestFocus();
    var24.setFocusTraversalPolicyProvider(true);
    java.awt.Point var29 = var24.getMousePosition(true);
    java.awt.Component var30 = var24.getNextFocusableComponent();
    java.awt.Dimension var31 = var24.getMinimumSize();
    var14.setSize(var31);
    var8.setPreferredSize(var31);
    java.awt.Dimension var34 = var0.getSize(var31);
    var0.nextFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test16() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test16");


    java.util.Set var1 = net.sourceforge.schemaspy.Config.getBuiltInDatabaseTypes("net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test17() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test17");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    boolean var4 = var0.requestFocusInWindow();
    net.sourceforge.schemaspy.ui.DbConfigPanel var5 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var5.requestFocus();
    java.beans.PropertyChangeListener[] var7 = var5.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var8 = var5.getBaselineResizeBehavior();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    var9.setAlignmentX(1.0f);
    var9.doLayout();
    boolean var17 = var9.isCursorSet();
    var9.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var22 = var9.getLocation();
    boolean var23 = var5.contains(var22);
    java.awt.Component var24 = var0.findComponentAt(var22);
    var0.setOpaque(true);
    boolean var27 = var0.requestDefaultFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test18() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test18");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    boolean var7 = var0.hasFocus();
    boolean var8 = var0.getFocusTraversalKeysEnabled();
    boolean var9 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var0);
    net.sourceforge.schemaspy.ui.DbConfigPanel var10 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var11 = var10.isManagingFocus();
    java.awt.Rectangle var12 = var10.getVisibleRect();
    java.awt.Rectangle var13 = var0.getBounds(var12);
    java.awt.Component var14 = var0.getNextFocusableComponent();
    var0.revalidate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test19() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test19");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    var0.setFocusableWindowState(true);
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    boolean var17 = var9.contains(1, (-1));
    var9.transferFocus();
    var9.removeAll();
    java.awt.Component var21 = var0.add((java.awt.Component)var9, 0);
    java.awt.dnd.DropTarget var22 = var0.getDropTarget();
    net.sourceforge.schemaspy.ui.MainFrame var23 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var24 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var24.requestFocus();
    var24.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var28 = var24.insets();
    var24.setAlignmentX(1.0f);
    java.awt.Color var31 = var24.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var32 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var32.requestFocus();
    var32.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var36 = var32.insets();
    float var37 = var32.getAlignmentX();
    var32.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var43 = var32.getMouseListeners();
    java.awt.Rectangle var44 = var32.bounds();
    var24.setBounds(var44);
    var23.setMaximizedBounds(var44);
    java.awt.Container var47 = var23.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var48 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var49 = var48.isManagingFocus();
    java.awt.Rectangle var50 = var48.getVisibleRect();
    var23.setBounds(var50);
    var23.hide();
    java.util.List var53 = var23.getIconImages();
    boolean var54 = var23.isFocused();
    net.sourceforge.schemaspy.ui.DbConfigPanel var55 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var55.requestFocus();
    var55.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var59 = var55.insets();
    var55.setAlignmentX(1.0f);
    var55.firePropertyChange("hi!", 10, 2);
    var55.paintImmediately(100, 10, 2, 0);
    java.util.Set var72 = var55.getFocusTraversalKeys(2);
    java.awt.Cursor var73 = var55.getCursor();
    var23.setCursor(var73);
    var0.setCursor(var73);
    var0.move(23, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test20() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test20");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    boolean var4 = var0.isDoubleBuffered();
    var0.setAutoscrolls(true);
    boolean var7 = var0.isShowing();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test21() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test21");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    var0.setOutputDir("hi!");
    boolean var7 = var0.isOneOfMultipleSchemas();
    java.util.List var8 = var0.getColumnDetails();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var9 = var0.asList();
      fail("Expected exception of type net.sourceforge.schemaspy.Config.MissingRequiredParameterException");
    } catch (net.sourceforge.schemaspy.Config.MissingRequiredParameterException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test22() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test22");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    boolean var1 = var0.isImpliedConstraintsEnabled();
    var0.setHasOrphans(false);
    var0.setTableExclusions("ISO-8859-1");
    boolean var6 = var0.isDbHelpRequired();
    boolean var7 = var0.hasOrphans();
    var0.setHighQuality(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test23() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test23");


    net.sourceforge.schemaspy.view.StyleSheet.MissingCssPropertyException var2 = new net.sourceforge.schemaspy.view.StyleSheet.MissingCssPropertyException("net.sourceforge.schemaspy.model.InvalidConfigurationException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)", "javax.swing.JPanel[,0,0,0x0,invalid,layout=java.awt.GridBagLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");

  }

  public void test24() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test24");


    net.sourceforge.schemaspy.ui.DbConfigTableModel var0 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    int var2 = var0.findColumn("a");
    net.sourceforge.schemaspy.util.DbSpecificConfig var4 = new net.sourceforge.schemaspy.util.DbSpecificConfig("net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    var0.setDbSpecificConfig(var4);
    var0.fireTableRowsInserted((-1), 2);
    java.lang.String var10 = var0.getColumnName((-3));
    var0.fireTableStructureChanged();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Value"+ "'", var10.equals("Value"));

  }

  public void test25() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test25");


    net.sourceforge.schemaspy.util.Inflection var2 = new net.sourceforge.schemaspy.util.Inflection("java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)", "/Users/Jesh/Documents/School/Summer 2015/Independent Study/Eclipse/workspace/36_schemaspy/bin");
    java.lang.String var4 = var2.replace("Helvetica");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Helvetica"+ "'", var4.equals("Helvetica"));

  }

  public void test26() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test26");


    net.sourceforge.schemaspy.view.StyleSheet.MissingCssPropertyException var2 = new net.sourceforge.schemaspy.view.StyleSheet.MissingCssPropertyException("", "hi!");
    net.sourceforge.schemaspy.model.InvalidConfigurationException var4 = var2.setParamName("/Users/Jesh/Documents/School/Summer 2015/Independent Study/Eclipse/workspace/36_schemaspy/bin");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test27() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test27");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    var0.firePropertyChange("a", (byte)10, (byte)0);
    java.awt.Insets var8 = var0.insets();
    var0.setAlignmentY(100.0f);
    java.awt.Image var13 = var0.createImage(1, 1);
    java.awt.Dimension var14 = var0.getSize();
    net.sourceforge.schemaspy.ui.DbConfigPanel var15 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var15.requestFocus();
    var15.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var19 = var15.insets();
    var15.setAlignmentX(1.0f);
    java.awt.Color var22 = var15.getForeground();
    javax.swing.InputVerifier var23 = var15.getInputVerifier();
    var15.repaint(100L, 10, 1, 0, 100);
    java.awt.Component.BaselineResizeBehavior var30 = var15.getBaselineResizeBehavior();
    java.util.Locale var31 = var15.getLocale();
    java.awt.Component var32 = var0.add((java.awt.Component)var15);
    float var33 = var0.getAlignmentX();
    var0.setAlignmentY(10.0f);
    var0.setBounds(300, 1, 431, 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);

  }

  public void test28() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test28");


    net.sourceforge.schemaspy.util.Inflection var2 = new net.sourceforge.schemaspy.util.Inflection("ora", "net.sourceforge.schemaspy.ui.MainFrame[frame0,0,23,500x431,invalid,hidden,layout=java.awt.BorderLayout,title=SchemaSpy,resizable,normal,defaultCloseOperation=HIDE_ON_CLOSE,rootPane=javax.swing.JRootPane[,0,0,0x0,invalid,layout=javax.swing.JRootPane$RootLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777673,maximumSize=,minimumSize=,preferredSize=],rootPaneCheckingEnabled=true]");

  }

  public void test29() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test29");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var7 = var0.getModalExclusionType();
    boolean var8 = var0.isAutoRequestFocus();
    boolean var9 = var0.isResizable();
    net.sourceforge.schemaspy.ui.DbConfigPanel var10 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var10.requestFocus();
    var10.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var14 = var10.insets();
    var10.setAlignmentX(1.0f);
    java.awt.Color var17 = var10.getForeground();
    var0.setForeground(var17);
    int var19 = var0.countComponents();
    boolean var20 = var0.isBackgroundSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);

  }

  public void test30() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test30");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    java.lang.String var5 = var0.getSchemaSpec();
    var0.setViewsEnabled(false);
    var0.setHtmlGenerationEnabled(true);
    var0.setNumRowsEnabled(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test31() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test31");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    net.sourceforge.schemaspy.ui.DbConfigPanel var24 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var24.requestFocus();
    var24.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var28 = var24.insets();
    var24.setAlignmentX(1.0f);
    boolean var31 = var24.hasFocus();
    boolean var32 = var24.getFocusTraversalKeysEnabled();
    boolean var33 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var24);
    var24.firePropertyChange("hi!", 'a', 'a');
    net.sourceforge.schemaspy.ui.DbConfigPanel var38 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var39 = var38.isManagingFocus();
    int var40 = var38.getWidth();
    java.awt.Insets var41 = var38.insets();
    javax.accessibility.AccessibleContext var42 = var38.getAccessibleContext();
    boolean var45 = var38.inside(100, (-3));
    java.awt.Rectangle var46 = var38.getVisibleRect();
    var24.setBounds(var46);
    var0.setMaximizedBounds(var46);
    java.awt.event.ComponentListener[] var49 = var0.getComponentListeners();
    int var50 = var0.getCursorType();
    var0.setResizable(false);
    var0.toFront();
    var0.setFocusCycleRoot(true);
    int var58 = var0.getBaseline(100, 0);
    net.sourceforge.schemaspy.ui.DbConfigPanel var59 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var59.requestFocus();
    var59.setFocusTraversalPolicyProvider(true);
    boolean var63 = var59.requestFocusInWindow();
    java.awt.Dimension var64 = var59.getMaximumSize();
    var0.setMinimumSize(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test32() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test32");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    net.sourceforge.schemaspy.model.Routine var11 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var12 = var11.getDataAccess();
    java.lang.String var13 = var11.getDefinitionLanguage();
    java.util.List var14 = var11.getParameters();
    var0.setColumnDetails(var14);
    java.lang.String var16 = var0.getCharset();
    java.util.regex.Pattern var17 = var0.getColumnExclusions();
    var0.setDbType("PanelUI");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "a"+ "'", var13.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "ISO-8859-1"+ "'", var16.equals("ISO-8859-1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test33() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test33");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    boolean var5 = var0.isMeterEnabled();
    java.lang.String var7 = var0.getParam("a");
    boolean var8 = var0.isViewsEnabled();
    var0.setDriverPath("{}");
    var0.setSchema("net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s");
    var0.setPort((java.lang.Integer)1);
    java.util.regex.Pattern var15 = var0.getIndirectColumnExclusions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test34() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test34");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    java.beans.PropertyChangeListener[] var2 = var0.getPropertyChangeListeners();
    var0.paintImmediately(0, (-1), (-1), 0);
    java.awt.event.KeyListener[] var8 = var0.getKeyListeners();
    var0.setLocation(100, (-1));
    java.awt.event.MouseListener[] var12 = var0.getMouseListeners();
    var0.revalidate();
    var0.repaint(0L, 0, 312, 5, 5);
    int var20 = var0.getComponentCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2);

  }

  public void test35() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test35");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.doLayout();
    boolean var8 = var0.isCursorSet();
    java.awt.event.HierarchyListener[] var9 = var0.getHierarchyListeners();
    var0.setFocusTraversalPolicyProvider(false);
    boolean var12 = var0.isBackgroundSet();
    java.awt.image.VolatileImage var15 = var0.createVolatileImage(3, 100);
    java.beans.PropertyChangeListener[] var17 = var0.getPropertyChangeListeners("dot version 2.2.1 or versions greater than 2.4");
    java.beans.PropertyChangeListener[] var18 = var0.getPropertyChangeListeners();
    boolean var19 = var0.isOptimizedDrawingEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);

  }

  public void test36() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test36");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    java.beans.PropertyChangeListener[] var2 = var0.getPropertyChangeListeners();
    var0.paintImmediately(0, (-1), (-1), 0);
    var0.firePropertyChange("/Users/Jesh/Documents/School/Summer 2015/Independent Study/Eclipse/workspace/36_schemaspy/bin", ' ', ' ');
    var0.firePropertyChange("hi!s{hi!s}hi!s", (-1.0d), (-1.0d));
    boolean var16 = var0.isPreferredSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test37() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test37");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    var0.setConnectionPropertiesFile("ISO-8859-1s");
    var0.setPromptForPasswordEnabled(false);
    var0.setSchemaSpec("Helvetica");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test38() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test38");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    boolean var7 = var0.hasFocus();
    boolean var8 = var0.getFocusTraversalKeysEnabled();
    boolean var9 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var0);
    var0.firePropertyChange("hi!", 'a', 'a');
    java.lang.String var14 = var0.getUIClassID();
    var0.repaint();
    java.awt.Dimension var16 = var0.preferredSize();
    boolean var17 = var0.isFocusTraversalPolicyProvider();
    var0.setFocusCycleRoot(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);

  }

  public void test39() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test39");


    net.sourceforge.schemaspy.model.Routine var9 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var10 = var9.getDataAccess();
    java.util.List var11 = var9.getParameters();
    net.sourceforge.schemaspy.view.WriteStats var12 = new net.sourceforge.schemaspy.view.WriteStats((java.util.Collection)var11);
    java.util.List var13 = net.sourceforge.schemaspy.DbAnalyzer.getMustBeUniqueNullableColumns((java.util.Collection)var11);
    java.util.List var14 = net.sourceforge.schemaspy.DbAnalyzer.getImpliedConstraints((java.util.Collection)var13);
    net.sourceforge.schemaspy.view.WriteStats var15 = new net.sourceforge.schemaspy.view.WriteStats((java.util.Collection)var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test40() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test40");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Point var5 = var0.getMousePosition(true);
    java.awt.Component var6 = var0.getNextFocusableComponent();
    boolean var7 = var0.isBackgroundSet();
    var0.requestFocus();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.Rectangle var20 = var9.getBounds();
    var0.scrollRectToVisible(var20);
    net.sourceforge.schemaspy.ui.DbConfigPanel var22 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var22.requestFocus();
    java.beans.PropertyChangeListener[] var24 = var22.getPropertyChangeListeners();
    boolean var25 = var22.isPreferredSizeSet();
    int var26 = var22.getY();
    java.lang.Object var27 = var0.getClientProperty((java.lang.Object)var22);
    net.sourceforge.schemaspy.ui.MainFrame var28 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var29 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var29.requestFocus();
    var29.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var33 = var29.insets();
    var29.setAlignmentX(1.0f);
    java.awt.Color var36 = var29.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var37 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var37.requestFocus();
    var37.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var41 = var37.insets();
    float var42 = var37.getAlignmentX();
    var37.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var48 = var37.getMouseListeners();
    java.awt.Rectangle var49 = var37.bounds();
    var29.setBounds(var49);
    var28.setMaximizedBounds(var49);
    java.awt.Container var52 = var28.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var53 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var54 = var53.isManagingFocus();
    java.awt.Rectangle var55 = var53.getVisibleRect();
    var28.setBounds(var55);
    var28.addNotify();
    int var58 = var0.getComponentZOrder((java.awt.Component)var28);
    java.awt.Component.BaselineResizeBehavior var59 = var0.getBaselineResizeBehavior();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test41() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test41");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    boolean var2 = var0.isEvaluateAllEnabled();
    java.lang.String var3 = var0.getDescription();
    boolean var4 = var0.isSchemaDisabled();
    java.lang.String var5 = var0.getDbType();
    java.lang.String var6 = var0.getDb();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "ora"+ "'", var5.equals("ora"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test42() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test42");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    java.beans.PropertyChangeListener[] var2 = var0.getPropertyChangeListeners();
    var0.addNotify();
    var0.setVerifyInputWhenFocusTarget(true);
    var0.setDebugGraphicsOptions(0);
    int var10 = var0.getBaseline(1, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));

  }

  public void test43() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test43");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.doLayout();
    boolean var8 = var0.isCursorSet();
    java.awt.event.HierarchyListener[] var9 = var0.getHierarchyListeners();
    var0.setFocusTraversalPolicyProvider(false);
    boolean var12 = var0.isBackgroundSet();
    net.sourceforge.schemaspy.ui.DbConfigPanel var13 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var13.enable();
    boolean var15 = var13.isBackgroundSet();
    var0.setComponentZOrder((java.awt.Component)var13, 0);
    javax.swing.TransferHandler var18 = var0.getTransferHandler();
    java.awt.Dimension var19 = var0.getMinimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test44() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test44");


    net.sourceforge.schemaspy.util.Inflection var2 = new net.sourceforge.schemaspy.util.Inflection("net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", ".hi!sdhi!sohi!sthi!s hi!svhi!sehi!srhi!sshi!sihi!sohi!snhi!s hi!s2hi!s.hi!s2hi!s.hi!s1hi!s hi!sohi!srhi!s hi!svhi!sehi!srhi!sshi!sihi!sohi!snhi!sshi!s hi!sghi!srhi!sehi!sahi!sthi!sehi!srhi!s hi!sthi!shhi!sahi!snhi!s hi!s2hi!s.hi!s4hi!s.hi!s{hi!s}hi!s.{}.");
    boolean var4 = var2.match("net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test45() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test45");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var7 = var0.getModalExclusionType();
    net.sourceforge.schemaspy.ui.DbConfigPanel var8 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var8.requestFocus();
    var8.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var12 = var8.insets();
    var8.setAlignmentX(1.0f);
    boolean var15 = var8.hasFocus();
    boolean var16 = var8.getFocusTraversalKeysEnabled();
    boolean var17 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var8);
    net.sourceforge.schemaspy.ui.DbConfigPanel var18 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var19 = var18.isManagingFocus();
    java.awt.Rectangle var20 = var18.getVisibleRect();
    java.awt.Rectangle var21 = var8.getBounds(var20);
    java.awt.Dimension var22 = var8.getPreferredSize();
    var0.setSize(var22);
    java.awt.im.InputContext var24 = var0.getInputContext();
    float var25 = var0.getOpacity();
    java.lang.String var26 = var0.getTitle();
    var0.reshape(0, 11, (-3), 0);
    net.sourceforge.schemaspy.ui.DbConfigPanel var32 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var32.requestFocus();
    var32.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var36 = var32.insets();
    boolean var37 = var32.isFontSet();
    var32.transferFocusUpCycle();
    java.awt.LayoutManager var39 = var32.getLayout();
    var0.setLayout(var39);
    java.awt.Container var41 = var0.getContentPane();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "SchemaSpy"+ "'", var26.equals("SchemaSpy"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test46() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test46");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    boolean var7 = var0.hasFocus();
    boolean var8 = var0.getFocusTraversalKeysEnabled();
    boolean var9 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var0);
    java.awt.Point var10 = var0.location();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test47() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test47");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    var0.setEncodeCommentsEnabled(true);
    var0.setRankDirBugEnabled(false);
    var0.setSqlFormatter("hi!");
    var0.setRailsEnabled(true);
    var0.setEvaluateAllEnabled(true);

  }

  public void test48() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test48");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var26 = var25.isManagingFocus();
    java.awt.Rectangle var27 = var25.getVisibleRect();
    var0.setBounds(var27);
    var0.hide();
    java.util.List var30 = var0.getIconImages();
    net.sourceforge.schemaspy.ui.DbConfigPanel var31 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var31.requestFocus();
    var31.setFocusTraversalPolicyProvider(true);
    boolean var35 = var31.requestFocusInWindow();
    java.awt.Dimension var36 = var31.getMaximumSize();
    var0.setSize(var36);
    javax.swing.JMenuBar var38 = var0.getJMenuBar();
    java.awt.event.WindowListener[] var39 = var0.getWindowListeners();
    boolean var40 = var0.isFocusOwner();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test49() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test49");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.requestFocus();
    var0.setOpaque(false);
    var0.enableInputMethods(false);
    var0.setBounds((-3), 5, 1, 0);
    var0.firePropertyChange("net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)", (byte)10, (byte)0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test50() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test50");


    net.sourceforge.schemaspy.model.Routine var9 = new net.sourceforge.schemaspy.model.Routine("", "hi!", "a", "", "", false, "", "hi!", "");
    boolean var10 = var9.isDeterministic();
    java.lang.String var11 = var9.getName();
    net.sourceforge.schemaspy.model.RoutineParameter var15 = new net.sourceforge.schemaspy.model.RoutineParameter("schemaSpy.css", "ISO-8859-1s", "hi!s{hi!s}hi!s");
    java.lang.String var16 = var15.getMode();
    var9.addParameter(var15);
    java.lang.String var18 = var9.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!s{hi!s}hi!s"+ "'", var16.equals("hi!s{hi!s}hi!s"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));

  }

  public void test51() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test51");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    java.awt.Window.Type var1 = var0.getType();
    java.awt.Component var2 = var0.getMostRecentFocusOwner();
    var0.setState(1);
    net.sourceforge.schemaspy.ui.DbConfigPanel var5 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var5.requestFocus();
    var5.setFocusTraversalPolicyProvider(true);
    boolean var9 = var5.requestFocusInWindow();
    net.sourceforge.schemaspy.ui.DbConfigPanel var10 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var10.requestFocus();
    java.beans.PropertyChangeListener[] var12 = var10.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var13 = var10.getBaselineResizeBehavior();
    net.sourceforge.schemaspy.ui.DbConfigPanel var14 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var14.requestFocus();
    var14.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var18 = var14.insets();
    var14.setAlignmentX(1.0f);
    var14.doLayout();
    boolean var22 = var14.isCursorSet();
    var14.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var27 = var14.getLocation();
    boolean var28 = var10.contains(var27);
    java.awt.Component var29 = var5.findComponentAt(var27);
    boolean var30 = var5.isRequestFocusEnabled();
    net.sourceforge.schemaspy.ui.DbConfigPanel var31 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var31.requestFocus();
    var31.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var35 = var31.insets();
    var31.setAlignmentX(1.0f);
    boolean var38 = var31.hasFocus();
    boolean var39 = var31.getFocusTraversalKeysEnabled();
    var31.setSize(1, (-1));
    boolean var44 = var31.requestFocus(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var45 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var45.requestFocus();
    java.beans.PropertyChangeListener[] var47 = var45.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var48 = var45.getBaselineResizeBehavior();
    net.sourceforge.schemaspy.ui.DbConfigPanel var49 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var49.requestFocus();
    var49.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var53 = var49.insets();
    var49.setAlignmentX(1.0f);
    var49.doLayout();
    boolean var57 = var49.isCursorSet();
    var49.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var62 = var49.getLocation();
    boolean var63 = var45.contains(var62);
    java.awt.Point var64 = var31.getLocation(var62);
    java.awt.Point var65 = var5.getLocation(var62);
    java.awt.Point var66 = var0.getLocation(var65);
    net.sourceforge.schemaspy.ui.DbConfigPanel var67 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var67.requestFocus();
    var67.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var71 = var67.insets();
    java.awt.event.HierarchyBoundsListener[] var72 = var67.getHierarchyBoundsListeners();
    javax.swing.border.Border var73 = var67.getBorder();
    var0.setGlassPane((java.awt.Component)var67);
    java.awt.event.WindowFocusListener[] var75 = var0.getWindowFocusListeners();
    int var76 = var0.getState();
    boolean var77 = var0.isValidateRoot();
    var0.toBack();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);

  }

  public void test52() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test52");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    java.awt.Window.Type var1 = var0.getType();
    java.awt.Component var2 = var0.getMostRecentFocusOwner();
    var0.setState(1);
    net.sourceforge.schemaspy.ui.DbConfigPanel var5 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var5.requestFocus();
    var5.setFocusTraversalPolicyProvider(true);
    boolean var9 = var5.requestFocusInWindow();
    net.sourceforge.schemaspy.ui.DbConfigPanel var10 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var10.requestFocus();
    java.beans.PropertyChangeListener[] var12 = var10.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var13 = var10.getBaselineResizeBehavior();
    net.sourceforge.schemaspy.ui.DbConfigPanel var14 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var14.requestFocus();
    var14.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var18 = var14.insets();
    var14.setAlignmentX(1.0f);
    var14.doLayout();
    boolean var22 = var14.isCursorSet();
    var14.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var27 = var14.getLocation();
    boolean var28 = var10.contains(var27);
    java.awt.Component var29 = var5.findComponentAt(var27);
    boolean var30 = var5.isRequestFocusEnabled();
    net.sourceforge.schemaspy.ui.DbConfigPanel var31 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var31.requestFocus();
    var31.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var35 = var31.insets();
    var31.setAlignmentX(1.0f);
    boolean var38 = var31.hasFocus();
    boolean var39 = var31.getFocusTraversalKeysEnabled();
    var31.setSize(1, (-1));
    boolean var44 = var31.requestFocus(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var45 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var45.requestFocus();
    java.beans.PropertyChangeListener[] var47 = var45.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var48 = var45.getBaselineResizeBehavior();
    net.sourceforge.schemaspy.ui.DbConfigPanel var49 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var49.requestFocus();
    var49.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var53 = var49.insets();
    var49.setAlignmentX(1.0f);
    var49.doLayout();
    boolean var57 = var49.isCursorSet();
    var49.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var62 = var49.getLocation();
    boolean var63 = var45.contains(var62);
    java.awt.Point var64 = var31.getLocation(var62);
    java.awt.Point var65 = var5.getLocation(var62);
    java.awt.Point var66 = var0.getLocation(var65);
    java.awt.Container var67 = var0.getContentPane();
    var0.repaint(10L, 312, (-1), 5, 300);
    java.awt.event.WindowFocusListener[] var74 = var0.getWindowFocusListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test53() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test53");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    net.sourceforge.schemaspy.ui.DbConfigPanel var6 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var6.requestFocus();
    var6.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var10 = var6.insets();
    var6.setAlignmentX(1.0f);
    boolean var13 = var6.hasFocus();
    boolean var14 = var6.getFocusTraversalKeysEnabled();
    boolean var15 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var6);
    net.sourceforge.schemaspy.ui.DbConfigPanel var16 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var17 = var16.isManagingFocus();
    java.awt.Rectangle var18 = var16.getVisibleRect();
    java.awt.Rectangle var19 = var6.getBounds(var18);
    java.awt.Dimension var20 = var6.getPreferredSize();
    var0.setMinimumSize(var20);
    var0.toBack();
    int var23 = var0.getExtendedState();
    java.awt.event.MouseWheelListener[] var24 = var0.getMouseWheelListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test54() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test54");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    boolean var1 = var0.isImpliedConstraintsEnabled();
    var0.setHasOrphans(false);
    java.lang.String var4 = var0.getSchemaSpec();
    boolean var5 = var0.isHighQuality();
    var0.setPassword("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'");
    boolean var8 = var0.isEncodeCommentsEnabled();
    var0.setColumnExclusions("hi!s");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test55() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test55");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    float var5 = var0.getAlignmentX();
    boolean var8 = var0.contains(1, (-1));
    var0.setOpaque(false);
    var0.repaint(10L);
    java.awt.Dimension var13 = var0.getSize();
    java.beans.PropertyChangeListener[] var14 = var0.getPropertyChangeListeners();
    java.awt.event.FocusListener[] var15 = var0.getFocusListeners();
    boolean var16 = var0.getInheritsPopupMenu();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test56() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test56");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setMaxDbThreads(1);
    var0.setUser("a");
    java.lang.String var5 = var0.getDbType();
    boolean var6 = var0.hasRoutines();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "ora"+ "'", var5.equals("ora"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test57() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test57");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.doLayout();
    boolean var8 = var0.isCursorSet();
    java.awt.event.HierarchyListener[] var9 = var0.getHierarchyListeners();
    var0.setFocusTraversalPolicyProvider(false);
    boolean var12 = var0.isBackgroundSet();
    int var13 = var0.getY();
    net.sourceforge.schemaspy.ui.DbConfigPanel var14 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var14.requestFocus();
    var14.setFocusTraversalPolicyProvider(true);
    boolean var18 = var14.requestFocusInWindow();
    java.awt.Dimension var19 = var14.getMaximumSize();
    net.sourceforge.schemaspy.ui.DbConfigPanel var20 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var20.requestFocus();
    var20.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var24 = var20.insets();
    var20.setAlignmentX(1.0f);
    boolean var27 = var20.hasFocus();
    boolean var28 = var20.getFocusTraversalKeysEnabled();
    boolean var29 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var20);
    net.sourceforge.schemaspy.ui.DbConfigPanel var30 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var30.requestFocus();
    var30.setFocusTraversalPolicyProvider(true);
    java.awt.Point var35 = var30.getMousePosition(true);
    int var36 = var30.getComponentCount();
    int var37 = var30.getHeight();
    net.sourceforge.schemaspy.ui.DbConfigPanel var38 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var38.requestFocus();
    java.beans.PropertyChangeListener[] var40 = var38.getPropertyChangeListeners();
    var38.paintImmediately(0, (-1), (-1), 0);
    java.awt.Font var46 = var38.getFont();
    java.awt.FontMetrics var47 = var30.getFontMetrics(var46);
    java.awt.FontMetrics var48 = var20.getFontMetrics(var46);
    java.awt.FontMetrics var49 = var14.getFontMetrics(var46);
    var0.setFont(var46);
    boolean var51 = var0.isFocusOwner();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test58() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test58");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    boolean var4 = var0.requestFocusInWindow();
    net.sourceforge.schemaspy.ui.DbConfigPanel var5 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var5.requestFocus();
    java.beans.PropertyChangeListener[] var7 = var5.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var8 = var5.getBaselineResizeBehavior();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    var9.setAlignmentX(1.0f);
    var9.doLayout();
    boolean var17 = var9.isCursorSet();
    var9.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var22 = var9.getLocation();
    boolean var23 = var5.contains(var22);
    java.awt.Component var24 = var0.findComponentAt(var22);
    boolean var25 = var0.isRequestFocusEnabled();
    java.lang.String var26 = var0.getName();
    java.awt.dnd.DropTarget var27 = var0.getDropTarget();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test59() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test59");


    net.sourceforge.schemaspy.model.Routine var9 = new net.sourceforge.schemaspy.model.Routine("", "hi!", "a", "", "", false, "", "hi!", "");
    boolean var10 = var9.isDeterministic();
    java.lang.String var11 = var9.getSecurityType();
    java.lang.String var12 = var9.getReturnType();
    java.util.List var13 = var9.getParameters();
    java.lang.String var14 = var9.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "a"+ "'", var12.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "hi!"+ "'", var14.equals("hi!"));

  }

  public void test60() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test60");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.doLayout();
    boolean var8 = var0.isCursorSet();
    java.awt.Insets var9 = var0.getInsets();
    boolean var10 = var0.isDoubleBuffered();
    boolean var11 = var0.requestFocusInWindow();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test61() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test61");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var26 = var25.isManagingFocus();
    java.awt.Rectangle var27 = var25.getVisibleRect();
    var0.setBounds(var27);
    var0.hide();
    net.sourceforge.schemaspy.ui.DbConfigPanel var30 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var30.requestFocus();
    var30.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var34 = var30.insets();
    var30.setAlignmentX(1.0f);
    java.awt.Color var37 = var30.getForeground();
    javax.swing.InputVerifier var38 = var30.getInputVerifier();
    var30.repaint(100L, 10, 1, 0, 100);
    java.awt.Component.BaselineResizeBehavior var45 = var30.getBaselineResizeBehavior();
    float var46 = var30.getAlignmentX();
    java.lang.String var47 = var30.getName();
    javax.swing.KeyStroke[] var48 = var30.getRegisteredKeyStrokes();
    java.awt.event.MouseMotionListener[] var49 = var30.getMouseMotionListeners();
    boolean var50 = var0.isFocusCycleRoot((java.awt.Container)var30);
    java.awt.Point var52 = var30.getMousePosition(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);

  }

  public void test62() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test62");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    java.awt.Window.Type var1 = var0.getType();
    java.awt.Component var2 = var0.getMostRecentFocusOwner();
    var0.setState(1);
    net.sourceforge.schemaspy.ui.DbConfigPanel var5 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var5.requestFocus();
    var5.setFocusTraversalPolicyProvider(true);
    boolean var9 = var5.requestFocusInWindow();
    net.sourceforge.schemaspy.ui.DbConfigPanel var10 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var10.requestFocus();
    java.beans.PropertyChangeListener[] var12 = var10.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var13 = var10.getBaselineResizeBehavior();
    net.sourceforge.schemaspy.ui.DbConfigPanel var14 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var14.requestFocus();
    var14.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var18 = var14.insets();
    var14.setAlignmentX(1.0f);
    var14.doLayout();
    boolean var22 = var14.isCursorSet();
    var14.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var27 = var14.getLocation();
    boolean var28 = var10.contains(var27);
    java.awt.Component var29 = var5.findComponentAt(var27);
    boolean var30 = var5.isRequestFocusEnabled();
    net.sourceforge.schemaspy.ui.DbConfigPanel var31 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var31.requestFocus();
    var31.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var35 = var31.insets();
    var31.setAlignmentX(1.0f);
    boolean var38 = var31.hasFocus();
    boolean var39 = var31.getFocusTraversalKeysEnabled();
    var31.setSize(1, (-1));
    boolean var44 = var31.requestFocus(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var45 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var45.requestFocus();
    java.beans.PropertyChangeListener[] var47 = var45.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var48 = var45.getBaselineResizeBehavior();
    net.sourceforge.schemaspy.ui.DbConfigPanel var49 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var49.requestFocus();
    var49.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var53 = var49.insets();
    var49.setAlignmentX(1.0f);
    var49.doLayout();
    boolean var57 = var49.isCursorSet();
    var49.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var62 = var49.getLocation();
    boolean var63 = var45.contains(var62);
    java.awt.Point var64 = var31.getLocation(var62);
    java.awt.Point var65 = var5.getLocation(var62);
    java.awt.Point var66 = var0.getLocation(var65);
    net.sourceforge.schemaspy.ui.DbConfigPanel var67 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var67.requestFocus();
    var67.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var71 = var67.insets();
    java.awt.event.HierarchyBoundsListener[] var72 = var67.getHierarchyBoundsListeners();
    javax.swing.border.Border var73 = var67.getBorder();
    var0.setGlassPane((java.awt.Component)var67);
    java.awt.event.WindowFocusListener[] var75 = var0.getWindowFocusListeners();
    java.awt.Window.Type var76 = var0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test63() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test63");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    boolean var4 = var0.requestFocusInWindow();
    net.sourceforge.schemaspy.ui.DbConfigPanel var5 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var5.requestFocus();
    java.beans.PropertyChangeListener[] var7 = var5.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var8 = var5.getBaselineResizeBehavior();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    var9.setAlignmentX(1.0f);
    var9.doLayout();
    boolean var17 = var9.isCursorSet();
    var9.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var22 = var9.getLocation();
    boolean var23 = var5.contains(var22);
    java.awt.Component var24 = var0.findComponentAt(var22);
    boolean var25 = var0.isRequestFocusEnabled();
    boolean var26 = var0.isFocusCycleRoot();
    var0.repaint(0L);
    var0.firePropertyChange("dot version 2.2.1 or versions greater than 2.4", false, true);
    java.awt.Dimension var33 = var0.getMaximumSize();
    java.awt.Point var34 = var0.location();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test64() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test64");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sourceforge.schemaspy.model.xml.SchemaMeta var3 = new net.sourceforge.schemaspy.model.xml.SchemaMeta("Password associated with user id", "Unknown", "hi!s");
      fail("Expected exception of type net.sourceforge.schemaspy.model.InvalidConfigurationException");
    } catch (net.sourceforge.schemaspy.model.InvalidConfigurationException e) {
      // Expected exception.
    }

  }

  public void test65() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test65");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    var0.firePropertyChange("a", (byte)10, (byte)0);
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var10 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.Set var11 = var10.entrySet();
    var0.setFocusTraversalKeys(0, var11);
    java.util.List var13 = net.sourceforge.schemaspy.DbAnalyzer.getOrphans((java.util.Collection)var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test66() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test66");


    net.sourceforge.schemaspy.model.InvalidConfigurationException var1 = new net.sourceforge.schemaspy.model.InvalidConfigurationException("net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)");
    net.sourceforge.schemaspy.model.ConnectionFailure var2 = new net.sourceforge.schemaspy.model.ConnectionFailure((java.lang.Throwable)var1);
    net.sourceforge.schemaspy.model.InvalidConfigurationException var4 = var1.setParamName("hi!s{hi!s}hi!s");
    net.sourceforge.schemaspy.model.ProcessExecutionException var5 = new net.sourceforge.schemaspy.model.ProcessExecutionException((java.lang.Throwable)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test67() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test67");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    var0.firePropertyChange("a", (byte)10, (byte)0);
    java.awt.Insets var8 = var0.insets();
    var0.setAlignmentY(100.0f);
    java.awt.Image var13 = var0.createImage(1, 1);
    net.sourceforge.schemaspy.ui.DbConfigPanel var14 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var14.requestFocus();
    var14.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var18 = var14.insets();
    var14.setAlignmentX(1.0f);
    boolean var21 = var14.hasFocus();
    boolean var22 = var14.getFocusTraversalKeysEnabled();
    boolean var23 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var14);
    net.sourceforge.schemaspy.ui.DbConfigPanel var24 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var24.requestFocus();
    var24.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var28 = var24.insets();
    float var29 = var24.getAlignmentX();
    var24.setBounds(0, 1, 10, 100);
    java.awt.Rectangle var35 = var24.getBounds();
    var14.scrollRectToVisible(var35);
    java.awt.Insets var37 = var14.insets();
    java.awt.FocusTraversalPolicy var38 = var14.getFocusTraversalPolicy();
    var0.setFocusTraversalPolicy(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test68() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test68");


    net.sourceforge.schemaspy.ui.DbConfigTableModel var0 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    net.sourceforge.schemaspy.util.DbSpecificConfig var2 = new net.sourceforge.schemaspy.util.DbSpecificConfig("");
    var2.dumpUsage();
    var0.setDbSpecificConfig(var2);
    net.sourceforge.schemaspy.Config var5 = var2.getConfig();
    java.util.List var6 = var5.getSchemas();
    var5.setEvaluateAllEnabled(false);
    java.util.logging.Level var9 = var5.getLogLevel();
    var5.setColumnExclusions("Helvetica");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test69() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test69");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    boolean var25 = var0.isLocationByPlatform();
    net.sourceforge.schemaspy.ui.MainFrame var26 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var27 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var28 = var27.getTableExclusions();
    boolean var29 = var27.isEvaluateAllEnabled();
    java.util.List var30 = var27.getColumnDetails();
    var26.setIconImages(var30);
    boolean var32 = var26.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var33 = var26.getModalExclusionType();
    var0.setModalExclusionType(var33);
    var0.transferFocusUpCycle();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test70() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test70");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.doLayout();
    boolean var8 = var0.isCursorSet();
    boolean var9 = var0.isValidateRoot();
    java.awt.Component.BaselineResizeBehavior var10 = var0.getBaselineResizeBehavior();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test71() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test71");


    net.sourceforge.schemaspy.ui.DbTypeSelectorModel var1 = new net.sourceforge.schemaspy.ui.DbTypeSelectorModel("ISO-8859-1");
    int var2 = var1.getSize();
    java.lang.Object var3 = var1.getSelectedItem();
    net.sourceforge.schemaspy.ui.DbConfigPanel var4 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var4.requestFocus();
    var4.setFocusTraversalPolicyProvider(true);
    var4.firePropertyChange("a", (byte)10, (byte)0);
    java.awt.Insets var12 = var4.insets();
    var4.setAlignmentY(100.0f);
    var1.setSelectedItem((java.lang.Object)100.0f);
    net.sourceforge.schemaspy.util.LineWriter var19 = new net.sourceforge.schemaspy.util.LineWriter("Unknown", 100, "ISO-8859-1");
    var19.flush();
    var19.flush();
    var1.setSelectedItem((java.lang.Object)var19);
    var19.write(2);
    var19.writeln("javax.swing.JPanel[,0,0,0x0,invalid,layout=java.awt.GridBagLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test72() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test72");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Point var5 = var0.getMousePosition(true);
    var0.disable();
    net.sourceforge.schemaspy.ui.MainFrame var7 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var8 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var9 = var8.getTableExclusions();
    boolean var10 = var8.isEvaluateAllEnabled();
    java.util.List var11 = var8.getColumnDetails();
    var7.setIconImages(var11);
    boolean var13 = var7.isAlwaysOnTop();
    var7.setFocusableWindowState(true);
    net.sourceforge.schemaspy.util.DbSpecificOption var18 = new net.sourceforge.schemaspy.util.DbSpecificOption("", "ISO-8859-1");
    java.lang.String var19 = var18.toString();
    java.lang.String var20 = var18.getDescription();
    java.lang.String var21 = var18.getName();
    net.sourceforge.schemaspy.Config var22 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var23 = var22.getTableExclusions();
    net.sourceforge.schemaspy.model.Routine var33 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var34 = var33.getDataAccess();
    java.lang.String var35 = var33.getDefinitionLanguage();
    java.util.List var36 = var33.getParameters();
    var22.setColumnDetails(var36);
    var22.setPort((java.lang.Integer)0);
    var22.setDb("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'");
    java.util.regex.Pattern var42 = var22.getIndirectColumnExclusions();
    java.util.logging.Level var43 = var22.getLogLevel();
    boolean var44 = var22.isDbHelpRequired();
    var22.setUser("ora");
    var18.setValue((java.lang.Object)var22);
    net.sourceforge.schemaspy.Config.setInstance(var22);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.add((java.awt.Component)var7, (java.lang.Object)var22, (-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"+ "'", var19.equals("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "ISO-8859-1"+ "'", var20.equals("ISO-8859-1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + ""+ "'", var21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "a"+ "'", var35.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test73() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test73");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.util.List var24 = var0.getIconImages();
    java.awt.Rectangle var25 = var0.getMaximizedBounds();
    java.util.List var26 = var0.getIconImages();
    java.lang.String var27 = var0.getTitle();
    java.awt.image.ColorModel var28 = var0.getColorModel();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "SchemaSpy"+ "'", var27.equals("SchemaSpy"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test74() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test74");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    var0.firePropertyChange("a", (byte)10, (byte)0);
    java.awt.Insets var8 = var0.insets();
    int var9 = var0.getHeight();
    net.sourceforge.schemaspy.ui.DbConfigPanel var10 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var10.requestFocus();
    var10.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var14 = var10.insets();
    var10.requestFocus();
    boolean var16 = var10.isVisible();
    var10.hide();
    java.awt.Dimension var18 = var10.getPreferredSize();
    var0.setPreferredSize(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test75() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test75");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.firePropertyChange("hi!", 10, 2);
    net.sourceforge.schemaspy.ui.DbConfigPanel var11 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var11.requestFocus();
    var11.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var15 = var11.insets();
    float var16 = var11.getAlignmentX();
    var11.setBounds(0, 1, 10, 100);
    java.awt.Rectangle var22 = var11.getBounds();
    var0.computeVisibleRect(var22);
    boolean var24 = var0.isFocusCycleRoot();
    java.awt.im.InputContext var25 = var0.getInputContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test76() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test76");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    var0.firePropertyChange("a", (byte)10, (byte)0);
    java.awt.Insets var8 = var0.insets();
    var0.setAlignmentY(100.0f);
    java.awt.Image var13 = var0.createImage(1, 1);
    java.awt.Dimension var14 = var0.getSize();
    var0.firePropertyChange("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'", 1.0f, 1.0f);
    var0.setRequestFocusEnabled(true);
    net.sourceforge.schemaspy.ui.DbConfigPanel var21 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var21.requestFocus();
    java.beans.PropertyChangeListener[] var23 = var21.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var24 = var21.getBaselineResizeBehavior();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var25.requestFocus();
    var25.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var29 = var25.insets();
    var25.setAlignmentX(1.0f);
    var25.doLayout();
    boolean var33 = var25.isCursorSet();
    var25.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var38 = var25.getLocation();
    boolean var39 = var21.contains(var38);
    net.sourceforge.schemaspy.ui.DbConfigPanel var40 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var40.requestFocus();
    var40.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var44 = var40.insets();
    var40.setAlignmentX(1.0f);
    boolean var47 = var40.hasFocus();
    boolean var48 = var40.getFocusTraversalKeysEnabled();
    var40.setSize(1, (-1));
    boolean var53 = var40.requestFocus(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var54 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var54.requestFocus();
    java.beans.PropertyChangeListener[] var56 = var54.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var57 = var54.getBaselineResizeBehavior();
    net.sourceforge.schemaspy.ui.DbConfigPanel var58 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var58.requestFocus();
    var58.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var62 = var58.insets();
    var58.setAlignmentX(1.0f);
    var58.doLayout();
    boolean var66 = var58.isCursorSet();
    var58.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var71 = var58.getLocation();
    boolean var72 = var54.contains(var71);
    java.awt.Point var73 = var40.getLocation(var71);
    java.awt.Component var74 = var21.getComponentAt(var71);
    boolean var75 = var0.contains(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test77() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test77");


    net.sourceforge.schemaspy.util.DbSpecificConfig var1 = new net.sourceforge.schemaspy.util.DbSpecificConfig("javax.swing.JPanel[,0,0,0x0,invalid,layout=java.awt.GridBagLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    var1.dumpUsage();

  }

  public void test78() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test78");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    java.awt.Window.Type var1 = var0.getType();
    java.awt.Component var2 = var0.getMostRecentFocusOwner();
    var0.setState(1);
    net.sourceforge.schemaspy.ui.DbConfigPanel var5 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var5.requestFocus();
    var5.setFocusTraversalPolicyProvider(true);
    boolean var9 = var5.requestFocusInWindow();
    net.sourceforge.schemaspy.ui.DbConfigPanel var10 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var10.requestFocus();
    java.beans.PropertyChangeListener[] var12 = var10.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var13 = var10.getBaselineResizeBehavior();
    net.sourceforge.schemaspy.ui.DbConfigPanel var14 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var14.requestFocus();
    var14.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var18 = var14.insets();
    var14.setAlignmentX(1.0f);
    var14.doLayout();
    boolean var22 = var14.isCursorSet();
    var14.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var27 = var14.getLocation();
    boolean var28 = var10.contains(var27);
    java.awt.Component var29 = var5.findComponentAt(var27);
    boolean var30 = var5.isRequestFocusEnabled();
    net.sourceforge.schemaspy.ui.DbConfigPanel var31 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var31.requestFocus();
    var31.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var35 = var31.insets();
    var31.setAlignmentX(1.0f);
    boolean var38 = var31.hasFocus();
    boolean var39 = var31.getFocusTraversalKeysEnabled();
    var31.setSize(1, (-1));
    boolean var44 = var31.requestFocus(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var45 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var45.requestFocus();
    java.beans.PropertyChangeListener[] var47 = var45.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var48 = var45.getBaselineResizeBehavior();
    net.sourceforge.schemaspy.ui.DbConfigPanel var49 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var49.requestFocus();
    var49.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var53 = var49.insets();
    var49.setAlignmentX(1.0f);
    var49.doLayout();
    boolean var57 = var49.isCursorSet();
    var49.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var62 = var49.getLocation();
    boolean var63 = var45.contains(var62);
    java.awt.Point var64 = var31.getLocation(var62);
    java.awt.Point var65 = var5.getLocation(var62);
    java.awt.Point var66 = var0.getLocation(var65);
    java.awt.Container var67 = var0.getContentPane();
    var0.enableInputMethods(false);
    var0.repaint(300, 100, 300, 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test79() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test79");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    boolean var1 = var0.isImpliedConstraintsEnabled();
    var0.setHasOrphans(false);
    java.lang.String var4 = var0.getSchemaSpec();
    java.util.regex.Pattern var5 = var0.getIndirectColumnExclusions();
    var0.setHost("hi!");
    java.lang.String var8 = var0.getPassword();
    boolean var9 = var0.isLogoEnabled();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setColumnDetails("{}");
      fail("Expected exception of type net.sourceforge.schemaspy.model.InvalidConfigurationException");
    } catch (net.sourceforge.schemaspy.model.InvalidConfigurationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test80() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test80");


    net.sourceforge.schemaspy.ui.DbTypeSelectorModel var1 = new net.sourceforge.schemaspy.ui.DbTypeSelectorModel("ISO-8859-1");
    int var2 = var1.getSize();
    net.sourceforge.schemaspy.ui.DbConfigPanel var3 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var3.requestFocus();
    var3.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var7 = var3.insets();
    var3.setAlignmentX(1.0f);
    java.awt.Color var10 = var3.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var11 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var11.requestFocus();
    var11.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var15 = var11.insets();
    float var16 = var11.getAlignmentX();
    var11.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var22 = var11.getMouseListeners();
    java.awt.Rectangle var23 = var11.bounds();
    var3.setBounds(var23);
    var1.setSelectedItem((java.lang.Object)var3);
    boolean var26 = var3.getAutoscrolls();
    boolean var27 = var3.hasFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test81() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test81");


    net.sourceforge.schemaspy.util.Dot var0 = net.sourceforge.schemaspy.util.Dot.getInstance();
    var0.setHighQuality(true);
    net.sourceforge.schemaspy.util.Dot.DotFailure var4 = var0.new DotFailure("hi!s");
    var0.setHighQuality(true);
    boolean var7 = var0.supportsCenteredEastWestEdges();
    var0.setFormat("hi!");
    java.lang.String var10 = var0.getSupportedVersions();
    java.lang.String var11 = var0.getRenderer();
    var0.setHighQuality(false);
    boolean var14 = var0.exists();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "dot version 2.2.1 or versions greater than 2.4"+ "'", var10.equals("dot version 2.2.1 or versions greater than 2.4"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test82() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test82");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.requestFocus();
    var0.doLayout();
    var0.firePropertyChange("hi!", 0.0d, 10.0d);
    net.sourceforge.schemaspy.ui.MainFrame var11 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var12 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var12.requestFocus();
    var12.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var16 = var12.insets();
    var12.setAlignmentX(1.0f);
    java.awt.Color var19 = var12.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var20 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var20.requestFocus();
    var20.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var24 = var20.insets();
    float var25 = var20.getAlignmentX();
    var20.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var31 = var20.getMouseListeners();
    java.awt.Rectangle var32 = var20.bounds();
    var12.setBounds(var32);
    var11.setMaximizedBounds(var32);
    java.awt.Container var35 = var11.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var36 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var37 = var36.isManagingFocus();
    java.awt.Rectangle var38 = var36.getVisibleRect();
    var11.setBounds(var38);
    var11.hide();
    java.util.List var41 = var11.getIconImages();
    net.sourceforge.schemaspy.ui.DbConfigPanel var42 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var42.requestFocus();
    var42.setFocusTraversalPolicyProvider(true);
    var42.firePropertyChange("a", (byte)10, (byte)0);
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var52 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.Set var53 = var52.entrySet();
    var42.setFocusTraversalKeys(0, var53);
    var11.setLocationRelativeTo((java.awt.Component)var42);
    java.awt.Component var56 = var11.getMostRecentFocusOwner();
    java.lang.Object var57 = var0.getClientProperty((java.lang.Object)var11);
    java.awt.Image var60 = var11.createImage(100, 431);
    java.lang.String var61 = var11.getTitle();
    net.sourceforge.schemaspy.ui.DbConfigPanel var62 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var62.requestFocus();
    var62.setFocusTraversalPolicyProvider(true);
    java.awt.Point var67 = var62.getMousePosition(true);
    var62.disable();
    var62.firePropertyChange("", 10.0d, 1.0d);
    net.sourceforge.schemaspy.ui.DbConfigPanel var73 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var73.requestFocus();
    var73.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var77 = var73.insets();
    var73.setAlignmentX(1.0f);
    boolean var80 = var73.hasFocus();
    boolean var81 = var73.getFocusTraversalKeysEnabled();
    boolean var82 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var73);
    net.sourceforge.schemaspy.ui.DbConfigPanel var83 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var84 = var83.isManagingFocus();
    java.awt.Rectangle var85 = var83.getVisibleRect();
    java.awt.Rectangle var86 = var73.getBounds(var85);
    java.awt.Rectangle var87 = var62.getBounds(var86);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var11.setShape((java.awt.Shape)var86);
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "SchemaSpy"+ "'", var61.equals("SchemaSpy"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test83() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test83");


    net.sourceforge.schemaspy.ui.DbConfigTableModel var0 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    var0.fireTableRowsInserted(2, 1);
    java.lang.Object var6 = var0.getValueAt(0, 100);
    javax.swing.event.TableModelListener[] var7 = var0.getTableModelListeners();
    var0.fireTableRowsUpdated(0, 3);
    javax.swing.event.TableModelListener[] var11 = var0.getTableModelListeners();
    var0.fireTableCellUpdated(0, 0);
    net.sourceforge.schemaspy.util.DbSpecificConfig var16 = new net.sourceforge.schemaspy.util.DbSpecificConfig("");
    var16.dumpUsage();
    var0.setDbSpecificConfig(var16);
    java.util.List var19 = var16.getOptions();
    net.sourceforge.schemaspy.Config var20 = var16.getConfig();
    java.util.List var21 = var20.getColumnDetails();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var22 = net.sourceforge.schemaspy.DbAnalyzer.getTablesWithOneColumn((java.util.Collection)var21);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test84() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test84");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Point var5 = var0.getMousePosition(true);
    java.awt.Component var6 = var0.getNextFocusableComponent();
    boolean var7 = var0.isBackgroundSet();
    var0.transferFocus();
    net.sourceforge.schemaspy.util.DbSpecificOption var11 = new net.sourceforge.schemaspy.util.DbSpecificOption("", "ISO-8859-1");
    java.lang.String var12 = var11.toString();
    java.lang.String var13 = var11.getDescription();
    java.lang.Object var14 = var11.getValue();
    net.sourceforge.schemaspy.ui.MainFrame var15 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var16 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var17 = var16.getTableExclusions();
    boolean var18 = var16.isEvaluateAllEnabled();
    java.util.List var19 = var16.getColumnDetails();
    var15.setIconImages(var19);
    boolean var21 = var15.isAlwaysOnTop();
    var15.setFocusableWindowState(true);
    java.awt.Window[] var24 = var15.getOwnedWindows();
    java.awt.Component var25 = var15.getMostRecentFocusOwner();
    var11.setValue((java.lang.Object)var15);
    net.sourceforge.schemaspy.ui.DbConfigPanel var27 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var27.requestFocus();
    var27.firePropertyChange("ISO-8859-1", 0L, (-1L));
    java.awt.Color var33 = var27.getBackground();
    var27.requestFocus();
    net.sourceforge.schemaspy.ui.DbConfigPanel var35 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var35.requestFocus();
    var35.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var39 = var35.insets();
    var35.setAlignmentX(1.0f);
    var35.firePropertyChange("hi!", 10, 2);
    var35.setVisible(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var48 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var48.requestFocus();
    var48.setFocusTraversalPolicyProvider(true);
    java.awt.Point var53 = var48.getMousePosition(true);
    java.awt.Component var54 = var48.getNextFocusableComponent();
    java.awt.Dimension var55 = var48.getMinimumSize();
    var35.setPreferredSize(var55);
    java.awt.Dimension var57 = var27.getSize(var55);
    var15.setSize(var57);
    var0.setMaximumSize(var57);
    var0.invalidate();
    boolean var61 = var0.isFocusTraversalPolicySet();
    var0.transferFocusDownCycle();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"+ "'", var12.equals("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "ISO-8859-1"+ "'", var13.equals("ISO-8859-1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);

  }

  public void test85() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test85");


    net.sourceforge.schemaspy.ui.DbConfigTableModel var0 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    var0.fireTableRowsInserted(2, 1);
    java.lang.Object var6 = var0.getValueAt(0, 100);
    var0.fireTableRowsDeleted(2, 0);
    var0.fireTableRowsDeleted(23, 3);
    net.sourceforge.schemaspy.util.DbSpecificConfig var14 = new net.sourceforge.schemaspy.util.DbSpecificConfig("");
    var14.dumpUsage();
    var0.setDbSpecificConfig(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test86() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test86");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    boolean var2 = var0.isEvaluateAllEnabled();
    boolean var3 = var0.isEncodeCommentsEnabled();
    int var4 = var0.getMaxDetailedTables();
    net.sourceforge.schemaspy.Config var5 = new net.sourceforge.schemaspy.Config();
    var5.setDb("a");
    java.lang.String var8 = var5.getServer();
    boolean var9 = var5.isHtmlGenerationEnabled();
    boolean var10 = var5.isMeterEnabled();
    java.lang.String var12 = var5.getParam("a");
    java.lang.String var13 = var5.getDescription();
    var5.setFontSize(100);
    var5.setUser("Helvetica");
    net.sourceforge.schemaspy.Config var18 = new net.sourceforge.schemaspy.Config();
    var18.setMaxDbThreads(1);
    var18.setHasRoutines(false);
    net.sourceforge.schemaspy.SchemaAnalyzer var23 = new net.sourceforge.schemaspy.SchemaAnalyzer();
    net.sourceforge.schemaspy.Config var24 = new net.sourceforge.schemaspy.Config();
    var24.setDb("a");
    java.lang.String var27 = var24.getServer();
    boolean var28 = var24.isHtmlGenerationEnabled();
    boolean var29 = var24.isMeterEnabled();
    net.sourceforge.schemaspy.model.Database var30 = var23.analyze(var24);
    var24.setHasOrphans(true);
    net.sourceforge.schemaspy.view.SqlFormatter var33 = var24.getSqlFormatter();
    var18.setSqlFormatter(var33);
    var5.setSqlFormatter(var33);
    var0.setSqlFormatter(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 300);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test87() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test87");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var26 = var25.isManagingFocus();
    java.awt.Rectangle var27 = var25.getVisibleRect();
    var0.setBounds(var27);
    var0.removeAll();
    boolean var30 = var0.isAlwaysOnTop();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test88() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test88");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.doLayout();
    boolean var8 = var0.isCursorSet();
    java.awt.event.HierarchyListener[] var9 = var0.getHierarchyListeners();
    var0.setFocusTraversalPolicyProvider(false);
    boolean var12 = var0.isBackgroundSet();
    java.awt.Component var14 = var0.getComponent(1);
    net.sourceforge.schemaspy.ui.MainFrame var15 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var16 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var17 = var16.getTableExclusions();
    boolean var18 = var16.isEvaluateAllEnabled();
    java.util.List var19 = var16.getColumnDetails();
    var15.setIconImages(var19);
    boolean var21 = var15.isAlwaysOnTop();
    boolean var22 = var15.isOpaque();
    var15.pack();
    var15.addNotify();
    var0.remove((java.awt.Component)var15);
    java.awt.Toolkit var26 = var15.getToolkit();
    boolean var27 = var15.isFocusTraversalPolicySet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);

  }

  public void test89() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test89");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    java.lang.String var5 = var0.getSchemaSpec();
    var0.setViewsEnabled(false);
    var0.setTableInclusions("");
    var0.setHasOrphans(true);
    java.lang.String var12 = var0.getFont();
    java.lang.String var13 = var0.getConnectionPropertiesFile();
    java.lang.String var14 = var0.getDb();
    boolean var15 = var0.isViewsEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "Helvetica"+ "'", var12.equals("Helvetica"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "a"+ "'", var14.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test90() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test90");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    boolean var1 = var0.isImpliedConstraintsEnabled();
    var0.setHasOrphans(false);
    var0.setImpliedConstraintsEnabled(true);
    java.lang.String var6 = var0.getHost();
    java.lang.Integer var7 = var0.getPort();
    boolean var8 = var0.isPromptForPasswordEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test91() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test91");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    net.sourceforge.schemaspy.ui.DbConfigPanel var24 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var24.requestFocus();
    var24.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var28 = var24.insets();
    var24.setAlignmentX(1.0f);
    boolean var31 = var24.hasFocus();
    boolean var32 = var24.getFocusTraversalKeysEnabled();
    boolean var33 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var24);
    var24.firePropertyChange("hi!", 'a', 'a');
    net.sourceforge.schemaspy.ui.DbConfigPanel var38 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var39 = var38.isManagingFocus();
    int var40 = var38.getWidth();
    java.awt.Insets var41 = var38.insets();
    javax.accessibility.AccessibleContext var42 = var38.getAccessibleContext();
    boolean var45 = var38.inside(100, (-3));
    java.awt.Rectangle var46 = var38.getVisibleRect();
    var24.setBounds(var46);
    var0.setMaximizedBounds(var46);
    java.awt.Window[] var49 = var0.getOwnedWindows();
    java.awt.Window[] var50 = var0.getOwnedWindows();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test92() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test92");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    boolean var5 = var0.isMeterEnabled();
    java.lang.String var7 = var0.getParam("a");
    var0.setPromptForPasswordEnabled(false);
    java.lang.String var10 = var0.getCatalog();
    java.lang.String var11 = var0.getDescription();
    var0.setViewsEnabled(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test93() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test93");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    boolean var5 = var0.isHtmlGenerationEnabled();
    var0.setMeta("net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test94() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test94");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    net.sourceforge.schemaspy.ui.DbConfigPanel var6 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var6.requestFocus();
    var6.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var10 = var6.insets();
    var6.setAlignmentX(1.0f);
    boolean var13 = var6.hasFocus();
    boolean var14 = var6.getFocusTraversalKeysEnabled();
    boolean var15 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var6);
    net.sourceforge.schemaspy.ui.DbConfigPanel var16 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var17 = var16.isManagingFocus();
    java.awt.Rectangle var18 = var16.getVisibleRect();
    java.awt.Rectangle var19 = var6.getBounds(var18);
    java.awt.Dimension var20 = var6.getPreferredSize();
    var0.setMinimumSize(var20);
    var0.toBack();
    net.sourceforge.schemaspy.ui.DbConfigPanel var23 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var23.requestFocus();
    var23.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var27 = var23.insets();
    float var28 = var23.getAlignmentX();
    boolean var31 = var23.contains(1, (-1));
    var23.setOpaque(false);
    boolean var34 = var23.getInheritsPopupMenu();
    var0.setGlassPane((java.awt.Component)var23);
    var0.setState((-1));
    boolean var38 = var0.isPreferredSizeSet();
    int var39 = var0.getDefaultCloseOperation();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1);

  }

  public void test95() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test95");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.firePropertyChange("hi!", 10, 2);
    var0.paintImmediately(100, 10, 2, 0);
    java.util.Set var17 = var0.getFocusTraversalKeys(2);
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var20 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.Set var21 = var20.entrySet();
    java.util.List var22 = net.sourceforge.schemaspy.DbAnalyzer.getOrphans((java.util.Collection)var21);
    java.util.List var23 = net.sourceforge.schemaspy.DbAnalyzer.getTablesWithIncrementingColumnNames((java.util.Collection)var21);
    var0.setFocusTraversalKeys(3, var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test96() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test96");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    java.lang.Integer var2 = var0.getPort();
    boolean var3 = var0.isOneOfMultipleSchemas();
    var0.setHighQuality(false);
    int var6 = var0.getMaxDetailedTables();
    java.util.Properties var7 = var0.getConnectionProperties();
    java.util.List var8 = net.sourceforge.schemaspy.DbAnalyzer.getRailsConstraints((java.util.Map)var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 300);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test97() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test97");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    java.lang.String var2 = var0.getCharset();
    java.lang.String var3 = var0.getMeta();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ISO-8859-1"+ "'", var2.equals("ISO-8859-1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test98() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test98");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.util.List var24 = var0.getIconImages();
    var0.setFocusCycleRoot(false);
    java.awt.Component var27 = var0.getFocusOwner();
    var0.setAlwaysOnTop(true);
    boolean var30 = var0.isForegroundSet();
    boolean var31 = var0.isFocusOwner();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test99() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test99");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    net.sourceforge.schemaspy.ui.DbConfigPanel var24 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var24.requestFocus();
    var24.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var28 = var24.insets();
    var24.setAlignmentX(1.0f);
    boolean var31 = var24.hasFocus();
    boolean var32 = var24.getFocusTraversalKeysEnabled();
    boolean var33 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var24);
    var24.firePropertyChange("hi!", 'a', 'a');
    net.sourceforge.schemaspy.ui.DbConfigPanel var38 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var39 = var38.isManagingFocus();
    int var40 = var38.getWidth();
    java.awt.Insets var41 = var38.insets();
    javax.accessibility.AccessibleContext var42 = var38.getAccessibleContext();
    boolean var45 = var38.inside(100, (-3));
    java.awt.Rectangle var46 = var38.getVisibleRect();
    var24.setBounds(var46);
    var0.setMaximizedBounds(var46);
    java.awt.event.ComponentListener[] var49 = var0.getComponentListeners();
    int var50 = var0.getCursorType();
    int var51 = var0.getHeight();
    net.sourceforge.schemaspy.ui.DbConfigPanel var52 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var52.setFocusable(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var55 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var55.requestFocus();
    var55.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var59 = var55.insets();
    var55.setAlignmentX(1.0f);
    boolean var62 = var55.hasFocus();
    boolean var63 = var55.getFocusTraversalKeysEnabled();
    var55.setSize(1, (-1));
    java.lang.Object var67 = var52.getClientProperty((java.lang.Object)var55);
    var55.firePropertyChange("net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s", ' ', ' ');
    var55.repaint(1L);
    boolean var74 = var55.isPaintingForPrint();
    boolean var75 = var0.isAncestorOf((java.awt.Component)var55);
    int var76 = var0.getHeight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 312);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 312);

  }

  public void test100() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test100");


    net.sourceforge.schemaspy.ui.DbConfigTableModel var0 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    net.sourceforge.schemaspy.util.DbSpecificConfig var2 = new net.sourceforge.schemaspy.util.DbSpecificConfig("");
    var2.dumpUsage();
    var0.setDbSpecificConfig(var2);
    net.sourceforge.schemaspy.Config var5 = var2.getConfig();
    var5.setSchemaSpec("ISO-8859-1");
    java.util.List var8 = var5.getSchemas();
    java.util.regex.Pattern var9 = var5.getTableExclusions();
    java.util.Properties var10 = var5.getConnectionProperties();
    var5.setSchemaSpec("hi!s");
    var5.setSingleSignOn(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test101() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test101");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.doLayout();
    boolean var8 = var0.isCursorSet();
    java.awt.Insets var9 = var0.getInsets();
    var0.paintImmediately(3, 100, 300, 5);
    net.sourceforge.schemaspy.ui.DbConfigPanel var15 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var15.requestFocus();
    var15.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var19 = var15.insets();
    var15.setAlignmentX(1.0f);
    boolean var22 = var15.hasFocus();
    boolean var23 = var15.getFocusTraversalKeysEnabled();
    boolean var24 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var15);
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var25.requestFocus();
    var25.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var29 = var25.insets();
    float var30 = var25.getAlignmentX();
    var25.setBounds(0, 1, 10, 100);
    java.awt.Rectangle var36 = var25.getBounds();
    var15.scrollRectToVisible(var36);
    java.awt.Insets var38 = var15.insets();
    java.awt.FocusTraversalPolicy var39 = var15.getFocusTraversalPolicy();
    var0.setFocusTraversalPolicy(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test102() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test102");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var7 = var0.getModalExclusionType();
    net.sourceforge.schemaspy.ui.DbConfigPanel var8 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var8.requestFocus();
    var8.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var12 = var8.insets();
    var8.setAlignmentX(1.0f);
    boolean var15 = var8.hasFocus();
    boolean var16 = var8.getFocusTraversalKeysEnabled();
    boolean var17 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var8);
    net.sourceforge.schemaspy.ui.DbConfigPanel var18 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var19 = var18.isManagingFocus();
    java.awt.Rectangle var20 = var18.getVisibleRect();
    java.awt.Rectangle var21 = var8.getBounds(var20);
    java.awt.Dimension var22 = var8.getPreferredSize();
    var0.setSize(var22);
    java.awt.im.InputContext var24 = var0.getInputContext();
    float var25 = var0.getOpacity();
    var0.revalidate();
    net.sourceforge.schemaspy.ui.DbConfigPanel var27 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var27.requestFocus();
    var27.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var31 = var27.insets();
    var27.requestFocus();
    boolean var33 = var27.isVisible();
    java.awt.Dimension var34 = var27.preferredSize();
    var27.show();
    var27.disable();
    var27.setSize(100, (-1));
    var0.setGlassPane((java.awt.Component)var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test103() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test103");


    net.sourceforge.schemaspy.util.DbSpecificConfig var1 = new net.sourceforge.schemaspy.util.DbSpecificConfig("net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory).hi!. ");
    var1.dumpUsage();

  }

  public void test104() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test104");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    float var5 = var0.getAlignmentX();
    boolean var8 = var0.contains(1, (-1));
    var0.transferFocus();
    boolean var10 = var0.isMaximumSizeSet();
    net.sourceforge.schemaspy.ui.DbConfigPanel var11 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var11.requestFocus();
    var11.setFocusTraversalPolicyProvider(true);
    var11.firePropertyChange("a", (byte)10, (byte)0);
    java.awt.Insets var19 = var11.insets();
    var11.setAlignmentY(100.0f);
    java.lang.Object var22 = var11.getTreeLock();
    net.sourceforge.schemaspy.ui.MainFrame var23 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var24 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var24.requestFocus();
    var24.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var28 = var24.insets();
    var24.setAlignmentX(1.0f);
    java.awt.Color var31 = var24.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var32 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var32.requestFocus();
    var32.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var36 = var32.insets();
    float var37 = var32.getAlignmentX();
    var32.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var43 = var32.getMouseListeners();
    java.awt.Rectangle var44 = var32.bounds();
    var24.setBounds(var44);
    var23.setMaximizedBounds(var44);
    java.util.List var47 = var23.getIconImages();
    java.awt.Rectangle var48 = var23.getMaximizedBounds();
    java.awt.Rectangle var49 = var11.getBounds(var48);
    var0.paintImmediately(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test105() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test105");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    boolean var5 = var0.isMeterEnabled();
    java.lang.String var7 = var0.getParam("a");
    java.lang.String var8 = var0.getDescription();
    var0.setFontSize(100);
    var0.setUser("Helvetica");
    net.sourceforge.schemaspy.Config var13 = new net.sourceforge.schemaspy.Config();
    boolean var14 = var13.isImpliedConstraintsEnabled();
    var13.setHasOrphans(false);
    java.lang.String var17 = var13.getSchemaSpec();
    boolean var18 = var13.isHighQuality();
    var13.setPassword("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'");
    boolean var21 = var13.isEncodeCommentsEnabled();
    int var22 = var13.getFontSize();
    java.util.Properties var24 = var13.determineDbProperties("hi!s");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sourceforge.schemaspy.util.ConnectionURLBuilder var25 = new net.sourceforge.schemaspy.util.ConnectionURLBuilder(var0, var24);
      fail("Expected exception of type net.sourceforge.schemaspy.model.InvalidConfigurationException");
    } catch (net.sourceforge.schemaspy.model.InvalidConfigurationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test106() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test106");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.firePropertyChange("hi!", 10, 2);
    var0.paintImmediately(100, 10, 2, 0);
    java.util.Set var17 = var0.getFocusTraversalKeys(2);
    java.awt.Cursor var18 = var0.getCursor();
    int var21 = var0.getBaseline(5, 100);
    java.awt.im.InputContext var22 = var0.getInputContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test107() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test107");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setMaxDbThreads(1);
    var0.setNumRowsEnabled(false);
    var0.setEncodeCommentsEnabled(false);
    var0.setDescription("hi!s");
    var0.setCharset("ISO-8859-1s");
    boolean var11 = var0.isImpliedConstraintsEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test108() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test108");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.doLayout();
    boolean var8 = var0.isCursorSet();
    java.awt.Insets var9 = var0.getInsets();
    net.sourceforge.schemaspy.ui.DbConfigPanel var10 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var11 = var10.isManagingFocus();
    int var12 = var10.getWidth();
    java.awt.Insets var13 = var10.insets();
    java.awt.Insets var14 = var0.getInsets(var13);
    var0.setInheritsPopupMenu(true);
    var0.setEnabled(true);
    boolean var21 = var0.contains(1, 2);
    int var22 = var0.getWidth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);

  }

  public void test109() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test109");


    net.sourceforge.schemaspy.SchemaAnalyzer var0 = new net.sourceforge.schemaspy.SchemaAnalyzer();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    var1.setDb("a");
    java.lang.String var4 = var1.getServer();
    boolean var5 = var1.isHtmlGenerationEnabled();
    boolean var6 = var1.isMeterEnabled();
    net.sourceforge.schemaspy.model.Database var7 = var0.analyze(var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var8 = var1.getRemainingParameters();
      fail("Expected exception of type net.sourceforge.schemaspy.model.InvalidConfigurationException");
    } catch (net.sourceforge.schemaspy.model.InvalidConfigurationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test110() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test110");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    net.sourceforge.schemaspy.ui.DbConfigPanel var24 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var24.requestFocus();
    var24.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var28 = var24.insets();
    var24.setAlignmentX(1.0f);
    boolean var31 = var24.hasFocus();
    boolean var32 = var24.getFocusTraversalKeysEnabled();
    boolean var33 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var24);
    var24.firePropertyChange("hi!", 'a', 'a');
    net.sourceforge.schemaspy.ui.DbConfigPanel var38 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var39 = var38.isManagingFocus();
    int var40 = var38.getWidth();
    java.awt.Insets var41 = var38.insets();
    javax.accessibility.AccessibleContext var42 = var38.getAccessibleContext();
    boolean var45 = var38.inside(100, (-3));
    java.awt.Rectangle var46 = var38.getVisibleRect();
    var24.setBounds(var46);
    var0.setMaximizedBounds(var46);
    java.awt.event.ComponentListener[] var49 = var0.getComponentListeners();
    int var50 = var0.getCursorType();
    var0.setResizable(false);
    var0.toFront();
    var0.setFocusCycleRoot(true);
    int var58 = var0.getBaseline(100, 0);
    net.sourceforge.schemaspy.ui.DbConfigPanel var59 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    int var60 = var59.getY();
    net.sourceforge.schemaspy.ui.DbConfigPanel var61 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var61.requestFocus();
    var61.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var65 = var61.insets();
    var61.setAlignmentX(1.0f);
    boolean var68 = var61.hasFocus();
    boolean var69 = var61.getFocusTraversalKeysEnabled();
    boolean var70 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var61);
    var61.firePropertyChange("hi!", 'a', 'a');
    java.lang.String var75 = var61.getUIClassID();
    java.awt.Point var77 = var61.getMousePosition(false);
    java.awt.Point var78 = var61.location();
    java.awt.Component var79 = var59.getComponentAt(var78);
    net.sourceforge.schemaspy.ui.DbConfigPanel var80 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var80.requestFocus();
    var80.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var84 = var80.insets();
    float var85 = var80.getAlignmentX();
    var80.setBounds(0, 1, 10, 100);
    java.awt.Rectangle var91 = var80.getBounds();
    var59.repaint(var91);
    java.awt.ComponentOrientation var93 = var59.getComponentOrientation();
    var0.setComponentOrientation(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "PanelUI"+ "'", var75.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);

  }

  public void test111() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test111");


    net.sourceforge.schemaspy.util.CaseInsensitiveMap var1 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.Set var2 = var1.entrySet();
    boolean var3 = var1.isEmpty();
    net.sourceforge.schemaspy.ui.DbConfigPanel var4 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var4.requestFocus();
    var4.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var8 = var4.insets();
    float var9 = var4.getAlignmentX();
    var4.setVisible(false);
    java.awt.Point var13 = var4.getMousePosition(false);
    java.awt.Insets var14 = var4.getInsets();
    boolean var15 = var1.containsValue((java.lang.Object)var4);
    net.sourceforge.schemaspy.ui.DbConfigTableModel var16 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    int var18 = var16.findColumn("a");
    net.sourceforge.schemaspy.util.DbSpecificConfig var20 = new net.sourceforge.schemaspy.util.DbSpecificConfig("net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    var16.setDbSpecificConfig(var20);
    var16.fireTableRowsInserted((-1), 2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var25 = var1.remove((java.lang.Object)2);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1));

  }

  public void test112() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test112");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    java.lang.String var2 = var0.getConnectionPropertiesFile();
    java.lang.String var3 = var0.getHost();
    var0.setPassword("SchemaSpy");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test113() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test113");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    java.awt.Toolkit var6 = var0.getToolkit();
    boolean var7 = var0.isFocused();
    var0.setSize(312, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test114() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test114");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setMaxDbThreads(1);
    var0.setNumRowsEnabled(false);
    boolean var5 = var0.isViewsEnabled();
    var0.setHtmlGenerationEnabled(true);
    boolean var8 = var0.isEncodeCommentsEnabled();
    var0.setDbType("net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory).hi!. ");
    java.lang.String var11 = var0.getDb();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test115() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test115");


    net.sourceforge.schemaspy.model.Routine var9 = new net.sourceforge.schemaspy.model.Routine("a", "java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)", "net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)", "PanelUI", "/Users/Jesh/Documents/School/Summer 2015/Independent Study/Eclipse/workspace/36_schemaspy/bin", false, "Value", "java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)", "schemaSpy.css");
    java.util.List var10 = var9.getParameters();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test116() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test116");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    var0.firePropertyChange("a", (byte)10, (byte)0);
    java.awt.Insets var8 = var0.insets();
    int var9 = var0.getHeight();
    net.sourceforge.schemaspy.ui.DbConfigPanel var10 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var10.requestFocus();
    var10.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var14 = var10.insets();
    var10.setAlignmentX(1.0f);
    var10.doLayout();
    boolean var18 = var10.isCursorSet();
    java.awt.event.HierarchyListener[] var19 = var10.getHierarchyListeners();
    var10.setFocusTraversalPolicyProvider(false);
    boolean var22 = var10.isBackgroundSet();
    java.awt.image.VolatileImage var25 = var10.createVolatileImage(3, 100);
    net.sourceforge.schemaspy.ui.DbConfigPanel var26 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var26.requestFocus();
    var26.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var30 = var26.insets();
    var26.setAlignmentX(1.0f);
    boolean var33 = var26.hasFocus();
    boolean var34 = var26.getFocusTraversalKeysEnabled();
    var26.setSize(1, (-1));
    boolean var39 = var26.requestFocus(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var40 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var40.requestFocus();
    java.beans.PropertyChangeListener[] var42 = var40.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var43 = var40.getBaselineResizeBehavior();
    net.sourceforge.schemaspy.ui.DbConfigPanel var44 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var44.requestFocus();
    var44.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var48 = var44.insets();
    var44.setAlignmentX(1.0f);
    var44.doLayout();
    boolean var52 = var44.isCursorSet();
    var44.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var57 = var44.getLocation();
    boolean var58 = var40.contains(var57);
    java.awt.Point var59 = var26.getLocation(var57);
    java.awt.ComponentOrientation var60 = var26.getComponentOrientation();
    var10.applyComponentOrientation(var60);
    var0.setComponentOrientation(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test117() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test117");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    float var5 = var0.getAlignmentX();
    net.sourceforge.schemaspy.ui.DbConfigPanel var6 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var6.requestFocus();
    var6.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var10 = var6.insets();
    float var11 = var6.getAlignmentX();
    var6.setBounds(0, 1, 10, 100);
    java.awt.Rectangle var17 = var6.getBounds();
    var6.setDebugGraphicsOptions(1);
    net.sourceforge.schemaspy.ui.DbConfigPanel var20 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var20.requestFocus();
    var20.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var24 = var20.insets();
    var20.setAlignmentX(1.0f);
    boolean var27 = var20.hasFocus();
    boolean var28 = var20.getFocusTraversalKeysEnabled();
    var20.setSize(1, (-1));
    boolean var33 = var20.requestFocus(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var34 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var34.requestFocus();
    java.beans.PropertyChangeListener[] var36 = var34.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var37 = var34.getBaselineResizeBehavior();
    net.sourceforge.schemaspy.ui.DbConfigPanel var38 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var38.requestFocus();
    var38.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var42 = var38.insets();
    var38.setAlignmentX(1.0f);
    var38.doLayout();
    boolean var46 = var38.isCursorSet();
    var38.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var51 = var38.getLocation();
    boolean var52 = var34.contains(var51);
    java.awt.Point var53 = var20.getLocation(var51);
    java.awt.Point var54 = var6.getLocation(var53);
    var0.setLocation(var53);
    net.sourceforge.schemaspy.ui.MainFrame var56 = new net.sourceforge.schemaspy.ui.MainFrame();
    java.awt.event.MouseMotionListener[] var57 = var56.getMouseMotionListeners();
    java.util.Locale var58 = var56.getLocale();
    java.awt.Dimension var59 = var56.getSize();
    java.awt.Toolkit var60 = var56.getToolkit();
    java.awt.Component var61 = var56.getFocusOwner();
    net.sourceforge.schemaspy.ui.DbConfigPanel var62 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var62.requestFocus();
    var62.setFocusTraversalPolicyProvider(true);
    boolean var66 = var62.requestFocusInWindow();
    java.awt.Dimension var67 = var62.getMaximumSize();
    var56.setMinimumSize(var67);
    var0.setPreferredSize(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test118() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test118");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    boolean var25 = var0.isLocationByPlatform();
    java.awt.Component var26 = var0.getFocusOwner();
    boolean var27 = var0.getFocusableWindowState();
    var0.enableInputMethods(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);

  }

  public void test119() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test119");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.doLayout();
    boolean var8 = var0.isCursorSet();
    java.awt.event.HierarchyListener[] var9 = var0.getHierarchyListeners();
    var0.setFocusTraversalPolicyProvider(false);
    boolean var12 = var0.isBackgroundSet();
    int var13 = var0.getY();
    var0.setVisible(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);

  }

  public void test120() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test120");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    java.awt.Window.Type var1 = var0.getType();
    java.awt.Component var2 = var0.getMostRecentFocusOwner();
    var0.setState(1);
    var0.setAutoRequestFocus(false);
    java.awt.Graphics var7 = var0.getGraphics();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test121() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test121");


    net.sourceforge.schemaspy.util.Dot var0 = net.sourceforge.schemaspy.util.Dot.getInstance();
    var0.setHighQuality(true);
    java.lang.String var3 = var0.getSupportedVersions();
    net.sourceforge.schemaspy.util.Dot.DotFailure var5 = var0.new DotFailure("dot version 2.2.1 or versions greater than 2.4");
    net.sourceforge.schemaspy.view.StyleSheet.MissingCssPropertyException var9 = new net.sourceforge.schemaspy.view.StyleSheet.MissingCssPropertyException("", "hi!");
    net.sourceforge.schemaspy.model.ConnectionFailure var10 = new net.sourceforge.schemaspy.model.ConnectionFailure("", (java.lang.Throwable)var9);
    var5.addSuppressed((java.lang.Throwable)var9);
    java.lang.String var12 = var9.getParamName();
    java.lang.String var13 = var9.getParamName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "dot version 2.2.1 or versions greater than 2.4"+ "'", var3.equals("dot version 2.2.1 or versions greater than 2.4"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test122() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test122");


    net.sourceforge.schemaspy.util.DbSpecificOption var2 = new net.sourceforge.schemaspy.util.DbSpecificOption("", "ISO-8859-1");
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.getDescription();
    java.lang.Object var5 = var2.getValue();
    net.sourceforge.schemaspy.ui.MainFrame var6 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var7 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var8 = var7.getTableExclusions();
    boolean var9 = var7.isEvaluateAllEnabled();
    java.util.List var10 = var7.getColumnDetails();
    var6.setIconImages(var10);
    boolean var12 = var6.isAlwaysOnTop();
    var6.setFocusableWindowState(true);
    java.awt.Window[] var15 = var6.getOwnedWindows();
    java.awt.Component var16 = var6.getMostRecentFocusOwner();
    var2.setValue((java.lang.Object)var6);
    net.sourceforge.schemaspy.ui.DbConfigPanel var18 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var18.requestFocus();
    var18.firePropertyChange("ISO-8859-1", 0L, (-1L));
    java.awt.Color var24 = var18.getBackground();
    var18.requestFocus();
    net.sourceforge.schemaspy.ui.DbConfigPanel var26 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var26.requestFocus();
    var26.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var30 = var26.insets();
    var26.setAlignmentX(1.0f);
    var26.firePropertyChange("hi!", 10, 2);
    var26.setVisible(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var39 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var39.requestFocus();
    var39.setFocusTraversalPolicyProvider(true);
    java.awt.Point var44 = var39.getMousePosition(true);
    java.awt.Component var45 = var39.getNextFocusableComponent();
    java.awt.Dimension var46 = var39.getMinimumSize();
    var26.setPreferredSize(var46);
    java.awt.Dimension var48 = var18.getSize(var46);
    var6.setSize(var48);
    var6.pack();
    int var51 = var6.getExtendedState();
    java.awt.Container var52 = var6.getFocusCycleRootAncestor();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var6.show();
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"+ "'", var3.equals("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ISO-8859-1"+ "'", var4.equals("ISO-8859-1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);

  }

  public void test123() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test123");


    net.sourceforge.schemaspy.ui.DbConfigTableModel var0 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    int var2 = var0.findColumn("a");
    net.sourceforge.schemaspy.util.DbSpecificConfig var4 = new net.sourceforge.schemaspy.util.DbSpecificConfig("net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    var0.setDbSpecificConfig(var4);
    var0.fireTableStructureChanged();
    int var8 = var0.findColumn("ISO-8859-1");
    int var10 = var0.findColumn("hi!s{hi!s}hi!s");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));

  }

  public void test124() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test124");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    var0.setSchemaSpec("hi!");
    java.lang.String var7 = var0.getServer();
    boolean var8 = var0.isPromptForPasswordEnabled();
    var0.setTableExclusions("hi!");
    var0.setFontSize((-1));
    boolean var13 = var0.isPromptForPasswordEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test125() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test125");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var26 = var25.isManagingFocus();
    java.awt.Rectangle var27 = var25.getVisibleRect();
    var0.setBounds(var27);
    var0.hide();
    java.util.List var30 = var0.getIconImages();
    net.sourceforge.schemaspy.ui.DbConfigPanel var31 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var31.requestFocus();
    var31.setFocusTraversalPolicyProvider(true);
    boolean var35 = var31.requestFocusInWindow();
    java.awt.Dimension var36 = var31.getMaximumSize();
    var0.setSize(var36);
    javax.swing.JMenuBar var38 = var0.getJMenuBar();
    boolean var39 = var0.isAlwaysOnTop();
    net.sourceforge.schemaspy.ui.DbConfigPanel var40 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var40.requestFocus();
    var40.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var44 = var40.insets();
    var40.requestFocus();
    boolean var46 = var40.isVisible();
    java.awt.Dimension var47 = var40.preferredSize();
    java.awt.Cursor var48 = var40.getCursor();
    var0.setCursor(var48);
    net.sourceforge.schemaspy.ui.MainFrame var50 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var51 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var52 = var51.getTableExclusions();
    boolean var53 = var51.isEvaluateAllEnabled();
    java.util.List var54 = var51.getColumnDetails();
    var50.setIconImages(var54);
    boolean var56 = var50.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var57 = var50.getModalExclusionType();
    boolean var58 = var50.isAlwaysOnTop();
    var50.setFocusTraversalPolicyProvider(true);
    net.sourceforge.schemaspy.ui.DbConfigPanel var61 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var61.requestFocus();
    var61.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var65 = var61.insets();
    var61.setAlignmentX(1.0f);
    boolean var68 = var61.hasFocus();
    boolean var69 = var61.getFocusTraversalKeysEnabled();
    boolean var70 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var61);
    var61.firePropertyChange("hi!", 'a', 'a');
    java.lang.String var75 = var61.getUIClassID();
    java.awt.Point var77 = var61.getMousePosition(false);
    java.awt.Point var78 = var61.location();
    java.awt.Component var79 = var50.findComponentAt(var78);
    var0.setLocation(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "PanelUI"+ "'", var75.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);

  }

  public void test126() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test126");


    net.sourceforge.schemaspy.view.StyleSheet.ParseException var2 = new net.sourceforge.schemaspy.view.StyleSheet.ParseException("");
    net.sourceforge.schemaspy.model.InvalidConfigurationException var3 = new net.sourceforge.schemaspy.model.InvalidConfigurationException("ora", (java.lang.Throwable)var2);

  }

  public void test127() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test127");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    boolean var1 = var0.isImpliedConstraintsEnabled();
    var0.setHasOrphans(false);
    java.lang.String var4 = var0.getSchemaSpec();
    boolean var5 = var0.isHighQuality();
    var0.setGraphvizDir("{}");
    boolean var8 = var0.isSchemaDisabled();
    var0.setRankDirBugEnabled(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test128() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test128");


    net.sourceforge.schemaspy.ui.DbConfigTableModel var0 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    var0.fireTableRowsInserted(2, 1);
    int var5 = var0.findColumn("net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-1));

  }

  public void test129() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test129");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.requestFocus();
    boolean var6 = var0.isVisible();
    var0.hide();
    java.awt.Dimension var8 = var0.getPreferredSize();
    java.beans.VetoableChangeListener[] var9 = var0.getVetoableChangeListeners();
    boolean var10 = var0.isPreferredSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test130() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test130");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    float var5 = var0.getAlignmentX();
    boolean var8 = var0.contains(1, (-1));
    var0.transferFocus();
    boolean var10 = var0.isMaximumSizeSet();
    boolean var11 = var0.isValidateRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test131() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test131");


    java.lang.String[] var1 = new java.lang.String[] { "net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"};
    net.sourceforge.schemaspy.Config var2 = new net.sourceforge.schemaspy.Config(var1);
    net.sourceforge.schemaspy.Config var3 = new net.sourceforge.schemaspy.Config(var1);
    net.sourceforge.schemaspy.Config var4 = new net.sourceforge.schemaspy.Config(var1);
    net.sourceforge.schemaspy.Config var5 = new net.sourceforge.schemaspy.Config(var1);
    net.sourceforge.schemaspy.Config var6 = new net.sourceforge.schemaspy.Config(var1);
    net.sourceforge.schemaspy.Config var7 = new net.sourceforge.schemaspy.Config(var1);
    java.lang.String var9 = var7.getParam("javax.swing.JPanel[,0,0,0x0,invalid,layout=java.awt.GridBagLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test132() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test132");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.util.List var24 = var0.getIconImages();
    var0.setFocusCycleRoot(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var27 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var27.requestFocus();
    var27.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var31 = var27.insets();
    var27.setAlignmentX(1.0f);
    java.awt.Color var34 = var27.getForeground();
    javax.swing.InputVerifier var35 = var27.getInputVerifier();
    var27.repaint(100L, 10, 1, 0, 100);
    java.awt.Component.BaselineResizeBehavior var42 = var27.getBaselineResizeBehavior();
    java.util.Locale var43 = var27.getLocale();
    javax.swing.JComponent.setDefaultLocale(var43);
    var0.setLocale(var43);
    java.awt.Toolkit var46 = var0.getToolkit();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test133() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test133");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    net.sourceforge.schemaspy.ui.DbConfigPanel var6 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var6.requestFocus();
    var6.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var10 = var6.insets();
    var6.setAlignmentX(1.0f);
    boolean var13 = var6.hasFocus();
    boolean var14 = var6.getFocusTraversalKeysEnabled();
    boolean var15 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var6);
    net.sourceforge.schemaspy.ui.DbConfigPanel var16 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var17 = var16.isManagingFocus();
    java.awt.Rectangle var18 = var16.getVisibleRect();
    java.awt.Rectangle var19 = var6.getBounds(var18);
    java.awt.Dimension var20 = var6.getPreferredSize();
    var0.setMinimumSize(var20);
    javax.swing.TransferHandler var22 = var0.getTransferHandler();
    java.awt.event.WindowListener[] var23 = var0.getWindowListeners();
    boolean var24 = var0.isForegroundSet();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var25.requestFocus();
    var25.setFocusTraversalPolicyProvider(true);
    var25.firePropertyChange("a", (byte)10, (byte)0);
    java.awt.Insets var33 = var25.insets();
    var25.setAlignmentY(100.0f);
    java.lang.Object var36 = var25.getTreeLock();
    net.sourceforge.schemaspy.ui.MainFrame var37 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var38 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var38.requestFocus();
    var38.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var42 = var38.insets();
    var38.setAlignmentX(1.0f);
    java.awt.Color var45 = var38.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var46 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var46.requestFocus();
    var46.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var50 = var46.insets();
    float var51 = var46.getAlignmentX();
    var46.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var57 = var46.getMouseListeners();
    java.awt.Rectangle var58 = var46.bounds();
    var38.setBounds(var58);
    var37.setMaximizedBounds(var58);
    java.util.List var61 = var37.getIconImages();
    java.awt.Rectangle var62 = var37.getMaximizedBounds();
    java.awt.Rectangle var63 = var25.getBounds(var62);
    var0.setBounds(var63);
    java.util.Locale var65 = var0.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test134() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test134");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.requestFocus();
    net.sourceforge.schemaspy.ui.DbConfigPanel var6 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var6.requestFocus();
    java.awt.Component var8 = var6.getNextFocusableComponent();
    java.lang.String var9 = var6.toString();
    var0.setNextFocusableComponent((java.awt.Component)var6);
    java.awt.Dimension var11 = var6.getPreferredSize();
    boolean var12 = var6.isOpaque();
    java.awt.Insets var13 = var6.getInsets();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0var9,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var9.equals("net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0var9,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test135() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test135");


    net.sourceforge.schemaspy.util.CaseInsensitiveMap var1 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    var1.clear();
    java.util.List var3 = net.sourceforge.schemaspy.DbAnalyzer.getRailsConstraints((java.util.Map)var1);
    net.sourceforge.schemaspy.Config var4 = new net.sourceforge.schemaspy.Config();
    var4.setDb("a");
    java.lang.String var7 = var4.getServer();
    boolean var8 = var4.isHtmlGenerationEnabled();
    java.lang.String var9 = var4.getSchemaSpec();
    var4.setViewsEnabled(false);
    var4.setTableInclusions("");
    var4.setHasOrphans(true);
    var4.setColumnDetails("");
    boolean var18 = var1.equals((java.lang.Object)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test136() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test136");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var26 = var25.isManagingFocus();
    java.awt.Rectangle var27 = var25.getVisibleRect();
    var0.setBounds(var27);
    var0.hide();
    java.util.List var30 = var0.getIconImages();
    net.sourceforge.schemaspy.ui.DbConfigPanel var31 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var31.requestFocus();
    var31.setFocusTraversalPolicyProvider(true);
    boolean var35 = var31.requestFocusInWindow();
    java.awt.Dimension var36 = var31.getMaximumSize();
    var0.setSize(var36);
    javax.swing.JMenuBar var38 = var0.getJMenuBar();
    boolean var39 = var0.isAlwaysOnTop();
    net.sourceforge.schemaspy.ui.MainFrame var40 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var41 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var41.requestFocus();
    var41.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var45 = var41.insets();
    var41.setAlignmentX(1.0f);
    java.awt.Color var48 = var41.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var49 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var49.requestFocus();
    var49.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var53 = var49.insets();
    float var54 = var49.getAlignmentX();
    var49.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var60 = var49.getMouseListeners();
    java.awt.Rectangle var61 = var49.bounds();
    var41.setBounds(var61);
    var40.setMaximizedBounds(var61);
    java.awt.Container var64 = var40.getContentPane();
    boolean var65 = var40.isLocationByPlatform();
    net.sourceforge.schemaspy.ui.MainFrame var66 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var67 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var68 = var67.getTableExclusions();
    boolean var69 = var67.isEvaluateAllEnabled();
    java.util.List var70 = var67.getColumnDetails();
    var66.setIconImages(var70);
    boolean var72 = var66.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var73 = var66.getModalExclusionType();
    var40.setModalExclusionType(var73);
    var40.setEnabled(true);
    java.awt.Color var77 = var40.getBackground();
    var0.setBackground(var77);
    net.sourceforge.schemaspy.ui.DbConfigPanel var79 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var79.requestFocus();
    var79.setFocusTraversalPolicyProvider(true);
    var79.firePropertyChange("a", (byte)10, (byte)0);
    java.awt.Insets var87 = var79.insets();
    var79.setAlignmentY(100.0f);
    java.awt.Component var90 = var0.add((java.awt.Component)var79);
    boolean var91 = var90.isFocusOwner();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);

  }

  public void test137() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test137");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var7 = var0.getModalExclusionType();
    net.sourceforge.schemaspy.ui.DbConfigPanel var8 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var8.requestFocus();
    var8.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var12 = var8.insets();
    var8.setAlignmentX(1.0f);
    boolean var15 = var8.hasFocus();
    boolean var16 = var8.getFocusTraversalKeysEnabled();
    boolean var17 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var8);
    net.sourceforge.schemaspy.ui.DbConfigPanel var18 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var19 = var18.isManagingFocus();
    java.awt.Rectangle var20 = var18.getVisibleRect();
    java.awt.Rectangle var21 = var8.getBounds(var20);
    java.awt.Dimension var22 = var8.getPreferredSize();
    var0.setSize(var22);
    java.awt.im.InputContext var24 = var0.getInputContext();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var25.requestFocus();
    var25.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var29 = var25.insets();
    var25.setAlignmentX(1.0f);
    boolean var32 = var25.hasFocus();
    boolean var33 = var25.getFocusTraversalKeysEnabled();
    boolean var34 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var25);
    var25.firePropertyChange("hi!", 'a', 'a');
    java.lang.String var39 = var25.getUIClassID();
    var25.repaint();
    java.awt.Dimension var41 = var25.preferredSize();
    var0.setMinimumSize(var41);
    var0.setSize(300, 312);
    var0.setAlwaysOnTop(true);
    java.awt.im.InputContext var48 = var0.getInputContext();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.show(true);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "PanelUI"+ "'", var39.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test138() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test138");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    var0.firePropertyChange("a", (byte)10, (byte)0);
    java.awt.Insets var8 = var0.insets();
    var0.setAlignmentY(100.0f);
    java.awt.Image var13 = var0.createImage(1, 1);
    java.awt.Dimension var14 = var0.getSize();
    var0.firePropertyChange("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'", 1.0f, 1.0f);
    boolean var19 = var0.isManagingFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test139() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test139");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    boolean var2 = var0.isHtmlGenerationEnabled();
    boolean var3 = var0.isEncodeCommentsEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);

  }

  public void test140() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test140");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    java.awt.Toolkit var6 = var0.getToolkit();
    boolean var7 = var0.isFocused();
    int var8 = var0.getExtendedState();
    boolean var9 = var0.isAlwaysOnTopSupported();
    var0.setLocation(100, 3);
    var0.setResizable(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test141() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test141");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.requestFocus();
    var0.setOpaque(false);
    var0.invalidate();
    java.awt.Component var11 = var0.findComponentAt(5, 0);
    var0.setRequestFocusEnabled(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test142() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test142");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    java.beans.PropertyChangeListener[] var2 = var0.getPropertyChangeListeners();
    var0.paintImmediately(0, (-1), (-1), 0);
    boolean var8 = var0.isForegroundSet();
    boolean var9 = var0.isValidateRoot();
    var0.setVerifyInputWhenFocusTarget(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test143() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test143");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    boolean var2 = var0.isEvaluateAllEnabled();
    java.lang.String var4 = var0.getParam("hi!s");
    boolean var5 = var0.isSchemaDisabled();
    var0.setPort((java.lang.Integer)100);
    boolean var8 = var0.isSchemaDisabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test144() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test144");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    boolean var7 = var0.hasFocus();
    boolean var8 = var0.getFocusTraversalKeysEnabled();
    var0.setSize(1, (-1));
    java.awt.image.VolatileImage var14 = var0.createVolatileImage(1, (-3));
    java.awt.Graphics var15 = var0.getGraphics();
    java.awt.Color var16 = var0.getBackground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var17 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var17.requestFocus();
    var17.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var21 = var17.insets();
    var17.setAlignmentX(1.0f);
    java.awt.Color var24 = var17.getForeground();
    javax.swing.InputVerifier var25 = var17.getInputVerifier();
    var17.repaint(100L, 10, 1, 0, 100);
    var17.setEnabled(false);
    javax.swing.InputMap var34 = var17.getInputMap();
    var17.firePropertyChange("{}s", '#', 'a');
    net.sourceforge.schemaspy.ui.DbConfigPanel var39 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var39.requestFocus();
    var39.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var43 = var39.insets();
    var39.setAlignmentX(1.0f);
    boolean var46 = var39.hasFocus();
    boolean var47 = var39.getFocusTraversalKeysEnabled();
    boolean var48 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var39);
    var39.firePropertyChange("hi!", 'a', 'a');
    java.lang.String var53 = var39.getUIClassID();
    var39.repaint();
    javax.swing.ActionMap var55 = var39.getActionMap();
    var17.setActionMap(var55);
    var0.setActionMap(var55);
    java.awt.Rectangle var58 = var0.getVisibleRect();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "PanelUI"+ "'", var53.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test145() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test145");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    boolean var4 = var0.isDoubleBuffered();
    boolean var5 = var0.isEnabled();
    var0.enable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test146() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test146");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.util.List var24 = var0.getIconImages();
    var0.setFocusCycleRoot(false);
    java.awt.Component var27 = var0.getFocusOwner();
    var0.setAlwaysOnTop(true);
    boolean var30 = var0.isForegroundSet();
    java.awt.peer.ComponentPeer var31 = var0.getPeer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);

  }

  public void test147() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test147");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    boolean var25 = var0.isLocationByPlatform();
    java.awt.Component var26 = var0.getFocusOwner();
    var0.setFocusCycleRoot(false);
    var0.enableInputMethods(true);
    java.util.Set var33 = net.sourceforge.schemaspy.Config.getBuiltInDatabaseTypes("hi!s");
    var0.setFocusTraversalKeys(0, var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test148() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test148");


    net.sourceforge.schemaspy.util.LineWriter var3 = new net.sourceforge.schemaspy.util.LineWriter("Unknown", 100, "ISO-8859-1");
    var3.writeln();
    var3.write(100);

  }

  public void test149() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test149");


    net.sourceforge.schemaspy.TableOrderer var0 = new net.sourceforge.schemaspy.TableOrderer();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var2 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    var2.clear();
    java.util.List var4 = net.sourceforge.schemaspy.DbAnalyzer.getRailsConstraints((java.util.Map)var2);
    java.util.Set var5 = var2.entrySet();
    net.sourceforge.schemaspy.model.Routine var15 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var16 = var15.getDataAccess();
    java.lang.String var17 = var15.getDefinitionLanguage();
    java.util.List var18 = var15.getParameters();
    java.util.List var19 = var0.getTablesOrderedByRI((java.util.Collection)var5, (java.util.Collection)var18);
    java.util.List var20 = net.sourceforge.schemaspy.DbAnalyzer.getMustBeUniqueNullableColumns((java.util.Collection)var18);
    java.util.List var21 = net.sourceforge.schemaspy.DbAnalyzer.sortTablesByName(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "a"+ "'", var17.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test150() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test150");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    net.sourceforge.schemaspy.ui.MainFrame var6 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var7 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var7.requestFocus();
    var7.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var11 = var7.insets();
    var7.setAlignmentX(1.0f);
    java.awt.Color var14 = var7.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var15 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var15.requestFocus();
    var15.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var19 = var15.insets();
    float var20 = var15.getAlignmentX();
    var15.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var26 = var15.getMouseListeners();
    java.awt.Rectangle var27 = var15.bounds();
    var7.setBounds(var27);
    var6.setMaximizedBounds(var27);
    java.awt.Container var30 = var6.getContentPane();
    boolean var31 = var6.isLocationByPlatform();
    net.sourceforge.schemaspy.ui.MainFrame var32 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var33 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var34 = var33.getTableExclusions();
    boolean var35 = var33.isEvaluateAllEnabled();
    java.util.List var36 = var33.getColumnDetails();
    var32.setIconImages(var36);
    boolean var38 = var32.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var39 = var32.getModalExclusionType();
    var6.setModalExclusionType(var39);
    var6.setEnabled(true);
    java.awt.Color var43 = var6.getBackground();
    var0.setForeground(var43);
    java.awt.MenuBar var45 = var0.getMenuBar();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);

  }

  public void test151() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test151");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    java.awt.event.MouseMotionListener[] var1 = var0.getMouseMotionListeners();
    net.sourceforge.schemaspy.ui.MainFrame var2 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var3 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var3.requestFocus();
    var3.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var7 = var3.insets();
    var3.setAlignmentX(1.0f);
    java.awt.Color var10 = var3.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var11 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var11.requestFocus();
    var11.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var15 = var11.insets();
    float var16 = var11.getAlignmentX();
    var11.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var22 = var11.getMouseListeners();
    java.awt.Rectangle var23 = var11.bounds();
    var3.setBounds(var23);
    var2.setMaximizedBounds(var23);
    java.awt.Container var26 = var2.getContentPane();
    boolean var27 = var2.isLocationByPlatform();
    net.sourceforge.schemaspy.ui.MainFrame var28 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var29 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var30 = var29.getTableExclusions();
    boolean var31 = var29.isEvaluateAllEnabled();
    java.util.List var32 = var29.getColumnDetails();
    var28.setIconImages(var32);
    boolean var34 = var28.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var35 = var28.getModalExclusionType();
    var2.setModalExclusionType(var35);
    var2.pack();
    java.awt.Window.Type var38 = var2.getType();
    var0.setType(var38);
    javax.swing.TransferHandler var40 = var0.getTransferHandler();
    java.awt.Component var41 = var0.getFocusOwner();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);

  }

  public void test152() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test152");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    boolean var25 = var0.isLocationByPlatform();
    java.awt.Component var26 = var0.getFocusOwner();
    net.sourceforge.schemaspy.ui.DbConfigPanel var27 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var28 = var27.isManagingFocus();
    int var29 = var27.getWidth();
    java.awt.Point var30 = var27.getMousePosition();
    var27.repaint();
    var0.remove((java.awt.Component)var27);
    java.awt.Rectangle var33 = var0.getMaximizedBounds();
    boolean var34 = var0.isLocationByPlatform();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test153() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test153");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    var0.firePropertyChange("a", (byte)10, (byte)0);
    var0.setIgnoreRepaint(true);
    java.awt.Point var10 = var0.getMousePosition();
    var0.repaint(1, (-3), 2, 100);
    boolean var16 = var0.isVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);

  }

  public void test154() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test154");


    net.sourceforge.schemaspy.model.Routine var9 = new net.sourceforge.schemaspy.model.Routine("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'", "DbSpecificOption name: 'net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s' value: 'null' description: 'a'", "hi!", "DbSpecificOption name: 'net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s' value: 'null' description: 'a'", "SchemaSpy", true, "{}", "{}s", "net.sourceforge.schemaspy.ui.MainFrame[frame1,0,23,500x312,invalid,hidden,layout=java.awt.BorderLayout,title=SchemaSpy,resizable,normal,defaultCloseOperation=HIDE_ON_CLOSE,rootPane=javax.swing.JRootPane[,0,0,0x0,invalid,layout=javax.swing.JRootPane$RootLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777673,maximumSize=,minimumSize=,preferredSize=],rootPaneCheckingEnabled=true]");
    java.util.List var10 = var9.getParameters();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test155() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test155");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    java.beans.PropertyChangeListener[] var2 = var0.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var3 = var0.getBaselineResizeBehavior();
    boolean var4 = var0.isDisplayable();
    java.awt.Container var5 = var0.getTopLevelAncestor();
    boolean var6 = var0.requestFocusInWindow();
    java.awt.event.FocusListener[] var7 = var0.getFocusListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test156() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test156");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    java.lang.String var5 = var0.getSchemaSpec();
    var0.setDbType("ISO-8859-1");
    var0.setEncodeCommentsEnabled(false);
    var0.setSchema("java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test157() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test157");


    net.sourceforge.schemaspy.util.DbSpecificOption var2 = new net.sourceforge.schemaspy.util.DbSpecificOption("", "ISO-8859-1");
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.getDescription();
    java.lang.Object var5 = var2.getValue();
    net.sourceforge.schemaspy.ui.MainFrame var6 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var7 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var8 = var7.getTableExclusions();
    boolean var9 = var7.isEvaluateAllEnabled();
    java.util.List var10 = var7.getColumnDetails();
    var6.setIconImages(var10);
    boolean var12 = var6.isAlwaysOnTop();
    var6.setFocusableWindowState(true);
    java.awt.Window[] var15 = var6.getOwnedWindows();
    java.awt.Component var16 = var6.getMostRecentFocusOwner();
    var2.setValue((java.lang.Object)var6);
    net.sourceforge.schemaspy.ui.DbConfigPanel var18 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var18.requestFocus();
    var18.firePropertyChange("ISO-8859-1", 0L, (-1L));
    java.awt.Color var24 = var18.getBackground();
    var18.requestFocus();
    net.sourceforge.schemaspy.ui.DbConfigPanel var26 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var26.requestFocus();
    var26.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var30 = var26.insets();
    var26.setAlignmentX(1.0f);
    var26.firePropertyChange("hi!", 10, 2);
    var26.setVisible(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var39 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var39.requestFocus();
    var39.setFocusTraversalPolicyProvider(true);
    java.awt.Point var44 = var39.getMousePosition(true);
    java.awt.Component var45 = var39.getNextFocusableComponent();
    java.awt.Dimension var46 = var39.getMinimumSize();
    var26.setPreferredSize(var46);
    java.awt.Dimension var48 = var18.getSize(var46);
    var6.setSize(var48);
    java.awt.Window[] var50 = var6.getOwnedWindows();
    boolean var51 = var6.isAlwaysOnTop();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"+ "'", var3.equals("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ISO-8859-1"+ "'", var4.equals("ISO-8859-1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test158() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test158");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.util.List var24 = var0.getIconImages();
    boolean var25 = var0.isDisplayable();
    boolean var26 = var0.isFocusableWindow();
    net.sourceforge.schemaspy.ui.DbConfigPanel var27 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var27.requestFocus();
    var27.setFocusTraversalPolicyProvider(true);
    javax.swing.event.AncestorListener[] var31 = var27.getAncestorListeners();
    var27.paintImmediately(1, 0, 0, (-1));
    java.awt.Dimension var37 = var27.size();
    var0.setSize(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test159() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test159");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.doLayout();
    boolean var8 = var0.isCursorSet();
    java.awt.event.HierarchyListener[] var9 = var0.getHierarchyListeners();
    java.beans.VetoableChangeListener[] var10 = var0.getVetoableChangeListeners();
    net.sourceforge.schemaspy.ui.DbConfigPanel var11 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var11.requestFocus();
    var11.setFocusTraversalPolicyProvider(true);
    var11.firePropertyChange("a", (byte)10, (byte)0);
    java.awt.Insets var19 = var11.insets();
    var11.setAlignmentY(100.0f);
    boolean var22 = var0.isFocusCycleRoot((java.awt.Container)var11);
    boolean var25 = var11.inside(1, 0);
    net.sourceforge.schemaspy.ui.DbConfigPanel var26 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var26.requestFocus();
    var26.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var30 = var26.insets();
    var26.requestFocus();
    boolean var32 = var26.isVisible();
    net.sourceforge.schemaspy.ui.DbConfigPanel var33 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var33.requestFocus();
    var33.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var37 = var33.insets();
    float var38 = var33.getAlignmentX();
    net.sourceforge.schemaspy.ui.DbConfigPanel var39 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var39.requestFocus();
    var39.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var43 = var39.insets();
    var39.requestFocus();
    var39.setOpaque(false);
    javax.swing.plaf.PanelUI var47 = var39.getUI();
    var33.setUI(var47);
    var26.setUI(var47);
    var11.setUI(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test160() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test160");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    boolean var4 = var0.requestFocusInWindow();
    net.sourceforge.schemaspy.ui.DbConfigPanel var5 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var5.requestFocus();
    java.beans.PropertyChangeListener[] var7 = var5.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var8 = var5.getBaselineResizeBehavior();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    var9.setAlignmentX(1.0f);
    var9.doLayout();
    boolean var17 = var9.isCursorSet();
    var9.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var22 = var9.getLocation();
    boolean var23 = var5.contains(var22);
    java.awt.Component var24 = var0.findComponentAt(var22);
    boolean var25 = var0.isRequestFocusEnabled();
    boolean var26 = var0.isFocusCycleRoot();
    var0.repaint(0L);
    var0.hide();
    java.awt.Container var30 = var0.getTopLevelAncestor();
    float var31 = var0.getAlignmentY();
    boolean var32 = var0.getAutoscrolls();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test161() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test161");


    java.lang.String var1 = net.sourceforge.schemaspy.util.Inflection.singularize("DbSpecificOption name: 'net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s' value: 'null' description: 'a'");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "DbSpecificOption name: 'net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0var1,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s' value: 'null' description: 'a'"+ "'", var1.equals("DbSpecificOption name: 'net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0var1,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s' value: 'null' description: 'a'"));

  }

  public void test162() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test162");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    boolean var25 = var0.isLocationByPlatform();
    java.awt.Container var26 = var0.getFocusCycleRootAncestor();
    java.awt.Container var27 = var0.getParent();
    int var28 = var0.getState();
    net.sourceforge.schemaspy.model.Routine var38 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var39 = var38.getDataAccess();
    java.util.List var40 = var38.getParameters();
    net.sourceforge.schemaspy.view.WriteStats var41 = new net.sourceforge.schemaspy.view.WriteStats((java.util.Collection)var40);
    java.util.List var42 = net.sourceforge.schemaspy.DbAnalyzer.getMustBeUniqueNullableColumns((java.util.Collection)var40);
    java.lang.String var43 = net.sourceforge.schemaspy.model.ForeignKeyConstraint.toString(var42);
    net.sourceforge.schemaspy.view.WriteStats var44 = new net.sourceforge.schemaspy.view.WriteStats((java.util.Collection)var42);
    java.util.List var45 = net.sourceforge.schemaspy.DbAnalyzer.sortTablesByName(var42);
    java.util.List var46 = net.sourceforge.schemaspy.DbAnalyzer.sortTablesByName(var42);
    java.util.List var47 = net.sourceforge.schemaspy.DbAnalyzer.getDefaultNullStringColumns((java.util.Collection)var46);
    java.lang.String var48 = net.sourceforge.schemaspy.model.ForeignKeyConstraint.toString(var47);
    java.util.List var49 = net.sourceforge.schemaspy.DbAnalyzer.sortTablesByName(var47);
    var0.setIconImages(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "hi!"+ "'", var39.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "[]"+ "'", var43.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "[]"+ "'", var48.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test163() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test163");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    net.sourceforge.schemaspy.ui.DbConfigPanel var24 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var24.requestFocus();
    var24.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var28 = var24.insets();
    var24.setAlignmentX(1.0f);
    boolean var31 = var24.hasFocus();
    boolean var32 = var24.getFocusTraversalKeysEnabled();
    boolean var33 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var24);
    var24.firePropertyChange("hi!", 'a', 'a');
    net.sourceforge.schemaspy.ui.DbConfigPanel var38 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var39 = var38.isManagingFocus();
    int var40 = var38.getWidth();
    java.awt.Insets var41 = var38.insets();
    javax.accessibility.AccessibleContext var42 = var38.getAccessibleContext();
    boolean var45 = var38.inside(100, (-3));
    java.awt.Rectangle var46 = var38.getVisibleRect();
    var24.setBounds(var46);
    var0.setMaximizedBounds(var46);
    java.awt.Window[] var49 = var0.getOwnedWindows();
    java.awt.Dialog.ModalExclusionType var50 = var0.getModalExclusionType();
    net.sourceforge.schemaspy.ui.MainFrame var51 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var52 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var52.requestFocus();
    var52.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var56 = var52.insets();
    var52.setAlignmentX(1.0f);
    java.awt.Color var59 = var52.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var60 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var60.requestFocus();
    var60.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var64 = var60.insets();
    float var65 = var60.getAlignmentX();
    var60.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var71 = var60.getMouseListeners();
    java.awt.Rectangle var72 = var60.bounds();
    var52.setBounds(var72);
    var51.setMaximizedBounds(var72);
    java.awt.Container var75 = var51.getContentPane();
    boolean var76 = var51.isLocationByPlatform();
    net.sourceforge.schemaspy.ui.MainFrame var77 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var78 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var79 = var78.getTableExclusions();
    boolean var80 = var78.isEvaluateAllEnabled();
    java.util.List var81 = var78.getColumnDetails();
    var77.setIconImages(var81);
    boolean var83 = var77.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var84 = var77.getModalExclusionType();
    var51.setModalExclusionType(var84);
    var51.pack();
    java.awt.Window.Type var87 = var51.getType();
    var0.setType(var87);
    java.awt.Window.Type var89 = var0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test164() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test164");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    java.lang.String var2 = var0.getConnectionPropertiesFile();
    boolean var3 = var0.isSchemaDisabled();
    boolean var4 = var0.isPromptForPasswordEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test165() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test165");


    net.sourceforge.schemaspy.util.Dot var0 = net.sourceforge.schemaspy.util.Dot.getInstance();
    var0.setFormat("ISO-8859-1");
    boolean var3 = var0.isValid();
    java.lang.String var4 = var0.getFormat();
    var0.setFormat("javax.swing.JPanel[,0,0,0x0,invalid,layout=java.awt.GridBagLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    boolean var7 = var0.exists();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ISO-8859-1"+ "'", var4.equals("ISO-8859-1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test166() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test166");


    net.sourceforge.schemaspy.ui.DbConfigTableModel var0 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    int var2 = var0.findColumn("a");
    net.sourceforge.schemaspy.util.DbSpecificConfig var4 = new net.sourceforge.schemaspy.util.DbSpecificConfig("net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    var0.setDbSpecificConfig(var4);
    javax.swing.event.TableModelListener[] var6 = var0.getTableModelListeners();
    int var7 = var0.getRowCount();
    var0.fireTableRowsUpdated(5, 431);
    net.sourceforge.schemaspy.util.DbSpecificConfig var12 = new net.sourceforge.schemaspy.util.DbSpecificConfig("net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    java.lang.String var13 = var12.toString();
    var0.setDbSpecificConfig(var12);
    java.lang.String var15 = var12.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0var13,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)"+ "'", var13.equals("java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0var13,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0var15,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)"+ "'", var15.equals("java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0var15,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)"));

  }

  public void test167() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test167");


    net.sourceforge.schemaspy.ui.DbTypeSelectorModel var1 = new net.sourceforge.schemaspy.ui.DbTypeSelectorModel("hi!");
    net.sourceforge.schemaspy.ui.MainFrame var2 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var3 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var4 = var3.getTableExclusions();
    boolean var5 = var3.isEvaluateAllEnabled();
    java.util.List var6 = var3.getColumnDetails();
    var2.setIconImages(var6);
    boolean var8 = var2.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var9 = var2.getModalExclusionType();
    boolean var10 = var2.isAutoRequestFocus();
    java.awt.im.InputContext var11 = var2.getInputContext();
    var2.setAlwaysOnTop(false);
    var1.setSelectedItem((java.lang.Object)false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test168() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test168");


    net.sourceforge.schemaspy.ui.DbTypeSelectorModel var1 = new net.sourceforge.schemaspy.ui.DbTypeSelectorModel("ISO-8859-1");
    int var2 = var1.getSize();
    java.lang.Object var3 = var1.getSelectedItem();
    int var4 = var1.getSize();
    net.sourceforge.schemaspy.ui.DbTypeSelectorModel var6 = new net.sourceforge.schemaspy.ui.DbTypeSelectorModel("hi!s");
    int var7 = var6.getSize();
    int var8 = var6.getSize();
    var1.setSelectedItem((java.lang.Object)var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);

  }

  public void test169() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test169");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.firePropertyChange("ISO-8859-1", 0L, (-1L));
    var0.firePropertyChange("a", 0.0d, 1.0d);
    java.awt.Graphics var10 = var0.getGraphics();
    net.sourceforge.schemaspy.ui.DbConfigPanel var11 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var11.requestFocus();
    var11.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var15 = var11.insets();
    float var16 = var11.getAlignmentX();
    boolean var19 = var11.contains(1, (-1));
    var11.setOpaque(false);
    var11.repaint(10L);
    java.awt.Dimension var24 = var11.getSize();
    java.awt.Rectangle var25 = var11.getBounds();
    var0.computeVisibleRect(var25);
    var0.setIgnoreRepaint(true);
    java.awt.Point var30 = var0.getMousePosition(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);

  }

  public void test170() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test170");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    javax.swing.event.AncestorListener[] var4 = var0.getAncestorListeners();
    var0.paintImmediately(1, 0, 0, (-1));
    java.awt.Dimension var10 = var0.size();
    float var11 = var0.getAlignmentY();
    var0.paintImmediately(100, 3, (-3), 10);
    var0.firePropertyChange("hi!s", 1L, 10L);
    java.awt.Point var21 = var0.getLocation();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test171() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test171");


    net.sourceforge.schemaspy.TableOrderer var0 = new net.sourceforge.schemaspy.TableOrderer();
    net.sourceforge.schemaspy.model.Routine var10 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var11 = var10.getDataAccess();
    java.lang.String var12 = var10.getDefinitionLanguage();
    java.util.List var13 = var10.getParameters();
    java.util.List var14 = net.sourceforge.schemaspy.DbAnalyzer.sortColumnsByTable(var13);
    net.sourceforge.schemaspy.model.Routine var24 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var25 = var24.getDataAccess();
    java.lang.String var26 = var24.getDefinitionLanguage();
    java.util.List var27 = var24.getParameters();
    java.util.List var28 = net.sourceforge.schemaspy.DbAnalyzer.sortColumnsByTable(var27);
    java.util.List var29 = var0.getTablesOrderedByRI((java.util.Collection)var13, (java.util.Collection)var27);
    java.util.List var30 = net.sourceforge.schemaspy.DbAnalyzer.getTablesWithOneColumn((java.util.Collection)var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "a"+ "'", var12.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi!"+ "'", var25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "a"+ "'", var26.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test172() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test172");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    var0.setNumRowsEnabled(true);
    java.util.regex.Pattern var4 = var0.getTableExclusions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test173() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test173");


    net.sourceforge.schemaspy.ui.DbConfigTableModel var0 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    int var2 = var0.findColumn("a");
    var0.fireTableRowsUpdated(100, 100);
    java.lang.Object var8 = var0.getValueAt(3, 300);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test174() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test174");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    var0.setRankDirBugEnabled(true);
    var0.setRankDirBugEnabled(false);
    var0.setDbType("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'");
    var0.setImpliedConstraintsEnabled(false);
    boolean var10 = var0.isHtmlGenerationEnabled();
    net.sourceforge.schemaspy.Config.setInstance(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test175() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test175");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var7 = var0.getModalExclusionType();
    boolean var8 = var0.isAutoRequestFocus();
    java.awt.Toolkit var9 = var0.getToolkit();
    var0.hide();
    boolean var11 = var0.isAutoRequestFocus();
    boolean var12 = var0.isFocusCycleRoot();
    java.awt.event.FocusListener[] var13 = var0.getFocusListeners();
    boolean var14 = var0.getFocusableWindowState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test176() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test176");


    net.sourceforge.schemaspy.ui.DbConfigTableModel var0 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    var0.fireTableRowsInserted(2, 1);
    java.lang.Object var6 = var0.getValueAt(0, 100);
    javax.swing.event.TableModelListener[] var7 = var0.getTableModelListeners();
    var0.fireTableRowsUpdated(0, 3);
    javax.swing.event.TableModelListener[] var11 = var0.getTableModelListeners();
    var0.fireTableCellUpdated(0, 0);
    int var15 = var0.getRowCount();
    int var17 = var0.findColumn("/Users/Jesh/Documents/School/Summer 2015/Independent Study/Eclipse/workspace/36_schemaspy/bin");
    net.sourceforge.schemaspy.ui.DbConfigTableModel var18 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    var18.fireTableRowsInserted(2, 1);
    java.lang.Object var24 = var18.getValueAt(0, 100);
    javax.swing.event.TableModelListener[] var25 = var18.getTableModelListeners();
    var18.fireTableRowsUpdated(0, 3);
    javax.swing.event.TableModelListener[] var29 = var18.getTableModelListeners();
    var18.fireTableCellUpdated(0, 0);
    net.sourceforge.schemaspy.util.DbSpecificConfig var34 = new net.sourceforge.schemaspy.util.DbSpecificConfig("");
    var34.dumpUsage();
    var18.setDbSpecificConfig(var34);
    java.util.List var37 = var34.getOptions();
    java.lang.String var38 = var34.toString();
    var0.setDbSpecificConfig(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "java.io.FileNotFoundException:  (No such file or directory)"+ "'", var38.equals("java.io.FileNotFoundException:  (No such file or directory)"));

  }

  public void test177() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test177");


    net.sourceforge.schemaspy.util.Dot var0 = net.sourceforge.schemaspy.util.Dot.getInstance();
    java.lang.String var1 = var0.getRenderer();
    var0.setFormat("hi!s");
    java.lang.String var4 = var0.getSupportedVersions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "dot version 2.2.1 or versions greater than 2.4"+ "'", var4.equals("dot version 2.2.1 or versions greater than 2.4"));

  }

  public void test178() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test178");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    boolean var1 = var0.isImpliedConstraintsEnabled();
    var0.setHasOrphans(false);
    java.lang.String var4 = var0.getSchemaSpec();
    java.util.regex.Pattern var5 = var0.getIndirectColumnExclusions();
    java.util.logging.Level var6 = var0.getLogLevel();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test179() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test179");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    boolean var2 = var0.isEvaluateAllEnabled();
    boolean var3 = var0.isEncodeCommentsEnabled();
    boolean var4 = var0.isRankDirBugEnabled();
    var0.setOutputDir("/Users/Jesh/Documents/School/Summer 2015/Independent Study/Eclipse/workspace/36_schemaspy/bin");
    boolean var7 = var0.isHelpRequired();
    var0.setDescription("Unknown");
    boolean var10 = var0.isHelpRequired();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test180() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test180");


    net.sourceforge.schemaspy.ui.DbTypeSelectorModel var1 = new net.sourceforge.schemaspy.ui.DbTypeSelectorModel("ISO-8859-1");
    int var2 = var1.getSize();
    java.lang.Object var3 = var1.getSelectedItem();
    net.sourceforge.schemaspy.ui.DbConfigPanel var4 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var4.requestFocus();
    var4.setFocusTraversalPolicyProvider(true);
    var4.firePropertyChange("a", (byte)10, (byte)0);
    java.awt.Insets var12 = var4.insets();
    var4.setAlignmentY(100.0f);
    var1.setSelectedItem((java.lang.Object)100.0f);
    int var16 = var1.getSize();
    int var17 = var1.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);

  }

  public void test181() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test181");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    java.lang.Integer var2 = var0.getPort();
    boolean var3 = var0.isOneOfMultipleSchemas();
    var0.setHighQuality(false);
    int var6 = var0.getMaxDetailedTables();
    boolean var7 = var0.isEvaluateAllEnabled();
    var0.setTableExclusions("java.io.FileNotFoundException:  (No such file or directory)");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 300);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test182() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test182");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    var0.firePropertyChange("a", (byte)10, (byte)0);
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var10 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.Set var11 = var10.entrySet();
    var0.setFocusTraversalKeys(0, var11);
    java.awt.dnd.DropTarget var13 = var0.getDropTarget();
    net.sourceforge.schemaspy.ui.MainFrame var14 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var15 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var16 = var15.getTableExclusions();
    boolean var17 = var15.isEvaluateAllEnabled();
    java.util.List var18 = var15.getColumnDetails();
    var14.setIconImages(var18);
    boolean var20 = var14.isAlwaysOnTop();
    var14.setFocusableWindowState(true);
    net.sourceforge.schemaspy.ui.DbConfigPanel var23 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var23.requestFocus();
    var23.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var27 = var23.insets();
    float var28 = var23.getAlignmentX();
    boolean var31 = var23.contains(1, (-1));
    var23.transferFocus();
    var23.removeAll();
    java.awt.Component var35 = var14.add((java.awt.Component)var23, 0);
    var23.addNotify();
    java.awt.Rectangle var37 = var23.getBounds();
    java.awt.Rectangle var38 = var0.getBounds(var37);
    var0.enableInputMethods(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test183() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test183");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    java.lang.Object var5 = var0.getTreeLock();
    boolean var6 = var0.isFocusTraversalPolicyProvider();
    java.awt.Dimension var7 = var0.getMaximumSize();
    net.sourceforge.schemaspy.ui.MainFrame var8 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    var9.setAlignmentX(1.0f);
    java.awt.Color var16 = var9.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var17 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var17.requestFocus();
    var17.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var21 = var17.insets();
    float var22 = var17.getAlignmentX();
    var17.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var28 = var17.getMouseListeners();
    java.awt.Rectangle var29 = var17.bounds();
    var9.setBounds(var29);
    var8.setMaximizedBounds(var29);
    java.util.List var32 = var8.getIconImages();
    boolean var33 = var8.isDisplayable();
    java.awt.Dimension var34 = var8.preferredSize();
    java.awt.Dimension var35 = var0.getSize(var34);
    net.sourceforge.schemaspy.ui.DbConfigPanel var36 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var36.requestFocus();
    var36.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var40 = var36.insets();
    float var41 = var36.getAlignmentX();
    var36.setBounds(0, 1, 10, 100);
    java.awt.Rectangle var47 = var36.getBounds();
    var0.repaint(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test184() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test184");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Point var5 = var0.getMousePosition(true);
    java.awt.Component var6 = var0.getNextFocusableComponent();
    var0.setAlignmentY(1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test185() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test185");


    net.sourceforge.schemaspy.Revision var0 = new net.sourceforge.schemaspy.Revision();
    java.lang.String var1 = var0.toString();
    java.lang.String var2 = var0.toString();
    java.lang.String var3 = var0.toString();
    java.lang.String var4 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "Unknown"+ "'", var1.equals("Unknown"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Unknown"+ "'", var2.equals("Unknown"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Unknown"+ "'", var3.equals("Unknown"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Unknown"+ "'", var4.equals("Unknown"));

  }

  public void test186() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test186");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    java.awt.LayoutManager var6 = var0.getLayout();
    net.sourceforge.schemaspy.ui.MainFrame var7 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var8 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var9 = var8.getTableExclusions();
    boolean var10 = var8.isEvaluateAllEnabled();
    java.util.List var11 = var8.getColumnDetails();
    var7.setIconImages(var11);
    net.sourceforge.schemaspy.ui.DbConfigPanel var13 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var13.requestFocus();
    var13.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var17 = var13.insets();
    var13.setAlignmentX(1.0f);
    boolean var20 = var13.hasFocus();
    boolean var21 = var13.getFocusTraversalKeysEnabled();
    boolean var22 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var13);
    net.sourceforge.schemaspy.ui.DbConfigPanel var23 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var24 = var23.isManagingFocus();
    java.awt.Rectangle var25 = var23.getVisibleRect();
    java.awt.Rectangle var26 = var13.getBounds(var25);
    java.awt.Dimension var27 = var13.getPreferredSize();
    var7.setMinimumSize(var27);
    java.awt.Dialog.ModalExclusionType var29 = var7.getModalExclusionType();
    java.awt.Dialog.ModalExclusionType var30 = var7.getModalExclusionType();
    var0.setModalExclusionType(var30);
    java.awt.Component var34 = var0.locate(300, 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test187() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test187");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    var0.firePropertyChange("a", (byte)10, (byte)0);
    float var8 = var0.getAlignmentX();
    boolean var9 = var0.isFocusTraversalPolicyProvider();
    java.awt.Dimension var10 = var0.getMinimumSize();
    java.awt.Insets var11 = var0.insets();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test188() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test188");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.hasOrphans();
    var0.setRankDirBugEnabled(true);
    var0.setIndirectColumnExclusions("");
    var0.setRenderer("hi!s{hi!s}hi!s.ISO-8859-1.net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s");
    var0.setEvaluateAllEnabled(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Properties var13 = var0.getDbProperties();
      fail("Expected exception of type net.sourceforge.schemaspy.model.InvalidConfigurationException");
    } catch (net.sourceforge.schemaspy.model.InvalidConfigurationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test189() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test189");


    net.sourceforge.schemaspy.util.LineWriter var3 = new net.sourceforge.schemaspy.util.LineWriter("Unknown", 100, "ISO-8859-1");
    var3.newLine();
    var3.writeln("[]");
    java.io.Writer var8 = var3.append((java.lang.CharSequence)"hi!");
    java.io.Writer var10 = var3.append((java.lang.CharSequence)"a");
    java.io.Writer var12 = var10.append(' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test190() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test190");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setMaxDbThreads(1);
    var0.setUser("a");
    java.lang.String var5 = var0.getDbType();
    var0.setCss("Helvetica");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "ora"+ "'", var5.equals("ora"));

  }

  public void test191() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test191");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    boolean var4 = var0.isDoubleBuffered();
    boolean var5 = var0.isValid();
    var0.repaint(1L);
    var0.firePropertyChange("hi!s{hi!s}hi!s.ISO-8859-1.net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s", 312, 300);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test192() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test192");


    net.sourceforge.schemaspy.view.HtmlConstraintsPage var0 = net.sourceforge.schemaspy.view.HtmlConstraintsPage.getInstance();
    net.sourceforge.schemaspy.ui.MainFrame var1 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var2 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var2.requestFocus();
    var2.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var6 = var2.insets();
    var2.setAlignmentX(1.0f);
    java.awt.Color var9 = var2.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var10 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var10.requestFocus();
    var10.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var14 = var10.insets();
    float var15 = var10.getAlignmentX();
    var10.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var21 = var10.getMouseListeners();
    java.awt.Rectangle var22 = var10.bounds();
    var2.setBounds(var22);
    var1.setMaximizedBounds(var22);
    java.awt.Container var25 = var1.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var26 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var27 = var26.isManagingFocus();
    java.awt.Rectangle var28 = var26.getVisibleRect();
    var1.setBounds(var28);
    var1.hide();
    java.util.List var31 = var1.getIconImages();
    net.sourceforge.schemaspy.util.LineWriter var35 = new net.sourceforge.schemaspy.util.LineWriter("Unknown", 100, "ISO-8859-1");
    var35.writeln();
    var0.writeCheckConstraints((java.util.Collection)var31, var35);
    java.util.List var38 = net.sourceforge.schemaspy.DbAnalyzer.getOrphans((java.util.Collection)var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test193() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test193");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    boolean var5 = var0.isMeterEnabled();
    var0.setPromptForPasswordEnabled(false);
    var0.setOutputDir("net.sourceforge.schemaspy.ui.MainFrame[frame0,0,23,500x431,invalid,hidden,layout=java.awt.BorderLayout,title=SchemaSpy,resizable,normal,defaultCloseOperation=HIDE_ON_CLOSE,rootPane=javax.swing.JRootPane[,0,0,0x0,invalid,layout=javax.swing.JRootPane$RootLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777673,maximumSize=,minimumSize=,preferredSize=],rootPaneCheckingEnabled=true]");
    var0.setServer("javax.swing.JPanel[,0,0,0x0,invalid,layout=java.awt.GridBagLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    var0.setSchemaSpec("hi!s{hi!s}hi!s");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test194() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test194");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    boolean var7 = var0.hasFocus();
    boolean var8 = var0.getFocusTraversalKeysEnabled();
    boolean var9 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var0);
    var0.firePropertyChange("hi!", 'a', 'a');
    java.lang.String var14 = var0.getUIClassID();
    var0.repaint();
    net.sourceforge.schemaspy.ui.DbConfigPanel var16 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var16.requestFocus();
    var16.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var20 = var16.insets();
    var16.setAlignmentX(1.0f);
    java.awt.Color var23 = var16.getForeground();
    javax.swing.InputVerifier var24 = var16.getInputVerifier();
    var16.repaint(100L, 10, 1, 0, 100);
    var16.setEnabled(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var33 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var33.requestFocus();
    java.beans.PropertyChangeListener[] var35 = var33.getPropertyChangeListeners();
    var33.paintImmediately(0, (-1), (-1), 0);
    java.awt.event.KeyListener[] var41 = var33.getKeyListeners();
    net.sourceforge.schemaspy.ui.DbConfigPanel var42 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var42.requestFocus();
    var42.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var46 = var42.insets();
    var42.setAlignmentX(1.0f);
    java.awt.Color var49 = var42.getForeground();
    var33.setForeground(var49);
    var16.setBackground(var49);
    var0.setBackground(var49);
    java.beans.VetoableChangeListener[] var53 = var0.getVetoableChangeListeners();
    java.awt.Rectangle var54 = var0.getBounds();
    var0.show(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test195() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test195");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    boolean var7 = var0.isOpaque();
    net.sourceforge.schemaspy.ui.MainFrame var8 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var9 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var10 = var9.getTableExclusions();
    boolean var11 = var9.isEvaluateAllEnabled();
    java.util.List var12 = var9.getColumnDetails();
    var8.setIconImages(var12);
    net.sourceforge.schemaspy.ui.DbConfigPanel var14 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var14.requestFocus();
    java.beans.PropertyChangeListener[] var16 = var14.getPropertyChangeListeners();
    var14.paintImmediately(0, (-1), (-1), 0);
    java.awt.event.KeyListener[] var22 = var14.getKeyListeners();
    net.sourceforge.schemaspy.ui.DbConfigPanel var23 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var23.requestFocus();
    var23.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var27 = var23.insets();
    var23.setAlignmentX(1.0f);
    java.awt.Color var30 = var23.getForeground();
    var14.setForeground(var30);
    var8.setBackground(var30);
    java.awt.Window.Type var33 = var8.getType();
    var0.setType(var33);
    java.awt.Graphics var35 = var0.getGraphics();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);

  }

  public void test196() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test196");


    net.sourceforge.schemaspy.ui.DbConfigTableModel var0 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    var0.fireTableRowsInserted(2, 1);
    java.lang.Object var6 = var0.getValueAt(0, 100);
    var0.fireTableRowsDeleted(2, 0);
    int var10 = var0.getRowCount();
    var0.fireTableRowsDeleted(300, 300);
    net.sourceforge.schemaspy.ui.DbConfigTableModel var14 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    var14.fireTableRowsInserted(2, 1);
    java.lang.Class var19 = var14.getClass(3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.EventListener[] var20 = var0.<java.util.EventListener>getListeners(var19);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test197() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test197");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    java.awt.LayoutManager var6 = var0.getLayout();
    var0.setSize((-3), 431);
    var0.disable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test198() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test198");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.requestFocus();
    var0.doLayout();
    var0.firePropertyChange("hi!", 0.0d, 10.0d);
    java.awt.Component var11 = var0.getNextFocusableComponent();
    java.awt.Rectangle var12 = var0.bounds();
    int var13 = var0.getDebugGraphicsOptions();
    java.awt.Dimension var14 = var0.getMaximumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test199() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test199");


    net.sourceforge.schemaspy.util.LineWriter var3 = new net.sourceforge.schemaspy.util.LineWriter("Unknown", 100, "ISO-8859-1");
    var3.writeln();
    var3.writeln();
    java.io.Writer var7 = var3.append((java.lang.CharSequence)"net.sourceforge.schemaspy.view.StyleSheet$MissingCssPropertyException: Required property 'hi!' was not found for the definition of '' in schemaSpy.css");
    var3.close();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.write("net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)s", 0, 100);
      fail("Expected exception of type java.io.IOException");
    } catch (java.io.IOException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test200() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test200");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    boolean var1 = var0.isImpliedConstraintsEnabled();
    var0.setHasOrphans(false);
    java.lang.String var4 = var0.getSchemaSpec();
    boolean var5 = var0.isHighQuality();
    var0.setPassword("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'");
    boolean var8 = var0.isEncodeCommentsEnabled();
    int var9 = var0.getFontSize();
    java.util.Properties var11 = var0.determineDbProperties("hi!s");
    var0.setIndirectColumnExclusions("net.sourceforge.schemaspy.ui.MainFrame[frame5,0,23,500x312,invalid,hidden,layout=java.awt.BorderLayout,title=SchemaSpy,resizable,normal,defaultCloseOperation=HIDE_ON_CLOSE,rootPane=javax.swing.JRootPane[,0,0,0x0,invalid,layout=javax.swing.JRootPane$RootLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777673,maximumSize=,minimumSize=,preferredSize=],rootPaneCheckingEnabled=true]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test201() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test201");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    java.awt.Color var7 = var0.getForeground();
    javax.swing.InputVerifier var8 = var0.getInputVerifier();
    var0.repaint(100L, 10, 1, 0, 100);
    java.awt.Component.BaselineResizeBehavior var15 = var0.getBaselineResizeBehavior();
    var0.hide();
    javax.swing.InputVerifier var17 = var0.getInputVerifier();
    boolean var18 = var0.isMinimumSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test202() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test202");


    net.sourceforge.schemaspy.util.CaseInsensitiveMap var1 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.Set var2 = var1.entrySet();
    java.util.Set var3 = var1.entrySet();
    java.util.List var4 = net.sourceforge.schemaspy.DbAnalyzer.getMustBeUniqueNullableColumns((java.util.Collection)var3);
    java.util.List var5 = net.sourceforge.schemaspy.DbAnalyzer.sortTablesByName(var4);
    java.util.List var6 = net.sourceforge.schemaspy.DbAnalyzer.getTablesWithOneColumn((java.util.Collection)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test203() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test203");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.doLayout();
    boolean var8 = var0.isCursorSet();
    java.awt.event.HierarchyListener[] var9 = var0.getHierarchyListeners();
    var0.setFocusTraversalKeysEnabled(true);
    net.sourceforge.schemaspy.ui.DbConfigPanel var12 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var12.requestFocus();
    var12.setFocusTraversalPolicyProvider(true);
    boolean var16 = var12.requestFocusInWindow();
    java.awt.Dimension var17 = var12.getMaximumSize();
    net.sourceforge.schemaspy.ui.DbConfigPanel var18 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var18.requestFocus();
    var18.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var22 = var18.insets();
    var18.setAlignmentX(1.0f);
    boolean var25 = var18.hasFocus();
    boolean var26 = var18.getFocusTraversalKeysEnabled();
    boolean var27 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var18);
    net.sourceforge.schemaspy.ui.DbConfigPanel var28 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var28.requestFocus();
    var28.setFocusTraversalPolicyProvider(true);
    java.awt.Point var33 = var28.getMousePosition(true);
    int var34 = var28.getComponentCount();
    int var35 = var28.getHeight();
    net.sourceforge.schemaspy.ui.DbConfigPanel var36 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var36.requestFocus();
    java.beans.PropertyChangeListener[] var38 = var36.getPropertyChangeListeners();
    var36.paintImmediately(0, (-1), (-1), 0);
    java.awt.Font var44 = var36.getFont();
    java.awt.FontMetrics var45 = var28.getFontMetrics(var44);
    java.awt.FontMetrics var46 = var18.getFontMetrics(var44);
    java.awt.FontMetrics var47 = var12.getFontMetrics(var44);
    java.awt.FontMetrics var48 = var0.getFontMetrics(var44);
    net.sourceforge.schemaspy.ui.DbConfigPanel var49 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var49.requestFocus();
    var49.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var53 = var49.insets();
    var49.setAlignmentX(1.0f);
    var49.doLayout();
    boolean var57 = var49.isCursorSet();
    var49.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var62 = var49.getLocation();
    var49.setSize(2, 10);
    java.awt.Component var68 = var49.getComponentAt(300, 300);
    boolean var69 = var0.isFocusCycleRoot((java.awt.Container)var49);
    boolean var70 = var49.isFocusTraversalPolicySet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);

  }

  public void test204() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test204");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    boolean var1 = var0.isImpliedConstraintsEnabled();
    var0.setHasOrphans(false);
    java.lang.String var4 = var0.getSchemaSpec();
    boolean var5 = var0.isHighQuality();
    var0.setPassword("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'");
    boolean var8 = var0.isEncodeCommentsEnabled();
    java.lang.String var9 = var0.getMeta();
    java.util.List var10 = var0.getSchemas();
    boolean var11 = var0.isDbHelpRequired();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test205() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test205");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isDbHelpRequired();
    var0.setCharset("dot version 2.2.1 or versions greater than 2.4");
    java.util.regex.Pattern var7 = var0.getIndirectColumnExclusions();
    var0.setIndirectColumnExclusions("ISO-8859-1");
    java.util.regex.Pattern var10 = var0.getTableInclusions();
    var0.setEncodeCommentsEnabled(true);
    net.sourceforge.schemaspy.Config var13 = new net.sourceforge.schemaspy.Config();
    var13.setDb("a");
    java.lang.String var16 = var13.getServer();
    boolean var17 = var13.hasOrphans();
    java.lang.String var18 = var13.getHost();
    var13.setDb(" ");
    var13.setPassword("net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    java.util.Map var23 = var13.getDbSpecificOptions();
    java.util.List var24 = net.sourceforge.schemaspy.DbAnalyzer.getRailsConstraints(var23);
    var0.setDbSpecificOptions(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test206() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test206");


    net.sourceforge.schemaspy.ui.DbConfigTableModel var0 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    int var2 = var0.findColumn("a");
    net.sourceforge.schemaspy.util.DbSpecificConfig var4 = new net.sourceforge.schemaspy.util.DbSpecificConfig("net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    var0.setDbSpecificConfig(var4);
    var0.fireTableRowsInserted((-1), 2);
    var0.fireTableCellUpdated(23, 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1));

  }

  public void test207() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test207");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.requestFocus();
    var0.setOpaque(false);
    javax.swing.plaf.PanelUI var8 = var0.getUI();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var10 = var9.isManagingFocus();
    int var11 = var9.getWidth();
    java.awt.Point var12 = var9.getMousePosition();
    boolean var15 = var9.contains(1, (-1));
    boolean var16 = var9.isValid();
    net.sourceforge.schemaspy.ui.MainFrame var17 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var18 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var19 = var18.getTableExclusions();
    boolean var20 = var18.isEvaluateAllEnabled();
    java.util.List var21 = var18.getColumnDetails();
    var17.setIconImages(var21);
    boolean var23 = var17.isAlwaysOnTop();
    var17.setFocusableWindowState(true);
    boolean var26 = var17.isFocusCycleRoot();
    java.awt.Graphics var27 = var17.getGraphics();
    boolean var28 = var17.isFocusCycleRoot();
    net.sourceforge.schemaspy.ui.MainFrame var29 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var30 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var30.requestFocus();
    var30.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var34 = var30.insets();
    var30.setAlignmentX(1.0f);
    java.awt.Color var37 = var30.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var38 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var38.requestFocus();
    var38.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var42 = var38.insets();
    float var43 = var38.getAlignmentX();
    var38.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var49 = var38.getMouseListeners();
    java.awt.Rectangle var50 = var38.bounds();
    var30.setBounds(var50);
    var29.setMaximizedBounds(var50);
    java.awt.Container var53 = var29.getContentPane();
    boolean var54 = var29.isLocationByPlatform();
    net.sourceforge.schemaspy.ui.MainFrame var55 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var56 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var57 = var56.getTableExclusions();
    boolean var58 = var56.isEvaluateAllEnabled();
    java.util.List var59 = var56.getColumnDetails();
    var55.setIconImages(var59);
    boolean var61 = var55.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var62 = var55.getModalExclusionType();
    var29.setModalExclusionType(var62);
    var29.setEnabled(true);
    javax.swing.JLayeredPane var66 = var29.getLayeredPane();
    var17.setLayeredPane(var66);
    boolean var68 = var9.isAncestorOf((java.awt.Component)var66);
    java.awt.Color var69 = var66.getBackground();
    var0.setNextFocusableComponent((java.awt.Component)var66);
    java.awt.Rectangle var71 = var0.getBounds();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test208() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test208");


    net.sourceforge.schemaspy.ui.DbTypeSelectorModel var1 = new net.sourceforge.schemaspy.ui.DbTypeSelectorModel("ISO-8859-1");
    int var2 = var1.getSize();
    java.lang.Object var3 = var1.getSelectedItem();
    int var4 = var1.getSize();
    int var5 = var1.getSize();
    javax.swing.event.ListDataListener[] var6 = var1.getListDataListeners();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var8 = var1.getElementAt(1);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test209() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test209");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    boolean var1 = var0.isImpliedConstraintsEnabled();
    var0.setHasOrphans(false);
    java.lang.String var4 = var0.getSchemaSpec();
    java.util.regex.Pattern var5 = var0.getIndirectColumnExclusions();
    var0.setHost("hi!");
    java.lang.String var8 = var0.getPassword();
    java.util.regex.Pattern var9 = var0.getTableExclusions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test210() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test210");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    boolean var5 = var0.isHtmlGenerationEnabled();
    var0.setColumnExclusions("/Users/Jesh/Documents/School/Summer 2015/Independent Study/Eclipse/workspace/36_schemaspy/bin");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test211() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test211");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var26 = var25.isManagingFocus();
    java.awt.Rectangle var27 = var25.getVisibleRect();
    var0.setBounds(var27);
    var0.hide();
    java.util.List var30 = var0.getIconImages();
    net.sourceforge.schemaspy.ui.DbConfigPanel var31 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var31.requestFocus();
    var31.setFocusTraversalPolicyProvider(true);
    boolean var35 = var31.requestFocusInWindow();
    java.awt.Dimension var36 = var31.getMaximumSize();
    var0.setSize(var36);
    javax.swing.JMenuBar var38 = var0.getJMenuBar();
    boolean var39 = var0.isAlwaysOnTop();
    net.sourceforge.schemaspy.ui.MainFrame var40 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var41 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var41.requestFocus();
    var41.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var45 = var41.insets();
    var41.setAlignmentX(1.0f);
    java.awt.Color var48 = var41.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var49 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var49.requestFocus();
    var49.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var53 = var49.insets();
    float var54 = var49.getAlignmentX();
    var49.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var60 = var49.getMouseListeners();
    java.awt.Rectangle var61 = var49.bounds();
    var41.setBounds(var61);
    var40.setMaximizedBounds(var61);
    java.awt.Container var64 = var40.getContentPane();
    boolean var65 = var40.isLocationByPlatform();
    net.sourceforge.schemaspy.ui.MainFrame var66 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var67 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var68 = var67.getTableExclusions();
    boolean var69 = var67.isEvaluateAllEnabled();
    java.util.List var70 = var67.getColumnDetails();
    var66.setIconImages(var70);
    boolean var72 = var66.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var73 = var66.getModalExclusionType();
    var40.setModalExclusionType(var73);
    var40.setEnabled(true);
    java.awt.Color var77 = var40.getBackground();
    var0.setBackground(var77);
    net.sourceforge.schemaspy.ui.DbConfigPanel var79 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var79.requestFocus();
    var79.setFocusTraversalPolicyProvider(true);
    var79.firePropertyChange("a", (byte)10, (byte)0);
    java.awt.Insets var87 = var79.insets();
    var79.setAlignmentY(100.0f);
    java.awt.Component var90 = var0.add((java.awt.Component)var79);
    var79.disable();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var94 = var79.getBaseline((-1), 1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test212() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test212");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var26 = var25.isManagingFocus();
    java.awt.Rectangle var27 = var25.getVisibleRect();
    var0.setBounds(var27);
    var0.hide();
    java.util.List var30 = var0.getIconImages();
    boolean var31 = var0.isFocused();
    net.sourceforge.schemaspy.ui.DbConfigPanel var32 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var32.requestFocus();
    var32.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var36 = var32.insets();
    var32.setAlignmentX(1.0f);
    var32.firePropertyChange("hi!", 10, 2);
    var32.paintImmediately(100, 10, 2, 0);
    java.util.Set var49 = var32.getFocusTraversalKeys(2);
    java.awt.Cursor var50 = var32.getCursor();
    var0.setCursor(var50);
    var0.removeAll();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test213() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test213");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    var0.setFocusableWindowState(true);
    boolean var9 = var0.isFocusCycleRoot();
    java.awt.Graphics var10 = var0.getGraphics();
    boolean var11 = var0.isFocusCycleRoot();
    int var12 = var0.getState();
    var0.addNotify();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var15 = var0.getFocusTraversalKeys((-3));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);

  }

  public void test214() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test214");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    boolean var25 = var0.isLocationByPlatform();
    boolean var26 = var0.isUndecorated();
    net.sourceforge.schemaspy.ui.DbConfigPanel var27 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    net.sourceforge.schemaspy.ui.DbConfigPanel var28 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var28.requestFocus();
    var28.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var32 = var28.insets();
    var28.setAlignmentX(1.0f);
    boolean var35 = var28.hasFocus();
    boolean var36 = var28.getFocusTraversalKeysEnabled();
    var28.setSize(1, (-1));
    boolean var41 = var28.requestFocus(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var42 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var42.requestFocus();
    java.beans.PropertyChangeListener[] var44 = var42.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var45 = var42.getBaselineResizeBehavior();
    net.sourceforge.schemaspy.ui.DbConfigPanel var46 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var46.requestFocus();
    var46.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var50 = var46.insets();
    var46.setAlignmentX(1.0f);
    var46.doLayout();
    boolean var54 = var46.isCursorSet();
    var46.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var59 = var46.getLocation();
    boolean var60 = var42.contains(var59);
    java.awt.Point var61 = var28.getLocation(var59);
    java.awt.Component var62 = var27.add((java.awt.Component)var28);
    java.awt.Insets var63 = var27.insets();
    var0.setContentPane((java.awt.Container)var27);
    var0.repaint(100L, 312, 431, 0, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test215() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test215");


    net.sourceforge.schemaspy.util.CaseInsensitiveMap var1 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.Set var2 = var1.entrySet();
    java.util.List var3 = net.sourceforge.schemaspy.DbAnalyzer.getRailsConstraints((java.util.Map)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test216() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test216");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    java.awt.Toolkit var6 = var0.getToolkit();
    boolean var7 = var0.isFocused();
    int var8 = var0.getExtendedState();
    boolean var9 = var0.isAlwaysOnTopSupported();
    var0.hide();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test217() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test217");


    net.sourceforge.schemaspy.util.Dot var0 = net.sourceforge.schemaspy.util.Dot.getInstance();
    var0.setFormat("ISO-8859-1");
    java.lang.String var3 = var0.getSupportedVersions();
    java.lang.String var4 = var0.getFormat();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "dot version 2.2.1 or versions greater than 2.4"+ "'", var3.equals("dot version 2.2.1 or versions greater than 2.4"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ISO-8859-1"+ "'", var4.equals("ISO-8859-1"));

  }

  public void test218() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test218");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isDbHelpRequired();
    java.lang.String var5 = var0.getFont();
    boolean var6 = var0.isLowQuality();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Helvetica"+ "'", var5.equals("Helvetica"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test219() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test219");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    net.sourceforge.schemaspy.ui.DbConfigPanel var24 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var24.requestFocus();
    var24.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var28 = var24.insets();
    var24.setAlignmentX(1.0f);
    boolean var31 = var24.hasFocus();
    boolean var32 = var24.getFocusTraversalKeysEnabled();
    boolean var33 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var24);
    var24.firePropertyChange("hi!", 'a', 'a');
    net.sourceforge.schemaspy.ui.DbConfigPanel var38 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var39 = var38.isManagingFocus();
    int var40 = var38.getWidth();
    java.awt.Insets var41 = var38.insets();
    javax.accessibility.AccessibleContext var42 = var38.getAccessibleContext();
    boolean var45 = var38.inside(100, (-3));
    java.awt.Rectangle var46 = var38.getVisibleRect();
    var24.setBounds(var46);
    var0.setMaximizedBounds(var46);
    java.awt.event.ComponentListener[] var49 = var0.getComponentListeners();
    int var50 = var0.getCursorType();
    int var51 = var0.getHeight();
    boolean var52 = var0.isAutoRequestFocus();
    java.lang.String var53 = var0.getTitle();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 312);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "SchemaSpy"+ "'", var53.equals("SchemaSpy"));

  }

  public void test220() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test220");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    var0.firePropertyChange("a", (byte)10, (byte)0);
    java.awt.Insets var8 = var0.insets();
    var0.setAlignmentY(100.0f);
    java.lang.Object var11 = var0.getTreeLock();
    javax.swing.JToolTip var12 = var0.createToolTip();
    java.beans.PropertyChangeListener[] var13 = var0.getPropertyChangeListeners();
    java.awt.Toolkit var14 = var0.getToolkit();
    net.sourceforge.schemaspy.ui.DbConfigPanel var15 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var15.requestFocus();
    java.beans.PropertyChangeListener[] var17 = var15.getPropertyChangeListeners();
    var15.paintImmediately(0, (-1), (-1), 0);
    java.awt.event.KeyListener[] var23 = var15.getKeyListeners();
    net.sourceforge.schemaspy.ui.DbConfigPanel var24 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var24.requestFocus();
    var24.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var28 = var24.insets();
    var24.setAlignmentX(1.0f);
    java.awt.Color var31 = var24.getForeground();
    var15.setForeground(var31);
    boolean var33 = var15.hasFocus();
    java.awt.event.MouseListener[] var34 = var15.getMouseListeners();
    boolean var37 = var15.contains(2, (-3));
    net.sourceforge.schemaspy.ui.MainFrame var38 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var39 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var39.requestFocus();
    var39.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var43 = var39.insets();
    var39.setAlignmentX(1.0f);
    java.awt.Color var46 = var39.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var47 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var47.requestFocus();
    var47.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var51 = var47.insets();
    float var52 = var47.getAlignmentX();
    var47.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var58 = var47.getMouseListeners();
    java.awt.Rectangle var59 = var47.bounds();
    var39.setBounds(var59);
    var38.setMaximizedBounds(var59);
    java.util.List var62 = var38.getIconImages();
    java.awt.Rectangle var63 = var38.getMaximizedBounds();
    java.awt.Dimension var64 = var38.minimumSize();
    var15.setMaximumSize(var64);
    java.awt.Dimension var66 = var0.getSize(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test221() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test221");


    net.sourceforge.schemaspy.view.StyleSheet.MissingCssPropertyException var3 = new net.sourceforge.schemaspy.view.StyleSheet.MissingCssPropertyException("", "hi!");
    net.sourceforge.schemaspy.model.ConnectionFailure var4 = new net.sourceforge.schemaspy.model.ConnectionFailure("", (java.lang.Throwable)var3);
    java.lang.String var5 = var3.getParamName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test222() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test222");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    net.sourceforge.schemaspy.ui.DbConfigPanel var24 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var24.requestFocus();
    var24.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var28 = var24.insets();
    var24.setAlignmentX(1.0f);
    boolean var31 = var24.hasFocus();
    boolean var32 = var24.getFocusTraversalKeysEnabled();
    boolean var33 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var24);
    var24.firePropertyChange("hi!", 'a', 'a');
    net.sourceforge.schemaspy.ui.DbConfigPanel var38 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var39 = var38.isManagingFocus();
    int var40 = var38.getWidth();
    java.awt.Insets var41 = var38.insets();
    javax.accessibility.AccessibleContext var42 = var38.getAccessibleContext();
    boolean var45 = var38.inside(100, (-3));
    java.awt.Rectangle var46 = var38.getVisibleRect();
    var24.setBounds(var46);
    var0.setMaximizedBounds(var46);
    java.awt.Window[] var49 = var0.getOwnedWindows();
    java.awt.Dimension var50 = var0.preferredSize();
    boolean var51 = var0.isFocused();
    var0.repaint(10L, 431, 0, 5, 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test223() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test223");


    net.sourceforge.schemaspy.util.Dot var0 = net.sourceforge.schemaspy.util.Dot.getInstance();
    var0.setFormat("ISO-8859-1");
    boolean var3 = var0.isValid();
    java.lang.String var4 = var0.getFormat();
    java.lang.String var5 = var0.getSupportedVersions();
    var0.setHighQuality(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ISO-8859-1"+ "'", var4.equals("ISO-8859-1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "dot version 2.2.1 or versions greater than 2.4"+ "'", var5.equals("dot version 2.2.1 or versions greater than 2.4"));

  }

  public void test224() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test224");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var7 = var0.getModalExclusionType();
    boolean var8 = var0.isAlwaysOnTop();
    java.awt.Rectangle var9 = var0.getMaximizedBounds();
    net.sourceforge.schemaspy.ui.DbConfigPanel var10 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var10.requestFocus();
    var10.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var14 = var10.insets();
    float var15 = var10.getAlignmentX();
    boolean var18 = var10.contains(1, (-1));
    var10.setOpaque(false);
    var10.repaint(10L);
    var10.firePropertyChange("java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)", (byte)1, (byte)(-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var28 = var0.add((java.awt.Component)var10, 10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test225() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test225");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    var0.setFocusableWindowState(true);
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    boolean var17 = var9.contains(1, (-1));
    var9.transferFocus();
    var9.removeAll();
    java.awt.Component var21 = var0.add((java.awt.Component)var9, 0);
    boolean var22 = var0.isValidateRoot();
    net.sourceforge.schemaspy.ui.DbConfigPanel var23 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var23.requestFocus();
    var23.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var27 = var23.insets();
    var23.reshape(1, 1, 1, 100);
    net.sourceforge.schemaspy.ui.DbConfigPanel var33 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var33.requestFocus();
    var33.setFocusTraversalPolicyProvider(true);
    java.awt.Point var38 = var33.getMousePosition(true);
    java.awt.Component var39 = var33.getNextFocusableComponent();
    java.awt.Dimension var40 = var33.getMinimumSize();
    java.awt.Dimension var41 = var23.getSize(var40);
    java.awt.Rectangle var42 = var23.bounds();
    java.awt.Component var44 = var0.add((java.awt.Component)var23, 2);
    var0.setAlwaysOnTop(true);
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var48 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    var48.clear();
    java.util.List var50 = net.sourceforge.schemaspy.DbAnalyzer.getRailsConstraints((java.util.Map)var48);
    var48.clear();
    java.lang.Object var52 = var48.clone();
    java.lang.String var53 = var48.toString();
    java.util.Set var54 = var48.keySet();
    net.sourceforge.schemaspy.ui.DbConfigPanel var56 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var56.requestFocus();
    java.beans.PropertyChangeListener[] var58 = var56.getPropertyChangeListeners();
    var56.paintImmediately(0, (-1), (-1), 0);
    boolean var64 = var56.isForegroundSet();
    boolean var65 = var56.isValidateRoot();
    boolean var66 = var56.isVisible();
    var56.enable();
    java.lang.Object var68 = var48.put("schemaSpy.css", (java.lang.Object)var56);
    java.awt.Color var69 = var56.getBackground();
    var0.setBackground(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "{}"+ "'", var53.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test226() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test226");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    boolean var2 = var0.isRankDirBugEnabled();
    var0.setDescription(".hi!sdhi!sohi!sthi!s hi!svhi!sehi!srhi!sshi!sihi!sohi!snhi!s hi!s2hi!s.hi!s2hi!s.hi!s1hi!s hi!sohi!srhi!s hi!svhi!sehi!srhi!sshi!sihi!sohi!snhi!sshi!s hi!sghi!srhi!sehi!sahi!sthi!sehi!srhi!s hi!sthi!shhi!sahi!snhi!s hi!s2hi!s.hi!s4hi!s.hi!s{hi!s}hi!s.{}.");
    var0.setUser(" ");
    var0.setDb("ISO-8859-1s");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test227() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test227");


    net.sourceforge.schemaspy.util.Dot var0 = net.sourceforge.schemaspy.util.Dot.getInstance();
    var0.setHighQuality(true);
    java.lang.String var3 = var0.getSupportedVersions();
    net.sourceforge.schemaspy.util.Dot.DotFailure var5 = var0.new DotFailure("dot version 2.2.1 or versions greater than 2.4");
    net.sourceforge.schemaspy.util.Version var6 = var0.getVersion();
    java.lang.String var7 = var6.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "dot version 2.2.1 or versions greater than 2.4"+ "'", var3.equals("dot version 2.2.1 or versions greater than 2.4"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test228() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test228");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.util.List var24 = var0.getIconImages();
    java.awt.Rectangle var25 = var0.getMaximizedBounds();
    var0.setVisible(true);
    java.awt.Point var28 = var0.getLocation();
    java.awt.Shape var29 = var0.getShape();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test229() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test229");


    net.sourceforge.schemaspy.view.HtmlConstraintsPage var0 = net.sourceforge.schemaspy.view.HtmlConstraintsPage.getInstance();
    net.sourceforge.schemaspy.ui.MainFrame var1 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var2 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var2.requestFocus();
    var2.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var6 = var2.insets();
    var2.setAlignmentX(1.0f);
    java.awt.Color var9 = var2.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var10 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var10.requestFocus();
    var10.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var14 = var10.insets();
    float var15 = var10.getAlignmentX();
    var10.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var21 = var10.getMouseListeners();
    java.awt.Rectangle var22 = var10.bounds();
    var2.setBounds(var22);
    var1.setMaximizedBounds(var22);
    java.awt.Container var25 = var1.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var26 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var27 = var26.isManagingFocus();
    java.awt.Rectangle var28 = var26.getVisibleRect();
    var1.setBounds(var28);
    var1.hide();
    java.util.List var31 = var1.getIconImages();
    net.sourceforge.schemaspy.util.LineWriter var35 = new net.sourceforge.schemaspy.util.LineWriter("Unknown", 100, "ISO-8859-1");
    var35.writeln();
    var0.writeCheckConstraints((java.util.Collection)var31, var35);
    java.lang.String var38 = var35.toString();
    var35.write("net.sourceforge.schemaspy.ui.MainFrame[frame0,0,23,500x431,invalid,hidden,layout=java.awt.BorderLayout,title=SchemaSpy,resizable,normal,defaultCloseOperation=HIDE_ON_CLOSE,rootPane=javax.swing.JRootPane[,0,0,0x0,invalid,layout=javax.swing.JRootPane$RootLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777673,maximumSize=,minimumSize=,preferredSize=],rootPaneCheckingEnabled=true]");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.io.Writer var44 = var35.append((java.lang.CharSequence)"hi!s{hi!s}hi!s", (-1), 0);
      fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test230() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test230");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    var0.setFocusableWindowState(true);
    boolean var9 = var0.isFocusCycleRoot();
    java.awt.Graphics var10 = var0.getGraphics();
    boolean var11 = var0.isFocusCycleRoot();
    net.sourceforge.schemaspy.ui.MainFrame var12 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var13 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var13.requestFocus();
    var13.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var17 = var13.insets();
    var13.setAlignmentX(1.0f);
    java.awt.Color var20 = var13.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var21 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var21.requestFocus();
    var21.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var25 = var21.insets();
    float var26 = var21.getAlignmentX();
    var21.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var32 = var21.getMouseListeners();
    java.awt.Rectangle var33 = var21.bounds();
    var13.setBounds(var33);
    var12.setMaximizedBounds(var33);
    java.awt.Container var36 = var12.getContentPane();
    boolean var37 = var12.isLocationByPlatform();
    net.sourceforge.schemaspy.ui.MainFrame var38 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var39 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var40 = var39.getTableExclusions();
    boolean var41 = var39.isEvaluateAllEnabled();
    java.util.List var42 = var39.getColumnDetails();
    var38.setIconImages(var42);
    boolean var44 = var38.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var45 = var38.getModalExclusionType();
    var12.setModalExclusionType(var45);
    var12.setEnabled(true);
    javax.swing.JLayeredPane var49 = var12.getLayeredPane();
    var0.setLayeredPane(var49);
    javax.swing.JRootPane var51 = var0.getRootPane();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test231() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test231");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var7 = var0.getModalExclusionType();
    net.sourceforge.schemaspy.ui.DbConfigPanel var8 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var8.requestFocus();
    var8.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var12 = var8.insets();
    var8.setAlignmentX(1.0f);
    boolean var15 = var8.hasFocus();
    boolean var16 = var8.getFocusTraversalKeysEnabled();
    boolean var17 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var8);
    net.sourceforge.schemaspy.ui.DbConfigPanel var18 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var19 = var18.isManagingFocus();
    java.awt.Rectangle var20 = var18.getVisibleRect();
    java.awt.Rectangle var21 = var8.getBounds(var20);
    java.awt.Dimension var22 = var8.getPreferredSize();
    var0.setSize(var22);
    java.awt.im.InputContext var24 = var0.getInputContext();
    float var25 = var0.getOpacity();
    var0.revalidate();
    java.awt.im.InputContext var27 = var0.getInputContext();
    java.awt.Dimension var28 = var0.getMinimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test232() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test232");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    var0.setNumRowsEnabled(true);
    var0.setSchemaSpec("net.sourceforge.schemaspy.ui.MainFrame[frame5,0,23,500x312,invalid,hidden,layout=java.awt.BorderLayout,title=SchemaSpy,resizable,normal,defaultCloseOperation=HIDE_ON_CLOSE,rootPane=javax.swing.JRootPane[,0,0,0x0,invalid,layout=javax.swing.JRootPane$RootLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777673,maximumSize=,minimumSize=,preferredSize=],rootPaneCheckingEnabled=true]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test233() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test233");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    int var6 = var0.getExtendedState();
    var0.setFocusableWindowState(true);
    javax.swing.TransferHandler var9 = var0.getTransferHandler();
    var0.setAutoRequestFocus(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test234() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test234");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.requestFocus();
    var0.setOpaque(false);
    var0.invalidate();
    var0.firePropertyChange("net.sourceforge.schemaspy.model.InvalidConfigurationException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)", false, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test235() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test235");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    boolean var7 = var0.hasFocus();
    boolean var8 = var0.getFocusTraversalKeysEnabled();
    boolean var9 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var0);
    var0.firePropertyChange("hi!", 'a', 'a');
    java.lang.String var14 = var0.getUIClassID();
    var0.repaint();
    net.sourceforge.schemaspy.ui.DbConfigPanel var16 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var16.requestFocus();
    var16.setFocusTraversalPolicyProvider(true);
    java.awt.Point var21 = var16.getMousePosition(true);
    java.awt.Image var24 = var16.createImage(2, 100);
    java.lang.Object var25 = var0.getClientProperty((java.lang.Object)100);
    net.sourceforge.schemaspy.ui.MainFrame var26 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var27 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var28 = var27.getTableExclusions();
    boolean var29 = var27.isEvaluateAllEnabled();
    java.util.List var30 = var27.getColumnDetails();
    var26.setIconImages(var30);
    boolean var32 = var26.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var33 = var26.getModalExclusionType();
    net.sourceforge.schemaspy.ui.DbConfigPanel var34 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var34.requestFocus();
    var34.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var38 = var34.insets();
    var34.setAlignmentX(1.0f);
    boolean var41 = var34.hasFocus();
    boolean var42 = var34.getFocusTraversalKeysEnabled();
    boolean var43 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var34);
    net.sourceforge.schemaspy.ui.DbConfigPanel var44 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var45 = var44.isManagingFocus();
    java.awt.Rectangle var46 = var44.getVisibleRect();
    java.awt.Rectangle var47 = var34.getBounds(var46);
    java.awt.Dimension var48 = var34.getPreferredSize();
    var26.setSize(var48);
    java.awt.im.InputContext var50 = var26.getInputContext();
    java.lang.String var51 = var26.getWarningString();
    net.sourceforge.schemaspy.ui.DbConfigPanel var52 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var52.requestFocus();
    var52.setFocusTraversalPolicyProvider(true);
    var52.firePropertyChange("a", (byte)10, (byte)0);
    java.awt.Insets var60 = var52.insets();
    var52.setAlignmentY(100.0f);
    java.awt.Image var65 = var52.createImage(1, 1);
    java.awt.Dimension var66 = var52.getSize();
    var26.setSize(var66);
    java.awt.LayoutManager var68 = var26.getLayout();
    var0.setLayout(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test236() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test236");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    var0.setFocusableWindowState(true);
    boolean var9 = var0.isFocusCycleRoot();
    java.awt.Graphics var10 = var0.getGraphics();
    boolean var11 = var0.isFocusCycleRoot();
    net.sourceforge.schemaspy.ui.MainFrame var12 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var13 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var13.requestFocus();
    var13.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var17 = var13.insets();
    var13.setAlignmentX(1.0f);
    java.awt.Color var20 = var13.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var21 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var21.requestFocus();
    var21.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var25 = var21.insets();
    float var26 = var21.getAlignmentX();
    var21.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var32 = var21.getMouseListeners();
    java.awt.Rectangle var33 = var21.bounds();
    var13.setBounds(var33);
    var12.setMaximizedBounds(var33);
    java.awt.Container var36 = var12.getContentPane();
    boolean var37 = var12.isLocationByPlatform();
    net.sourceforge.schemaspy.ui.MainFrame var38 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var39 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var40 = var39.getTableExclusions();
    boolean var41 = var39.isEvaluateAllEnabled();
    java.util.List var42 = var39.getColumnDetails();
    var38.setIconImages(var42);
    boolean var44 = var38.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var45 = var38.getModalExclusionType();
    var12.setModalExclusionType(var45);
    var12.setEnabled(true);
    javax.swing.JLayeredPane var49 = var12.getLayeredPane();
    var0.setLayeredPane(var49);
    java.awt.im.InputContext var51 = var0.getInputContext();
    java.awt.Point var52 = var0.getLocation();
    javax.accessibility.AccessibleContext var53 = var0.getAccessibleContext();
    var0.setResizable(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test237() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test237");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.requestFocus();
    boolean var6 = var0.isVisible();
    var0.hide();
    java.awt.Dimension var8 = var0.getPreferredSize();
    boolean var9 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var0);
    var0.setOpaque(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test238() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test238");


    net.sourceforge.schemaspy.util.Inflection var1 = new net.sourceforge.schemaspy.util.Inflection("4");

  }

  public void test239() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test239");


    net.sourceforge.schemaspy.util.Version var1 = new net.sourceforge.schemaspy.util.Version("");
    net.sourceforge.schemaspy.util.DbSpecificOption var4 = new net.sourceforge.schemaspy.util.DbSpecificOption("", "ISO-8859-1");
    java.lang.String var5 = var4.toString();
    net.sourceforge.schemaspy.Config var6 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var7 = var6.getTableExclusions();
    boolean var8 = var6.isEvaluateAllEnabled();
    java.lang.String var10 = var6.getParam("hi!s");
    var4.setValue((java.lang.Object)"hi!s");
    boolean var12 = var1.equals((java.lang.Object)"hi!s");
    net.sourceforge.schemaspy.util.Version var14 = new net.sourceforge.schemaspy.util.Version("");
    net.sourceforge.schemaspy.util.DbSpecificOption var17 = new net.sourceforge.schemaspy.util.DbSpecificOption("", "ISO-8859-1");
    java.lang.String var18 = var17.toString();
    net.sourceforge.schemaspy.Config var19 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var20 = var19.getTableExclusions();
    boolean var21 = var19.isEvaluateAllEnabled();
    java.lang.String var23 = var19.getParam("hi!s");
    var17.setValue((java.lang.Object)"hi!s");
    boolean var25 = var14.equals((java.lang.Object)"hi!s");
    net.sourceforge.schemaspy.util.Version var27 = new net.sourceforge.schemaspy.util.Version("");
    net.sourceforge.schemaspy.util.Version var29 = new net.sourceforge.schemaspy.util.Version("");
    int var30 = var27.compareTo(var29);
    net.sourceforge.schemaspy.util.Version var32 = new net.sourceforge.schemaspy.util.Version("");
    int var33 = var27.compareTo(var32);
    int var34 = var14.compareTo(var27);
    int var35 = var1.compareTo(var14);
    java.lang.String var36 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"+ "'", var5.equals("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"+ "'", var18.equals("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + ""+ "'", var36.equals(""));

  }

  public void test240() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test240");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Point var5 = var0.getMousePosition(true);
    java.awt.Component var6 = var0.getNextFocusableComponent();
    boolean var7 = var0.isBackgroundSet();
    java.awt.event.MouseWheelListener[] var8 = var0.getMouseWheelListeners();
    java.awt.Point var10 = var0.getMousePosition(true);
    int var11 = var0.getWidth();
    net.sourceforge.schemaspy.ui.DbConfigPanel var12 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var12.requestFocus();
    var12.setFocusTraversalPolicyProvider(true);
    boolean var16 = var12.requestFocusInWindow();
    net.sourceforge.schemaspy.ui.DbConfigPanel var17 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var17.requestFocus();
    java.beans.PropertyChangeListener[] var19 = var17.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var20 = var17.getBaselineResizeBehavior();
    net.sourceforge.schemaspy.ui.DbConfigPanel var21 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var21.requestFocus();
    var21.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var25 = var21.insets();
    var21.setAlignmentX(1.0f);
    var21.doLayout();
    boolean var29 = var21.isCursorSet();
    var21.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var34 = var21.getLocation();
    boolean var35 = var17.contains(var34);
    java.awt.Component var36 = var12.findComponentAt(var34);
    var12.firePropertyChange("a", '4', '#');
    net.sourceforge.schemaspy.ui.DbConfigPanel var41 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var41.requestFocus();
    var41.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var45 = var41.insets();
    var41.requestFocus();
    var41.doLayout();
    var41.firePropertyChange("hi!", 0.0d, 10.0d);
    java.awt.Component var52 = var41.getNextFocusableComponent();
    java.awt.Rectangle var53 = var41.bounds();
    java.awt.Rectangle var54 = var12.getBounds(var53);
    java.awt.Dimension var55 = var12.size();
    var0.resize(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test241() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test241");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    java.awt.Window.Type var1 = var0.getType();
    java.awt.Window var2 = var0.getOwner();
    var0.repaint((-3), 2, (-1), 100);
    java.lang.String var8 = var0.getWarningString();
    java.awt.dnd.DropTarget var9 = var0.getDropTarget();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test242() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test242");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    java.awt.Window.Type var1 = var0.getType();
    var0.hide();
    var0.firePropertyChange("schemaSpy.css", '4', '#');
    boolean var7 = var0.isAutoRequestFocus();
    var0.setState((-3));
    java.awt.event.ContainerListener[] var10 = var0.getContainerListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test243() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test243");


    net.sourceforge.schemaspy.util.DbSpecificOption var2 = new net.sourceforge.schemaspy.util.DbSpecificOption("", "ISO-8859-1");
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.getDescription();
    java.lang.String var5 = var2.getName();
    net.sourceforge.schemaspy.ui.MainFrame var6 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var7 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var8 = var7.getTableExclusions();
    boolean var9 = var7.isEvaluateAllEnabled();
    java.util.List var10 = var7.getColumnDetails();
    var6.setIconImages(var10);
    net.sourceforge.schemaspy.ui.DbConfigPanel var12 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var12.requestFocus();
    var12.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var16 = var12.insets();
    var12.setAlignmentX(1.0f);
    boolean var19 = var12.hasFocus();
    boolean var20 = var12.getFocusTraversalKeysEnabled();
    boolean var21 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var12);
    net.sourceforge.schemaspy.ui.DbConfigPanel var22 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var23 = var22.isManagingFocus();
    java.awt.Rectangle var24 = var22.getVisibleRect();
    java.awt.Rectangle var25 = var12.getBounds(var24);
    java.awt.Dimension var26 = var12.getPreferredSize();
    var6.setMinimumSize(var26);
    java.awt.Dialog.ModalExclusionType var28 = var6.getModalExclusionType();
    var2.setValue((java.lang.Object)var28);
    java.lang.Object var30 = var2.getValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"+ "'", var3.equals("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ISO-8859-1"+ "'", var4.equals("ISO-8859-1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test244() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test244");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    java.lang.String var2 = var0.getConnectionPropertiesFile();
    boolean var3 = var0.isSchemaDisabled();
    boolean var4 = var0.isDbHelpRequired();
    var0.setUser("a");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test245() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test245");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    var0.setFocusableWindowState(true);
    java.awt.Window[] var9 = var0.getOwnedWindows();
    var0.setFocusableWindowState(false);
    boolean var12 = var0.isBackgroundSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test246() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test246");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.setFocusable(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var3 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var3.requestFocus();
    var3.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var7 = var3.insets();
    var3.setAlignmentX(1.0f);
    boolean var10 = var3.hasFocus();
    boolean var11 = var3.getFocusTraversalKeysEnabled();
    var3.setSize(1, (-1));
    java.lang.Object var15 = var0.getClientProperty((java.lang.Object)var3);
    java.awt.Container var16 = var3.getTopLevelAncestor();
    var3.setOpaque(false);
    java.beans.VetoableChangeListener[] var19 = var3.getVetoableChangeListeners();
    net.sourceforge.schemaspy.ui.MainFrame var20 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var21 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var22 = var21.getTableExclusions();
    boolean var23 = var21.isEvaluateAllEnabled();
    java.util.List var24 = var21.getColumnDetails();
    var20.setIconImages(var24);
    boolean var26 = var20.isAlwaysOnTop();
    var20.setFocusableWindowState(true);
    net.sourceforge.schemaspy.ui.DbConfigPanel var29 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var30 = var29.isManagingFocus();
    int var31 = var29.getWidth();
    javax.swing.InputVerifier var32 = var29.getInputVerifier();
    net.sourceforge.schemaspy.ui.DbConfigPanel var33 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var33.requestFocus();
    var33.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var37 = var33.insets();
    var33.requestFocus();
    boolean var39 = var33.isVisible();
    java.awt.Dimension var40 = var33.preferredSize();
    java.awt.Dimension var41 = var29.getSize(var40);
    var20.setSize(var40);
    java.lang.String var43 = var20.getWarningString();
    java.awt.Dimension var44 = var20.getMinimumSize();
    var3.setMaximumSize(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test247() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test247");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.firePropertyChange("ISO-8859-1", 0L, (-1L));
    var0.firePropertyChange("a", 0.0d, 1.0d);
    java.awt.Graphics var10 = var0.getGraphics();
    boolean var11 = var0.isValidateRoot();
    boolean var12 = var0.isCursorSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test248() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test248");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    boolean var1 = var0.isImpliedConstraintsEnabled();
    var0.setHasOrphans(false);
    java.lang.String var4 = var0.getSchemaSpec();
    boolean var5 = var0.isHighQuality();
    int var6 = var0.getMaxDetailedTables();
    java.lang.String var7 = var0.getRenderer();
    var0.setCatalog("hi!s");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 300);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + ""+ "'", var7.equals(""));

  }

  public void test249() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test249");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.util.List var24 = var0.getIconImages();
    boolean var25 = var0.isDisplayable();
    boolean var26 = var0.isFocusableWindow();
    var0.setExtendedState(300);
    net.sourceforge.schemaspy.ui.MainFrame var29 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var30 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var31 = var30.getTableExclusions();
    boolean var32 = var30.isEvaluateAllEnabled();
    java.util.List var33 = var30.getColumnDetails();
    var29.setIconImages(var33);
    java.awt.Toolkit var35 = var29.getToolkit();
    boolean var36 = var29.isFocused();
    int var37 = var29.getExtendedState();
    java.awt.Window.Type var38 = var29.getType();
    boolean var39 = var29.isFocusableWindow();
    var0.remove((java.awt.Component)var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);

  }

  public void test250() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test250");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    java.awt.Window.Type var1 = var0.getType();
    java.awt.Window var2 = var0.getOwner();
    var0.repaint((-3), 2, (-1), 100);
    net.sourceforge.schemaspy.ui.DbConfigPanel var8 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var8.requestFocus();
    var8.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var12 = var8.insets();
    var8.setAlignmentX(1.0f);
    java.awt.Color var15 = var8.getForeground();
    int var16 = var8.getWidth();
    net.sourceforge.schemaspy.ui.DbConfigPanel var17 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var17.requestFocus();
    var17.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var21 = var17.insets();
    var17.setAlignmentX(1.0f);
    boolean var24 = var17.hasFocus();
    var17.paintImmediately(10, 100, 2, 10);
    net.sourceforge.schemaspy.ui.DbConfigPanel var30 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var30.requestFocus();
    var30.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var34 = var30.insets();
    var30.setAlignmentX(1.0f);
    java.awt.Color var37 = var30.getForeground();
    javax.swing.InputVerifier var38 = var30.getInputVerifier();
    var30.repaint(100L, 10, 1, 0, 100);
    var30.setEnabled(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var47 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var47.requestFocus();
    java.beans.PropertyChangeListener[] var49 = var47.getPropertyChangeListeners();
    var47.paintImmediately(0, (-1), (-1), 0);
    java.awt.event.KeyListener[] var55 = var47.getKeyListeners();
    net.sourceforge.schemaspy.ui.DbConfigPanel var56 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var56.requestFocus();
    var56.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var60 = var56.insets();
    var56.setAlignmentX(1.0f);
    java.awt.Color var63 = var56.getForeground();
    var47.setForeground(var63);
    var30.setBackground(var63);
    var17.remove((java.awt.Component)var30);
    java.awt.Dimension var67 = var17.getMinimumSize();
    var8.setSize(var67);
    var0.setMinimumSize(var67);
    var0.setExtendedState(300);
    var0.requestFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test251() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test251");


    net.sourceforge.schemaspy.util.DbSpecificOption var2 = new net.sourceforge.schemaspy.util.DbSpecificOption("net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s", "a");
    net.sourceforge.schemaspy.view.StyleSheet.MissingCssPropertyException var6 = new net.sourceforge.schemaspy.view.StyleSheet.MissingCssPropertyException("", "hi!");
    net.sourceforge.schemaspy.model.InvalidConfigurationException var7 = new net.sourceforge.schemaspy.model.InvalidConfigurationException("java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)", (java.lang.Throwable)var6);
    var2.setValue((java.lang.Object)var7);
    java.lang.String var9 = var2.getDescription();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "a"+ "'", var9.equals("a"));

  }

  public void test252() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test252");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.util.List var24 = var0.getIconImages();
    boolean var25 = var0.isDisplayable();
    net.sourceforge.schemaspy.ui.DbConfigPanel var26 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var26.setFocusable(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var29 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var29.requestFocus();
    var29.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var33 = var29.insets();
    var29.setAlignmentX(1.0f);
    boolean var36 = var29.hasFocus();
    boolean var37 = var29.getFocusTraversalKeysEnabled();
    var29.setSize(1, (-1));
    java.lang.Object var41 = var26.getClientProperty((java.lang.Object)var29);
    var29.firePropertyChange("net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s", ' ', ' ');
    var29.repaint(1L);
    boolean var48 = var29.isFocusOwner();
    net.sourceforge.schemaspy.ui.DbConfigPanel var49 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var49.requestFocus();
    var49.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var53 = var49.insets();
    var49.setAlignmentX(1.0f);
    net.sourceforge.schemaspy.ui.DbConfigPanel var56 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var56.requestFocus();
    var56.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var60 = var56.insets();
    float var61 = var56.getAlignmentX();
    var56.setBounds(0, 1, 10, 100);
    java.awt.Rectangle var67 = var56.getBounds();
    java.awt.Rectangle var68 = var49.getBounds(var67);
    java.awt.Rectangle var69 = var29.getBounds(var67);
    java.awt.Rectangle var70 = var0.getBounds(var67);
    javax.swing.TransferHandler var71 = var0.getTransferHandler();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);

  }

  public void test253() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test253");


    net.sourceforge.schemaspy.ui.DbConfigTableModel var0 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    java.awt.event.HierarchyBoundsListener[] var6 = var1.getHierarchyBoundsListeners();
    net.sourceforge.schemaspy.ui.DbConfigPanel var7 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var7.requestFocus();
    var7.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var11 = var7.insets();
    var7.setAlignmentX(1.0f);
    var7.firePropertyChange("hi!", 10, 2);
    var7.paintImmediately(100, 10, 2, 0);
    java.lang.Object var23 = var1.getClientProperty((java.lang.Object)100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setValueAt((java.lang.Object)var1, 10, 300);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test254() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test254");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    boolean var5 = var0.isHtmlGenerationEnabled();
    var0.setEvaluateAllEnabled(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test255() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test255");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.firePropertyChange("hi!", 10, 2);
    var0.paintImmediately(100, 10, 2, 0);
    java.util.Set var17 = var0.getFocusTraversalKeys(2);
    net.sourceforge.schemaspy.ui.DbConfigPanel var18 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var18.requestFocus();
    var18.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var22 = var18.insets();
    float var23 = var18.getAlignmentX();
    var18.setBounds(0, 1, 10, 100);
    java.awt.Rectangle var29 = var18.getBounds();
    var0.computeVisibleRect(var29);
    net.sourceforge.schemaspy.ui.DbConfigPanel var31 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var31.requestFocus();
    java.beans.PropertyChangeListener[] var33 = var31.getPropertyChangeListeners();
    var31.paintImmediately(0, (-1), (-1), 0);
    java.awt.event.KeyListener[] var39 = var31.getKeyListeners();
    net.sourceforge.schemaspy.ui.DbConfigPanel var40 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var40.requestFocus();
    var40.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var44 = var40.insets();
    var40.setAlignmentX(1.0f);
    java.awt.Color var47 = var40.getForeground();
    var31.setForeground(var47);
    boolean var49 = var31.hasFocus();
    var31.enableInputMethods(false);
    var31.setDebugGraphicsOptions(23);
    java.awt.Dimension var54 = var31.size();
    net.sourceforge.schemaspy.ui.DbConfigPanel var55 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var55.requestFocus();
    var55.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var59 = var55.insets();
    var55.setAlignmentX(1.0f);
    var55.doLayout();
    boolean var63 = var55.isCursorSet();
    var55.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var68 = var55.getLocation();
    java.awt.Point var69 = var31.getLocation(var68);
    java.awt.Point var70 = var0.getLocation(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test256() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test256");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    boolean var7 = var0.hasFocus();
    boolean var8 = var0.getFocusTraversalKeysEnabled();
    boolean var9 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var0);
    var0.firePropertyChange("hi!", 'a', 'a');
    java.lang.String var14 = var0.getUIClassID();
    java.awt.Point var16 = var0.getMousePosition(false);
    java.awt.Point var17 = var0.location();
    net.sourceforge.schemaspy.ui.DbConfigPanel var18 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var18.requestFocus();
    var18.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var22 = var18.insets();
    var18.setAlignmentX(1.0f);
    boolean var25 = var18.hasFocus();
    boolean var26 = var18.getFocusTraversalKeysEnabled();
    boolean var27 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var18);
    net.sourceforge.schemaspy.ui.DbConfigPanel var28 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var29 = var28.isManagingFocus();
    java.awt.Rectangle var30 = var28.getVisibleRect();
    java.awt.Rectangle var31 = var18.getBounds(var30);
    var0.repaint(var30);
    var0.firePropertyChange("net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)s", true, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test257() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test257");


    net.sourceforge.schemaspy.util.DbSpecificConfig var1 = new net.sourceforge.schemaspy.util.DbSpecificConfig("net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    net.sourceforge.schemaspy.Config var2 = var1.getConfig();
    net.sourceforge.schemaspy.Config var3 = var1.getConfig();
    var3.setIndirectColumnExclusions("ISO-8859-1s");
    net.sourceforge.schemaspy.Config.setInstance(var3);
    var3.setTableInclusions("Helvetica");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test258() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test258");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.firePropertyChange("ISO-8859-1", 0L, (-1L));
    java.awt.Color var6 = var0.getBackground();
    var0.requestFocus();
    var0.setFocusTraversalKeysEnabled(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test259() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test259");


    net.sourceforge.schemaspy.ui.DbTypeSelectorModel var1 = new net.sourceforge.schemaspy.ui.DbTypeSelectorModel("ISO-8859-1");
    int var2 = var1.getSize();
    net.sourceforge.schemaspy.ui.DbConfigPanel var3 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var3.requestFocus();
    var3.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var7 = var3.insets();
    var3.setAlignmentX(1.0f);
    java.awt.Color var10 = var3.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var11 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var11.requestFocus();
    var11.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var15 = var11.insets();
    float var16 = var11.getAlignmentX();
    var11.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var22 = var11.getMouseListeners();
    java.awt.Rectangle var23 = var11.bounds();
    var3.setBounds(var23);
    var1.setSelectedItem((java.lang.Object)var3);
    boolean var26 = var3.getAutoscrolls();
    var3.updateUI();
    net.sourceforge.schemaspy.ui.DbConfigPanel var28 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var28.requestFocus();
    var28.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var32 = var28.insets();
    var28.requestFocus();
    var28.setOpaque(false);
    var28.invalidate();
    java.awt.event.KeyListener[] var37 = var28.getKeyListeners();
    net.sourceforge.schemaspy.ui.DbConfigPanel var38 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var38.requestFocus();
    var38.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var42 = var38.insets();
    var38.requestFocus();
    var38.doLayout();
    var38.firePropertyChange("hi!", 0.0d, 10.0d);
    java.awt.Component var49 = var38.getNextFocusableComponent();
    java.awt.Rectangle var50 = var38.bounds();
    net.sourceforge.schemaspy.ui.DbConfigPanel var51 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var51.requestFocus();
    var51.setFocusTraversalPolicyProvider(true);
    boolean var55 = var51.requestFocusInWindow();
    net.sourceforge.schemaspy.ui.DbConfigPanel var56 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var56.requestFocus();
    java.beans.PropertyChangeListener[] var58 = var56.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var59 = var56.getBaselineResizeBehavior();
    net.sourceforge.schemaspy.ui.DbConfigPanel var60 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var60.requestFocus();
    var60.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var64 = var60.insets();
    var60.setAlignmentX(1.0f);
    var60.doLayout();
    boolean var68 = var60.isCursorSet();
    var60.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var73 = var60.getLocation();
    boolean var74 = var56.contains(var73);
    java.awt.Component var75 = var51.findComponentAt(var73);
    java.awt.Component var76 = var38.findComponentAt(var73);
    java.awt.Point var77 = var28.getLocation(var73);
    java.awt.Component var78 = var3.findComponentAt(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test260() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test260");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.doLayout();
    boolean var8 = var0.isCursorSet();
    var0.nextFocus();
    var0.grabFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test261() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test261");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    var0.setFocusableWindowState(true);
    java.awt.Window[] var9 = var0.getOwnedWindows();
    java.awt.Component var10 = var0.getMostRecentFocusOwner();
    var0.firePropertyChange("net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)", 0.0d, 10.0d);
    boolean var17 = var0.contains(431, (-3));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test262() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test262");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    java.beans.PropertyChangeListener[] var2 = var0.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var3 = var0.getBaselineResizeBehavior();
    boolean var4 = var0.isDisplayable();
    java.awt.event.KeyListener[] var5 = var0.getKeyListeners();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var7 = var0.getComponent(11);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test263() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test263");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.doLayout();
    boolean var8 = var0.isCursorSet();
    var0.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var13 = var0.getLocation();
    var0.setSize(2, 10);
    java.awt.Component var19 = var0.getComponentAt(300, 300);
    var0.nextFocus();
    int var21 = var0.getWidth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2);

  }

  public void test264() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test264");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.doLayout();
    boolean var8 = var0.isCursorSet();
    java.awt.Insets var9 = var0.getInsets();
    boolean var10 = var0.isDoubleBuffered();
    java.lang.String var11 = var0.getUIClassID();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "PanelUI"+ "'", var11.equals("PanelUI"));

  }

  public void test265() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test265");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    float var5 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.validate();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Point var14 = var9.getMousePosition(true);
    int var15 = var9.getComponentCount();
    int var16 = var9.getHeight();
    var9.setName("hi!s");
    net.sourceforge.schemaspy.ui.DbConfigPanel var19 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var19.requestFocus();
    var19.setFocusTraversalPolicyProvider(true);
    java.awt.Point var24 = var19.getMousePosition(true);
    java.awt.Component var25 = var19.getNextFocusableComponent();
    java.awt.Dimension var26 = var19.getMinimumSize();
    var9.setSize(var26);
    java.awt.Dimension var28 = var0.getSize(var26);
    java.awt.event.FocusListener[] var29 = var0.getFocusListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test266() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test266");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    net.sourceforge.schemaspy.ui.DbConfigPanel var24 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var24.requestFocus();
    var24.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var28 = var24.insets();
    var24.setAlignmentX(1.0f);
    boolean var31 = var24.hasFocus();
    boolean var32 = var24.getFocusTraversalKeysEnabled();
    boolean var33 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var24);
    var24.firePropertyChange("hi!", 'a', 'a');
    net.sourceforge.schemaspy.ui.DbConfigPanel var38 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var39 = var38.isManagingFocus();
    int var40 = var38.getWidth();
    java.awt.Insets var41 = var38.insets();
    javax.accessibility.AccessibleContext var42 = var38.getAccessibleContext();
    boolean var45 = var38.inside(100, (-3));
    java.awt.Rectangle var46 = var38.getVisibleRect();
    var24.setBounds(var46);
    var0.setMaximizedBounds(var46);
    java.awt.Window[] var49 = var0.getOwnedWindows();
    net.sourceforge.schemaspy.ui.DbConfigPanel var50 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var51 = var50.isManagingFocus();
    int var52 = var50.getWidth();
    javax.swing.InputVerifier var53 = var50.getInputVerifier();
    net.sourceforge.schemaspy.ui.DbConfigPanel var54 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var54.requestFocus();
    var54.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var58 = var54.insets();
    var54.requestFocus();
    boolean var60 = var54.isVisible();
    java.awt.Dimension var61 = var54.preferredSize();
    java.awt.Dimension var62 = var50.getSize(var61);
    var0.setSize(var61);
    java.awt.Color var64 = var0.getForeground();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);

  }

  public void test267() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test267");


    net.sourceforge.schemaspy.ui.DbTypeSelectorModel var1 = new net.sourceforge.schemaspy.ui.DbTypeSelectorModel("ISO-8859-1");
    int var2 = var1.getSize();
    java.lang.Object var3 = var1.getSelectedItem();
    int var4 = var1.getSize();
    int var5 = var1.getSize();
    net.sourceforge.schemaspy.ui.DbConfigTableModel var6 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    var6.fireTableRowsInserted(2, 1);
    java.lang.Object var12 = var6.getValueAt(0, 100);
    javax.swing.event.TableModelListener[] var13 = var6.getTableModelListeners();
    var6.fireTableRowsUpdated(0, 3);
    int var18 = var6.findColumn("net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    var6.fireTableRowsDeleted(11, 2);
    java.lang.Class var23 = var6.getClass(0);
    var6.fireTableStructureChanged();
    java.lang.Class var26 = var6.getClass(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.EventListener[] var27 = var1.<java.util.EventListener>getListeners(var26);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test268() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test268");


    net.sourceforge.schemaspy.util.Version var1 = new net.sourceforge.schemaspy.util.Version("");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toString();
    java.lang.String var4 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));

  }

  public void test269() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test269");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setMaxDbThreads(1);
    var0.setNumRowsEnabled(false);
    var0.setEncodeCommentsEnabled(false);
    var0.setDescription("hi!s");
    var0.setCharset("ISO-8859-1s");
    boolean var11 = var0.isHighQuality();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test270() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test270");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var1 = var0.isManagingFocus();
    int var2 = var0.getWidth();
    java.awt.Point var3 = var0.getMousePosition();
    boolean var6 = var0.contains(1, (-1));
    boolean var7 = var0.isValid();
    java.awt.Component var8 = var0.getNextFocusableComponent();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    var9.setAlignmentX(1.0f);
    var9.doLayout();
    boolean var17 = var9.isCursorSet();
    net.sourceforge.schemaspy.ui.DbConfigPanel var18 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var18.requestFocus();
    java.beans.PropertyChangeListener[] var20 = var18.getPropertyChangeListeners();
    var18.paintImmediately(0, (-1), (-1), 0);
    java.awt.Font var26 = var18.getFont();
    var9.setFont(var26);
    var0.setFont(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test271() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test271");


    net.sourceforge.schemaspy.util.Dot var0 = net.sourceforge.schemaspy.util.Dot.getInstance();
    var0.setHighQuality(true);
    net.sourceforge.schemaspy.util.Dot.DotFailure var4 = var0.new DotFailure("hi!s");
    boolean var5 = var0.requiresGdRenderer();
    var0.setRenderer("java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)");
    var0.setHighQuality(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test272() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test272");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sourceforge.schemaspy.util.LineWriter var3 = new net.sourceforge.schemaspy.util.LineWriter("java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)", 300, "{}");
      fail("Expected exception of type java.io.UnsupportedEncodingException");
    } catch (java.io.UnsupportedEncodingException e) {
      // Expected exception.
    }

  }

  public void test273() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test273");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    net.sourceforge.schemaspy.ui.DbConfigPanel var24 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var24.requestFocus();
    var24.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var28 = var24.insets();
    var24.setAlignmentX(1.0f);
    boolean var31 = var24.hasFocus();
    boolean var32 = var24.getFocusTraversalKeysEnabled();
    boolean var33 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var24);
    var24.firePropertyChange("hi!", 'a', 'a');
    net.sourceforge.schemaspy.ui.DbConfigPanel var38 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var39 = var38.isManagingFocus();
    int var40 = var38.getWidth();
    java.awt.Insets var41 = var38.insets();
    javax.accessibility.AccessibleContext var42 = var38.getAccessibleContext();
    boolean var45 = var38.inside(100, (-3));
    java.awt.Rectangle var46 = var38.getVisibleRect();
    var24.setBounds(var46);
    var0.setMaximizedBounds(var46);
    java.awt.Window[] var49 = var0.getOwnedWindows();
    net.sourceforge.schemaspy.ui.DbConfigPanel var50 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var51 = var50.isManagingFocus();
    int var52 = var50.getWidth();
    javax.swing.InputVerifier var53 = var50.getInputVerifier();
    net.sourceforge.schemaspy.ui.DbConfigPanel var54 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var54.requestFocus();
    var54.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var58 = var54.insets();
    var54.requestFocus();
    boolean var60 = var54.isVisible();
    java.awt.Dimension var61 = var54.preferredSize();
    java.awt.Dimension var62 = var50.getSize(var61);
    var0.setSize(var61);
    java.beans.PropertyChangeListener[] var65 = var0.getPropertyChangeListeners("hi!s");
    net.sourceforge.schemaspy.ui.MainFrame var66 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var67 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var68 = var67.getTableExclusions();
    boolean var69 = var67.isEvaluateAllEnabled();
    java.util.List var70 = var67.getColumnDetails();
    var66.setIconImages(var70);
    java.awt.Toolkit var72 = var66.getToolkit();
    boolean var73 = var66.isFocused();
    int var74 = var66.getExtendedState();
    java.awt.Window.Type var75 = var66.getType();
    var0.setType(var75);
    boolean var77 = var0.isActive();
    boolean var78 = var0.isAutoRequestFocus();
    net.sourceforge.schemaspy.ui.DbConfigPanel var79 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var79.requestFocus();
    java.beans.PropertyChangeListener[] var81 = var79.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var82 = var79.getBaselineResizeBehavior();
    boolean var83 = var79.isDisplayable();
    var79.setName("");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setComponentZOrder((java.awt.Component)var79, 10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);

  }

  public void test274() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test274");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    boolean var4 = var0.isDoubleBuffered();
    boolean var5 = var0.isValid();
    boolean var6 = var0.isFocusTraversable();
    var0.revalidate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test275() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test275");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    java.lang.String var5 = var0.getSchemaSpec();
    var0.setViewsEnabled(false);
    var0.setTableInclusions("");
    var0.setSchema("{}s");
    var0.setRailsEnabled(true);
    java.lang.String var14 = var0.getServer();
    boolean var15 = var0.isRailsEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);

  }

  public void test276() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test276");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    java.awt.Window.Type var1 = var0.getType();
    var0.setFocusCycleRoot(true);
    boolean var4 = var0.isShowing();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test277() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test277");


    net.sourceforge.schemaspy.view.TextFormatter var0 = net.sourceforge.schemaspy.view.TextFormatter.getInstance();
    net.sourceforge.schemaspy.TableOrderer var1 = new net.sourceforge.schemaspy.TableOrderer();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var3 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    var3.clear();
    java.util.List var5 = net.sourceforge.schemaspy.DbAnalyzer.getRailsConstraints((java.util.Map)var3);
    java.util.Set var6 = var3.entrySet();
    net.sourceforge.schemaspy.model.Routine var16 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var17 = var16.getDataAccess();
    java.lang.String var18 = var16.getDefinitionLanguage();
    java.util.List var19 = var16.getParameters();
    java.util.List var20 = var1.getTablesOrderedByRI((java.util.Collection)var6, (java.util.Collection)var19);
    net.sourceforge.schemaspy.view.HtmlConstraintsPage var22 = net.sourceforge.schemaspy.view.HtmlConstraintsPage.getInstance();
    net.sourceforge.schemaspy.ui.MainFrame var23 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var24 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var24.requestFocus();
    var24.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var28 = var24.insets();
    var24.setAlignmentX(1.0f);
    java.awt.Color var31 = var24.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var32 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var32.requestFocus();
    var32.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var36 = var32.insets();
    float var37 = var32.getAlignmentX();
    var32.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var43 = var32.getMouseListeners();
    java.awt.Rectangle var44 = var32.bounds();
    var24.setBounds(var44);
    var23.setMaximizedBounds(var44);
    java.awt.Container var47 = var23.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var48 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var49 = var48.isManagingFocus();
    java.awt.Rectangle var50 = var48.getVisibleRect();
    var23.setBounds(var50);
    var23.hide();
    java.util.List var53 = var23.getIconImages();
    net.sourceforge.schemaspy.util.LineWriter var57 = new net.sourceforge.schemaspy.util.LineWriter("Unknown", 100, "ISO-8859-1");
    var57.writeln();
    var22.writeCheckConstraints((java.util.Collection)var53, var57);
    var57.writeln("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'");
    var0.write((java.util.Collection)var19, true, var57);
    net.sourceforge.schemaspy.model.Routine var72 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var73 = var72.getDataAccess();
    java.util.List var74 = var72.getParameters();
    net.sourceforge.schemaspy.view.WriteStats var75 = new net.sourceforge.schemaspy.view.WriteStats((java.util.Collection)var74);
    java.util.List var76 = net.sourceforge.schemaspy.DbAnalyzer.getMustBeUniqueNullableColumns((java.util.Collection)var74);
    java.lang.String var77 = net.sourceforge.schemaspy.model.ForeignKeyConstraint.toString(var76);
    net.sourceforge.schemaspy.view.WriteStats var78 = new net.sourceforge.schemaspy.view.WriteStats((java.util.Collection)var76);
    java.util.List var79 = net.sourceforge.schemaspy.DbAnalyzer.sortTablesByName(var76);
    java.util.List var80 = net.sourceforge.schemaspy.DbAnalyzer.sortTablesByName(var76);
    net.sourceforge.schemaspy.util.LineWriter var85 = new net.sourceforge.schemaspy.util.LineWriter("Unknown", 100, "ISO-8859-1");
    var0.write((java.util.Collection)var76, true, var85);
    var85.writeln("net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "a"+ "'", var18.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "hi!"+ "'", var73.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "[]"+ "'", var77.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test278() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test278");


    net.sourceforge.schemaspy.model.RoutineParameter var3 = new net.sourceforge.schemaspy.model.RoutineParameter("schemaSpy.css", "ISO-8859-1s", "hi!s{hi!s}hi!s");
    java.lang.String var4 = var3.getName();
    java.lang.String var5 = var3.getMode();
    java.lang.String var6 = var3.getMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "schemaSpy.css"+ "'", var4.equals("schemaSpy.css"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!s{hi!s}hi!s"+ "'", var5.equals("hi!s{hi!s}hi!s"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!s{hi!s}hi!s"+ "'", var6.equals("hi!s{hi!s}hi!s"));

  }

  public void test279() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test279");


    net.sourceforge.schemaspy.model.Routine var9 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var10 = var9.getDataAccess();
    java.util.List var11 = var9.getParameters();
    java.lang.String var12 = var9.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "a"+ "'", var12.equals("a"));

  }

  public void test280() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test280");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Point var5 = var0.getMousePosition(true);
    java.awt.Component var6 = var0.getNextFocusableComponent();
    java.awt.Dimension var7 = var0.getMinimumSize();
    var0.setEnabled(false);
    var0.validate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test281() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test281");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.doLayout();
    boolean var8 = var0.isCursorSet();
    java.awt.Insets var9 = var0.getInsets();
    float var10 = var0.getAlignmentX();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1.0f);

  }

  public void test282() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test282");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    net.sourceforge.schemaspy.ui.DbConfigPanel var6 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var6.requestFocus();
    var6.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var10 = var6.insets();
    var6.setAlignmentX(1.0f);
    boolean var13 = var6.hasFocus();
    boolean var14 = var6.getFocusTraversalKeysEnabled();
    boolean var15 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var6);
    net.sourceforge.schemaspy.ui.DbConfigPanel var16 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var17 = var16.isManagingFocus();
    java.awt.Rectangle var18 = var16.getVisibleRect();
    java.awt.Rectangle var19 = var6.getBounds(var18);
    java.awt.Dimension var20 = var6.getPreferredSize();
    var0.setMinimumSize(var20);
    var0.toBack();
    boolean var23 = var0.requestFocusInWindow();
    java.awt.event.MouseMotionListener[] var24 = var0.getMouseMotionListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test283() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test283");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var26 = var25.isManagingFocus();
    java.awt.Rectangle var27 = var25.getVisibleRect();
    var0.setBounds(var27);
    var0.hide();
    java.util.List var30 = var0.getIconImages();
    javax.accessibility.AccessibleContext var31 = var0.getAccessibleContext();
    boolean var32 = var0.isForegroundSet();
    net.sourceforge.schemaspy.ui.DbConfigPanel var33 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var33.requestFocus();
    java.beans.PropertyChangeListener[] var35 = var33.getPropertyChangeListeners();
    var33.paintImmediately(0, (-1), (-1), 0);
    java.awt.event.KeyListener[] var41 = var33.getKeyListeners();
    net.sourceforge.schemaspy.ui.DbConfigPanel var42 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var42.requestFocus();
    var42.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var46 = var42.insets();
    var42.setAlignmentX(1.0f);
    java.awt.Color var49 = var42.getForeground();
    var33.setForeground(var49);
    boolean var51 = var33.hasFocus();
    var0.setGlassPane((java.awt.Component)var33);
    javax.swing.InputVerifier var53 = var33.getInputVerifier();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);

  }

  public void test284() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test284");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    net.sourceforge.schemaspy.ui.DbConfigPanel var24 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var24.requestFocus();
    var24.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var28 = var24.insets();
    var24.setAlignmentX(1.0f);
    boolean var31 = var24.hasFocus();
    boolean var32 = var24.getFocusTraversalKeysEnabled();
    boolean var33 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var24);
    var24.firePropertyChange("hi!", 'a', 'a');
    net.sourceforge.schemaspy.ui.DbConfigPanel var38 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var39 = var38.isManagingFocus();
    int var40 = var38.getWidth();
    java.awt.Insets var41 = var38.insets();
    javax.accessibility.AccessibleContext var42 = var38.getAccessibleContext();
    boolean var45 = var38.inside(100, (-3));
    java.awt.Rectangle var46 = var38.getVisibleRect();
    var24.setBounds(var46);
    var0.setMaximizedBounds(var46);
    java.awt.Window[] var49 = var0.getOwnedWindows();
    net.sourceforge.schemaspy.ui.DbConfigPanel var50 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var51 = var50.isManagingFocus();
    int var52 = var50.getWidth();
    javax.swing.InputVerifier var53 = var50.getInputVerifier();
    net.sourceforge.schemaspy.ui.DbConfigPanel var54 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var54.requestFocus();
    var54.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var58 = var54.insets();
    var54.requestFocus();
    boolean var60 = var54.isVisible();
    java.awt.Dimension var61 = var54.preferredSize();
    java.awt.Dimension var62 = var50.getSize(var61);
    var0.setSize(var61);
    java.beans.PropertyChangeListener[] var65 = var0.getPropertyChangeListeners("hi!s");
    boolean var66 = var0.isShowing();
    net.sourceforge.schemaspy.ui.DbConfigPanel var67 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var67.requestFocus();
    var67.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var71 = var67.insets();
    var67.requestFocus();
    net.sourceforge.schemaspy.ui.DbConfigPanel var73 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var73.requestFocus();
    var73.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var77 = var73.insets();
    var73.requestFocus();
    var73.setOpaque(false);
    var73.invalidate();
    java.awt.event.KeyListener[] var82 = var73.getKeyListeners();
    java.awt.event.ContainerListener[] var83 = var73.getContainerListeners();
    net.sourceforge.schemaspy.ui.DbConfigPanel var84 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var84.requestFocus();
    var84.setFocusTraversalPolicyProvider(true);
    java.awt.Point var89 = var84.getMousePosition(true);
    java.awt.Component var90 = var84.getNextFocusableComponent();
    boolean var91 = var84.isBackgroundSet();
    var84.requestFocus();
    java.awt.Rectangle var93 = var84.getVisibleRect();
    java.awt.Rectangle var94 = var73.getBounds(var93);
    var67.setBounds(var94);
    var0.setMaximizedBounds(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test285() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test285");


    net.sourceforge.schemaspy.ui.DbConfigTableModel var0 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    net.sourceforge.schemaspy.util.DbSpecificConfig var2 = new net.sourceforge.schemaspy.util.DbSpecificConfig("");
    var2.dumpUsage();
    var0.setDbSpecificConfig(var2);
    net.sourceforge.schemaspy.Config var5 = var2.getConfig();
    var5.setSchemaSpec("ISO-8859-1");
    java.util.List var8 = var5.getSchemas();
    var5.setViewsEnabled(true);
    boolean var11 = var5.isHighQuality();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test286() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test286");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    java.beans.PropertyChangeListener[] var2 = var0.getPropertyChangeListeners();
    var0.paintImmediately(0, (-1), (-1), 0);
    java.awt.Font var8 = var0.getFont();
    java.awt.image.VolatileImage var11 = var0.createVolatileImage(0, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test287() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test287");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    net.sourceforge.schemaspy.ui.DbConfigPanel var6 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var6.requestFocus();
    var6.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var10 = var6.insets();
    var6.setAlignmentX(1.0f);
    boolean var13 = var6.hasFocus();
    boolean var14 = var6.getFocusTraversalKeysEnabled();
    boolean var15 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var6);
    net.sourceforge.schemaspy.ui.DbConfigPanel var16 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var17 = var16.isManagingFocus();
    java.awt.Rectangle var18 = var16.getVisibleRect();
    java.awt.Rectangle var19 = var6.getBounds(var18);
    java.awt.Dimension var20 = var6.getPreferredSize();
    var0.setMinimumSize(var20);
    var0.toBack();
    net.sourceforge.schemaspy.ui.DbConfigPanel var23 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var23.requestFocus();
    var23.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var27 = var23.insets();
    float var28 = var23.getAlignmentX();
    boolean var31 = var23.contains(1, (-1));
    var23.setOpaque(false);
    boolean var34 = var23.getInheritsPopupMenu();
    var0.setGlassPane((java.awt.Component)var23);
    net.sourceforge.schemaspy.ui.MainFrame var36 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var37 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var38 = var37.getTableExclusions();
    boolean var39 = var37.isEvaluateAllEnabled();
    java.util.List var40 = var37.getColumnDetails();
    var36.setIconImages(var40);
    boolean var42 = var36.isAlwaysOnTop();
    var36.setFocusableWindowState(true);
    boolean var45 = var36.isFocusCycleRoot();
    java.awt.Graphics var46 = var36.getGraphics();
    boolean var47 = var36.isFocusCycleRoot();
    net.sourceforge.schemaspy.ui.MainFrame var48 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var49 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var49.requestFocus();
    var49.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var53 = var49.insets();
    var49.setAlignmentX(1.0f);
    java.awt.Color var56 = var49.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var57 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var57.requestFocus();
    var57.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var61 = var57.insets();
    float var62 = var57.getAlignmentX();
    var57.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var68 = var57.getMouseListeners();
    java.awt.Rectangle var69 = var57.bounds();
    var49.setBounds(var69);
    var48.setMaximizedBounds(var69);
    java.awt.Container var72 = var48.getContentPane();
    boolean var73 = var48.isLocationByPlatform();
    net.sourceforge.schemaspy.ui.MainFrame var74 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var75 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var76 = var75.getTableExclusions();
    boolean var77 = var75.isEvaluateAllEnabled();
    java.util.List var78 = var75.getColumnDetails();
    var74.setIconImages(var78);
    boolean var80 = var74.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var81 = var74.getModalExclusionType();
    var48.setModalExclusionType(var81);
    var48.setEnabled(true);
    javax.swing.JLayeredPane var85 = var48.getLayeredPane();
    var36.setLayeredPane(var85);
    var0.setLayeredPane(var85);
    java.awt.Rectangle var88 = var0.getMaximizedBounds();
    var0.repaint(1L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);

  }

  public void test288() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test288");


    net.sourceforge.schemaspy.SchemaAnalyzer var0 = new net.sourceforge.schemaspy.SchemaAnalyzer();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    var1.setDb("a");
    java.lang.String var4 = var1.getServer();
    boolean var5 = var1.isHtmlGenerationEnabled();
    boolean var6 = var1.isMeterEnabled();
    net.sourceforge.schemaspy.model.Database var7 = var0.analyze(var1);
    var1.setHasOrphans(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test289() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test289");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    boolean var2 = var0.isEvaluateAllEnabled();
    java.lang.String var4 = var0.getParam("hi!s");
    boolean var5 = var0.isHelpRequired();
    var0.setMaxDbThreads(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test290() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test290");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.util.List var24 = var0.getIconImages();
    var0.setFocusCycleRoot(false);
    java.awt.Component var27 = var0.getFocusOwner();
    var0.setAlwaysOnTop(true);
    boolean var30 = var0.isForegroundSet();
    net.sourceforge.schemaspy.ui.MainFrame var31 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var32 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var32.requestFocus();
    var32.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var36 = var32.insets();
    var32.setAlignmentX(1.0f);
    java.awt.Color var39 = var32.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var40 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var40.requestFocus();
    var40.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var44 = var40.insets();
    float var45 = var40.getAlignmentX();
    var40.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var51 = var40.getMouseListeners();
    java.awt.Rectangle var52 = var40.bounds();
    var32.setBounds(var52);
    var31.setMaximizedBounds(var52);
    java.awt.Container var55 = var31.getContentPane();
    boolean var56 = var31.isLocationByPlatform();
    net.sourceforge.schemaspy.ui.MainFrame var57 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var58 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var59 = var58.getTableExclusions();
    boolean var60 = var58.isEvaluateAllEnabled();
    java.util.List var61 = var58.getColumnDetails();
    var57.setIconImages(var61);
    boolean var63 = var57.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var64 = var57.getModalExclusionType();
    var31.setModalExclusionType(var64);
    var31.pack();
    java.awt.Color var67 = var31.getBackground();
    var0.setBackground(var67);
    boolean var69 = var0.isAutoRequestFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);

  }

  public void test291() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test291");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var26 = var25.isManagingFocus();
    java.awt.Rectangle var27 = var25.getVisibleRect();
    var0.setBounds(var27);
    var0.repaint(1L, 10, 2, 0, 0);
    boolean var37 = var0.inside((-3), 1);
    net.sourceforge.schemaspy.ui.DbConfigPanel var38 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var38.requestFocus();
    var38.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var42 = var38.insets();
    var38.setAlignmentX(1.0f);
    var38.firePropertyChange("hi!", 10, 2);
    var38.paintImmediately(100, 10, 2, 0);
    java.util.Set var55 = var38.getFocusTraversalKeys(2);
    java.awt.Cursor var56 = var38.getCursor();
    var0.setCursor(var56);
    boolean var58 = var0.isValidateRoot();
    var0.setEnabled(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);

  }

  public void test292() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test292");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    float var5 = var0.getAlignmentX();
    net.sourceforge.schemaspy.ui.DbConfigPanel var6 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var6.requestFocus();
    var6.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var10 = var6.insets();
    var6.requestFocus();
    var6.setOpaque(false);
    javax.swing.plaf.PanelUI var14 = var6.getUI();
    var0.setUI(var14);
    var0.setFocusable(true);
    java.awt.Point var18 = var0.getLocation();
    java.awt.Container var19 = var0.getTopLevelAncestor();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test293() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test293");


    net.sourceforge.schemaspy.util.LineWriter var3 = new net.sourceforge.schemaspy.util.LineWriter("Unknown", 100, "ISO-8859-1");
    var3.write(3);
    var3.write("javax.swing.JPanel[,0,0,0x0,invalid,layout=java.awt.GridBagLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", 11, (-1));
    java.io.Writer var11 = var3.append((java.lang.CharSequence)"SchemaSpy");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test294() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test294");


    net.sourceforge.schemaspy.ui.DbConfigTableModel var0 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    var0.fireTableRowsInserted(2, 1);
    java.lang.Object var6 = var0.getValueAt(0, 100);
    javax.swing.event.TableModelListener[] var7 = var0.getTableModelListeners();
    var0.fireTableRowsUpdated(0, 3);
    var0.fireTableStructureChanged();
    var0.fireTableDataChanged();
    boolean var15 = var0.isCellEditable(312, (-3));
    net.sourceforge.schemaspy.ui.DbConfigPanel var16 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var17 = var16.isManagingFocus();
    var16.firePropertyChange("dot version 2.2.1 or versions greater than 2.4", 1.0d, (-1.0d));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setValueAt((java.lang.Object)var16, 11, 1);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test295() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test295");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.doLayout();
    boolean var8 = var0.isCursorSet();
    var0.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var13 = var0.getLocation();
    var0.removeAll();
    var0.repaint(300, 2, 2, (-1));
    boolean var20 = var0.isEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);

  }

  public void test296() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test296");


    net.sourceforge.schemaspy.model.Routine var9 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var10 = var9.getDataAccess();
    java.util.List var11 = var9.getParameters();
    net.sourceforge.schemaspy.view.WriteStats var12 = new net.sourceforge.schemaspy.view.WriteStats((java.util.Collection)var11);
    java.util.List var13 = net.sourceforge.schemaspy.DbAnalyzer.getMustBeUniqueNullableColumns((java.util.Collection)var11);
    java.util.List var14 = net.sourceforge.schemaspy.DbAnalyzer.getImpliedConstraints((java.util.Collection)var13);
    net.sourceforge.schemaspy.view.WriteStats var15 = new net.sourceforge.schemaspy.view.WriteStats((java.util.Collection)var14);
    int var16 = var15.getNumViewsWritten();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);

  }

  public void test297() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test297");


    net.sourceforge.schemaspy.ui.DbConfigTableModel var0 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    net.sourceforge.schemaspy.util.DbSpecificConfig var2 = new net.sourceforge.schemaspy.util.DbSpecificConfig("");
    var2.dumpUsage();
    var0.setDbSpecificConfig(var2);
    net.sourceforge.schemaspy.Config var5 = var2.getConfig();
    boolean var6 = var5.isViewsEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test298() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test298");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    java.awt.Component var2 = var0.getNextFocusableComponent();
    java.lang.String var3 = var0.toString();
    net.sourceforge.schemaspy.ui.DbConfigPanel var4 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var4.requestFocus();
    var4.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var8 = var4.insets();
    var4.setAlignmentX(1.0f);
    boolean var11 = var4.hasFocus();
    boolean var12 = var4.getFocusTraversalKeysEnabled();
    boolean var13 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var4);
    var4.firePropertyChange("hi!", 'a', 'a');
    boolean var18 = var4.isFocusTraversalPolicySet();
    net.sourceforge.schemaspy.ui.DbConfigPanel var19 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var19.requestFocus();
    var19.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var23 = var19.insets();
    float var24 = var19.getAlignmentX();
    var19.setBounds(0, 1, 10, 100);
    java.awt.Rectangle var30 = var19.getBounds();
    var19.setDebugGraphicsOptions(1);
    net.sourceforge.schemaspy.ui.DbConfigPanel var33 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var33.requestFocus();
    var33.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var37 = var33.insets();
    var33.setAlignmentX(1.0f);
    boolean var40 = var33.hasFocus();
    boolean var41 = var33.getFocusTraversalKeysEnabled();
    var33.setSize(1, (-1));
    boolean var46 = var33.requestFocus(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var47 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var47.requestFocus();
    java.beans.PropertyChangeListener[] var49 = var47.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var50 = var47.getBaselineResizeBehavior();
    net.sourceforge.schemaspy.ui.DbConfigPanel var51 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var51.requestFocus();
    var51.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var55 = var51.insets();
    var51.setAlignmentX(1.0f);
    var51.doLayout();
    boolean var59 = var51.isCursorSet();
    var51.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var64 = var51.getLocation();
    boolean var65 = var47.contains(var64);
    java.awt.Point var66 = var33.getLocation(var64);
    java.awt.Point var67 = var19.getLocation(var66);
    java.awt.Point var68 = var4.getLocation(var66);
    boolean var69 = var0.contains(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0var3,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var3.equals("net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0var3,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);

  }

  public void test299() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test299");


    net.sourceforge.schemaspy.util.DbSpecificOption var3 = new net.sourceforge.schemaspy.util.DbSpecificOption("ISO-8859-1s", "", "net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s");
    java.lang.String var4 = var3.getDescription();
    java.lang.String var5 = var3.getDescription();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0var4,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s"+ "'", var4.equals("net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0var4,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0var5,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s"+ "'", var5.equals("net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0var5,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s"));

  }

  public void test300() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test300");


    net.sourceforge.schemaspy.ui.DbConfigTableModel var0 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    var0.fireTableRowsInserted(2, 1);
    java.lang.Object var6 = var0.getValueAt(0, 100);
    var0.fireTableRowsDeleted(2, 0);
    var0.fireTableRowsDeleted(23, 3);
    java.lang.String var14 = var0.getColumnName(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Value"+ "'", var14.equals("Value"));

  }

  public void test301() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test301");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.doLayout();
    boolean var8 = var0.isCursorSet();
    java.awt.event.HierarchyListener[] var9 = var0.getHierarchyListeners();
    var0.setFocusTraversalKeysEnabled(true);
    net.sourceforge.schemaspy.ui.DbConfigPanel var12 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var12.requestFocus();
    var12.setFocusTraversalPolicyProvider(true);
    boolean var16 = var12.requestFocusInWindow();
    java.awt.Dimension var17 = var12.getMaximumSize();
    net.sourceforge.schemaspy.ui.DbConfigPanel var18 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var18.requestFocus();
    var18.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var22 = var18.insets();
    var18.setAlignmentX(1.0f);
    boolean var25 = var18.hasFocus();
    boolean var26 = var18.getFocusTraversalKeysEnabled();
    boolean var27 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var18);
    net.sourceforge.schemaspy.ui.DbConfigPanel var28 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var28.requestFocus();
    var28.setFocusTraversalPolicyProvider(true);
    java.awt.Point var33 = var28.getMousePosition(true);
    int var34 = var28.getComponentCount();
    int var35 = var28.getHeight();
    net.sourceforge.schemaspy.ui.DbConfigPanel var36 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var36.requestFocus();
    java.beans.PropertyChangeListener[] var38 = var36.getPropertyChangeListeners();
    var36.paintImmediately(0, (-1), (-1), 0);
    java.awt.Font var44 = var36.getFont();
    java.awt.FontMetrics var45 = var28.getFontMetrics(var44);
    java.awt.FontMetrics var46 = var18.getFontMetrics(var44);
    java.awt.FontMetrics var47 = var12.getFontMetrics(var44);
    java.awt.FontMetrics var48 = var0.getFontMetrics(var44);
    net.sourceforge.schemaspy.ui.DbConfigPanel var49 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var49.requestFocus();
    var49.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var53 = var49.insets();
    var49.setAlignmentX(1.0f);
    var49.doLayout();
    boolean var57 = var49.isCursorSet();
    var49.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var62 = var49.getLocation();
    var49.setSize(2, 10);
    java.awt.Component var68 = var49.getComponentAt(300, 300);
    boolean var69 = var0.isFocusCycleRoot((java.awt.Container)var49);
    var0.transferFocusUpCycle();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);

  }

  public void test302() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test302");


    net.sourceforge.schemaspy.util.Dot var0 = net.sourceforge.schemaspy.util.Dot.getInstance();
    var0.setHighQuality(true);
    net.sourceforge.schemaspy.util.Dot.DotFailure var4 = var0.new DotFailure("hi!s");
    var0.setHighQuality(true);
    boolean var7 = var0.supportsCenteredEastWestEdges();
    var0.setFormat("hi!");
    java.lang.String var10 = var0.getSupportedVersions();
    java.lang.String var11 = var0.getRenderer();
    var0.setFormat("ISO-8859-1");
    var0.setFormat("Password associated with user id");
    boolean var16 = var0.requiresGdRenderer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "dot version 2.2.1 or versions greater than 2.4"+ "'", var10.equals("dot version 2.2.1 or versions greater than 2.4"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test303() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test303");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    boolean var7 = var0.hasFocus();
    boolean var8 = var0.getFocusTraversalKeysEnabled();
    boolean var9 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var0);
    var0.firePropertyChange("hi!", 'a', 'a');
    java.awt.Component var16 = var0.getComponentAt((-3), 431);
    java.awt.Component var19 = var0.findComponentAt(1, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test304() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test304");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.doLayout();
    boolean var8 = var0.isCursorSet();
    var0.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var13 = var0.getLocation();
    var0.setSize(2, 10);
    java.awt.Component var19 = var0.getComponentAt(300, 300);
    var0.nextFocus();
    java.awt.Point var21 = var0.getMousePosition();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test305() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test305");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.firePropertyChange("hi!", 10, 2);
    var0.paintImmediately(100, 10, 2, 0);
    java.util.Set var17 = var0.getFocusTraversalKeys(2);
    java.util.List var18 = net.sourceforge.schemaspy.DbAnalyzer.getTablesWithoutIndexes((java.util.Collection)var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test306() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test306");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Point var5 = var0.getMousePosition(true);
    int var6 = var0.getComponentCount();
    boolean var7 = var0.getVerifyInputWhenFocusTarget();
    net.sourceforge.schemaspy.ui.DbConfigPanel var8 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var8.requestFocus();
    var8.setFocusTraversalPolicyProvider(true);
    java.util.Locale var12 = javax.swing.JComponent.getDefaultLocale();
    var8.setLocale(var12);
    var0.setLocale(var12);
    boolean var15 = var0.isDoubleBuffered();
    net.sourceforge.schemaspy.ui.MainFrame var16 = new net.sourceforge.schemaspy.ui.MainFrame();
    java.awt.Window.Type var17 = var16.getType();
    var16.hide();
    var16.firePropertyChange("schemaSpy.css", '4', '#');
    net.sourceforge.schemaspy.ui.MainFrame var23 = new net.sourceforge.schemaspy.ui.MainFrame();
    java.awt.Window.Type var24 = var23.getType();
    java.awt.Component var25 = var23.getMostRecentFocusOwner();
    net.sourceforge.schemaspy.ui.DbConfigPanel var26 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var26.requestFocus();
    var26.setFocusTraversalPolicyProvider(true);
    boolean var30 = var26.requestFocusInWindow();
    java.awt.Cursor var31 = var26.getCursor();
    java.awt.Point var32 = var26.location();
    java.awt.Point var33 = var25.getLocation(var32);
    var16.setLocation(var32);
    java.awt.Component var35 = var0.findComponentAt(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);

  }

  public void test307() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test307");


    net.sourceforge.schemaspy.util.Inflection var1 = new net.sourceforge.schemaspy.util.Inflection("[]");

  }

  public void test308() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test308");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    net.sourceforge.schemaspy.ui.DbConfigPanel var24 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var24.requestFocus();
    var24.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var28 = var24.insets();
    var24.setAlignmentX(1.0f);
    boolean var31 = var24.hasFocus();
    boolean var32 = var24.getFocusTraversalKeysEnabled();
    boolean var33 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var24);
    var24.firePropertyChange("hi!", 'a', 'a');
    net.sourceforge.schemaspy.ui.DbConfigPanel var38 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var39 = var38.isManagingFocus();
    int var40 = var38.getWidth();
    java.awt.Insets var41 = var38.insets();
    javax.accessibility.AccessibleContext var42 = var38.getAccessibleContext();
    boolean var45 = var38.inside(100, (-3));
    java.awt.Rectangle var46 = var38.getVisibleRect();
    var24.setBounds(var46);
    var0.setMaximizedBounds(var46);
    java.awt.event.ComponentListener[] var49 = var0.getComponentListeners();
    int var50 = var0.getCursorType();
    java.awt.Graphics var51 = var0.getGraphics();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);

  }

  public void test309() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test309");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.firePropertyChange("ISO-8859-1", 0L, (-1L));
    java.awt.Color var6 = var0.getBackground();
    var0.firePropertyChange("java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)", '#', ' ');
    boolean var13 = var0.contains((-3), 300);
    var0.setVisible(false);
    net.sourceforge.schemaspy.ui.MainFrame var16 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var17 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var18 = var17.getTableExclusions();
    boolean var19 = var17.isEvaluateAllEnabled();
    java.util.List var20 = var17.getColumnDetails();
    var16.setIconImages(var20);
    boolean var22 = var16.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var23 = var16.getModalExclusionType();
    boolean var24 = var16.isAutoRequestFocus();
    java.awt.Toolkit var25 = var16.getToolkit();
    var16.hide();
    net.sourceforge.schemaspy.ui.DbConfigPanel var27 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var27.requestFocus();
    java.beans.PropertyChangeListener[] var29 = var27.getPropertyChangeListeners();
    var27.paintImmediately(0, (-1), (-1), 0);
    java.awt.event.KeyListener[] var35 = var27.getKeyListeners();
    var27.setLocation(100, (-1));
    net.sourceforge.schemaspy.ui.MainFrame var39 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var40 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var40.requestFocus();
    var40.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var44 = var40.insets();
    var40.setAlignmentX(1.0f);
    java.awt.Color var47 = var40.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var48 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var48.requestFocus();
    var48.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var52 = var48.insets();
    float var53 = var48.getAlignmentX();
    var48.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var59 = var48.getMouseListeners();
    java.awt.Rectangle var60 = var48.bounds();
    var40.setBounds(var60);
    var39.setMaximizedBounds(var60);
    net.sourceforge.schemaspy.ui.DbConfigPanel var63 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var63.requestFocus();
    var63.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var67 = var63.insets();
    var63.setAlignmentX(1.0f);
    boolean var70 = var63.hasFocus();
    boolean var71 = var63.getFocusTraversalKeysEnabled();
    boolean var72 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var63);
    var63.firePropertyChange("hi!", 'a', 'a');
    net.sourceforge.schemaspy.ui.DbConfigPanel var77 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var78 = var77.isManagingFocus();
    int var79 = var77.getWidth();
    java.awt.Insets var80 = var77.insets();
    javax.accessibility.AccessibleContext var81 = var77.getAccessibleContext();
    boolean var84 = var77.inside(100, (-3));
    java.awt.Rectangle var85 = var77.getVisibleRect();
    var63.setBounds(var85);
    var39.setMaximizedBounds(var85);
    java.awt.Rectangle var88 = var27.getBounds(var85);
    var16.setMaximizedBounds(var88);
    var0.repaint(var88);
    var0.transferFocusUpCycle();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test310() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test310");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    boolean var4 = var0.requestFocusInWindow();
    net.sourceforge.schemaspy.ui.DbConfigPanel var5 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var5.requestFocus();
    java.beans.PropertyChangeListener[] var7 = var5.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var8 = var5.getBaselineResizeBehavior();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    var9.setAlignmentX(1.0f);
    var9.doLayout();
    boolean var17 = var9.isCursorSet();
    var9.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var22 = var9.getLocation();
    boolean var23 = var5.contains(var22);
    java.awt.Component var24 = var0.findComponentAt(var22);
    var0.firePropertyChange("a", '4', '#');
    net.sourceforge.schemaspy.ui.DbConfigPanel var29 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var29.requestFocus();
    var29.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var33 = var29.insets();
    var29.requestFocus();
    var29.doLayout();
    var29.firePropertyChange("hi!", 0.0d, 10.0d);
    java.awt.Component var40 = var29.getNextFocusableComponent();
    java.awt.Rectangle var41 = var29.bounds();
    java.awt.Rectangle var42 = var0.getBounds(var41);
    java.awt.Dimension var43 = var0.size();
    javax.swing.JPopupMenu var44 = var0.getComponentPopupMenu();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);

  }

  public void test311() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test311");


    net.sourceforge.schemaspy.util.CaseInsensitiveMap var1 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.Set var2 = var1.entrySet();
    java.util.Set var3 = var1.entrySet();
    java.lang.Object var4 = var1.clone();
    net.sourceforge.schemaspy.model.Routine var14 = new net.sourceforge.schemaspy.model.Routine("", "hi!", "a", "", "", false, "", "hi!", "");
    boolean var15 = var14.isDeterministic();
    java.lang.String var16 = var14.getName();
    java.lang.String var17 = var14.getDefinitionLanguage();
    java.lang.String var18 = var14.getName();
    java.util.List var19 = var14.getParameters();
    java.util.List var20 = net.sourceforge.schemaspy.DbAnalyzer.sortColumnsByTable(var19);
    boolean var21 = var1.containsValue((java.lang.Object)var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + ""+ "'", var16.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + ""+ "'", var17.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + ""+ "'", var18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test312() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test312");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    net.sourceforge.schemaspy.ui.DbConfigPanel var6 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var6.requestFocus();
    var6.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var10 = var6.insets();
    var6.setAlignmentX(1.0f);
    boolean var13 = var6.hasFocus();
    boolean var14 = var6.getFocusTraversalKeysEnabled();
    boolean var15 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var6);
    net.sourceforge.schemaspy.ui.DbConfigPanel var16 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var17 = var16.isManagingFocus();
    java.awt.Rectangle var18 = var16.getVisibleRect();
    java.awt.Rectangle var19 = var6.getBounds(var18);
    java.awt.Dimension var20 = var6.getPreferredSize();
    var0.setMinimumSize(var20);
    javax.swing.TransferHandler var22 = var0.getTransferHandler();
    java.awt.event.WindowListener[] var23 = var0.getWindowListeners();
    boolean var24 = var0.isForegroundSet();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var25.requestFocus();
    var25.setFocusTraversalPolicyProvider(true);
    var25.firePropertyChange("a", (byte)10, (byte)0);
    java.awt.Insets var33 = var25.insets();
    var25.setAlignmentY(100.0f);
    java.lang.Object var36 = var25.getTreeLock();
    net.sourceforge.schemaspy.ui.MainFrame var37 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var38 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var38.requestFocus();
    var38.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var42 = var38.insets();
    var38.setAlignmentX(1.0f);
    java.awt.Color var45 = var38.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var46 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var46.requestFocus();
    var46.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var50 = var46.insets();
    float var51 = var46.getAlignmentX();
    var46.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var57 = var46.getMouseListeners();
    java.awt.Rectangle var58 = var46.bounds();
    var38.setBounds(var58);
    var37.setMaximizedBounds(var58);
    java.util.List var61 = var37.getIconImages();
    java.awt.Rectangle var62 = var37.getMaximizedBounds();
    java.awt.Rectangle var63 = var25.getBounds(var62);
    var0.setBounds(var63);
    java.awt.FocusTraversalPolicy var65 = var0.getFocusTraversalPolicy();
    boolean var66 = var0.isShowing();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);

  }

  public void test313() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test313");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var7 = var0.getModalExclusionType();
    boolean var8 = var0.isAutoRequestFocus();
    java.awt.Toolkit var9 = var0.getToolkit();
    var0.hide();
    net.sourceforge.schemaspy.ui.DbConfigPanel var11 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var11.requestFocus();
    var11.setFocusTraversalPolicyProvider(true);
    boolean var15 = var11.requestFocusInWindow();
    java.awt.Dimension var16 = var11.getMaximumSize();
    var0.setPreferredSize(var16);
    net.sourceforge.schemaspy.ui.DbConfigPanel var18 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var18.requestFocus();
    var18.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var22 = var18.insets();
    var18.setAlignmentX(1.0f);
    boolean var25 = var18.hasFocus();
    net.sourceforge.schemaspy.ui.DbConfigPanel var26 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var26.requestFocus();
    var26.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var30 = var26.insets();
    float var31 = var26.getAlignmentX();
    var26.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var37 = var26.getMouseListeners();
    boolean var38 = var18.isAncestorOf((java.awt.Component)var26);
    java.awt.im.InputMethodRequests var39 = var26.getInputMethodRequests();
    net.sourceforge.schemaspy.ui.DbConfigPanel var40 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var40.requestFocus();
    var40.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var44 = var40.insets();
    var40.setAlignmentX(1.0f);
    var40.doLayout();
    boolean var48 = var40.isCursorSet();
    var40.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var53 = var40.getLocation();
    java.awt.Component var54 = var26.findComponentAt(var53);
    boolean var55 = var26.getIgnoreRepaint();
    java.awt.Insets var56 = var26.getInsets();
    var0.setGlassPane((java.awt.Component)var26);
    boolean var59 = var26.areFocusTraversalKeysSet(0);
    boolean var60 = var26.isOptimizedDrawingEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);

  }

  public void test314() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test314");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    var0.setFocusableWindowState(true);
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    boolean var17 = var9.contains(1, (-1));
    var9.transferFocus();
    var9.removeAll();
    java.awt.Component var21 = var0.add((java.awt.Component)var9, 0);
    boolean var22 = var0.isVisible();
    boolean var23 = var0.isResizable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);

  }

  public void test315() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test315");


    net.sourceforge.schemaspy.util.CaseInsensitiveMap var1 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    var1.clear();
    java.util.List var3 = net.sourceforge.schemaspy.DbAnalyzer.getRailsConstraints((java.util.Map)var1);
    java.util.Set var4 = var1.entrySet();
    net.sourceforge.schemaspy.Config var5 = new net.sourceforge.schemaspy.Config();
    var5.setDb("a");
    java.lang.String var8 = var5.getServer();
    boolean var9 = var5.isHtmlGenerationEnabled();
    java.lang.String var10 = var5.getSchemaSpec();
    var5.setViewsEnabled(false);
    boolean var13 = var1.containsValue((java.lang.Object)false);
    java.util.Set var14 = var1.keySet();
    net.sourceforge.schemaspy.util.Dot var15 = net.sourceforge.schemaspy.util.Dot.getInstance();
    var15.setHighQuality(true);
    net.sourceforge.schemaspy.util.Dot.DotFailure var19 = var15.new DotFailure("hi!s");
    var15.setHighQuality(true);
    boolean var22 = var15.supportsCenteredEastWestEdges();
    var15.setFormat("hi!");
    java.lang.String var25 = var15.getSupportedVersions();
    java.lang.String var26 = var15.getRenderer();
    var15.setFormat("ISO-8859-1");
    var15.setFormat("Password associated with user id");
    boolean var31 = var1.containsKey((java.lang.Object)"Password associated with user id");
    boolean var32 = var1.isEmpty();
    java.util.Set var33 = var1.entrySet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "dot version 2.2.1 or versions greater than 2.4"+ "'", var25.equals("dot version 2.2.1 or versions greater than 2.4"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + ""+ "'", var26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test316() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test316");


    net.sourceforge.schemaspy.util.DbSpecificOption var2 = new net.sourceforge.schemaspy.util.DbSpecificOption("", "ISO-8859-1");
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.getDescription();
    java.lang.Object var5 = var2.getValue();
    net.sourceforge.schemaspy.ui.MainFrame var6 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var7 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var8 = var7.getTableExclusions();
    boolean var9 = var7.isEvaluateAllEnabled();
    java.util.List var10 = var7.getColumnDetails();
    var6.setIconImages(var10);
    boolean var12 = var6.isAlwaysOnTop();
    var6.setFocusableWindowState(true);
    java.awt.Window[] var15 = var6.getOwnedWindows();
    java.awt.Component var16 = var6.getMostRecentFocusOwner();
    var2.setValue((java.lang.Object)var6);
    java.util.List var18 = var6.getIconImages();
    var6.setExtendedState(312);
    var6.setLocation(0, 5);
    java.awt.Dimension var24 = var6.getMinimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"+ "'", var3.equals("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ISO-8859-1"+ "'", var4.equals("ISO-8859-1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test317() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test317");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    java.lang.Integer var2 = var0.getPort();
    var0.setConnectionProperties("a");
    boolean var5 = var0.isSingleSignOn();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test318() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test318");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    java.beans.PropertyChangeListener[] var2 = var0.getPropertyChangeListeners();
    var0.paintImmediately(0, (-1), (-1), 0);
    var0.firePropertyChange("/Users/Jesh/Documents/School/Summer 2015/Independent Study/Eclipse/workspace/36_schemaspy/bin", ' ', ' ');
    net.sourceforge.schemaspy.ui.MainFrame var12 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var13 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var13.requestFocus();
    var13.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var17 = var13.insets();
    var13.setAlignmentX(1.0f);
    java.awt.Color var20 = var13.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var21 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var21.requestFocus();
    var21.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var25 = var21.insets();
    float var26 = var21.getAlignmentX();
    var21.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var32 = var21.getMouseListeners();
    java.awt.Rectangle var33 = var21.bounds();
    var13.setBounds(var33);
    var12.setMaximizedBounds(var33);
    java.awt.Container var36 = var12.getContentPane();
    boolean var37 = var12.isLocationByPlatform();
    net.sourceforge.schemaspy.ui.MainFrame var38 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var39 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var40 = var39.getTableExclusions();
    boolean var41 = var39.isEvaluateAllEnabled();
    java.util.List var42 = var39.getColumnDetails();
    var38.setIconImages(var42);
    boolean var44 = var38.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var45 = var38.getModalExclusionType();
    var12.setModalExclusionType(var45);
    var12.pack();
    var12.setFocusableWindowState(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var50 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var50.requestFocus();
    var50.setFocusTraversalPolicyProvider(true);
    boolean var54 = var50.requestFocusInWindow();
    net.sourceforge.schemaspy.ui.DbConfigPanel var55 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var55.requestFocus();
    java.beans.PropertyChangeListener[] var57 = var55.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var58 = var55.getBaselineResizeBehavior();
    net.sourceforge.schemaspy.ui.DbConfigPanel var59 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var59.requestFocus();
    var59.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var63 = var59.insets();
    var59.setAlignmentX(1.0f);
    var59.doLayout();
    boolean var67 = var59.isCursorSet();
    var59.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var72 = var59.getLocation();
    boolean var73 = var55.contains(var72);
    java.awt.Component var74 = var50.findComponentAt(var72);
    var50.setOpaque(true);
    net.sourceforge.schemaspy.ui.DbConfigPanel var77 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var77.requestFocus();
    var77.setFocusTraversalPolicyProvider(true);
    java.awt.Point var82 = var77.getMousePosition(true);
    int var83 = var77.getComponentCount();
    int var84 = var77.getHeight();
    var77.setName("hi!s");
    net.sourceforge.schemaspy.ui.DbConfigPanel var87 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var87.requestFocus();
    var87.setFocusTraversalPolicyProvider(true);
    java.awt.Point var92 = var87.getMousePosition(true);
    java.awt.Component var93 = var87.getNextFocusableComponent();
    java.awt.Dimension var94 = var87.getMinimumSize();
    var77.setSize(var94);
    var50.resize(var94);
    var12.setSize(var94);
    var0.setSize(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test319() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test319");


    net.sourceforge.schemaspy.util.PasswordReader var0 = net.sourceforge.schemaspy.util.PasswordReader.getInstance();
    net.sourceforge.schemaspy.view.StyleSheet.MissingCssPropertyException var4 = new net.sourceforge.schemaspy.view.StyleSheet.MissingCssPropertyException("", "hi!");
    net.sourceforge.schemaspy.model.ConnectionFailure var5 = new net.sourceforge.schemaspy.model.ConnectionFailure("", (java.lang.Throwable)var4);
    net.sourceforge.schemaspy.view.StyleSheet.ParseException var6 = new net.sourceforge.schemaspy.view.StyleSheet.ParseException((java.lang.Exception)var5);
    net.sourceforge.schemaspy.util.PasswordReader.IOError var7 = var0.new IOError((java.lang.Throwable)var6);
    net.sourceforge.schemaspy.Config.MissingRequiredParameterException var11 = new net.sourceforge.schemaspy.Config.MissingRequiredParameterException("hi!", "ISO-8859-1", false);
    net.sourceforge.schemaspy.util.PasswordReader.IOError var12 = var0.new IOError((java.lang.Throwable)var11);
    net.sourceforge.schemaspy.view.StyleSheet.ParseException var14 = new net.sourceforge.schemaspy.view.StyleSheet.ParseException("java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)");
    net.sourceforge.schemaspy.view.StyleSheet.ParseException var15 = new net.sourceforge.schemaspy.view.StyleSheet.ParseException((java.lang.Exception)var14);
    net.sourceforge.schemaspy.util.PasswordReader.IOError var16 = var0.new IOError((java.lang.Throwable)var14);
    net.sourceforge.schemaspy.ui.DbConfigTableModel var18 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    var18.fireTableRowsInserted(2, 1);
    java.lang.Object var24 = var18.getValueAt(0, 100);
    var18.fireTableRowsDeleted(2, 0);
    javax.swing.event.TableModelListener[] var28 = var18.getTableModelListeners();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      char[] var29 = var0.readPassword("a", (java.lang.Object[])var28);
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test320() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test320");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var1 = var0.isManagingFocus();
    int var2 = var0.getWidth();
    java.awt.Insets var3 = var0.insets();
    javax.accessibility.AccessibleContext var4 = var0.getAccessibleContext();
    boolean var7 = var0.inside(100, (-3));
    var0.grabFocus();
    java.awt.Rectangle var9 = var0.bounds();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test321() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test321");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    boolean var7 = var0.hasFocus();
    net.sourceforge.schemaspy.ui.DbConfigPanel var8 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var8.requestFocus();
    var8.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var12 = var8.insets();
    float var13 = var8.getAlignmentX();
    var8.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var19 = var8.getMouseListeners();
    boolean var20 = var0.isAncestorOf((java.awt.Component)var8);
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.event.ComponentListener[] var23 = var0.getComponentListeners();
    javax.swing.InputVerifier var24 = var0.getInputVerifier();
    java.beans.VetoableChangeListener[] var25 = var0.getVetoableChangeListeners();
    java.awt.im.InputMethodRequests var26 = var0.getInputMethodRequests();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test322() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test322");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    boolean var2 = var0.isEvaluateAllEnabled();
    boolean var3 = var0.isEncodeCommentsEnabled();
    boolean var4 = var0.isRankDirBugEnabled();
    var0.setHtmlGenerationEnabled(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test323() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test323");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    float var5 = var0.getAlignmentX();
    var0.firePropertyChange("net.sourceforge.schemaspy.ui.MainFrame[frame0,0,23,500x431,invalid,hidden,layout=java.awt.BorderLayout,title=SchemaSpy,resizable,normal,defaultCloseOperation=HIDE_ON_CLOSE,rootPane=javax.swing.JRootPane[,0,0,0x0,invalid,layout=javax.swing.JRootPane$RootLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777673,maximumSize=,minimumSize=,preferredSize=],rootPaneCheckingEnabled=true]", 1.0f, 100.0f);
    java.awt.Color var10 = var0.getForeground();
    java.awt.Graphics var11 = var0.getGraphics();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test324() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test324");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    boolean var1 = var0.isImpliedConstraintsEnabled();
    var0.setHasOrphans(false);
    java.lang.String var4 = var0.getSchemaSpec();
    boolean var5 = var0.isHighQuality();
    java.lang.String var6 = var0.getRenderer();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));

  }

  public void test325() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test325");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    java.lang.String var2 = var0.getCharset();
    var0.setRailsEnabled(false);
    boolean var5 = var0.isViewsEnabled();
    boolean var6 = var0.hasOrphans();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ISO-8859-1"+ "'", var2.equals("ISO-8859-1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test326() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test326");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var1 = var0.isManagingFocus();
    int var2 = var0.getWidth();
    java.awt.Point var3 = var0.getMousePosition();
    var0.repaint();
    boolean var5 = var0.isDoubleBuffered();
    boolean var6 = var0.isMinimumSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test327() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test327");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    boolean var25 = var0.isLocationByPlatform();
    java.awt.Dimension var26 = var0.getSize();
    boolean var27 = var0.isLightweight();
    java.awt.image.BufferStrategy var28 = var0.getBufferStrategy();
    net.sourceforge.schemaspy.ui.DbConfigPanel var29 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var29.requestFocus();
    var29.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var33 = var29.insets();
    var29.setAlignmentX(1.0f);
    var29.doLayout();
    boolean var37 = var29.isCursorSet();
    var29.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var42 = var29.getLocation();
    var29.removeAll();
    net.sourceforge.schemaspy.ui.DbConfigPanel var44 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var44.requestFocus();
    var44.setFocusTraversalPolicyProvider(true);
    javax.swing.event.AncestorListener[] var48 = var44.getAncestorListeners();
    var44.paintImmediately(1, 0, 0, (-1));
    java.awt.ComponentOrientation var54 = var44.getComponentOrientation();
    var29.applyComponentOrientation(var54);
    var0.applyComponentOrientation(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test328() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test328");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    boolean var7 = var0.isOpaque();
    var0.pack();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setOpacity(0.5f);
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);

  }

  public void test329() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test329");


    java.lang.String var1 = net.sourceforge.schemaspy.util.Inflection.singularize("Password associated with user id");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "Password associated with user id"+ "'", var1.equals("Password associated with user id"));

  }

  public void test330() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test330");


    net.sourceforge.schemaspy.view.StyleSheet.ParseException var2 = new net.sourceforge.schemaspy.view.StyleSheet.ParseException("java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)");
    net.sourceforge.schemaspy.view.StyleSheet.ParseException var3 = new net.sourceforge.schemaspy.view.StyleSheet.ParseException((java.lang.Exception)var2);
    net.sourceforge.schemaspy.model.ProcessExecutionException var4 = new net.sourceforge.schemaspy.model.ProcessExecutionException("ora", (java.lang.Throwable)var3);

  }

  public void test331() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test331");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    boolean var25 = var0.isLocationByPlatform();
    java.awt.Container var26 = var0.getFocusCycleRootAncestor();
    java.util.Locale var27 = var0.getLocale();
    javax.swing.JComponent.setDefaultLocale(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test332() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test332");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Point var5 = var0.getMousePosition(true);
    int var6 = var0.getComponentCount();
    int var7 = var0.getHeight();
    var0.setName("hi!s");
    java.awt.Color var10 = var0.getBackground();
    var0.revalidate();
    net.sourceforge.schemaspy.ui.DbConfigPanel var12 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var12.setFocusable(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var15 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var15.requestFocus();
    var15.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var19 = var15.insets();
    var15.setAlignmentX(1.0f);
    boolean var22 = var15.hasFocus();
    boolean var23 = var15.getFocusTraversalKeysEnabled();
    var15.setSize(1, (-1));
    java.lang.Object var27 = var12.getClientProperty((java.lang.Object)var15);
    var15.firePropertyChange("net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s", ' ', ' ');
    var15.repaint(1L);
    boolean var34 = var15.isFocusOwner();
    net.sourceforge.schemaspy.ui.MainFrame var35 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var36 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var36.requestFocus();
    var36.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var40 = var36.insets();
    var36.setAlignmentX(1.0f);
    java.awt.Color var43 = var36.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var44 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var44.requestFocus();
    var44.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var48 = var44.insets();
    float var49 = var44.getAlignmentX();
    var44.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var55 = var44.getMouseListeners();
    java.awt.Rectangle var56 = var44.bounds();
    var36.setBounds(var56);
    var35.setMaximizedBounds(var56);
    java.awt.Container var59 = var35.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var60 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var61 = var60.isManagingFocus();
    java.awt.Rectangle var62 = var60.getVisibleRect();
    var35.setBounds(var62);
    var35.hide();
    java.util.List var65 = var35.getIconImages();
    var35.resize(2, 0);
    net.sourceforge.schemaspy.ui.DbConfigPanel var69 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var69.requestFocus();
    var69.setFocusTraversalPolicyProvider(true);
    javax.swing.event.AncestorListener[] var73 = var69.getAncestorListeners();
    var69.paintImmediately(1, 0, 0, (-1));
    java.awt.ComponentOrientation var79 = var69.getComponentOrientation();
    var35.applyComponentOrientation(var79);
    var15.setComponentOrientation(var79);
    var0.applyComponentOrientation(var79);
    java.awt.Component var83 = var0.getNextFocusableComponent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);

  }

  public void test333() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test333");


    net.sourceforge.schemaspy.model.Routine var9 = new net.sourceforge.schemaspy.model.Routine("4", "net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", "[]", "{}", "4", true, "ISO-8859-1s", "{}s", "Unknown");
    java.lang.String var10 = var9.getReturnType();
    java.lang.String var11 = var9.getName();
    java.lang.String var12 = var9.getDefinitionLanguage();
    java.lang.String var13 = var9.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "[]"+ "'", var10.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "4"+ "'", var11.equals("4"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "{}"+ "'", var12.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0var13,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var13.equals("net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0var13,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));

  }

  public void test334() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test334");


    net.sourceforge.schemaspy.view.HtmlConstraintsPage var0 = net.sourceforge.schemaspy.view.HtmlConstraintsPage.getInstance();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var2 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.Set var3 = var2.entrySet();
    int var4 = var2.size();
    java.util.Set var5 = var2.keySet();
    net.sourceforge.schemaspy.util.LineWriter var9 = new net.sourceforge.schemaspy.util.LineWriter("Unknown", 100, "ISO-8859-1");
    var9.writeln();
    var9.writeln();
    java.io.Writer var13 = var9.append((java.lang.CharSequence)"net.sourceforge.schemaspy.view.StyleSheet$MissingCssPropertyException: Required property 'hi!' was not found for the definition of '' in schemaSpy.css");
    var9.write("{}");
    var9.newLine();
    var0.writeCheckConstraints((java.util.Collection)var5, var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test335() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test335");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    var0.transferFocusBackward();
    java.awt.event.MouseListener[] var5 = var0.getMouseListeners();
    java.awt.event.MouseListener[] var6 = var0.getMouseListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test336() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test336");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    boolean var7 = var0.hasFocus();
    boolean var8 = var0.getFocusTraversalKeysEnabled();
    var0.setSize(1, (-1));
    java.awt.image.VolatileImage var14 = var0.createVolatileImage(1, (-3));
    javax.swing.event.AncestorListener[] var15 = var0.getAncestorListeners();
    var0.reshape(2, 2, 0, 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test337() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test337");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.firePropertyChange("hi!", 10, 2);
    var0.paintImmediately(100, 10, 2, 0);
    java.util.Set var17 = var0.getFocusTraversalKeys(2);
    java.awt.Cursor var18 = var0.getCursor();
    int var21 = var0.getBaseline(5, 100);
    java.awt.Container var22 = var0.getTopLevelAncestor();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test338() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test338");


    net.sourceforge.schemaspy.ui.DbConfigTableModel var0 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    var0.fireTableRowsInserted(2, 1);
    java.lang.Class var5 = var0.getClass(3);
    var0.fireTableCellUpdated(5, 312);
    var0.fireTableRowsInserted(23, (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test339() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test339");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.doLayout();
    boolean var8 = var0.isCursorSet();
    var0.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var13 = var0.getLocation();
    var0.setSize(2, 10);
    var0.grabFocus();
    java.awt.Color var18 = var0.getForeground();
    var0.hide();
    net.sourceforge.schemaspy.util.DbSpecificConfig var21 = new net.sourceforge.schemaspy.util.DbSpecificConfig("net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory).hi!. ");
    java.util.List var22 = var21.getOptions();
    net.sourceforge.schemaspy.ui.DbConfigPanel var23 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var23.requestFocus();
    var23.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var27 = var23.insets();
    float var28 = var23.getAlignmentX();
    boolean var31 = var23.contains(1, (-1));
    var23.transferFocus();
    var23.removeAll();
    var0.putClientProperty((java.lang.Object)var22, (java.lang.Object)var23);
    java.awt.LayoutManager var35 = var23.getLayout();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test340() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test340");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var7 = var0.getModalExclusionType();
    boolean var8 = var0.isAutoRequestFocus();
    boolean var9 = var0.isResizable();
    net.sourceforge.schemaspy.ui.DbConfigPanel var10 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var10.requestFocus();
    var10.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var14 = var10.insets();
    var10.setAlignmentX(1.0f);
    java.awt.Color var17 = var10.getForeground();
    var0.setForeground(var17);
    var0.setBounds((-3), 5, 0, 100);
    java.awt.Font var24 = var0.getFont();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }

  public void test341() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test341");


    net.sourceforge.schemaspy.ui.DbConfigTableModel var0 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    int var2 = var0.findColumn("a");
    net.sourceforge.schemaspy.util.DbSpecificConfig var4 = new net.sourceforge.schemaspy.util.DbSpecificConfig("net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    var0.setDbSpecificConfig(var4);
    javax.swing.event.TableModelListener[] var6 = var0.getTableModelListeners();
    int var7 = var0.getColumnCount();
    var0.fireTableDataChanged();
    int var9 = var0.getColumnCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2);

  }

  public void test342() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test342");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.doLayout();
    boolean var8 = var0.isCursorSet();
    java.awt.Insets var9 = var0.getInsets();
    var0.paintImmediately(3, 100, 300, 5);
    int var17 = var0.getBaseline(300, 0);
    java.awt.event.InputMethodListener[] var18 = var0.getInputMethodListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test343() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test343");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    boolean var5 = var0.isImpliedConstraintsEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test344() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test344");


    net.sourceforge.schemaspy.model.InvalidConfigurationException var1 = new net.sourceforge.schemaspy.model.InvalidConfigurationException("");

  }

  public void test345() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test345");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    javax.swing.event.AncestorListener[] var4 = var0.getAncestorListeners();
    var0.paintImmediately(1, 0, 0, (-1));
    java.awt.ComponentOrientation var10 = var0.getComponentOrientation();
    java.awt.event.ComponentListener[] var11 = var0.getComponentListeners();
    var0.hide();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test346() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test346");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.requestFocus();
    boolean var6 = var0.isVisible();
    var0.hide();
    java.awt.Dimension var8 = var0.getPreferredSize();
    java.awt.Component var11 = var0.locate((-3), (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test347() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test347");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    boolean var4 = var0.requestFocusInWindow();
    java.util.Locale var5 = var0.getLocale();
    boolean var6 = var0.requestFocusInWindow();
    java.awt.Dimension var7 = var0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test348() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test348");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    var0.setRankDirBugEnabled(true);
    java.lang.String var4 = var0.getServer();
    var0.setEncodeCommentsEnabled(true);
    boolean var7 = var0.hasRoutines();
    var0.setPromptForPasswordEnabled(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test349() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test349");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    java.awt.Window.Type var1 = var0.getType();
    var0.hide();
    var0.firePropertyChange("schemaSpy.css", '4', '#');
    boolean var7 = var0.isAutoRequestFocus();
    var0.setState((-3));
    boolean var10 = var0.isAlwaysOnTopSupported();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test350() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test350");


    net.sourceforge.schemaspy.util.CaseInsensitiveMap var1 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.List var2 = net.sourceforge.schemaspy.DbAnalyzer.getRailsConstraints((java.util.Map)var1);
    java.util.Set var3 = var1.keySet();
    java.lang.Object var4 = var1.clone();
    java.util.Set var5 = var1.entrySet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test351() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test351");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.requestFocus();
    var0.doLayout();
    var0.firePropertyChange("hi!", 0.0d, 10.0d);
    java.awt.Component var11 = var0.getNextFocusableComponent();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var14 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.Set var15 = var14.entrySet();
    java.util.Set var16 = var14.entrySet();
    java.util.List var17 = net.sourceforge.schemaspy.DbAnalyzer.getMustBeUniqueNullableColumns((java.util.Collection)var16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setFocusTraversalKeys(431, var16);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test352() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test352");


    net.sourceforge.schemaspy.model.Routine var9 = new net.sourceforge.schemaspy.model.Routine("", "hi!", "a", "", "", false, "", "hi!", "");
    java.lang.String var10 = var9.getDefinition();
    net.sourceforge.schemaspy.model.Routine var20 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var21 = var20.getDataAccess();
    java.lang.String var22 = var20.getDefinitionLanguage();
    int var23 = var9.compareTo(var20);
    net.sourceforge.schemaspy.model.RoutineParameter var27 = new net.sourceforge.schemaspy.model.RoutineParameter("ISO-8859-1s", "hi!", "");
    var20.addParameter(var27);
    java.lang.String var29 = var27.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + ""+ "'", var10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "a"+ "'", var22.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "ISO-8859-1s"+ "'", var29.equals("ISO-8859-1s"));

  }

  public void test353() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test353");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    net.sourceforge.schemaspy.ui.DbConfigPanel var6 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var6.requestFocus();
    var6.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var10 = var6.insets();
    var6.setAlignmentX(1.0f);
    boolean var13 = var6.hasFocus();
    boolean var14 = var6.getFocusTraversalKeysEnabled();
    boolean var15 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var6);
    net.sourceforge.schemaspy.ui.DbConfigPanel var16 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var17 = var16.isManagingFocus();
    java.awt.Rectangle var18 = var16.getVisibleRect();
    java.awt.Rectangle var19 = var6.getBounds(var18);
    java.awt.Dimension var20 = var6.getPreferredSize();
    var0.setMinimumSize(var20);
    var0.toBack();
    net.sourceforge.schemaspy.ui.DbConfigPanel var23 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var23.requestFocus();
    var23.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var27 = var23.insets();
    float var28 = var23.getAlignmentX();
    boolean var31 = var23.contains(1, (-1));
    var23.setOpaque(false);
    boolean var34 = var23.getInheritsPopupMenu();
    var0.setGlassPane((java.awt.Component)var23);
    net.sourceforge.schemaspy.ui.MainFrame var36 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var37 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var38 = var37.getTableExclusions();
    boolean var39 = var37.isEvaluateAllEnabled();
    java.util.List var40 = var37.getColumnDetails();
    var36.setIconImages(var40);
    boolean var42 = var36.isAlwaysOnTop();
    var36.setFocusableWindowState(true);
    boolean var45 = var36.isFocusCycleRoot();
    java.awt.Graphics var46 = var36.getGraphics();
    boolean var47 = var36.isFocusCycleRoot();
    net.sourceforge.schemaspy.ui.MainFrame var48 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var49 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var49.requestFocus();
    var49.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var53 = var49.insets();
    var49.setAlignmentX(1.0f);
    java.awt.Color var56 = var49.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var57 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var57.requestFocus();
    var57.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var61 = var57.insets();
    float var62 = var57.getAlignmentX();
    var57.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var68 = var57.getMouseListeners();
    java.awt.Rectangle var69 = var57.bounds();
    var49.setBounds(var69);
    var48.setMaximizedBounds(var69);
    java.awt.Container var72 = var48.getContentPane();
    boolean var73 = var48.isLocationByPlatform();
    net.sourceforge.schemaspy.ui.MainFrame var74 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var75 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var76 = var75.getTableExclusions();
    boolean var77 = var75.isEvaluateAllEnabled();
    java.util.List var78 = var75.getColumnDetails();
    var74.setIconImages(var78);
    boolean var80 = var74.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var81 = var74.getModalExclusionType();
    var48.setModalExclusionType(var81);
    var48.setEnabled(true);
    javax.swing.JLayeredPane var85 = var48.getLayeredPane();
    var36.setLayeredPane(var85);
    var0.setLayeredPane(var85);
    boolean var88 = var0.isActive();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);

  }

  public void test354() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test354");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var7 = var0.getModalExclusionType();
    net.sourceforge.schemaspy.ui.DbConfigPanel var8 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var8.requestFocus();
    var8.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var12 = var8.insets();
    var8.setAlignmentX(1.0f);
    boolean var15 = var8.hasFocus();
    boolean var16 = var8.getFocusTraversalKeysEnabled();
    boolean var17 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var8);
    net.sourceforge.schemaspy.ui.DbConfigPanel var18 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var19 = var18.isManagingFocus();
    java.awt.Rectangle var20 = var18.getVisibleRect();
    java.awt.Rectangle var21 = var8.getBounds(var20);
    java.awt.Dimension var22 = var8.getPreferredSize();
    var0.setSize(var22);
    java.awt.im.InputContext var24 = var0.getInputContext();
    java.lang.String var25 = var0.getWarningString();
    net.sourceforge.schemaspy.ui.DbConfigPanel var26 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var26.requestFocus();
    var26.setFocusTraversalPolicyProvider(true);
    var26.firePropertyChange("a", (byte)10, (byte)0);
    java.awt.Insets var34 = var26.insets();
    var26.setAlignmentY(100.0f);
    java.awt.Image var39 = var26.createImage(1, 1);
    java.awt.Dimension var40 = var26.getSize();
    var0.setSize(var40);
    java.awt.MenuBar var42 = var0.getMenuBar();
    boolean var43 = var0.isOpaque();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);

  }

  public void test355() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test355");


    net.sourceforge.schemaspy.util.DbSpecificOption var2 = new net.sourceforge.schemaspy.util.DbSpecificOption("", "ISO-8859-1");
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.getDescription();
    java.lang.Object var5 = var2.getValue();
    net.sourceforge.schemaspy.ui.MainFrame var6 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var7 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var8 = var7.getTableExclusions();
    boolean var9 = var7.isEvaluateAllEnabled();
    java.util.List var10 = var7.getColumnDetails();
    var6.setIconImages(var10);
    boolean var12 = var6.isAlwaysOnTop();
    var6.setFocusableWindowState(true);
    java.awt.Window[] var15 = var6.getOwnedWindows();
    java.awt.Component var16 = var6.getMostRecentFocusOwner();
    var2.setValue((java.lang.Object)var6);
    net.sourceforge.schemaspy.ui.DbConfigPanel var18 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var18.requestFocus();
    var18.firePropertyChange("ISO-8859-1", 0L, (-1L));
    java.awt.Color var24 = var18.getBackground();
    var18.requestFocus();
    net.sourceforge.schemaspy.ui.DbConfigPanel var26 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var26.requestFocus();
    var26.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var30 = var26.insets();
    var26.setAlignmentX(1.0f);
    var26.firePropertyChange("hi!", 10, 2);
    var26.setVisible(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var39 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var39.requestFocus();
    var39.setFocusTraversalPolicyProvider(true);
    java.awt.Point var44 = var39.getMousePosition(true);
    java.awt.Component var45 = var39.getNextFocusableComponent();
    java.awt.Dimension var46 = var39.getMinimumSize();
    var26.setPreferredSize(var46);
    java.awt.Dimension var48 = var18.getSize(var46);
    var6.setSize(var48);
    var6.reshape(2, 3, 3, 312);
    boolean var55 = var6.isShowing();
    var6.removeNotify();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"+ "'", var3.equals("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ISO-8859-1"+ "'", var4.equals("ISO-8859-1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);

  }

  public void test356() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test356");


    net.sourceforge.schemaspy.util.DbSpecificOption var3 = new net.sourceforge.schemaspy.util.DbSpecificOption("ISO-8859-1s", "", "net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s");
    java.lang.String var4 = var3.getDescription();
    java.lang.String var5 = var3.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0var4,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s"+ "'", var4.equals("net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0var4,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "ISO-8859-1s"+ "'", var5.equals("ISO-8859-1s"));

  }

  public void test357() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test357");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    net.sourceforge.schemaspy.ui.DbConfigPanel var24 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var24.requestFocus();
    var24.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var28 = var24.insets();
    var24.reshape(1, 1, 1, 100);
    net.sourceforge.schemaspy.ui.DbConfigPanel var34 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var34.requestFocus();
    var34.setFocusTraversalPolicyProvider(true);
    java.awt.Point var39 = var34.getMousePosition(true);
    java.awt.Component var40 = var34.getNextFocusableComponent();
    java.awt.Dimension var41 = var34.getMinimumSize();
    java.awt.Dimension var42 = var24.getSize(var41);
    java.awt.Rectangle var43 = var24.bounds();
    var0.setLocationRelativeTo((java.awt.Component)var24);
    boolean var45 = var0.isLocationByPlatform();
    var0.addNotify();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);

  }

  public void test358() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test358");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sourceforge.schemaspy.util.LineWriter var3 = new net.sourceforge.schemaspy.util.LineWriter(".hi!sdhi!sohi!sthi!s hi!svhi!sehi!srhi!sshi!sihi!sohi!snhi!s hi!s2hi!s.hi!s2hi!s.hi!s1hi!s hi!sohi!srhi!s hi!svhi!sehi!srhi!sshi!sihi!sohi!snhi!sshi!s hi!sghi!srhi!sehi!sahi!sthi!sehi!srhi!s hi!sthi!shhi!sahi!snhi!s hi!s2hi!s.hi!s4hi!s.hi!s{hi!s}hi!s.{}.", 431, "net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)");
      fail("Expected exception of type java.io.UnsupportedEncodingException");
    } catch (java.io.UnsupportedEncodingException e) {
      // Expected exception.
    }

  }

  public void test359() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test359");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    var0.firePropertyChange("a", (byte)10, (byte)0);
    java.awt.Insets var8 = var0.insets();
    var0.setAlignmentY(100.0f);
    java.awt.Image var13 = var0.createImage(1, 1);
    int var14 = var0.getComponentCount();
    net.sourceforge.schemaspy.ui.DbConfigPanel var15 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var15.requestFocus();
    var15.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var19 = var15.insets();
    java.lang.Object var20 = var15.getTreeLock();
    var15.setAutoscrolls(true);
    java.awt.Component var24 = var0.add((java.awt.Component)var15, 1);
    boolean var25 = var0.requestFocusInWindow();
    java.awt.Graphics var26 = var0.getGraphics();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test360() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test360");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    var0.setFocusableWindowState(true);
    boolean var9 = var0.isFocusCycleRoot();
    java.awt.Graphics var10 = var0.getGraphics();
    boolean var11 = var0.isFocusCycleRoot();
    net.sourceforge.schemaspy.ui.MainFrame var12 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var13 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var13.requestFocus();
    var13.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var17 = var13.insets();
    var13.setAlignmentX(1.0f);
    java.awt.Color var20 = var13.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var21 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var21.requestFocus();
    var21.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var25 = var21.insets();
    float var26 = var21.getAlignmentX();
    var21.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var32 = var21.getMouseListeners();
    java.awt.Rectangle var33 = var21.bounds();
    var13.setBounds(var33);
    var12.setMaximizedBounds(var33);
    java.awt.Container var36 = var12.getContentPane();
    boolean var37 = var12.isLocationByPlatform();
    net.sourceforge.schemaspy.ui.MainFrame var38 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var39 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var40 = var39.getTableExclusions();
    boolean var41 = var39.isEvaluateAllEnabled();
    java.util.List var42 = var39.getColumnDetails();
    var38.setIconImages(var42);
    boolean var44 = var38.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var45 = var38.getModalExclusionType();
    var12.setModalExclusionType(var45);
    var12.setEnabled(true);
    javax.swing.JLayeredPane var49 = var12.getLayeredPane();
    var0.setLayeredPane(var49);
    boolean var51 = var0.isResizable();
    var0.setTitle("{}s");
    var0.toBack();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);

  }

  public void test361() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test361");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    boolean var1 = var0.isImpliedConstraintsEnabled();
    var0.setHasOrphans(false);
    java.lang.String var4 = var0.getSchemaSpec();
    java.util.regex.Pattern var5 = var0.getIndirectColumnExclusions();
    boolean var6 = var0.isViewsEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test362() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test362");


    java.lang.String var1 = net.sourceforge.schemaspy.util.Inflection.pluralize("");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "s"+ "'", var1.equals("s"));

  }

  public void test363() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test363");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    java.awt.Component var2 = var0.getNextFocusableComponent();
    java.lang.String var3 = var0.toString();
    javax.swing.TransferHandler var4 = var0.getTransferHandler();
    var0.paintImmediately((-3), 5, 0, 5);
    boolean var10 = var0.isFocusCycleRoot();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var11 = var0.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0var3,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var3.equals("net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0var3,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test364() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test364");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    java.awt.Color var7 = var0.getForeground();
    javax.swing.InputVerifier var8 = var0.getInputVerifier();
    var0.repaint(100L, 10, 1, 0, 100);
    java.awt.Component.BaselineResizeBehavior var15 = var0.getBaselineResizeBehavior();
    float var16 = var0.getAlignmentX();
    java.lang.String var17 = var0.getName();
    javax.swing.KeyStroke[] var18 = var0.getRegisteredKeyStrokes();
    java.awt.event.MouseMotionListener[] var19 = var0.getMouseMotionListeners();
    net.sourceforge.schemaspy.ui.MainFrame var20 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var21 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var22 = var21.getTableExclusions();
    boolean var23 = var21.isEvaluateAllEnabled();
    java.util.List var24 = var21.getColumnDetails();
    var20.setIconImages(var24);
    java.awt.LayoutManager var26 = var20.getLayout();
    var0.setLayout(var26);
    net.sourceforge.schemaspy.ui.MainFrame var28 = new net.sourceforge.schemaspy.ui.MainFrame();
    java.awt.event.MouseMotionListener[] var29 = var28.getMouseMotionListeners();
    net.sourceforge.schemaspy.ui.MainFrame var30 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var31 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var31.requestFocus();
    var31.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var35 = var31.insets();
    var31.setAlignmentX(1.0f);
    java.awt.Color var38 = var31.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var39 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var39.requestFocus();
    var39.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var43 = var39.insets();
    float var44 = var39.getAlignmentX();
    var39.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var50 = var39.getMouseListeners();
    java.awt.Rectangle var51 = var39.bounds();
    var31.setBounds(var51);
    var30.setMaximizedBounds(var51);
    java.awt.Container var54 = var30.getContentPane();
    boolean var55 = var30.isLocationByPlatform();
    net.sourceforge.schemaspy.ui.MainFrame var56 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var57 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var58 = var57.getTableExclusions();
    boolean var59 = var57.isEvaluateAllEnabled();
    java.util.List var60 = var57.getColumnDetails();
    var56.setIconImages(var60);
    boolean var62 = var56.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var63 = var56.getModalExclusionType();
    var30.setModalExclusionType(var63);
    var30.pack();
    java.awt.Window.Type var66 = var30.getType();
    var28.setType(var66);
    java.awt.Dimension var68 = var28.getMaximumSize();
    var0.setMinimumSize(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test365() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test365");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setMaxDbThreads(1);
    java.lang.String var3 = var0.getHost();
    var0.setOutputDir("4");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test366() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test366");


    net.sourceforge.schemaspy.util.Version var1 = new net.sourceforge.schemaspy.util.Version("");
    net.sourceforge.schemaspy.util.Version var3 = new net.sourceforge.schemaspy.util.Version("");
    int var4 = var1.compareTo(var3);
    net.sourceforge.schemaspy.util.Version var6 = new net.sourceforge.schemaspy.util.Version("");
    int var7 = var1.compareTo(var6);
    net.sourceforge.schemaspy.util.Version var9 = new net.sourceforge.schemaspy.util.Version("");
    net.sourceforge.schemaspy.util.DbSpecificOption var12 = new net.sourceforge.schemaspy.util.DbSpecificOption("", "ISO-8859-1");
    java.lang.String var13 = var12.toString();
    net.sourceforge.schemaspy.Config var14 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var15 = var14.getTableExclusions();
    boolean var16 = var14.isEvaluateAllEnabled();
    java.lang.String var18 = var14.getParam("hi!s");
    var12.setValue((java.lang.Object)"hi!s");
    boolean var20 = var9.equals((java.lang.Object)"hi!s");
    net.sourceforge.schemaspy.util.Version var22 = new net.sourceforge.schemaspy.util.Version("");
    net.sourceforge.schemaspy.util.Version var24 = new net.sourceforge.schemaspy.util.Version("");
    int var25 = var22.compareTo(var24);
    net.sourceforge.schemaspy.util.Version var27 = new net.sourceforge.schemaspy.util.Version("");
    int var28 = var22.compareTo(var27);
    int var29 = var9.compareTo(var22);
    int var30 = var6.compareTo(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"+ "'", var13.equals("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);

  }

  public void test367() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test367");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var26 = var25.isManagingFocus();
    java.awt.Rectangle var27 = var25.getVisibleRect();
    var0.setBounds(var27);
    var0.hide();
    java.util.List var30 = var0.getIconImages();
    var0.resize(2, 0);
    java.awt.FocusTraversalPolicy var34 = var0.getFocusTraversalPolicy();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test368() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test368");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    java.awt.Color var7 = var0.getForeground();
    javax.swing.InputVerifier var8 = var0.getInputVerifier();
    var0.repaint(100L, 10, 1, 0, 100);
    java.awt.Component.BaselineResizeBehavior var15 = var0.getBaselineResizeBehavior();
    var0.hide();
    net.sourceforge.schemaspy.ui.DbConfigPanel var17 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var17.requestFocus();
    var17.firePropertyChange("ISO-8859-1", 0L, (-1L));
    java.awt.Color var23 = var17.getBackground();
    var17.firePropertyChange("java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)", '#', ' ');
    boolean var30 = var17.contains((-3), 300);
    net.sourceforge.schemaspy.ui.DbConfigPanel var31 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var31.requestFocus();
    var31.setFocusTraversalPolicyProvider(true);
    boolean var35 = var31.isMinimumSizeSet();
    java.awt.Component var36 = var17.add((java.awt.Component)var31);
    java.awt.Dimension var37 = var17.getSize();
    var0.setPreferredSize(var37);
    var0.revalidate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test369() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test369");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    java.awt.Window.Type var1 = var0.getType();
    var0.hide();
    var0.firePropertyChange("schemaSpy.css", '4', '#');
    boolean var7 = var0.isAutoRequestFocus();
    boolean var8 = var0.isDoubleBuffered();
    java.awt.Graphics var9 = var0.getGraphics();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test370() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test370");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    java.awt.Window.Type var1 = var0.getType();
    java.awt.Window var2 = var0.getOwner();
    var0.repaint((-3), 2, (-1), 100);
    net.sourceforge.schemaspy.ui.DbConfigPanel var8 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var8.requestFocus();
    var8.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var12 = var8.insets();
    var8.setAlignmentX(1.0f);
    java.awt.Color var15 = var8.getForeground();
    int var16 = var8.getWidth();
    net.sourceforge.schemaspy.ui.DbConfigPanel var17 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var17.requestFocus();
    var17.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var21 = var17.insets();
    var17.setAlignmentX(1.0f);
    boolean var24 = var17.hasFocus();
    var17.paintImmediately(10, 100, 2, 10);
    net.sourceforge.schemaspy.ui.DbConfigPanel var30 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var30.requestFocus();
    var30.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var34 = var30.insets();
    var30.setAlignmentX(1.0f);
    java.awt.Color var37 = var30.getForeground();
    javax.swing.InputVerifier var38 = var30.getInputVerifier();
    var30.repaint(100L, 10, 1, 0, 100);
    var30.setEnabled(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var47 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var47.requestFocus();
    java.beans.PropertyChangeListener[] var49 = var47.getPropertyChangeListeners();
    var47.paintImmediately(0, (-1), (-1), 0);
    java.awt.event.KeyListener[] var55 = var47.getKeyListeners();
    net.sourceforge.schemaspy.ui.DbConfigPanel var56 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var56.requestFocus();
    var56.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var60 = var56.insets();
    var56.setAlignmentX(1.0f);
    java.awt.Color var63 = var56.getForeground();
    var47.setForeground(var63);
    var30.setBackground(var63);
    var17.remove((java.awt.Component)var30);
    java.awt.Dimension var67 = var17.getMinimumSize();
    var8.setSize(var67);
    var0.setMinimumSize(var67);
    var0.setExtendedState(300);
    var0.disable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test371() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test371");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    var0.firePropertyChange("a", (byte)10, (byte)0);
    float var8 = var0.getAlignmentX();
    boolean var9 = var0.requestDefaultFocus();
    var0.setSize(1, 2);
    int var13 = var0.getDebugGraphicsOptions();
    var0.paintImmediately(3, 5, 11, 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);

  }

  public void test372() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test372");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var1 = var0.isManagingFocus();
    int var2 = var0.getWidth();
    java.awt.Insets var3 = var0.insets();
    net.sourceforge.schemaspy.ui.DbConfigPanel var4 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var4.requestFocus();
    var4.setFocusTraversalPolicyProvider(true);
    java.awt.Point var9 = var4.getMousePosition(true);
    int var10 = var4.getComponentCount();
    net.sourceforge.schemaspy.ui.DbConfigPanel var11 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var11.requestFocus();
    var11.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var15 = var11.insets();
    var11.setAlignmentX(1.0f);
    java.awt.Color var18 = var11.getForeground();
    int var19 = var11.getWidth();
    java.awt.Rectangle var20 = var11.getBounds();
    var4.repaint(var20);
    var0.computeVisibleRect(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test373() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test373");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Point var5 = var0.getMousePosition(true);
    java.awt.Component var6 = var0.getNextFocusableComponent();
    boolean var7 = var0.isBackgroundSet();
    var0.transferFocus();
    net.sourceforge.schemaspy.util.DbSpecificOption var11 = new net.sourceforge.schemaspy.util.DbSpecificOption("", "ISO-8859-1");
    java.lang.String var12 = var11.toString();
    java.lang.String var13 = var11.getDescription();
    java.lang.Object var14 = var11.getValue();
    net.sourceforge.schemaspy.ui.MainFrame var15 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var16 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var17 = var16.getTableExclusions();
    boolean var18 = var16.isEvaluateAllEnabled();
    java.util.List var19 = var16.getColumnDetails();
    var15.setIconImages(var19);
    boolean var21 = var15.isAlwaysOnTop();
    var15.setFocusableWindowState(true);
    java.awt.Window[] var24 = var15.getOwnedWindows();
    java.awt.Component var25 = var15.getMostRecentFocusOwner();
    var11.setValue((java.lang.Object)var15);
    net.sourceforge.schemaspy.ui.DbConfigPanel var27 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var27.requestFocus();
    var27.firePropertyChange("ISO-8859-1", 0L, (-1L));
    java.awt.Color var33 = var27.getBackground();
    var27.requestFocus();
    net.sourceforge.schemaspy.ui.DbConfigPanel var35 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var35.requestFocus();
    var35.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var39 = var35.insets();
    var35.setAlignmentX(1.0f);
    var35.firePropertyChange("hi!", 10, 2);
    var35.setVisible(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var48 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var48.requestFocus();
    var48.setFocusTraversalPolicyProvider(true);
    java.awt.Point var53 = var48.getMousePosition(true);
    java.awt.Component var54 = var48.getNextFocusableComponent();
    java.awt.Dimension var55 = var48.getMinimumSize();
    var35.setPreferredSize(var55);
    java.awt.Dimension var57 = var27.getSize(var55);
    var15.setSize(var57);
    var0.setMaximumSize(var57);
    var0.revalidate();
    var0.revalidate();
    net.sourceforge.schemaspy.ui.DbConfigPanel var62 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var62.requestFocus();
    var62.setFocusTraversalPolicyProvider(true);
    boolean var66 = var62.requestFocusInWindow();
    java.awt.Cursor var67 = var62.getCursor();
    var0.setCursor(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"+ "'", var12.equals("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "ISO-8859-1"+ "'", var13.equals("ISO-8859-1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test374() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test374");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    boolean var7 = var0.hasFocus();
    java.awt.Point var8 = var0.getMousePosition();
    var0.paintImmediately(100, 2, 10, 5);
    boolean var14 = var0.requestDefaultFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test375() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test375");


    net.sourceforge.schemaspy.util.Inflection var3 = new net.sourceforge.schemaspy.util.Inflection("net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory).hi!. ", "DbSpecificOption name: 'DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'' value: 'null' description: 'net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]'", false);

  }

  public void test376() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test376");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    boolean var1 = var0.isImpliedConstraintsEnabled();
    var0.setHasOrphans(false);
    java.lang.String var4 = var0.getSchemaSpec();
    var0.setCatalog("hi!");
    java.lang.String var7 = var0.getFont();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Helvetica"+ "'", var7.equals("Helvetica"));

  }

  public void test377() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test377");


    net.sourceforge.schemaspy.SchemaAnalyzer var0 = new net.sourceforge.schemaspy.SchemaAnalyzer();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    var1.setDb("a");
    java.lang.String var4 = var1.getServer();
    boolean var5 = var1.isHtmlGenerationEnabled();
    boolean var6 = var1.isMeterEnabled();
    net.sourceforge.schemaspy.model.Database var7 = var0.analyze(var1);
    java.util.Map var8 = var1.getDbSpecificOptions();
    java.io.File var9 = var1.getGraphvizDir();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test378() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test378");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var1 = var0.isManagingFocus();
    int var2 = var0.getWidth();
    java.awt.Insets var3 = var0.insets();
    javax.accessibility.AccessibleContext var4 = var0.getAccessibleContext();
    boolean var7 = var0.inside(100, (-3));
    java.awt.Insets var8 = var0.insets();
    var0.firePropertyChange("[]", (byte)100, (byte)(-1));
    boolean var13 = var0.isEnabled();
    net.sourceforge.schemaspy.ui.DbConfigPanel var14 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var14.requestFocus();
    var14.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var18 = var14.insets();
    var14.setAlignmentX(1.0f);
    java.awt.Color var21 = var14.getForeground();
    var0.setNextFocusableComponent((java.awt.Component)var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test379() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test379");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    var0.setSchema("");
    java.lang.String var7 = var0.getCss();
    var0.setDb("dot version 2.2.1 or versions greater than 2.4");
    var0.setRenderer("net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)");
    var0.setServer("net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory).hi!. ");
    net.sourceforge.schemaspy.Config var14 = new net.sourceforge.schemaspy.Config();
    boolean var15 = var14.isImpliedConstraintsEnabled();
    var14.setHasOrphans(false);
    var14.setImpliedConstraintsEnabled(true);
    var14.setSchema("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'");
    net.sourceforge.schemaspy.Config var22 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var23 = var22.getTableExclusions();
    var22.setSqlFormatter("hi!");
    net.sourceforge.schemaspy.view.DefaultSqlFormatter var26 = new net.sourceforge.schemaspy.view.DefaultSqlFormatter();
    var22.setSqlFormatter((net.sourceforge.schemaspy.view.SqlFormatter)var26);
    var14.setSqlFormatter((net.sourceforge.schemaspy.view.SqlFormatter)var26);
    var0.setSqlFormatter((net.sourceforge.schemaspy.view.SqlFormatter)var26);
    java.util.List var30 = var0.getSchemas();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "schemaSpy.css"+ "'", var7.equals("schemaSpy.css"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);

  }

  public void test380() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test380");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    boolean var5 = var0.isMeterEnabled();
    java.lang.String var7 = var0.getParam("a");
    var0.setPromptForPasswordEnabled(false);
    java.lang.String var10 = var0.getCatalog();
    java.lang.String var11 = var0.getDescription();
    java.util.regex.Pattern var12 = var0.getColumnExclusions();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.io.File var13 = var0.getOutputDir();
      fail("Expected exception of type net.sourceforge.schemaspy.Config.MissingRequiredParameterException");
    } catch (net.sourceforge.schemaspy.Config.MissingRequiredParameterException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test381() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test381");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    java.awt.LayoutManager var6 = var0.getLayout();
    java.lang.String var7 = var0.getTitle();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "SchemaSpy"+ "'", var7.equals("SchemaSpy"));

  }

  public void test382() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test382");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.requestFocus();
    var0.setOpaque(false);
    var0.enable();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    var9.setAlignmentX(1.0f);
    boolean var16 = var9.hasFocus();
    net.sourceforge.schemaspy.ui.DbConfigPanel var17 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var17.requestFocus();
    var17.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var21 = var17.insets();
    float var22 = var17.getAlignmentX();
    var17.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var28 = var17.getMouseListeners();
    boolean var29 = var9.isAncestorOf((java.awt.Component)var17);
    javax.swing.TransferHandler var30 = var17.getTransferHandler();
    var0.setComponentZOrder((java.awt.Component)var17, 1);
    var0.setDebugGraphicsOptions(312);
    int var37 = var0.getBaseline(11, 23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == (-1));

  }

  public void test383() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test383");


    net.sourceforge.schemaspy.util.CaseInsensitiveMap var1 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    var1.clear();
    java.util.List var3 = net.sourceforge.schemaspy.DbAnalyzer.getRailsConstraints((java.util.Map)var1);
    var1.clear();
    java.lang.Object var5 = var1.clone();
    java.lang.String var6 = var1.toString();
    java.util.Set var7 = var1.keySet();
    net.sourceforge.schemaspy.ui.MainFrame var8 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var9 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var10 = var9.getTableExclusions();
    boolean var11 = var9.isEvaluateAllEnabled();
    java.util.List var12 = var9.getColumnDetails();
    var8.setIconImages(var12);
    boolean var14 = var8.isAlwaysOnTop();
    var8.setFocusableWindowState(true);
    boolean var17 = var8.isFocusCycleRoot();
    java.awt.Graphics var18 = var8.getGraphics();
    boolean var19 = var8.isFocusCycleRoot();
    java.awt.Dimension var20 = var8.size();
    boolean var21 = var1.equals((java.lang.Object)var8);
    net.sourceforge.schemaspy.Config var22 = new net.sourceforge.schemaspy.Config();
    var22.setDb("a");
    java.lang.String var25 = var22.getServer();
    boolean var26 = var22.isHtmlGenerationEnabled();
    var22.setOutputDir("hi!");
    net.sourceforge.schemaspy.Config var29 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var30 = var29.getTableExclusions();
    var29.setSqlFormatter("hi!");
    net.sourceforge.schemaspy.view.DefaultSqlFormatter var33 = new net.sourceforge.schemaspy.view.DefaultSqlFormatter();
    var29.setSqlFormatter((net.sourceforge.schemaspy.view.SqlFormatter)var33);
    var22.setSqlFormatter((net.sourceforge.schemaspy.view.SqlFormatter)var33);
    boolean var36 = var1.equals((java.lang.Object)var22);
    java.util.Set var37 = var1.keySet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "{}"+ "'", var6.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test384() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test384");


    net.sourceforge.schemaspy.view.TextFormatter var0 = net.sourceforge.schemaspy.view.TextFormatter.getInstance();
    net.sourceforge.schemaspy.TableOrderer var1 = new net.sourceforge.schemaspy.TableOrderer();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var3 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    var3.clear();
    java.util.List var5 = net.sourceforge.schemaspy.DbAnalyzer.getRailsConstraints((java.util.Map)var3);
    java.util.Set var6 = var3.entrySet();
    net.sourceforge.schemaspy.model.Routine var16 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var17 = var16.getDataAccess();
    java.lang.String var18 = var16.getDefinitionLanguage();
    java.util.List var19 = var16.getParameters();
    java.util.List var20 = var1.getTablesOrderedByRI((java.util.Collection)var6, (java.util.Collection)var19);
    net.sourceforge.schemaspy.view.HtmlConstraintsPage var22 = net.sourceforge.schemaspy.view.HtmlConstraintsPage.getInstance();
    net.sourceforge.schemaspy.ui.MainFrame var23 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var24 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var24.requestFocus();
    var24.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var28 = var24.insets();
    var24.setAlignmentX(1.0f);
    java.awt.Color var31 = var24.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var32 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var32.requestFocus();
    var32.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var36 = var32.insets();
    float var37 = var32.getAlignmentX();
    var32.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var43 = var32.getMouseListeners();
    java.awt.Rectangle var44 = var32.bounds();
    var24.setBounds(var44);
    var23.setMaximizedBounds(var44);
    java.awt.Container var47 = var23.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var48 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var49 = var48.isManagingFocus();
    java.awt.Rectangle var50 = var48.getVisibleRect();
    var23.setBounds(var50);
    var23.hide();
    java.util.List var53 = var23.getIconImages();
    net.sourceforge.schemaspy.util.LineWriter var57 = new net.sourceforge.schemaspy.util.LineWriter("Unknown", 100, "ISO-8859-1");
    var57.writeln();
    var22.writeCheckConstraints((java.util.Collection)var53, var57);
    var57.writeln("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'");
    var0.write((java.util.Collection)var19, true, var57);
    net.sourceforge.schemaspy.model.Routine var72 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var73 = var72.getDataAccess();
    java.util.List var74 = var72.getParameters();
    net.sourceforge.schemaspy.view.WriteStats var75 = new net.sourceforge.schemaspy.view.WriteStats((java.util.Collection)var74);
    java.util.List var76 = net.sourceforge.schemaspy.DbAnalyzer.getMustBeUniqueNullableColumns((java.util.Collection)var74);
    java.lang.String var77 = net.sourceforge.schemaspy.model.ForeignKeyConstraint.toString(var76);
    net.sourceforge.schemaspy.view.WriteStats var78 = new net.sourceforge.schemaspy.view.WriteStats((java.util.Collection)var76);
    java.util.List var79 = net.sourceforge.schemaspy.DbAnalyzer.getForeignKeyConstraints((java.util.Collection)var76);
    net.sourceforge.schemaspy.util.LineWriter var84 = new net.sourceforge.schemaspy.util.LineWriter("Unknown", 100, "ISO-8859-1");
    var84.write(10);
    var0.write((java.util.Collection)var76, true, var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "a"+ "'", var18.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "hi!"+ "'", var73.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "[]"+ "'", var77.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test385() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test385");


    net.sourceforge.schemaspy.model.Routine var9 = new net.sourceforge.schemaspy.model.Routine("Unknown", "schemaSpy.css", "net.sourceforge.schemaspy.ui.MainFrame[frame4,0,23,500x312,invalid,hidden,layout=java.awt.BorderLayout,title=SchemaSpy,resizable,normal,defaultCloseOperation=HIDE_ON_CLOSE,rootPane=javax.swing.JRootPane[,0,0,0x0,invalid,layout=javax.swing.JRootPane$RootLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777673,maximumSize=,minimumSize=,preferredSize=],rootPaneCheckingEnabled=true]", "Password associated with user id", "hi!sdhi!sohi!sthi!s hi!svhi!sehi!srhi!sshi!sihi!sohi!snhi!s hi!s2hi!s.hi!s2hi!s.hi!s1hi!s hi!sohi!srhi!s hi!svhi!sehi!srhi!sshi!sihi!sohi!snhi!sshi!s hi!sghi!srhi!sehi!sahi!sthi!sehi!srhi!s hi!sthi!shhi!sahi!snhi!s hi!s2hi!s.hi!s4hi!s", true, "net.sourceforge.schemaspy.view.StyleSheet$MissingCssPropertyException: Required property 'hi!' was not found for the definition of '' in schemaSpy.css", "Unknown", "Unknown");

  }

  public void test386() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test386");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    boolean var7 = var0.hasFocus();
    boolean var8 = var0.getFocusTraversalKeysEnabled();
    boolean var9 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var0);
    var0.firePropertyChange("hi!", 'a', 'a');
    var0.requestFocus();
    net.sourceforge.schemaspy.ui.DbConfigPanel var15 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var15.requestFocus();
    var15.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var19 = var15.insets();
    float var20 = var15.getAlignmentX();
    net.sourceforge.schemaspy.ui.DbConfigPanel var21 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var21.requestFocus();
    var21.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var25 = var21.insets();
    float var26 = var21.getAlignmentX();
    var21.setBounds(0, 1, 10, 100);
    java.awt.Rectangle var32 = var21.getBounds();
    var21.setDebugGraphicsOptions(1);
    net.sourceforge.schemaspy.ui.DbConfigPanel var35 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var35.requestFocus();
    var35.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var39 = var35.insets();
    var35.setAlignmentX(1.0f);
    boolean var42 = var35.hasFocus();
    boolean var43 = var35.getFocusTraversalKeysEnabled();
    var35.setSize(1, (-1));
    boolean var48 = var35.requestFocus(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var49 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var49.requestFocus();
    java.beans.PropertyChangeListener[] var51 = var49.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var52 = var49.getBaselineResizeBehavior();
    net.sourceforge.schemaspy.ui.DbConfigPanel var53 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var53.requestFocus();
    var53.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var57 = var53.insets();
    var53.setAlignmentX(1.0f);
    var53.doLayout();
    boolean var61 = var53.isCursorSet();
    var53.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var66 = var53.getLocation();
    boolean var67 = var49.contains(var66);
    java.awt.Point var68 = var35.getLocation(var66);
    java.awt.Point var69 = var21.getLocation(var68);
    var15.setLocation(var68);
    var0.setLocation(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test387() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test387");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    net.sourceforge.schemaspy.ui.DbConfigPanel var24 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var24.requestFocus();
    var24.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var28 = var24.insets();
    var24.setAlignmentX(1.0f);
    boolean var31 = var24.hasFocus();
    boolean var32 = var24.getFocusTraversalKeysEnabled();
    boolean var33 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var24);
    var24.firePropertyChange("hi!", 'a', 'a');
    net.sourceforge.schemaspy.ui.DbConfigPanel var38 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var39 = var38.isManagingFocus();
    int var40 = var38.getWidth();
    java.awt.Insets var41 = var38.insets();
    javax.accessibility.AccessibleContext var42 = var38.getAccessibleContext();
    boolean var45 = var38.inside(100, (-3));
    java.awt.Rectangle var46 = var38.getVisibleRect();
    var24.setBounds(var46);
    var0.setMaximizedBounds(var46);
    java.awt.Window[] var49 = var0.getOwnedWindows();
    net.sourceforge.schemaspy.ui.DbConfigPanel var50 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var51 = var50.isManagingFocus();
    int var52 = var50.getWidth();
    javax.swing.InputVerifier var53 = var50.getInputVerifier();
    net.sourceforge.schemaspy.ui.DbConfigPanel var54 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var54.requestFocus();
    var54.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var58 = var54.insets();
    var54.requestFocus();
    boolean var60 = var54.isVisible();
    java.awt.Dimension var61 = var54.preferredSize();
    java.awt.Dimension var62 = var50.getSize(var61);
    var0.setSize(var61);
    java.beans.PropertyChangeListener[] var65 = var0.getPropertyChangeListeners("hi!s");
    boolean var66 = var0.isShowing();
    java.awt.Container var67 = var0.getParent();
    net.sourceforge.schemaspy.ui.DbConfigPanel var68 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var68.requestFocus();
    var68.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var72 = var68.insets();
    var68.setAlignmentX(1.0f);
    var68.firePropertyChange("hi!", 10, 2);
    net.sourceforge.schemaspy.ui.DbConfigPanel var79 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var79.requestFocus();
    var79.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var83 = var79.insets();
    float var84 = var79.getAlignmentX();
    var79.setBounds(0, 1, 10, 100);
    java.awt.Rectangle var90 = var79.getBounds();
    var68.computeVisibleRect(var90);
    var0.setBounds(var90);
    boolean var93 = var0.isBackgroundSet();
    java.util.List var94 = var0.getIconImages();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test388() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test388");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.util.List var24 = var0.getIconImages();
    var0.show();
    java.awt.Color var26 = var0.getForeground();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test389() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test389");


    net.sourceforge.schemaspy.util.Inflection var3 = new net.sourceforge.schemaspy.util.Inflection("net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", "net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s", false);
    boolean var5 = var3.match("net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test390() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test390");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    var0.setFocusableWindowState(true);
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var10 = var9.isManagingFocus();
    int var11 = var9.getWidth();
    javax.swing.InputVerifier var12 = var9.getInputVerifier();
    net.sourceforge.schemaspy.ui.DbConfigPanel var13 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var13.requestFocus();
    var13.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var17 = var13.insets();
    var13.requestFocus();
    boolean var19 = var13.isVisible();
    java.awt.Dimension var20 = var13.preferredSize();
    java.awt.Dimension var21 = var9.getSize(var20);
    var0.setSize(var20);
    java.lang.String var23 = var0.getWarningString();
    var0.setFocusableWindowState(true);
    net.sourceforge.schemaspy.ui.MainFrame var26 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var27 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var27.requestFocus();
    var27.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var31 = var27.insets();
    var27.setAlignmentX(1.0f);
    java.awt.Color var34 = var27.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var35 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var35.requestFocus();
    var35.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var39 = var35.insets();
    float var40 = var35.getAlignmentX();
    var35.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var46 = var35.getMouseListeners();
    java.awt.Rectangle var47 = var35.bounds();
    var27.setBounds(var47);
    var26.setMaximizedBounds(var47);
    java.awt.Container var50 = var26.getContentPane();
    boolean var51 = var26.isLocationByPlatform();
    net.sourceforge.schemaspy.ui.MainFrame var52 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var53 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var54 = var53.getTableExclusions();
    boolean var55 = var53.isEvaluateAllEnabled();
    java.util.List var56 = var53.getColumnDetails();
    var52.setIconImages(var56);
    boolean var58 = var52.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var59 = var52.getModalExclusionType();
    var26.setModalExclusionType(var59);
    var26.setEnabled(true);
    javax.swing.JLayeredPane var63 = var26.getLayeredPane();
    java.awt.Insets var64 = var63.getInsets();
    var0.setLayeredPane(var63);
    java.awt.Toolkit var66 = var0.getToolkit();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test391() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test391");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.firePropertyChange("hi!", 10, 2);
    var0.paintImmediately(100, 10, 2, 0);
    javax.swing.JPopupMenu var16 = var0.getComponentPopupMenu();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test392() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test392");


    net.sourceforge.schemaspy.ui.DbTypeSelectorModel var1 = new net.sourceforge.schemaspy.ui.DbTypeSelectorModel("ISO-8859-1");
    int var2 = var1.getSize();
    java.lang.Object var3 = var1.getSelectedItem();
    net.sourceforge.schemaspy.ui.DbConfigPanel var4 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var4.requestFocus();
    var4.setFocusTraversalPolicyProvider(true);
    var4.firePropertyChange("a", (byte)10, (byte)0);
    java.awt.Insets var12 = var4.insets();
    var4.setAlignmentY(100.0f);
    var1.setSelectedItem((java.lang.Object)100.0f);
    net.sourceforge.schemaspy.util.LineWriter var19 = new net.sourceforge.schemaspy.util.LineWriter("Unknown", 100, "ISO-8859-1");
    var19.flush();
    var19.flush();
    var1.setSelectedItem((java.lang.Object)var19);
    var19.flush();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test393() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test393");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.firePropertyChange("ISO-8859-1", 0L, (-1L));
    java.awt.Color var6 = var0.getBackground();
    var0.firePropertyChange("java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)", '#', ' ');
    boolean var13 = var0.contains((-3), 300);
    net.sourceforge.schemaspy.ui.DbConfigPanel var14 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var14.requestFocus();
    var14.setFocusTraversalPolicyProvider(true);
    boolean var18 = var14.isMinimumSizeSet();
    java.awt.Component var19 = var0.add((java.awt.Component)var14);
    int var20 = var0.getHeight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);

  }

  public void test394() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test394");


    net.sourceforge.schemaspy.view.StyleSheet.MissingCssPropertyException var4 = new net.sourceforge.schemaspy.view.StyleSheet.MissingCssPropertyException("", "hi!");
    net.sourceforge.schemaspy.model.ConnectionFailure var5 = new net.sourceforge.schemaspy.model.ConnectionFailure("", (java.lang.Throwable)var4);
    net.sourceforge.schemaspy.model.ConnectionFailure var6 = new net.sourceforge.schemaspy.model.ConnectionFailure("", (java.lang.Throwable)var4);
    net.sourceforge.schemaspy.model.InvalidConfigurationException var8 = var4.setParamName("schemaSpy.css");
    net.sourceforge.schemaspy.model.InvalidConfigurationException var10 = var8.setParamName("javax.swing.JPanel[,0,0,0x0,invalid,layout=java.awt.GridBagLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test395() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test395");


    net.sourceforge.schemaspy.util.DbSpecificOption var3 = new net.sourceforge.schemaspy.util.DbSpecificOption("ora", "net.sourceforge.schemaspy.model.InvalidConfigurationException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)", "net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");

  }

  public void test396() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test396");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.firePropertyChange("hi!", 10, 2);
    var0.setVisible(false);
    boolean var13 = var0.isMinimumSizeSet();
    var0.firePropertyChange("Unknown", (byte)100, (byte)10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test397() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test397");


    java.lang.String[] var1 = new java.lang.String[] { "net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"};
    net.sourceforge.schemaspy.Config var2 = new net.sourceforge.schemaspy.Config(var1);
    net.sourceforge.schemaspy.Config var3 = new net.sourceforge.schemaspy.Config(var1);
    net.sourceforge.schemaspy.Config var4 = new net.sourceforge.schemaspy.Config(var1);
    net.sourceforge.schemaspy.Config var5 = new net.sourceforge.schemaspy.Config(var1);
    net.sourceforge.schemaspy.Config var6 = new net.sourceforge.schemaspy.Config(var1);
    var6.setMaxDetailedTabled(11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test398() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test398");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    boolean var2 = var0.isEvaluateAllEnabled();
    java.lang.String var3 = var0.getDescription();
    java.util.regex.Pattern var4 = var0.getTableInclusions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test399() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test399");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    boolean var1 = var0.isImpliedConstraintsEnabled();
    var0.setHasOrphans(false);
    java.lang.String var4 = var0.getSchemaSpec();
    java.util.regex.Pattern var5 = var0.getIndirectColumnExclusions();
    java.lang.String var6 = var0.getCharset();
    boolean var7 = var0.isPromptForPasswordEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ISO-8859-1"+ "'", var6.equals("ISO-8859-1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test400() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test400");


    net.sourceforge.schemaspy.util.PasswordReader var0 = net.sourceforge.schemaspy.util.PasswordReader.getInstance();
    net.sourceforge.schemaspy.view.StyleSheet.MissingCssPropertyException var5 = new net.sourceforge.schemaspy.view.StyleSheet.MissingCssPropertyException("", "hi!");
    net.sourceforge.schemaspy.model.ConnectionFailure var6 = new net.sourceforge.schemaspy.model.ConnectionFailure("", (java.lang.Throwable)var5);
    net.sourceforge.schemaspy.model.ConnectionFailure var7 = new net.sourceforge.schemaspy.model.ConnectionFailure("ISO-8859-1", (java.lang.Throwable)var6);
    net.sourceforge.schemaspy.util.PasswordReader.IOError var8 = var0.new IOError((java.lang.Throwable)var6);
    net.sourceforge.schemaspy.util.PasswordReader var9 = net.sourceforge.schemaspy.util.PasswordReader.getInstance();
    net.sourceforge.schemaspy.view.StyleSheet.MissingCssPropertyException var13 = new net.sourceforge.schemaspy.view.StyleSheet.MissingCssPropertyException("", "hi!");
    net.sourceforge.schemaspy.model.ConnectionFailure var14 = new net.sourceforge.schemaspy.model.ConnectionFailure("", (java.lang.Throwable)var13);
    net.sourceforge.schemaspy.view.StyleSheet.ParseException var15 = new net.sourceforge.schemaspy.view.StyleSheet.ParseException((java.lang.Exception)var14);
    net.sourceforge.schemaspy.util.PasswordReader.IOError var16 = var9.new IOError((java.lang.Throwable)var15);
    net.sourceforge.schemaspy.Config.MissingRequiredParameterException var20 = new net.sourceforge.schemaspy.Config.MissingRequiredParameterException("hi!", "ISO-8859-1", false);
    net.sourceforge.schemaspy.util.PasswordReader.IOError var21 = var9.new IOError((java.lang.Throwable)var20);
    net.sourceforge.schemaspy.util.PasswordReader.IOError var22 = var0.new IOError((java.lang.Throwable)var21);
    net.sourceforge.schemaspy.model.InvalidConfigurationException var24 = new net.sourceforge.schemaspy.model.InvalidConfigurationException("net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)");
    net.sourceforge.schemaspy.util.PasswordReader.IOError var25 = var0.new IOError((java.lang.Throwable)var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test401() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test401");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.util.List var24 = var0.getIconImages();
    boolean var25 = var0.isFocusCycleRoot();
    var0.setState((-1));
    boolean var28 = var0.isFocusableWindow();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);

  }

  public void test402() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test402");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.requestFocus();
    boolean var6 = var0.isVisible();
    var0.hide();
    int var8 = var0.getX();
    boolean var9 = var0.isVisible();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var11 = var0.getComponent(312);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test403() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test403");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    boolean var5 = var0.isMeterEnabled();
    java.lang.String var7 = var0.getParam("a");
    boolean var8 = var0.isEncodeCommentsEnabled();
    boolean var9 = var0.isNumRowsEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test404() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test404");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.requestFocus();
    java.awt.Color var6 = var0.getBackground();
    javax.swing.event.AncestorListener[] var7 = var0.getAncestorListeners();
    var0.setVerifyInputWhenFocusTarget(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test405() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test405");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    var0.firePropertyChange("a", (byte)10, (byte)0);
    java.awt.Insets var8 = var0.insets();
    var0.setAlignmentY(100.0f);
    java.awt.Insets var11 = var0.getInsets();
    var0.layout();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test406() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test406");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    boolean var2 = var0.isRankDirBugEnabled();
    var0.setMaxDetailedTabled(0);
    var0.setSqlFormatter("hi!s");
    var0.setHtmlGenerationEnabled(false);
    var0.setMaxDbThreads((-3));
    net.sourceforge.schemaspy.Config.setInstance(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test407() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test407");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var26 = var25.isManagingFocus();
    java.awt.Rectangle var27 = var25.getVisibleRect();
    var0.setBounds(var27);
    var0.hide();
    java.util.List var30 = var0.getIconImages();
    var0.resize(2, 0);
    net.sourceforge.schemaspy.ui.DbConfigPanel var34 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var34.requestFocus();
    var34.setFocusTraversalPolicyProvider(true);
    javax.swing.event.AncestorListener[] var38 = var34.getAncestorListeners();
    var34.paintImmediately(1, 0, 0, (-1));
    java.awt.ComponentOrientation var44 = var34.getComponentOrientation();
    var0.applyComponentOrientation(var44);
    var0.dispose();
    boolean var47 = var0.isFocusCycleRoot();
    java.awt.event.HierarchyListener[] var48 = var0.getHierarchyListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test408() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test408");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.doLayout();
    boolean var8 = var0.isCursorSet();
    java.awt.event.HierarchyListener[] var9 = var0.getHierarchyListeners();
    java.beans.VetoableChangeListener[] var10 = var0.getVetoableChangeListeners();
    net.sourceforge.schemaspy.ui.DbConfigPanel var11 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var11.requestFocus();
    var11.setFocusTraversalPolicyProvider(true);
    var11.firePropertyChange("a", (byte)10, (byte)0);
    java.awt.Insets var19 = var11.insets();
    var11.setAlignmentY(100.0f);
    boolean var22 = var0.isFocusCycleRoot((java.awt.Container)var11);
    boolean var23 = var11.isMaximumSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test409() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test409");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.reshape(1, 1, 1, 100);
    net.sourceforge.schemaspy.ui.DbConfigPanel var10 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var10.requestFocus();
    var10.setFocusTraversalPolicyProvider(true);
    java.awt.Point var15 = var10.getMousePosition(true);
    java.awt.Component var16 = var10.getNextFocusableComponent();
    java.awt.Dimension var17 = var10.getMinimumSize();
    java.awt.Dimension var18 = var0.getSize(var17);
    boolean var19 = var0.getFocusTraversalKeysEnabled();
    var0.revalidate();
    java.awt.event.KeyListener[] var21 = var0.getKeyListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test410() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test410");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    boolean var7 = var0.hasFocus();
    boolean var8 = var0.getFocusTraversalKeysEnabled();
    var0.setSize(1, (-1));
    java.awt.image.VolatileImage var14 = var0.createVolatileImage(1, (-3));
    javax.swing.event.AncestorListener[] var15 = var0.getAncestorListeners();
    java.awt.event.MouseListener[] var16 = var0.getMouseListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test411() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test411");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    var0.setSchemaSpec("hi!");
    int var7 = var0.getMaxDetailedTables();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 300);

  }

  public void test412() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test412");


    net.sourceforge.schemaspy.util.DbSpecificOption var2 = new net.sourceforge.schemaspy.util.DbSpecificOption("", "ISO-8859-1");
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.getDescription();
    java.lang.String var5 = var2.toString();
    java.lang.Object var6 = var2.getValue();
    java.lang.Object var7 = var2.getValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"+ "'", var3.equals("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ISO-8859-1"+ "'", var4.equals("ISO-8859-1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"+ "'", var5.equals("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test413() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test413");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    boolean var25 = var0.isLocationByPlatform();
    java.awt.Component var26 = var0.getFocusOwner();
    boolean var27 = var0.getFocusableWindowState();
    java.awt.event.WindowStateListener[] var28 = var0.getWindowStateListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test414() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test414");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var26 = var25.isManagingFocus();
    java.awt.Rectangle var27 = var25.getVisibleRect();
    var0.setBounds(var27);
    var0.hide();
    java.util.List var30 = var0.getIconImages();
    var0.resize(2, 0);
    java.awt.Font var34 = var0.getFont();
    var0.show();
    boolean var36 = var0.isForegroundSet();
    java.lang.String var37 = var0.getWarningString();
    java.beans.PropertyChangeListener[] var38 = var0.getPropertyChangeListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test415() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test415");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    boolean var2 = var0.isEvaluateAllEnabled();
    java.lang.String var3 = var0.getDescription();
    java.lang.String var4 = var0.getSchema();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test416() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test416");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    boolean var3 = var0.isEvaluateAllEnabled();
    var0.setFont("net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory).hi!. ");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test417() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test417");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.doLayout();
    boolean var8 = var0.isCursorSet();
    var0.nextFocus();
    java.awt.Component var12 = var0.locate(300, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test418() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test418");


    net.sourceforge.schemaspy.util.CaseInsensitiveMap var1 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.List var2 = net.sourceforge.schemaspy.DbAnalyzer.getRailsConstraints((java.util.Map)var1);
    net.sourceforge.schemaspy.Config var3 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var4 = var3.getTableExclusions();
    boolean var5 = var3.isHtmlGenerationEnabled();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var7 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    var7.clear();
    var3.setDbSpecificOptions((java.util.Map)var7);
    java.lang.String var10 = var7.toString();
    var1.putAll((java.util.Map)var7);
    java.util.Set var12 = var1.entrySet();
    net.sourceforge.schemaspy.ui.DbTypeSelectorModel var14 = new net.sourceforge.schemaspy.ui.DbTypeSelectorModel("ISO-8859-1");
    int var15 = var14.getSize();
    java.lang.Object var16 = var14.getSelectedItem();
    net.sourceforge.schemaspy.ui.DbConfigPanel var17 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var17.requestFocus();
    var17.setFocusTraversalPolicyProvider(true);
    var17.firePropertyChange("a", (byte)10, (byte)0);
    java.awt.Insets var25 = var17.insets();
    var17.setAlignmentY(100.0f);
    var14.setSelectedItem((java.lang.Object)100.0f);
    net.sourceforge.schemaspy.util.LineWriter var32 = new net.sourceforge.schemaspy.util.LineWriter("Unknown", 100, "ISO-8859-1");
    var32.flush();
    var32.flush();
    var14.setSelectedItem((java.lang.Object)var32);
    var32.newLine();
    char[] var38 = new char[] { ' '};
    var32.write(var38);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var40 = var1.get((java.lang.Object)var32);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "{}"+ "'", var10.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test419() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test419");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.hasOrphans();
    var0.setHtmlGenerationEnabled(true);
    var0.setEvaluateAllEnabled(false);
    boolean var9 = var0.isEncodeCommentsEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test420() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test420");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.util.List var24 = var0.getIconImages();
    java.awt.Rectangle var25 = var0.getMaximizedBounds();
    java.util.List var26 = var0.getIconImages();
    var0.resize(312, (-3));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test421() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test421");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    boolean var1 = var0.isImpliedConstraintsEnabled();
    var0.setHasOrphans(false);
    java.lang.String var4 = var0.getSchemaSpec();
    java.util.regex.Pattern var5 = var0.getIndirectColumnExclusions();
    var0.setHost("hi!");
    var0.setEncodeCommentsEnabled(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var10 = var0.asList();
      fail("Expected exception of type net.sourceforge.schemaspy.Config.MissingRequiredParameterException");
    } catch (net.sourceforge.schemaspy.Config.MissingRequiredParameterException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test422() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test422");


    net.sourceforge.schemaspy.model.RoutineParameter var3 = new net.sourceforge.schemaspy.model.RoutineParameter("schemaSpy.css", "ISO-8859-1s", "hi!s{hi!s}hi!s");
    java.lang.String var4 = var3.getType();
    java.lang.String var5 = var3.getMode();
    java.lang.String var6 = var3.getType();
    java.lang.String var7 = var3.getMode();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ISO-8859-1s"+ "'", var4.equals("ISO-8859-1s"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!s{hi!s}hi!s"+ "'", var5.equals("hi!s{hi!s}hi!s"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ISO-8859-1s"+ "'", var6.equals("ISO-8859-1s"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!s{hi!s}hi!s"+ "'", var7.equals("hi!s{hi!s}hi!s"));

  }

  public void test423() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test423");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    boolean var1 = var0.isImpliedConstraintsEnabled();
    var0.setHasOrphans(false);
    java.lang.String var4 = var0.getSchemaSpec();
    var0.setCatalog("hi!");
    java.io.File var7 = var0.getGraphvizDir();
    var0.setPromptForPasswordEnabled(false);
    var0.setPort((java.lang.Integer)300);
    java.lang.String var13 = var0.getParam("net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test424() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test424");


    net.sourceforge.schemaspy.util.Version var1 = new net.sourceforge.schemaspy.util.Version("");
    net.sourceforge.schemaspy.util.DbSpecificOption var4 = new net.sourceforge.schemaspy.util.DbSpecificOption("", "ISO-8859-1");
    java.lang.String var5 = var4.toString();
    net.sourceforge.schemaspy.Config var6 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var7 = var6.getTableExclusions();
    boolean var8 = var6.isEvaluateAllEnabled();
    java.lang.String var10 = var6.getParam("hi!s");
    var4.setValue((java.lang.Object)"hi!s");
    boolean var12 = var1.equals((java.lang.Object)"hi!s");
    net.sourceforge.schemaspy.util.Version var14 = new net.sourceforge.schemaspy.util.Version("");
    net.sourceforge.schemaspy.util.Version var16 = new net.sourceforge.schemaspy.util.Version("");
    int var17 = var14.compareTo(var16);
    net.sourceforge.schemaspy.util.Version var19 = new net.sourceforge.schemaspy.util.Version("");
    int var20 = var14.compareTo(var19);
    int var21 = var1.compareTo(var14);
    net.sourceforge.schemaspy.ui.MainFrame var22 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var23 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var23.requestFocus();
    var23.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var27 = var23.insets();
    var23.setAlignmentX(1.0f);
    java.awt.Color var30 = var23.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var31 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var31.requestFocus();
    var31.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var35 = var31.insets();
    float var36 = var31.getAlignmentX();
    var31.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var42 = var31.getMouseListeners();
    java.awt.Rectangle var43 = var31.bounds();
    var23.setBounds(var43);
    var22.setMaximizedBounds(var43);
    java.util.List var46 = var22.getIconImages();
    java.awt.Rectangle var47 = var22.getMaximizedBounds();
    java.util.List var48 = var22.getIconImages();
    java.util.List var49 = net.sourceforge.schemaspy.DbAnalyzer.sortTablesByName(var48);
    boolean var50 = var14.equals((java.lang.Object)var48);
    net.sourceforge.schemaspy.Config.MissingRequiredParameterException var54 = new net.sourceforge.schemaspy.Config.MissingRequiredParameterException("dot version 2.2.1 or versions greater than 2.4", "[]", true);
    boolean var55 = var14.equals((java.lang.Object)true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"+ "'", var5.equals("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);

  }

  public void test425() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test425");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    boolean var2 = var0.isHtmlGenerationEnabled();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var4 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    var4.clear();
    var0.setDbSpecificOptions((java.util.Map)var4);
    java.lang.String var7 = var4.toString();
    boolean var8 = var4.isEmpty();
    java.lang.Object var9 = var4.clone();
    net.sourceforge.schemaspy.ui.DbConfigPanel var10 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var10.requestFocus();
    var10.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var14 = var10.insets();
    var10.requestFocus();
    boolean var16 = var10.isVisible();
    var10.hide();
    int var18 = var10.getX();
    boolean var19 = var10.isFontSet();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var20 = var4.remove((java.lang.Object)var10);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "{}"+ "'", var7.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);

  }

  public void test426() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test426");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    java.awt.Color var7 = var0.getForeground();
    javax.swing.InputVerifier var8 = var0.getInputVerifier();
    var0.repaint(100L, 10, 1, 0, 100);
    java.awt.Component.BaselineResizeBehavior var15 = var0.getBaselineResizeBehavior();
    java.util.Locale var16 = var0.getLocale();
    java.awt.Dimension var17 = var0.getPreferredSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test427() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test427");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    boolean var4 = var0.requestFocusInWindow();
    net.sourceforge.schemaspy.ui.DbConfigPanel var5 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var5.requestFocus();
    java.beans.PropertyChangeListener[] var7 = var5.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var8 = var5.getBaselineResizeBehavior();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    var9.setAlignmentX(1.0f);
    var9.doLayout();
    boolean var17 = var9.isCursorSet();
    var9.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var22 = var9.getLocation();
    boolean var23 = var5.contains(var22);
    java.awt.Component var24 = var0.findComponentAt(var22);
    boolean var25 = var0.isRequestFocusEnabled();
    net.sourceforge.schemaspy.ui.DbConfigPanel var26 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var26.requestFocus();
    var26.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var30 = var26.insets();
    var26.setAlignmentX(1.0f);
    boolean var33 = var26.hasFocus();
    boolean var34 = var26.getFocusTraversalKeysEnabled();
    var26.setSize(1, (-1));
    boolean var39 = var26.requestFocus(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var40 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var40.requestFocus();
    java.beans.PropertyChangeListener[] var42 = var40.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var43 = var40.getBaselineResizeBehavior();
    net.sourceforge.schemaspy.ui.DbConfigPanel var44 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var44.requestFocus();
    var44.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var48 = var44.insets();
    var44.setAlignmentX(1.0f);
    var44.doLayout();
    boolean var52 = var44.isCursorSet();
    var44.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var57 = var44.getLocation();
    boolean var58 = var40.contains(var57);
    java.awt.Point var59 = var26.getLocation(var57);
    java.awt.Point var60 = var0.getLocation(var57);
    java.awt.event.KeyListener[] var61 = var0.getKeyListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test428() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test428");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.doLayout();
    boolean var8 = var0.isCursorSet();
    var0.setAlignmentY(10.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test429() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test429");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    boolean var1 = var0.isImpliedConstraintsEnabled();
    var0.setHasOrphans(false);
    java.lang.String var4 = var0.getSchemaSpec();
    boolean var5 = var0.isHighQuality();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Properties var7 = var0.determineDbProperties("ora");
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test430() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test430");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    java.lang.Integer var2 = var0.getPort();
    boolean var3 = var0.isOneOfMultipleSchemas();
    java.util.regex.Pattern var4 = var0.getIndirectColumnExclusions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test431() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test431");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    java.awt.event.MouseMotionListener[] var1 = var0.getMouseMotionListeners();
    java.util.Locale var2 = var0.getLocale();
    java.awt.Dimension var3 = var0.getSize();
    java.awt.Window.Type var4 = var0.getType();
    var0.transferFocusUpCycle();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test432() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test432");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    java.awt.Color var7 = var0.getForeground();
    var0.firePropertyChange("hi!", 10L, 10L);
    net.sourceforge.schemaspy.model.RoutineParameter var15 = new net.sourceforge.schemaspy.model.RoutineParameter("ISO-8859-1s", "hi!", "");
    java.lang.Object var16 = var0.getClientProperty((java.lang.Object)"ISO-8859-1s");
    net.sourceforge.schemaspy.ui.DbConfigPanel var17 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var17.requestFocus();
    var17.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var21 = var17.insets();
    var17.setAlignmentX(1.0f);
    var17.doLayout();
    boolean var25 = var17.isCursorSet();
    net.sourceforge.schemaspy.ui.MainFrame var26 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var27 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var28 = var27.getTableExclusions();
    boolean var29 = var27.isEvaluateAllEnabled();
    java.util.List var30 = var27.getColumnDetails();
    var26.setIconImages(var30);
    boolean var32 = var26.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var33 = var26.getModalExclusionType();
    net.sourceforge.schemaspy.ui.DbConfigPanel var34 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var34.requestFocus();
    var34.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var38 = var34.insets();
    var34.setAlignmentX(1.0f);
    boolean var41 = var34.hasFocus();
    boolean var42 = var34.getFocusTraversalKeysEnabled();
    boolean var43 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var34);
    net.sourceforge.schemaspy.ui.DbConfigPanel var44 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var45 = var44.isManagingFocus();
    java.awt.Rectangle var46 = var44.getVisibleRect();
    java.awt.Rectangle var47 = var34.getBounds(var46);
    java.awt.Dimension var48 = var34.getPreferredSize();
    var26.setSize(var48);
    var17.setMaximumSize(var48);
    java.awt.Dimension var51 = var0.getSize(var48);
    java.awt.Dimension var52 = var0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test433() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test433");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var7 = var0.getModalExclusionType();
    boolean var8 = var0.isAlwaysOnTop();
    var0.setFocusTraversalPolicyProvider(true);
    net.sourceforge.schemaspy.ui.DbConfigPanel var11 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var11.requestFocus();
    var11.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var15 = var11.insets();
    var11.setAlignmentX(1.0f);
    boolean var18 = var11.hasFocus();
    boolean var19 = var11.getFocusTraversalKeysEnabled();
    boolean var20 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var11);
    var11.firePropertyChange("hi!", 'a', 'a');
    java.lang.String var25 = var11.getUIClassID();
    java.awt.Point var27 = var11.getMousePosition(false);
    java.awt.Point var28 = var11.location();
    java.awt.Component var29 = var0.findComponentAt(var28);
    net.sourceforge.schemaspy.ui.MainFrame var30 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var31 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var32 = var31.getTableExclusions();
    boolean var33 = var31.isEvaluateAllEnabled();
    java.util.List var34 = var31.getColumnDetails();
    var30.setIconImages(var34);
    java.awt.Toolkit var36 = var30.getToolkit();
    boolean var37 = var30.isFocused();
    int var38 = var30.getExtendedState();
    boolean var39 = var30.isAlwaysOnTopSupported();
    var30.setCursor(5);
    net.sourceforge.schemaspy.ui.MainFrame var42 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var43 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var44 = var43.getTableExclusions();
    boolean var45 = var43.isEvaluateAllEnabled();
    java.util.List var46 = var43.getColumnDetails();
    var42.setIconImages(var46);
    java.awt.Toolkit var48 = var42.getToolkit();
    boolean var49 = var42.isFocused();
    int var50 = var42.getExtendedState();
    java.awt.Window.Type var51 = var42.getType();
    var30.setType(var51);
    var0.setType(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "PanelUI"+ "'", var25.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test434() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test434");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    boolean var5 = var0.isMeterEnabled();
    java.lang.String var7 = var0.getParam("a");
    java.lang.String var8 = var0.getDescription();
    var0.setFontSize(100);
    var0.setUser("Helvetica");
    var0.setServer("net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)s");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test435() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test435");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.util.Locale var4 = javax.swing.JComponent.getDefaultLocale();
    var0.setLocale(var4);
    net.sourceforge.schemaspy.ui.DbConfigPanel var6 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var6.requestFocus();
    var6.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var10 = var6.insets();
    float var11 = var6.getAlignmentX();
    var6.setBounds(0, 1, 10, 100);
    java.awt.Rectangle var17 = var6.getBounds();
    var0.computeVisibleRect(var17);
    java.awt.Component var21 = var0.getComponentAt(100, 2);
    var0.show();
    java.awt.event.FocusListener[] var23 = var0.getFocusListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test436() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test436");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    boolean var4 = var0.requestFocusInWindow();
    net.sourceforge.schemaspy.ui.MainFrame var5 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var6 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var7 = var6.getTableExclusions();
    boolean var8 = var6.isEvaluateAllEnabled();
    java.util.List var9 = var6.getColumnDetails();
    var5.setIconImages(var9);
    boolean var11 = var5.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var12 = var5.getModalExclusionType();
    boolean var13 = var5.isAlwaysOnTop();
    java.awt.Rectangle var14 = var5.getMaximizedBounds();
    net.sourceforge.schemaspy.ui.DbConfigPanel var15 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var15.requestFocus();
    var15.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var19 = var15.insets();
    java.lang.Object var20 = var15.getTreeLock();
    boolean var21 = var15.isFocusTraversalPolicyProvider();
    java.awt.Dimension var22 = var15.getMaximumSize();
    net.sourceforge.schemaspy.ui.MainFrame var23 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var24 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var24.requestFocus();
    var24.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var28 = var24.insets();
    var24.setAlignmentX(1.0f);
    java.awt.Color var31 = var24.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var32 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var32.requestFocus();
    var32.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var36 = var32.insets();
    float var37 = var32.getAlignmentX();
    var32.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var43 = var32.getMouseListeners();
    java.awt.Rectangle var44 = var32.bounds();
    var24.setBounds(var44);
    var23.setMaximizedBounds(var44);
    java.util.List var47 = var23.getIconImages();
    boolean var48 = var23.isDisplayable();
    java.awt.Dimension var49 = var23.preferredSize();
    java.awt.Dimension var50 = var15.getSize(var49);
    net.sourceforge.schemaspy.ui.DbConfigPanel var51 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var51.requestFocus();
    var51.setFocusTraversalPolicyProvider(true);
    java.awt.Point var56 = var51.getMousePosition(true);
    int var57 = var51.getComponentCount();
    int var58 = var51.getHeight();
    var51.setName("hi!s");
    net.sourceforge.schemaspy.ui.DbConfigPanel var61 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var61.requestFocus();
    var61.setFocusTraversalPolicyProvider(true);
    java.awt.Point var66 = var61.getMousePosition(true);
    java.awt.Component var67 = var61.getNextFocusableComponent();
    java.awt.Dimension var68 = var61.getMinimumSize();
    var51.setSize(var68);
    java.awt.Rectangle var70 = var51.getBounds();
    var15.computeVisibleRect(var70);
    var5.setMaximizedBounds(var70);
    var0.paintImmediately(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test437() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test437");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var7 = var0.getModalExclusionType();
    boolean var8 = var0.isAutoRequestFocus();
    java.awt.Toolkit var9 = var0.getToolkit();
    var0.hide();
    net.sourceforge.schemaspy.ui.DbConfigPanel var11 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var11.requestFocus();
    var11.setFocusTraversalPolicyProvider(true);
    boolean var15 = var11.requestFocusInWindow();
    java.awt.Dimension var16 = var11.getMaximumSize();
    var0.setPreferredSize(var16);
    net.sourceforge.schemaspy.ui.DbConfigPanel var18 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var18.requestFocus();
    var18.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var22 = var18.insets();
    var18.setAlignmentX(1.0f);
    boolean var25 = var18.hasFocus();
    net.sourceforge.schemaspy.ui.DbConfigPanel var26 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var26.requestFocus();
    var26.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var30 = var26.insets();
    float var31 = var26.getAlignmentX();
    var26.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var37 = var26.getMouseListeners();
    boolean var38 = var18.isAncestorOf((java.awt.Component)var26);
    java.awt.im.InputMethodRequests var39 = var26.getInputMethodRequests();
    net.sourceforge.schemaspy.ui.DbConfigPanel var40 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var40.requestFocus();
    var40.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var44 = var40.insets();
    var40.setAlignmentX(1.0f);
    var40.doLayout();
    boolean var48 = var40.isCursorSet();
    var40.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var53 = var40.getLocation();
    java.awt.Component var54 = var26.findComponentAt(var53);
    boolean var55 = var26.getIgnoreRepaint();
    java.awt.Insets var56 = var26.getInsets();
    var0.setGlassPane((java.awt.Component)var26);
    boolean var59 = var26.areFocusTraversalKeysSet(0);
    var26.list();
    var26.requestFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);

  }

  public void test438() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test438");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    java.awt.Color var7 = var0.getForeground();
    javax.swing.InputVerifier var8 = var0.getInputVerifier();
    var0.repaint(100L, 10, 1, 0, 100);
    java.awt.Component.BaselineResizeBehavior var15 = var0.getBaselineResizeBehavior();
    float var16 = var0.getAlignmentX();
    java.lang.String var17 = var0.getName();
    java.awt.FocusTraversalPolicy var18 = var0.getFocusTraversalPolicy();
    java.awt.event.KeyListener[] var19 = var0.getKeyListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test439() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test439");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    java.beans.PropertyChangeListener[] var2 = var0.getPropertyChangeListeners();
    var0.paintImmediately(0, (-1), (-1), 0);
    java.awt.Font var8 = var0.getFont();
    boolean var9 = var0.requestFocusInWindow();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test440() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test440");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    java.awt.Color var7 = var0.getForeground();
    javax.swing.InputVerifier var8 = var0.getInputVerifier();
    var0.repaint(100L, 10, 1, 0, 100);
    java.awt.Component.BaselineResizeBehavior var15 = var0.getBaselineResizeBehavior();
    float var16 = var0.getAlignmentX();
    java.lang.String var17 = var0.getName();
    javax.swing.KeyStroke[] var18 = var0.getRegisteredKeyStrokes();
    java.awt.event.MouseMotionListener[] var19 = var0.getMouseMotionListeners();
    var0.show(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test441() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test441");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    boolean var1 = var0.isImpliedConstraintsEnabled();
    var0.setHasOrphans(false);
    java.lang.String var4 = var0.getSchemaSpec();
    boolean var5 = var0.isHighQuality();
    int var6 = var0.getMaxDetailedTables();
    var0.setImpliedConstraintsEnabled(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.io.File var9 = var0.getOutputDir();
      fail("Expected exception of type net.sourceforge.schemaspy.Config.MissingRequiredParameterException");
    } catch (net.sourceforge.schemaspy.Config.MissingRequiredParameterException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 300);

  }

  public void test442() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test442");


    net.sourceforge.schemaspy.ui.DbConfigTableModel var0 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    var0.fireTableRowsInserted(2, 1);
    java.lang.Object var6 = var0.getValueAt(0, 100);
    var0.fireTableRowsDeleted(2, 0);
    int var10 = var0.getRowCount();
    var0.fireTableRowsDeleted(300, 300);
    net.sourceforge.schemaspy.Config var14 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var15 = var14.getTableExclusions();
    boolean var16 = var14.isRankDirBugEnabled();
    net.sourceforge.schemaspy.Config var17 = new net.sourceforge.schemaspy.Config();
    var17.setDb("a");
    java.lang.String var20 = var17.getServer();
    boolean var21 = var17.isHtmlGenerationEnabled();
    boolean var22 = var17.isMeterEnabled();
    java.lang.String var24 = var17.getParam("a");
    java.lang.String var25 = var17.getDescription();
    var17.setFontSize(100);
    var17.setHtmlGenerationEnabled(false);
    net.sourceforge.schemaspy.Config var30 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var31 = var30.getTableExclusions();
    var30.setSqlFormatter("hi!");
    net.sourceforge.schemaspy.view.DefaultSqlFormatter var34 = new net.sourceforge.schemaspy.view.DefaultSqlFormatter();
    var30.setSqlFormatter((net.sourceforge.schemaspy.view.SqlFormatter)var34);
    var17.setSqlFormatter((net.sourceforge.schemaspy.view.SqlFormatter)var34);
    var14.setSqlFormatter((net.sourceforge.schemaspy.view.SqlFormatter)var34);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setValueAt((java.lang.Object)var34, 5, 1);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test443() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test443");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    java.beans.PropertyChangeListener[] var2 = var0.getPropertyChangeListeners();
    var0.paintImmediately(0, (-1), (-1), 0);
    java.awt.event.KeyListener[] var8 = var0.getKeyListeners();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    var9.setAlignmentX(1.0f);
    java.awt.Color var16 = var9.getForeground();
    var0.setForeground(var16);
    boolean var18 = var0.hasFocus();
    var0.enableInputMethods(false);
    var0.setDebugGraphicsOptions(23);
    java.awt.Dimension var23 = var0.size();
    int var24 = var0.getY();
    var0.setDebugGraphicsOptions(3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);

  }

  public void test444() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test444");


    net.sourceforge.schemaspy.ui.DbConfigTableModel var0 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    int var2 = var0.findColumn("a");
    net.sourceforge.schemaspy.util.DbSpecificConfig var4 = new net.sourceforge.schemaspy.util.DbSpecificConfig("net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    var0.setDbSpecificConfig(var4);
    var0.fireTableStructureChanged();
    net.sourceforge.schemaspy.ui.DbConfigTableModel var7 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    net.sourceforge.schemaspy.util.DbSpecificConfig var9 = new net.sourceforge.schemaspy.util.DbSpecificConfig("");
    var9.dumpUsage();
    var7.setDbSpecificConfig(var9);
    net.sourceforge.schemaspy.Config var12 = var9.getConfig();
    var0.setDbSpecificConfig(var9);
    var0.fireTableStructureChanged();
    net.sourceforge.schemaspy.ui.DbConfigTableModel var15 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    var15.fireTableRowsInserted(2, 1);
    java.lang.Object var21 = var15.getValueAt(0, 100);
    javax.swing.event.TableModelListener[] var22 = var15.getTableModelListeners();
    var15.fireTableRowsUpdated(0, 3);
    int var27 = var15.findColumn("net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    var15.fireTableRowsDeleted(11, 2);
    java.lang.Class var32 = var15.getClass(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.EventListener[] var33 = var0.<java.util.EventListener>getListeners(var32);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test445() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test445");


    net.sourceforge.schemaspy.util.Dot var0 = net.sourceforge.schemaspy.util.Dot.getInstance();
    var0.setHighQuality(true);
    net.sourceforge.schemaspy.util.Dot.DotFailure var4 = var0.new DotFailure("hi!s");
    var0.setHighQuality(true);
    boolean var7 = var0.supportsCenteredEastWestEdges();
    var0.setFormat("hi!");
    java.lang.String var10 = var0.getSupportedVersions();
    java.lang.String var11 = var0.getRenderer();
    var0.setFormat("ISO-8859-1");
    var0.setFormat("Password associated with user id");
    boolean var16 = var0.isValid();
    boolean var17 = var0.isHighQuality();
    net.sourceforge.schemaspy.util.Dot.DotFailure var19 = var0.new DotFailure("hi!s");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "dot version 2.2.1 or versions greater than 2.4"+ "'", var10.equals("dot version 2.2.1 or versions greater than 2.4"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test446() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test446");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    var0.setFocusableWindowState(true);
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    boolean var17 = var9.contains(1, (-1));
    var9.transferFocus();
    var9.removeAll();
    java.awt.Component var21 = var0.add((java.awt.Component)var9, 0);
    java.awt.dnd.DropTarget var22 = var0.getDropTarget();
    var0.setState((-3));
    var0.requestFocus();
    java.util.List var26 = var0.getIconImages();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test447() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test447");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var26 = var25.isManagingFocus();
    java.awt.Rectangle var27 = var25.getVisibleRect();
    var0.setBounds(var27);
    var0.removeAll();
    java.awt.Container var30 = var0.getContentPane();
    java.awt.Component var31 = var0.getMostRecentFocusOwner();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test448() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test448");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    boolean var7 = var0.hasFocus();
    boolean var8 = var0.getFocusTraversalKeysEnabled();
    var0.setSize(1, (-1));
    java.awt.image.VolatileImage var14 = var0.createVolatileImage(1, (-3));
    boolean var15 = var0.isDisplayable();
    net.sourceforge.schemaspy.ui.DbConfigPanel var16 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var16.requestFocus();
    var16.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var20 = var16.insets();
    var16.setAlignmentX(1.0f);
    var16.doLayout();
    boolean var24 = var16.isCursorSet();
    java.awt.event.HierarchyListener[] var25 = var16.getHierarchyListeners();
    net.sourceforge.schemaspy.ui.DbConfigPanel var26 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var26.requestFocus();
    var26.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var30 = var26.insets();
    var26.setAlignmentX(1.0f);
    java.awt.Color var33 = var26.getForeground();
    javax.swing.InputVerifier var34 = var26.getInputVerifier();
    var26.repaint(100L, 10, 1, 0, 100);
    var26.setEnabled(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var43 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var43.requestFocus();
    java.beans.PropertyChangeListener[] var45 = var43.getPropertyChangeListeners();
    var43.paintImmediately(0, (-1), (-1), 0);
    java.awt.event.KeyListener[] var51 = var43.getKeyListeners();
    net.sourceforge.schemaspy.ui.DbConfigPanel var52 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var52.requestFocus();
    var52.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var56 = var52.insets();
    var52.setAlignmentX(1.0f);
    java.awt.Color var59 = var52.getForeground();
    var43.setForeground(var59);
    var26.setBackground(var59);
    var16.setForeground(var59);
    net.sourceforge.schemaspy.ui.DbConfigPanel var63 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var64 = var63.isManagingFocus();
    int var65 = var63.getWidth();
    java.awt.Insets var66 = var63.insets();
    javax.accessibility.AccessibleContext var67 = var63.getAccessibleContext();
    boolean var70 = var63.inside(100, (-3));
    java.awt.Rectangle var71 = var63.getVisibleRect();
    java.awt.Point var72 = var63.getLocation();
    var63.removeNotify();
    net.sourceforge.schemaspy.ui.DbConfigPanel var74 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var74.requestFocus();
    var74.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var78 = var74.insets();
    var74.setAlignmentX(1.0f);
    java.awt.Color var81 = var74.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var82 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var82.requestFocus();
    var82.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var86 = var82.insets();
    float var87 = var82.getAlignmentX();
    var82.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var93 = var82.getMouseListeners();
    java.awt.Rectangle var94 = var82.bounds();
    var74.setBounds(var94);
    var63.repaint(var94);
    java.awt.Rectangle var97 = var16.getBounds(var94);
    var0.paintImmediately(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test449() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test449");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    boolean var25 = var0.isLocationByPlatform();
    java.awt.Container var26 = var0.getFocusCycleRootAncestor();
    net.sourceforge.schemaspy.ui.MainFrame var27 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var28 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var29 = var28.getTableExclusions();
    boolean var30 = var28.isEvaluateAllEnabled();
    java.util.List var31 = var28.getColumnDetails();
    var27.setIconImages(var31);
    java.awt.Toolkit var33 = var27.getToolkit();
    boolean var34 = var27.isFocused();
    int var35 = var27.getExtendedState();
    boolean var36 = var27.isAlwaysOnTopSupported();
    var27.setCursor(5);
    net.sourceforge.schemaspy.ui.MainFrame var39 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var40 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var41 = var40.getTableExclusions();
    boolean var42 = var40.isEvaluateAllEnabled();
    java.util.List var43 = var40.getColumnDetails();
    var39.setIconImages(var43);
    java.awt.Toolkit var45 = var39.getToolkit();
    boolean var46 = var39.isFocused();
    int var47 = var39.getExtendedState();
    java.awt.Window.Type var48 = var39.getType();
    var27.setType(var48);
    var0.setType(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test450() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test450");


    net.sourceforge.schemaspy.util.Dot var0 = net.sourceforge.schemaspy.util.Dot.getInstance();
    var0.setHighQuality(true);
    net.sourceforge.schemaspy.util.Dot.DotFailure var4 = var0.new DotFailure("hi!s");
    var0.setHighQuality(true);
    boolean var7 = var0.supportsCenteredEastWestEdges();
    var0.setFormat("hi!");
    java.lang.String var10 = var0.getSupportedVersions();
    java.lang.String var11 = var0.getRenderer();
    var0.setFormat("ISO-8859-1");
    boolean var14 = var0.requiresGdRenderer();
    boolean var15 = var0.exists();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "dot version 2.2.1 or versions greater than 2.4"+ "'", var10.equals("dot version 2.2.1 or versions greater than 2.4"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test451() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test451");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    java.lang.String var5 = var0.getSchemaSpec();
    var0.setViewsEnabled(false);
    var0.setTableInclusions("");
    var0.setHasOrphans(true);
    java.lang.String var12 = var0.getFont();
    java.lang.String var13 = var0.getConnectionPropertiesFile();
    java.lang.String var14 = var0.getDb();
    var0.setTableInclusions(" ");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "Helvetica"+ "'", var12.equals("Helvetica"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "a"+ "'", var14.equals("a"));

  }

  public void test452() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test452");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    float var5 = var0.getAlignmentX();
    var0.setBounds(0, 1, 10, 100);
    javax.swing.InputMap var11 = var0.getInputMap();
    boolean var12 = var0.isEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test453() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test453");


    net.sourceforge.schemaspy.MultipleSchemaAnalyzer var0 = net.sourceforge.schemaspy.MultipleSchemaAnalyzer.getInstance();
    net.sourceforge.schemaspy.TableOrderer var2 = new net.sourceforge.schemaspy.TableOrderer();
    net.sourceforge.schemaspy.ui.MainFrame var3 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var4 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var4.requestFocus();
    var4.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var8 = var4.insets();
    var4.setAlignmentX(1.0f);
    java.awt.Color var11 = var4.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var12 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var12.requestFocus();
    var12.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var16 = var12.insets();
    float var17 = var12.getAlignmentX();
    var12.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var23 = var12.getMouseListeners();
    java.awt.Rectangle var24 = var12.bounds();
    var4.setBounds(var24);
    var3.setMaximizedBounds(var24);
    java.util.List var27 = var3.getIconImages();
    net.sourceforge.schemaspy.model.Routine var37 = new net.sourceforge.schemaspy.model.Routine("", "hi!", "a", "", "", false, "", "hi!", "");
    java.lang.String var38 = var37.getDefinition();
    net.sourceforge.schemaspy.model.Routine var48 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var49 = var48.getDataAccess();
    java.lang.String var50 = var48.getDefinitionLanguage();
    int var51 = var37.compareTo(var48);
    java.util.List var52 = var37.getParameters();
    java.util.List var53 = var2.getTablesOrderedByRI((java.util.Collection)var27, (java.util.Collection)var52);
    net.sourceforge.schemaspy.SchemaAnalyzer var54 = new net.sourceforge.schemaspy.SchemaAnalyzer();
    net.sourceforge.schemaspy.Config var55 = new net.sourceforge.schemaspy.Config();
    var55.setDb("a");
    java.lang.String var58 = var55.getServer();
    boolean var59 = var55.isHtmlGenerationEnabled();
    boolean var60 = var55.isMeterEnabled();
    net.sourceforge.schemaspy.model.Database var61 = var54.analyze(var55);
    net.sourceforge.schemaspy.Config var62 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var63 = var62.getTableExclusions();
    boolean var64 = var62.isRankDirBugEnabled();
    var62.setMaxDetailedTabled(0);
    net.sourceforge.schemaspy.model.Database var67 = var54.analyze(var62);
    java.util.List var68 = var62.getColumnDetails();
    net.sourceforge.schemaspy.Config var69 = new net.sourceforge.schemaspy.Config();
    var69.setDb("a");
    java.lang.String var72 = var69.getServer();
    boolean var73 = var69.isHtmlGenerationEnabled();
    java.lang.String var74 = var69.getSchemaSpec();
    java.lang.String var75 = var69.getDb();
    boolean var76 = var69.isViewsEnabled();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.analyze("DbSpecificOption name: 'net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s' value: 'null' description: 'a'", var52, var68, var69);
      fail("Expected exception of type net.sourceforge.schemaspy.Config.MissingRequiredParameterException");
    } catch (net.sourceforge.schemaspy.Config.MissingRequiredParameterException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + ""+ "'", var38.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "hi!"+ "'", var49.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "a"+ "'", var50.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "a"+ "'", var75.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);

  }

  public void test454() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test454");


    net.sourceforge.schemaspy.ui.DbConfigTableModel var0 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    int var2 = var0.findColumn("a");
    net.sourceforge.schemaspy.util.DbSpecificConfig var4 = new net.sourceforge.schemaspy.util.DbSpecificConfig("net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    var0.setDbSpecificConfig(var4);
    var0.fireTableRowsInserted((-1), 2);
    java.lang.String var10 = var0.getColumnName((-3));
    var0.fireTableCellUpdated((-3), 300);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Value"+ "'", var10.equals("Value"));

  }

  public void test455() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test455");


    net.sourceforge.schemaspy.model.Routine var9 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var10 = var9.getDataAccess();
    java.lang.String var11 = var9.getComment();
    java.lang.String var12 = var9.getType();
    java.lang.String var13 = var9.getDataAccess();
    java.lang.String var14 = var9.getSecurityType();
    java.util.List var15 = var9.getParameters();
    java.lang.String var16 = net.sourceforge.schemaspy.model.ForeignKeyConstraint.toString(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "a"+ "'", var11.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "hi!"+ "'", var14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "[]"+ "'", var16.equals("[]"));

  }

  public void test456() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test456");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    net.sourceforge.schemaspy.ui.DbConfigPanel var6 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var6.requestFocus();
    var6.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var10 = var6.insets();
    var6.setAlignmentX(1.0f);
    boolean var13 = var6.hasFocus();
    boolean var14 = var6.getFocusTraversalKeysEnabled();
    boolean var15 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var6);
    net.sourceforge.schemaspy.ui.DbConfigPanel var16 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var17 = var16.isManagingFocus();
    java.awt.Rectangle var18 = var16.getVisibleRect();
    java.awt.Rectangle var19 = var6.getBounds(var18);
    java.awt.Dimension var20 = var6.getPreferredSize();
    var0.setMinimumSize(var20);
    var0.toBack();
    var0.setFocusable(true);
    var0.setVisible(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test457() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test457");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    boolean var25 = var0.isLocationByPlatform();
    java.awt.Dimension var26 = var0.getSize();
    boolean var27 = var0.isLightweight();
    java.awt.Image var28 = var0.getIconImage();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test458() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test458");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.requestFocus();
    boolean var6 = var0.isVisible();
    java.awt.Dimension var7 = var0.preferredSize();
    float var8 = var0.getAlignmentY();
    var0.layout();
    net.sourceforge.schemaspy.ui.MainFrame var10 = new net.sourceforge.schemaspy.ui.MainFrame();
    java.awt.Component var11 = var10.getGlassPane();
    var0.remove((java.awt.Component)var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test459() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test459");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    java.beans.PropertyChangeListener[] var2 = var0.getPropertyChangeListeners();
    var0.paintImmediately(0, (-1), (-1), 0);
    java.awt.event.KeyListener[] var8 = var0.getKeyListeners();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    var9.setAlignmentX(1.0f);
    java.awt.Color var16 = var9.getForeground();
    var0.setForeground(var16);
    java.awt.Component var20 = var0.findComponentAt(1, 1);
    boolean var21 = var0.isPaintingTile();
    int var22 = var0.getHeight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);

  }

  public void test460() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test460");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    boolean var25 = var0.isLocationByPlatform();
    net.sourceforge.schemaspy.ui.MainFrame var26 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var27 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var28 = var27.getTableExclusions();
    boolean var29 = var27.isEvaluateAllEnabled();
    java.util.List var30 = var27.getColumnDetails();
    var26.setIconImages(var30);
    boolean var32 = var26.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var33 = var26.getModalExclusionType();
    var0.setModalExclusionType(var33);
    var0.setEnabled(true);
    java.awt.im.InputContext var37 = var0.getInputContext();
    boolean var38 = var0.getFocusableWindowState();
    java.awt.Insets var39 = var0.getInsets();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test461() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test461");


    net.sourceforge.schemaspy.util.CaseInsensitiveMap var1 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    var1.clear();
    net.sourceforge.schemaspy.ui.DbConfigPanel var3 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var3.requestFocus();
    var3.setFocusTraversalPolicyProvider(true);
    java.awt.Point var8 = var3.getMousePosition(true);
    java.awt.Component var9 = var3.getNextFocusableComponent();
    java.awt.Dimension var10 = var3.getMinimumSize();
    boolean var11 = var1.containsValue((java.lang.Object)var3);
    net.sourceforge.schemaspy.ui.DbConfigPanel var12 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var12.requestFocus();
    var12.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var16 = var12.insets();
    var12.setAlignmentX(1.0f);
    boolean var19 = var12.hasFocus();
    boolean var20 = var12.getFocusTraversalKeysEnabled();
    boolean var21 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var12);
    var12.firePropertyChange("hi!", 'a', 'a');
    net.sourceforge.schemaspy.ui.DbConfigPanel var26 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var27 = var26.isManagingFocus();
    int var28 = var26.getWidth();
    java.awt.Insets var29 = var26.insets();
    javax.accessibility.AccessibleContext var30 = var26.getAccessibleContext();
    boolean var33 = var26.inside(100, (-3));
    java.awt.Rectangle var34 = var26.getVisibleRect();
    var12.setBounds(var34);
    net.sourceforge.schemaspy.ui.DbConfigPanel var36 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var36.requestFocus();
    var36.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var40 = var36.insets();
    float var41 = var36.getAlignmentX();
    net.sourceforge.schemaspy.ui.DbConfigPanel var42 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var42.requestFocus();
    var42.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var46 = var42.insets();
    var42.requestFocus();
    var42.setOpaque(false);
    javax.swing.plaf.PanelUI var50 = var42.getUI();
    var36.setUI(var50);
    var12.setUI(var50);
    net.sourceforge.schemaspy.ui.DbConfigPanel var53 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    int var54 = var53.getY();
    net.sourceforge.schemaspy.ui.DbConfigPanel var55 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var55.requestFocus();
    var55.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var59 = var55.insets();
    var55.setAlignmentX(1.0f);
    boolean var62 = var55.hasFocus();
    boolean var63 = var55.getFocusTraversalKeysEnabled();
    boolean var64 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var55);
    var55.firePropertyChange("hi!", 'a', 'a');
    java.lang.String var69 = var55.getUIClassID();
    java.awt.Point var71 = var55.getMousePosition(false);
    java.awt.Point var72 = var55.location();
    java.awt.Component var73 = var53.getComponentAt(var72);
    var3.putClientProperty((java.lang.Object)var12, (java.lang.Object)var53);
    boolean var77 = var53.contains((-3), 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "PanelUI"+ "'", var69.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);

  }

  public void test462() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test462");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    var0.setOutputDir("hi!");
    boolean var7 = var0.isOneOfMultipleSchemas();
    java.util.List var8 = var0.getColumnDetails();
    boolean var9 = var0.isEncodeCommentsEnabled();
    boolean var10 = var0.isDbHelpRequired();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test463() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test463");


    net.sourceforge.schemaspy.util.DbSpecificOption var2 = new net.sourceforge.schemaspy.util.DbSpecificOption("", "ISO-8859-1");
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.getDescription();
    java.lang.String var5 = var2.getName();
    net.sourceforge.schemaspy.Config var6 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var7 = var6.getTableExclusions();
    net.sourceforge.schemaspy.model.Routine var17 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var18 = var17.getDataAccess();
    java.lang.String var19 = var17.getDefinitionLanguage();
    java.util.List var20 = var17.getParameters();
    var6.setColumnDetails(var20);
    var6.setPort((java.lang.Integer)0);
    var6.setDb("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'");
    java.util.regex.Pattern var26 = var6.getIndirectColumnExclusions();
    java.util.logging.Level var27 = var6.getLogLevel();
    boolean var28 = var6.isDbHelpRequired();
    var6.setUser("ora");
    var2.setValue((java.lang.Object)var6);
    java.lang.String var32 = var6.getHost();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"+ "'", var3.equals("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ISO-8859-1"+ "'", var4.equals("ISO-8859-1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "a"+ "'", var19.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);

  }

  public void test464() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test464");


    net.sourceforge.schemaspy.util.CaseInsensitiveMap var1 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.Set var2 = var1.entrySet();
    java.lang.Object var3 = var1.clone();
    int var4 = var1.size();
    var1.clear();
    var1.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test465() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test465");


    net.sourceforge.schemaspy.util.DbSpecificOption var2 = new net.sourceforge.schemaspy.util.DbSpecificOption("net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s", "a");
    java.lang.String var3 = var2.toString();
    net.sourceforge.schemaspy.ui.DbConfigPanel var4 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var4.requestFocus();
    var4.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var8 = var4.insets();
    var4.setAlignmentX(1.0f);
    boolean var11 = var4.hasFocus();
    net.sourceforge.schemaspy.ui.DbConfigPanel var12 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var12.requestFocus();
    var12.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var16 = var12.insets();
    float var17 = var12.getAlignmentX();
    var12.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var23 = var12.getMouseListeners();
    boolean var24 = var4.isAncestorOf((java.awt.Component)var12);
    javax.swing.TransferHandler var25 = var12.getTransferHandler();
    net.sourceforge.schemaspy.ui.DbConfigPanel var26 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var26.requestFocus();
    var26.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var30 = var26.insets();
    java.lang.Object var31 = var26.getTreeLock();
    boolean var32 = var26.isFocusTraversalPolicyProvider();
    java.awt.Dimension var33 = var26.getMaximumSize();
    net.sourceforge.schemaspy.ui.MainFrame var34 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var35 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var35.requestFocus();
    var35.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var39 = var35.insets();
    var35.setAlignmentX(1.0f);
    java.awt.Color var42 = var35.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var43 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var43.requestFocus();
    var43.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var47 = var43.insets();
    float var48 = var43.getAlignmentX();
    var43.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var54 = var43.getMouseListeners();
    java.awt.Rectangle var55 = var43.bounds();
    var35.setBounds(var55);
    var34.setMaximizedBounds(var55);
    java.util.List var58 = var34.getIconImages();
    boolean var59 = var34.isDisplayable();
    java.awt.Dimension var60 = var34.preferredSize();
    java.awt.Dimension var61 = var26.getSize(var60);
    var12.setSize(var60);
    var2.setValue((java.lang.Object)var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "DbSpecificOption name: 'net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0var3,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s' value: 'null' description: 'a'"+ "'", var3.equals("DbSpecificOption name: 'net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0var3,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s' value: 'null' description: 'a'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test466() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test466");


    net.sourceforge.schemaspy.ui.DbConfigTableModel var0 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    int var2 = var0.findColumn("a");
    var0.fireTableRowsUpdated(100, 100);
    java.lang.Class var7 = var0.getColumnClass(3);
    var0.fireTableDataChanged();
    net.sourceforge.schemaspy.ui.DbConfigTableModel var9 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    int var11 = var9.findColumn("a");
    java.lang.Class var13 = var9.getColumnClass(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.EventListener[] var14 = var0.<java.util.EventListener>getListeners(var13);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test467() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test467");


    net.sourceforge.schemaspy.ui.DbConfigTableModel var0 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    int var2 = var0.findColumn("a");
    var0.fireTableRowsUpdated(100, 100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Class var7 = var0.getClass(5);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1));

  }

  public void test468() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test468");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    java.lang.Object var5 = var0.getTreeLock();
    boolean var6 = var0.isFocusTraversalPolicyProvider();
    java.awt.Container var7 = var0.getTopLevelAncestor();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test469() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test469");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    java.lang.String var5 = var0.getSchemaSpec();
    var0.setViewsEnabled(false);
    var0.setTableInclusions("");
    var0.setGraphvizDir("ora");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test470() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test470");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    boolean var5 = var0.isMeterEnabled();
    java.lang.String var7 = var0.getParam("a");
    var0.setRankDirBugEnabled(false);
    var0.setTableExclusions("Password associated with user id");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test471() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test471");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    java.lang.String var5 = var0.getSchemaSpec();
    var0.setViewsEnabled(false);
    var0.setTableInclusions("");
    var0.setHasOrphans(true);
    java.lang.String var12 = var0.getPassword();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test472() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test472");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.doLayout();
    boolean var8 = var0.isCursorSet();
    var0.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var13 = var0.getLocation();
    var0.repaint(0L);
    net.sourceforge.schemaspy.ui.MainFrame var16 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var17 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var17.requestFocus();
    var17.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var21 = var17.insets();
    var17.setAlignmentX(1.0f);
    java.awt.Color var24 = var17.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var25.requestFocus();
    var25.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var29 = var25.insets();
    float var30 = var25.getAlignmentX();
    var25.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var36 = var25.getMouseListeners();
    java.awt.Rectangle var37 = var25.bounds();
    var17.setBounds(var37);
    var16.setMaximizedBounds(var37);
    java.awt.Container var40 = var16.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var41 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var42 = var41.isManagingFocus();
    java.awt.Rectangle var43 = var41.getVisibleRect();
    var16.setBounds(var43);
    var16.removeAll();
    java.awt.Container var46 = var16.getContentPane();
    boolean var47 = var0.isFocusCycleRoot((java.awt.Container)var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);

  }

  public void test473() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test473");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    java.lang.String var5 = var0.getSchemaSpec();
    var0.setViewsEnabled(false);
    boolean var8 = var0.isEncodeCommentsEnabled();
    var0.setTableInclusions("Unknown");
    java.lang.String var12 = var0.getParam("net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)");
    var0.setDriverPath("ora");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test474() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test474");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    javax.swing.event.AncestorListener[] var4 = var0.getAncestorListeners();
    net.sourceforge.schemaspy.ui.DbConfigPanel var5 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var5.requestFocus();
    java.beans.PropertyChangeListener[] var7 = var5.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var8 = var5.getBaselineResizeBehavior();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    var9.setAlignmentX(1.0f);
    var9.doLayout();
    boolean var17 = var9.isCursorSet();
    var9.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var22 = var9.getLocation();
    boolean var23 = var5.contains(var22);
    boolean var24 = var0.isFocusCycleRoot((java.awt.Container)var5);
    var5.setVisible(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test475() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test475");


    net.sourceforge.schemaspy.util.Version var1 = new net.sourceforge.schemaspy.util.Version("");
    net.sourceforge.schemaspy.util.Version var3 = new net.sourceforge.schemaspy.util.Version("");
    int var4 = var1.compareTo(var3);
    net.sourceforge.schemaspy.util.Version var6 = new net.sourceforge.schemaspy.util.Version("");
    int var7 = var1.compareTo(var6);
    java.lang.String var8 = var1.toString();
    java.lang.String var9 = var1.toString();
    java.lang.String var10 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ""+ "'", var9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + ""+ "'", var10.equals(""));

  }

  public void test476() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test476");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var1 = var0.isManagingFocus();
    int var2 = var0.getWidth();
    java.awt.Point var3 = var0.getMousePosition();
    boolean var6 = var0.contains(1, (-1));
    var0.revalidate();
    boolean var8 = var0.getInheritsPopupMenu();
    float var9 = var0.getAlignmentY();
    var0.nextFocus();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      javax.swing.InputMap var12 = var0.getInputMap(431);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);

  }

  public void test477() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test477");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    java.beans.PropertyChangeListener[] var2 = var0.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var3 = var0.getBaselineResizeBehavior();
    boolean var4 = var0.isDisplayable();
    java.awt.event.KeyListener[] var5 = var0.getKeyListeners();
    net.sourceforge.schemaspy.ui.DbConfigPanel var6 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var6.requestFocus();
    var6.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var10 = var6.insets();
    var6.requestFocus();
    boolean var12 = var6.isVisible();
    java.awt.Dimension var13 = var6.preferredSize();
    var6.transferFocusDownCycle();
    net.sourceforge.schemaspy.ui.DbConfigPanel var15 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var15.requestFocus();
    var15.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var19 = var15.insets();
    var15.setAlignmentX(1.0f);
    boolean var22 = var15.hasFocus();
    boolean var23 = var15.getFocusTraversalKeysEnabled();
    boolean var24 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var15);
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var26 = var25.isManagingFocus();
    java.awt.Rectangle var27 = var25.getVisibleRect();
    java.awt.Rectangle var28 = var15.getBounds(var27);
    var6.repaint(var28);
    net.sourceforge.schemaspy.ui.DbConfigPanel var30 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var31 = var30.isManagingFocus();
    int var32 = var30.getWidth();
    javax.swing.InputVerifier var33 = var30.getInputVerifier();
    java.awt.Rectangle var34 = var30.getVisibleRect();
    var6.paintImmediately(var34);
    var6.layout();
    net.sourceforge.schemaspy.ui.DbConfigPanel var37 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var37.requestFocus();
    var37.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var41 = var37.insets();
    var37.setAlignmentX(1.0f);
    boolean var44 = var37.hasFocus();
    boolean var45 = var37.getFocusTraversalKeysEnabled();
    boolean var46 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var37);
    var37.firePropertyChange("hi!", 'a', 'a');
    java.lang.String var51 = var37.getUIClassID();
    var37.repaint();
    javax.swing.ActionMap var53 = var37.getActionMap();
    var6.setActionMap(var53);
    var0.setActionMap(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "PanelUI"+ "'", var51.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test478() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test478");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    boolean var7 = var0.hasFocus();
    net.sourceforge.schemaspy.ui.DbConfigPanel var8 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var8.requestFocus();
    var8.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var12 = var8.insets();
    float var13 = var8.getAlignmentX();
    var8.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var19 = var8.getMouseListeners();
    boolean var20 = var0.isAncestorOf((java.awt.Component)var8);
    java.awt.im.InputMethodRequests var21 = var8.getInputMethodRequests();
    net.sourceforge.schemaspy.ui.DbConfigPanel var22 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var22.requestFocus();
    var22.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var26 = var22.insets();
    var22.setAlignmentX(1.0f);
    var22.doLayout();
    boolean var30 = var22.isCursorSet();
    var22.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var35 = var22.getLocation();
    java.awt.Component var36 = var8.findComponentAt(var35);
    var8.show();
    var8.grabFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test479() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test479");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    boolean var2 = var0.isEvaluateAllEnabled();
    boolean var3 = var0.isEncodeCommentsEnabled();
    int var4 = var0.getMaxDetailedTables();
    net.sourceforge.schemaspy.view.SqlFormatter var5 = var0.getSqlFormatter();
    var0.setMaxDbThreads(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 300);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test480() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test480");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    boolean var7 = var0.hasFocus();
    var0.paintImmediately(10, 100, 2, 10);
    net.sourceforge.schemaspy.ui.DbConfigPanel var13 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var13.requestFocus();
    var13.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var17 = var13.insets();
    var13.setAlignmentX(1.0f);
    java.awt.Color var20 = var13.getForeground();
    javax.swing.InputVerifier var21 = var13.getInputVerifier();
    var13.repaint(100L, 10, 1, 0, 100);
    var13.setEnabled(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var30 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var30.requestFocus();
    java.beans.PropertyChangeListener[] var32 = var30.getPropertyChangeListeners();
    var30.paintImmediately(0, (-1), (-1), 0);
    java.awt.event.KeyListener[] var38 = var30.getKeyListeners();
    net.sourceforge.schemaspy.ui.DbConfigPanel var39 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var39.requestFocus();
    var39.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var43 = var39.insets();
    var39.setAlignmentX(1.0f);
    java.awt.Color var46 = var39.getForeground();
    var30.setForeground(var46);
    var13.setBackground(var46);
    var0.remove((java.awt.Component)var13);
    java.awt.FocusTraversalPolicy var50 = var0.getFocusTraversalPolicy();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test481() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test481");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var1 = var0.isManagingFocus();
    int var2 = var0.getWidth();
    int var3 = var0.getWidth();
    int var4 = var0.getHeight();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test482() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test482");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    java.awt.event.MouseMotionListener[] var1 = var0.getMouseMotionListeners();
    java.util.Locale var2 = var0.getLocale();
    java.awt.Dimension var3 = var0.getSize();
    boolean var4 = var0.isFocusCycleRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test483() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test483");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.util.List var24 = var0.getIconImages();
    boolean var25 = var0.isDisplayable();
    java.awt.Point var26 = var0.location();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test484() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test484");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    java.beans.PropertyChangeListener[] var2 = var0.getPropertyChangeListeners();
    var0.paintImmediately(0, (-1), (-1), 0);
    java.awt.event.KeyListener[] var8 = var0.getKeyListeners();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    var9.setAlignmentX(1.0f);
    java.awt.Color var16 = var9.getForeground();
    var0.setForeground(var16);
    boolean var18 = var0.hasFocus();
    var0.enableInputMethods(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var21 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    int var22 = var21.getY();
    net.sourceforge.schemaspy.ui.DbConfigPanel var23 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var23.requestFocus();
    var23.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var27 = var23.insets();
    var23.setAlignmentX(1.0f);
    boolean var30 = var23.hasFocus();
    boolean var31 = var23.getFocusTraversalKeysEnabled();
    boolean var32 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var23);
    var23.firePropertyChange("hi!", 'a', 'a');
    java.lang.String var37 = var23.getUIClassID();
    java.awt.Point var39 = var23.getMousePosition(false);
    java.awt.Point var40 = var23.location();
    java.awt.Component var41 = var21.getComponentAt(var40);
    net.sourceforge.schemaspy.ui.DbConfigPanel var42 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var42.requestFocus();
    var42.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var46 = var42.insets();
    float var47 = var42.getAlignmentX();
    var42.setBounds(0, 1, 10, 100);
    java.awt.Rectangle var53 = var42.getBounds();
    var21.repaint(var53);
    var0.paintImmediately(var53);
    java.awt.Dimension var56 = var0.preferredSize();
    boolean var57 = var0.isDisplayable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "PanelUI"+ "'", var37.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);

  }

  public void test485() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test485");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    boolean var7 = var0.hasFocus();
    boolean var8 = var0.getFocusTraversalKeysEnabled();
    var0.setSize(1, (-1));
    java.awt.image.VolatileImage var14 = var0.createVolatileImage(1, (-3));
    java.awt.Graphics var15 = var0.getGraphics();
    java.awt.Color var16 = var0.getBackground();
    java.awt.Dimension var17 = var0.preferredSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test486() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test486");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    boolean var7 = var0.hasFocus();
    boolean var8 = var0.getFocusTraversalKeysEnabled();
    var0.setSize(1, (-1));
    java.awt.image.VolatileImage var14 = var0.createVolatileImage(1, (-3));
    boolean var15 = var0.isDisplayable();
    int var16 = var0.getDebugGraphicsOptions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);

  }

  public void test487() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test487");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    float var5 = var0.getAlignmentX();
    boolean var8 = var0.contains(1, (-1));
    var0.setOpaque(false);
    var0.repaint(10L);
    java.awt.Dimension var13 = var0.getSize();
    java.beans.PropertyChangeListener[] var14 = var0.getPropertyChangeListeners();
    var0.firePropertyChange(" ", (byte)(-1), (byte)100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test488() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test488");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var26 = var25.isManagingFocus();
    java.awt.Rectangle var27 = var25.getVisibleRect();
    var0.setBounds(var27);
    var0.repaint(1L, 10, 2, 0, 0);
    boolean var37 = var0.inside((-3), 1);
    net.sourceforge.schemaspy.ui.MainFrame var38 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var39 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var39.requestFocus();
    var39.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var43 = var39.insets();
    var39.setAlignmentX(1.0f);
    java.awt.Color var46 = var39.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var47 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var47.requestFocus();
    var47.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var51 = var47.insets();
    float var52 = var47.getAlignmentX();
    var47.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var58 = var47.getMouseListeners();
    java.awt.Rectangle var59 = var47.bounds();
    var39.setBounds(var59);
    var38.setMaximizedBounds(var59);
    net.sourceforge.schemaspy.ui.DbConfigPanel var62 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var62.requestFocus();
    var62.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var66 = var62.insets();
    var62.setAlignmentX(1.0f);
    boolean var69 = var62.hasFocus();
    boolean var70 = var62.getFocusTraversalKeysEnabled();
    boolean var71 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var62);
    var62.firePropertyChange("hi!", 'a', 'a');
    net.sourceforge.schemaspy.ui.DbConfigPanel var76 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var77 = var76.isManagingFocus();
    int var78 = var76.getWidth();
    java.awt.Insets var79 = var76.insets();
    javax.accessibility.AccessibleContext var80 = var76.getAccessibleContext();
    boolean var83 = var76.inside(100, (-3));
    java.awt.Rectangle var84 = var76.getVisibleRect();
    var62.setBounds(var84);
    var38.setMaximizedBounds(var84);
    java.awt.Window[] var87 = var38.getOwnedWindows();
    java.awt.Dialog.ModalExclusionType var88 = var38.getModalExclusionType();
    var0.setModalExclusionType(var88);
    var0.setName("net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    java.awt.Color var92 = var0.getForeground();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);

  }

  public void test489() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test489");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    boolean var25 = var0.isLocationByPlatform();
    java.awt.Component var26 = var0.getFocusOwner();
    net.sourceforge.schemaspy.ui.DbConfigPanel var27 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var28 = var27.isManagingFocus();
    int var29 = var27.getWidth();
    java.awt.Point var30 = var27.getMousePosition();
    var27.repaint();
    var0.remove((java.awt.Component)var27);
    java.awt.Rectangle var33 = var0.getMaximizedBounds();
    net.sourceforge.schemaspy.ui.DbConfigTableModel var34 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    var34.fireTableRowsInserted(2, 1);
    java.lang.Class var39 = var34.getClass(3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.EventListener[] var40 = var0.<java.util.EventListener>getListeners(var39);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test490() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test490");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.doLayout();
    boolean var8 = var0.isCursorSet();
    java.awt.event.HierarchyListener[] var9 = var0.getHierarchyListeners();
    java.beans.VetoableChangeListener[] var10 = var0.getVetoableChangeListeners();
    net.sourceforge.schemaspy.ui.DbConfigPanel var11 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var11.requestFocus();
    var11.setFocusTraversalPolicyProvider(true);
    var11.firePropertyChange("a", (byte)10, (byte)0);
    java.awt.Insets var19 = var11.insets();
    var11.setAlignmentY(100.0f);
    boolean var22 = var0.isFocusCycleRoot((java.awt.Container)var11);
    boolean var25 = var11.inside(1, 0);
    int var26 = var11.getDebugGraphicsOptions();
    var11.repaint(0, (-1), 431, (-3));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);

  }

  public void test491() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test491");


    net.sourceforge.schemaspy.util.DbSpecificOption var2 = new net.sourceforge.schemaspy.util.DbSpecificOption("", "ISO-8859-1");
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.getDescription();
    java.lang.Object var5 = var2.getValue();
    net.sourceforge.schemaspy.ui.MainFrame var6 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var7 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var8 = var7.getTableExclusions();
    boolean var9 = var7.isEvaluateAllEnabled();
    java.util.List var10 = var7.getColumnDetails();
    var6.setIconImages(var10);
    boolean var12 = var6.isAlwaysOnTop();
    var6.setFocusableWindowState(true);
    java.awt.Window[] var15 = var6.getOwnedWindows();
    java.awt.Component var16 = var6.getMostRecentFocusOwner();
    var2.setValue((java.lang.Object)var6);
    javax.accessibility.AccessibleContext var18 = var6.getAccessibleContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"+ "'", var3.equals("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ISO-8859-1"+ "'", var4.equals("ISO-8859-1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test492() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test492");


    net.sourceforge.schemaspy.util.LineWriter var3 = new net.sourceforge.schemaspy.util.LineWriter("Unknown", 100, "ISO-8859-1");
    var3.newLine();
    var3.writeln("[]");
    var3.write(5);
    java.io.Writer var10 = var3.append(' ');
    var3.writeln(" ");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test493() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test493");


    net.sourceforge.schemaspy.util.LineWriter var3 = new net.sourceforge.schemaspy.util.LineWriter("Unknown", 100, "ISO-8859-1");
    var3.flush();
    var3.flush();
    var3.write(0);
    var3.newLine();
    var3.writeln(".hi!sdhi!sohi!sthi!s hi!svhi!sehi!srhi!sshi!sihi!sohi!snhi!s hi!s2hi!s.hi!s2hi!s.hi!s1hi!s hi!sohi!srhi!s hi!svhi!sehi!srhi!sshi!sihi!sohi!snhi!sshi!s hi!sghi!srhi!sehi!sahi!sthi!sehi!srhi!s hi!sthi!shhi!sahi!snhi!s hi!s2hi!s.hi!s4hi!s.hi!s{hi!s}hi!s");

  }

  public void test494() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test494");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    java.lang.Object var5 = var0.getTreeLock();
    boolean var6 = var0.isFocusTraversalPolicyProvider();
    java.awt.Component[] var7 = var0.getComponents();
    java.awt.Component var10 = var0.findComponentAt(0, 2);
    net.sourceforge.schemaspy.ui.DbConfigPanel var11 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var11.requestFocus();
    var11.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var15 = var11.insets();
    var11.setAlignmentX(1.0f);
    boolean var18 = var11.hasFocus();
    boolean var19 = var11.getFocusTraversalKeysEnabled();
    boolean var20 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var11);
    var11.firePropertyChange("hi!", 'a', 'a');
    javax.swing.TransferHandler var25 = var11.getTransferHandler();
    java.awt.Dimension var26 = var11.getPreferredSize();
    net.sourceforge.schemaspy.ui.DbConfigPanel var27 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var27.requestFocus();
    var27.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var31 = var27.insets();
    var27.setAlignmentX(1.0f);
    var27.doLayout();
    boolean var35 = var27.isCursorSet();
    var27.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var40 = var27.getLocation();
    java.awt.Point var41 = var11.getLocation(var40);
    boolean var42 = var0.contains(var41);
    net.sourceforge.schemaspy.ui.MainFrame var43 = new net.sourceforge.schemaspy.ui.MainFrame();
    java.awt.event.MouseMotionListener[] var44 = var43.getMouseMotionListeners();
    java.awt.event.WindowFocusListener[] var45 = var43.getWindowFocusListeners();
    net.sourceforge.schemaspy.ui.DbConfigPanel var46 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var46.requestFocus();
    var46.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var50 = var46.insets();
    var46.setAlignmentX(1.0f);
    var46.doLayout();
    boolean var54 = var46.isCursorSet();
    java.awt.event.HierarchyListener[] var55 = var46.getHierarchyListeners();
    var46.setFocusTraversalKeysEnabled(true);
    net.sourceforge.schemaspy.ui.DbConfigPanel var58 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var58.requestFocus();
    var58.setFocusTraversalPolicyProvider(true);
    boolean var62 = var58.requestFocusInWindow();
    java.awt.Dimension var63 = var58.getMaximumSize();
    net.sourceforge.schemaspy.ui.DbConfigPanel var64 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var64.requestFocus();
    var64.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var68 = var64.insets();
    var64.setAlignmentX(1.0f);
    boolean var71 = var64.hasFocus();
    boolean var72 = var64.getFocusTraversalKeysEnabled();
    boolean var73 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var64);
    net.sourceforge.schemaspy.ui.DbConfigPanel var74 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var74.requestFocus();
    var74.setFocusTraversalPolicyProvider(true);
    java.awt.Point var79 = var74.getMousePosition(true);
    int var80 = var74.getComponentCount();
    int var81 = var74.getHeight();
    net.sourceforge.schemaspy.ui.DbConfigPanel var82 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var82.requestFocus();
    java.beans.PropertyChangeListener[] var84 = var82.getPropertyChangeListeners();
    var82.paintImmediately(0, (-1), (-1), 0);
    java.awt.Font var90 = var82.getFont();
    java.awt.FontMetrics var91 = var74.getFontMetrics(var90);
    java.awt.FontMetrics var92 = var64.getFontMetrics(var90);
    java.awt.FontMetrics var93 = var58.getFontMetrics(var90);
    java.awt.FontMetrics var94 = var46.getFontMetrics(var90);
    var43.setFont(var90);
    java.awt.FontMetrics var96 = var0.getFontMetrics(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test495() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test495");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    boolean var7 = var0.hasFocus();
    boolean var8 = var0.getFocusTraversalKeysEnabled();
    boolean var9 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var0);
    var0.firePropertyChange("hi!", 'a', 'a');
    java.lang.String var14 = var0.getUIClassID();
    java.awt.Point var16 = var0.getMousePosition(false);
    var0.setEnabled(false);
    javax.swing.border.Border var19 = var0.getBorder();
    java.awt.Cursor var20 = var0.getCursor();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test496() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test496");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.util.List var24 = var0.getIconImages();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var25.requestFocus();
    var25.setFocusTraversalPolicyProvider(true);
    boolean var29 = var25.requestFocusInWindow();
    java.awt.FocusTraversalPolicy var30 = var25.getFocusTraversalPolicy();
    var0.setFocusTraversalPolicy(var30);
    java.awt.Image var32 = var0.getIconImage();
    java.awt.Component var33 = var0.getMostRecentFocusOwner();
    boolean var34 = var0.hasFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test497() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test497");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    var0.setFocusableWindowState(true);
    boolean var9 = var0.isFocusCycleRoot();
    java.awt.Graphics var10 = var0.getGraphics();
    boolean var11 = var0.isFocusCycleRoot();
    boolean var12 = var0.getFocusTraversalKeysEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test498() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test498");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    boolean var1 = var0.isImpliedConstraintsEnabled();
    var0.setHasOrphans(false);
    var0.setTableExclusions("ISO-8859-1");
    var0.setPromptForPasswordEnabled(true);
    var0.setConnectionProperties("net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)");
    var0.setGraphvizDir("{}s");
    boolean var12 = var0.isEvaluateAllEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test499() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test499");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var1 = var0.isManagingFocus();
    int var2 = var0.getWidth();
    java.awt.Point var3 = var0.getMousePosition();
    java.lang.Object var4 = var0.getTreeLock();
    net.sourceforge.schemaspy.ui.DbConfigPanel var5 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var5.requestFocus();
    var5.setFocusTraversalPolicyProvider(true);
    boolean var9 = var5.requestFocusInWindow();
    net.sourceforge.schemaspy.ui.DbConfigPanel var10 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var10.requestFocus();
    java.beans.PropertyChangeListener[] var12 = var10.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var13 = var10.getBaselineResizeBehavior();
    net.sourceforge.schemaspy.ui.DbConfigPanel var14 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var14.requestFocus();
    var14.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var18 = var14.insets();
    var14.setAlignmentX(1.0f);
    var14.doLayout();
    boolean var22 = var14.isCursorSet();
    var14.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var27 = var14.getLocation();
    boolean var28 = var10.contains(var27);
    java.awt.Component var29 = var5.findComponentAt(var27);
    var5.setOpaque(true);
    net.sourceforge.schemaspy.ui.DbConfigPanel var32 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var32.requestFocus();
    var32.setFocusTraversalPolicyProvider(true);
    java.awt.Point var37 = var32.getMousePosition(true);
    int var38 = var32.getComponentCount();
    int var39 = var32.getHeight();
    var32.setName("hi!s");
    net.sourceforge.schemaspy.ui.DbConfigPanel var42 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var42.requestFocus();
    var42.setFocusTraversalPolicyProvider(true);
    java.awt.Point var47 = var42.getMousePosition(true);
    java.awt.Component var48 = var42.getNextFocusableComponent();
    java.awt.Dimension var49 = var42.getMinimumSize();
    var32.setSize(var49);
    var5.resize(var49);
    java.lang.Object var52 = var0.getClientProperty((java.lang.Object)var5);
    var0.removeNotify();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);

  }

  public void test500() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest3.test500");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    java.beans.PropertyChangeListener[] var2 = var0.getPropertyChangeListeners();
    var0.paintImmediately(0, (-1), (-1), 0);
    boolean var8 = var0.isForegroundSet();
    boolean var9 = var0.isVisible();
    var0.revalidate();
    java.awt.Dimension var11 = var0.getMinimumSize();
    var0.firePropertyChange("net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)", (byte)(-1), (byte)0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

}
