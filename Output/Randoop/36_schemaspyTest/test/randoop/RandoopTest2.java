package randoop;

import junit.framework.*;

public class RandoopTest2 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test1");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Point var5 = var0.getMousePosition(true);
    java.awt.Component var6 = var0.getNextFocusableComponent();
    boolean var7 = var0.isBackgroundSet();
    var0.requestFocus();
    java.awt.Rectangle var9 = var0.getVisibleRect();
    var0.setVerifyInputWhenFocusTarget(true);
    boolean var12 = var0.isValidateRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test2() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test2");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    java.awt.Color var7 = var0.getForeground();
    javax.swing.InputVerifier var8 = var0.getInputVerifier();
    var0.repaint(100L, 10, 1, 0, 100);
    var0.revalidate();
    int var18 = var0.getBaseline(23, 300);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1));

  }

  public void test3() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test3");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    java.awt.Component var2 = var0.getNextFocusableComponent();
    java.lang.String var3 = var0.toString();
    javax.swing.TransferHandler var4 = var0.getTransferHandler();
    var0.paintImmediately((-3), 5, 0, 5);
    var0.revalidate();
    java.awt.Component var11 = var0.getNextFocusableComponent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0var3,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var3.equals("net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0var3,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test4() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test4");


    net.sourceforge.schemaspy.util.Dot var0 = net.sourceforge.schemaspy.util.Dot.getInstance();
    var0.setHighQuality(true);
    java.lang.String var3 = var0.getSupportedVersions();
    net.sourceforge.schemaspy.util.Dot.DotFailure var5 = var0.new DotFailure("dot version 2.2.1 or versions greater than 2.4");
    boolean var6 = var0.supportsCenteredEastWestEdges();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "dot version 2.2.1 or versions greater than 2.4"+ "'", var3.equals("dot version 2.2.1 or versions greater than 2.4"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test5() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test5");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    boolean var4 = var0.requestFocusInWindow();
    net.sourceforge.schemaspy.ui.DbConfigPanel var5 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var5.requestFocus();
    java.beans.PropertyChangeListener[] var7 = var5.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var8 = var5.getBaselineResizeBehavior();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    var9.setAlignmentX(1.0f);
    var9.doLayout();
    boolean var17 = var9.isCursorSet();
    var9.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var22 = var9.getLocation();
    boolean var23 = var5.contains(var22);
    java.awt.Component var24 = var0.findComponentAt(var22);
    var0.firePropertyChange("a", '4', '#');
    net.sourceforge.schemaspy.ui.DbConfigPanel var29 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var29.requestFocus();
    var29.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var33 = var29.insets();
    var29.requestFocus();
    var29.doLayout();
    var29.firePropertyChange("hi!", 0.0d, 10.0d);
    java.awt.Component var40 = var29.getNextFocusableComponent();
    java.awt.Rectangle var41 = var29.bounds();
    java.awt.Rectangle var42 = var0.getBounds(var41);
    javax.swing.InputVerifier var43 = var0.getInputVerifier();
    java.awt.Container var44 = var0.getTopLevelAncestor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);

  }

  public void test6() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test6");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    var0.setSchema("");
    java.lang.String var7 = var0.getCss();
    var0.setDb("dot version 2.2.1 or versions greater than 2.4");
    var0.setRenderer("net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)");
    java.util.List var12 = var0.getColumnDetails();
    java.lang.String var13 = var0.getSchema();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "schemaSpy.css"+ "'", var7.equals("schemaSpy.css"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + ""+ "'", var13.equals(""));

  }

  public void test7() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test7");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    float var5 = var0.getAlignmentX();
    boolean var8 = var0.contains(1, (-1));
    var0.transferFocus();
    boolean var10 = var0.isForegroundSet();
    java.awt.Component var13 = var0.findComponentAt(5, 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test8() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test8");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var26 = var25.isManagingFocus();
    java.awt.Rectangle var27 = var25.getVisibleRect();
    var0.setBounds(var27);
    var0.hide();
    java.util.List var30 = var0.getIconImages();
    var0.resize(2, 0);
    java.awt.Font var34 = var0.getFont();
    var0.show();
    boolean var36 = var0.isFocusableWindow();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);

  }

  public void test9() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test9");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var1 = var0.isManagingFocus();
    int var2 = var0.getWidth();
    java.awt.Insets var3 = var0.insets();
    java.awt.Container var4 = var0.getTopLevelAncestor();
    var0.disable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test10() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test10");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.doLayout();
    boolean var8 = var0.isCursorSet();
    java.awt.event.HierarchyListener[] var9 = var0.getHierarchyListeners();
    net.sourceforge.schemaspy.ui.DbConfigPanel var10 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var10.requestFocus();
    var10.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var14 = var10.insets();
    var10.setAlignmentX(1.0f);
    java.awt.Color var17 = var10.getForeground();
    javax.swing.InputVerifier var18 = var10.getInputVerifier();
    var10.repaint(100L, 10, 1, 0, 100);
    var10.setEnabled(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var27 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var27.requestFocus();
    java.beans.PropertyChangeListener[] var29 = var27.getPropertyChangeListeners();
    var27.paintImmediately(0, (-1), (-1), 0);
    java.awt.event.KeyListener[] var35 = var27.getKeyListeners();
    net.sourceforge.schemaspy.ui.DbConfigPanel var36 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var36.requestFocus();
    var36.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var40 = var36.insets();
    var36.setAlignmentX(1.0f);
    java.awt.Color var43 = var36.getForeground();
    var27.setForeground(var43);
    var10.setBackground(var43);
    var0.setForeground(var43);
    var0.setVisible(false);
    var0.setIgnoreRepaint(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test11() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test11");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    boolean var4 = var0.isDoubleBuffered();
    net.sourceforge.schemaspy.ui.DbConfigPanel var5 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var5.requestFocus();
    var5.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var9 = var5.insets();
    var5.requestFocus();
    var5.setOpaque(false);
    javax.swing.plaf.PanelUI var13 = var5.getUI();
    var0.setUI(var13);
    var0.repaint(1L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test12() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test12");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    var0.setFocusableWindowState(true);
    boolean var9 = var0.isFocusCycleRoot();
    java.awt.event.ComponentListener[] var10 = var0.getComponentListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test13() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test13");


    java.lang.String var4 = net.sourceforge.schemaspy.model.Table.getFullName("DbSpecificOption name: 'DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'' value: 'null' description: 'net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]'", ".hi!sdhi!sohi!sthi!s hi!svhi!sehi!srhi!sshi!sihi!sohi!snhi!s hi!s2hi!s.hi!s2hi!s.hi!s1hi!s hi!sohi!srhi!s hi!svhi!sehi!srhi!sshi!sihi!sohi!snhi!sshi!s hi!sghi!srhi!sehi!sahi!sthi!sehi!srhi!s hi!sthi!shhi!sahi!snhi!s hi!s2hi!s.hi!s4hi!s.hi!s{hi!s}hi!s", "{}", "");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ".hi!sdhi!sohi!sthi!s hi!svhi!sehi!srhi!sshi!sihi!sohi!snhi!s hi!s2hi!s.hi!s2hi!s.hi!s1hi!s hi!sohi!srhi!s hi!svhi!sehi!srhi!sshi!sihi!sohi!snhi!sshi!s hi!sghi!srhi!sehi!sahi!sthi!sehi!srhi!s hi!sthi!shhi!sahi!snhi!s hi!s2hi!s.hi!s4hi!s.hi!s{hi!s}hi!s.{}."+ "'", var4.equals(".hi!sdhi!sohi!sthi!s hi!svhi!sehi!srhi!sshi!sihi!sohi!snhi!s hi!s2hi!s.hi!s2hi!s.hi!s1hi!s hi!sohi!srhi!s hi!svhi!sehi!srhi!sshi!sihi!sohi!snhi!sshi!s hi!sghi!srhi!sehi!sahi!sthi!sehi!srhi!s hi!sthi!shhi!sahi!snhi!s hi!s2hi!s.hi!s4hi!s.hi!s{hi!s}hi!s.{}."));

  }

  public void test14() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test14");


    net.sourceforge.schemaspy.util.Dot var0 = net.sourceforge.schemaspy.util.Dot.getInstance();
    var0.setHighQuality(true);
    java.lang.String var3 = var0.getSupportedVersions();
    net.sourceforge.schemaspy.util.Dot.DotFailure var5 = var0.new DotFailure("dot version 2.2.1 or versions greater than 2.4");
    net.sourceforge.schemaspy.util.Version var6 = var0.getVersion();
    net.sourceforge.schemaspy.util.Dot.DotFailure var8 = var0.new DotFailure("Helvetica");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "dot version 2.2.1 or versions greater than 2.4"+ "'", var3.equals("dot version 2.2.1 or versions greater than 2.4"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test15() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test15");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    javax.swing.event.AncestorListener[] var4 = var0.getAncestorListeners();
    net.sourceforge.schemaspy.ui.DbConfigPanel var5 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var5.requestFocus();
    java.beans.PropertyChangeListener[] var7 = var5.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var8 = var5.getBaselineResizeBehavior();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    var9.setAlignmentX(1.0f);
    var9.doLayout();
    boolean var17 = var9.isCursorSet();
    var9.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var22 = var9.getLocation();
    boolean var23 = var5.contains(var22);
    boolean var24 = var0.isFocusCycleRoot((java.awt.Container)var5);
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    net.sourceforge.schemaspy.ui.DbConfigPanel var26 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var26.requestFocus();
    var26.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var30 = var26.insets();
    var26.setAlignmentX(1.0f);
    boolean var33 = var26.hasFocus();
    boolean var34 = var26.getFocusTraversalKeysEnabled();
    var26.setSize(1, (-1));
    boolean var39 = var26.requestFocus(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var40 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var40.requestFocus();
    java.beans.PropertyChangeListener[] var42 = var40.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var43 = var40.getBaselineResizeBehavior();
    net.sourceforge.schemaspy.ui.DbConfigPanel var44 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var44.requestFocus();
    var44.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var48 = var44.insets();
    var44.setAlignmentX(1.0f);
    var44.doLayout();
    boolean var52 = var44.isCursorSet();
    var44.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var57 = var44.getLocation();
    boolean var58 = var40.contains(var57);
    java.awt.Point var59 = var26.getLocation(var57);
    java.awt.Component var60 = var25.add((java.awt.Component)var26);
    java.awt.Insets var61 = var25.insets();
    java.awt.Insets var62 = var0.getInsets(var61);
    var0.doLayout();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test16() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test16");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    java.awt.event.HierarchyBoundsListener[] var5 = var0.getHierarchyBoundsListeners();
    net.sourceforge.schemaspy.ui.DbConfigPanel var6 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var6.requestFocus();
    var6.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var10 = var6.insets();
    var6.setAlignmentX(1.0f);
    var6.firePropertyChange("hi!", 10, 2);
    var6.paintImmediately(100, 10, 2, 0);
    java.lang.Object var22 = var0.getClientProperty((java.lang.Object)100);
    java.awt.FocusTraversalPolicy var23 = var0.getFocusTraversalPolicy();
    java.awt.Graphics var24 = var0.getGraphics();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }

  public void test17() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test17");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    boolean var4 = var0.requestFocusInWindow();
    net.sourceforge.schemaspy.ui.DbConfigPanel var5 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var5.requestFocus();
    java.beans.PropertyChangeListener[] var7 = var5.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var8 = var5.getBaselineResizeBehavior();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    var9.setAlignmentX(1.0f);
    var9.doLayout();
    boolean var17 = var9.isCursorSet();
    var9.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var22 = var9.getLocation();
    boolean var23 = var5.contains(var22);
    java.awt.Component var24 = var0.findComponentAt(var22);
    var0.firePropertyChange("a", '4', '#');
    var0.setDebugGraphicsOptions(11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }

  public void test18() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test18");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    java.lang.String var2 = var0.getCharset();
    var0.setRailsEnabled(false);
    boolean var5 = var0.hasOrphans();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ISO-8859-1"+ "'", var2.equals("ISO-8859-1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test19() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test19");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    var0.setSchema("");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var7 = var0.getRemainingParameters();
      fail("Expected exception of type net.sourceforge.schemaspy.model.InvalidConfigurationException");
    } catch (net.sourceforge.schemaspy.model.InvalidConfigurationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test20() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test20");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    java.awt.Color var7 = var0.getForeground();
    var0.firePropertyChange("hi!", 10L, 10L);
    net.sourceforge.schemaspy.model.RoutineParameter var15 = new net.sourceforge.schemaspy.model.RoutineParameter("ISO-8859-1s", "hi!", "");
    java.lang.Object var16 = var0.getClientProperty((java.lang.Object)"ISO-8859-1s");
    int var17 = var0.getHeight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);

  }

  public void test21() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test21");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.setFocusable(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var3 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var3.requestFocus();
    var3.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var7 = var3.insets();
    var3.setAlignmentX(1.0f);
    boolean var10 = var3.hasFocus();
    boolean var11 = var3.getFocusTraversalKeysEnabled();
    var3.setSize(1, (-1));
    java.lang.Object var15 = var0.getClientProperty((java.lang.Object)var3);
    var3.firePropertyChange("net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s", ' ', ' ');
    var3.repaint(1L);
    boolean var22 = var3.isPaintingForPrint();
    java.awt.event.HierarchyBoundsListener[] var23 = var3.getHierarchyBoundsListeners();
    boolean var25 = var3.requestFocus(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test22() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test22");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    java.beans.PropertyChangeListener[] var2 = var0.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var3 = var0.getBaselineResizeBehavior();
    boolean var4 = var0.isDisplayable();
    var0.setName("");
    boolean var7 = var0.isCursorSet();
    int var8 = var0.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);

  }

  public void test23() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test23");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    int var6 = var0.getExtendedState();
    var0.setFocusableWindowState(true);
    var0.setExtendedState(1);
    java.awt.MenuBar var11 = var0.getMenuBar();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setDefaultCloseOperation(312);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test24() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test24");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    boolean var1 = var0.isImpliedConstraintsEnabled();
    boolean var2 = var0.isSchemaDisabled();
    net.sourceforge.schemaspy.Config.setInstance(var0);
    var0.setMaxDetailedTabled((-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var6 = var0.asList();
      fail("Expected exception of type net.sourceforge.schemaspy.Config.MissingRequiredParameterException");
    } catch (net.sourceforge.schemaspy.Config.MissingRequiredParameterException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test25() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test25");


    net.sourceforge.schemaspy.model.Routine var9 = new net.sourceforge.schemaspy.model.Routine("", "hi!", "a", "", "", false, "", "hi!", "");
    boolean var10 = var9.isDeterministic();
    java.lang.String var11 = var9.getName();
    java.util.List var12 = var9.getParameters();
    java.util.List var13 = var9.getParameters();
    java.lang.String var14 = var9.getDefinitionLanguage();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));

  }

  public void test26() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test26");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    var0.firePropertyChange("a", (byte)10, (byte)0);
    java.awt.Insets var8 = var0.insets();
    var0.setAlignmentY(100.0f);
    java.awt.Image var13 = var0.createImage(1, 1);
    java.awt.Dimension var14 = var0.getSize();
    java.awt.image.ColorModel var15 = var0.getColorModel();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test27() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test27");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.requestFocus();
    var0.setOpaque(false);
    var0.enable();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    var9.setAlignmentX(1.0f);
    boolean var16 = var9.hasFocus();
    net.sourceforge.schemaspy.ui.DbConfigPanel var17 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var17.requestFocus();
    var17.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var21 = var17.insets();
    float var22 = var17.getAlignmentX();
    var17.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var28 = var17.getMouseListeners();
    boolean var29 = var9.isAncestorOf((java.awt.Component)var17);
    javax.swing.TransferHandler var30 = var17.getTransferHandler();
    var0.setComponentZOrder((java.awt.Component)var17, 1);
    var0.setDebugGraphicsOptions(312);
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var37 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.List var38 = net.sourceforge.schemaspy.DbAnalyzer.getRailsConstraints((java.util.Map)var37);
    java.util.Set var39 = var37.keySet();
    var0.setFocusTraversalKeys(2, var39);
    java.util.List var41 = net.sourceforge.schemaspy.DbAnalyzer.getTablesWithoutIndexes((java.util.Collection)var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test28() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test28");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    boolean var7 = var0.hasFocus();
    net.sourceforge.schemaspy.ui.DbConfigPanel var8 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var8.requestFocus();
    var8.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var12 = var8.insets();
    float var13 = var8.getAlignmentX();
    var8.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var19 = var8.getMouseListeners();
    boolean var20 = var0.isAncestorOf((java.awt.Component)var8);
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.event.ComponentListener[] var23 = var0.getComponentListeners();
    net.sourceforge.schemaspy.ui.DbConfigPanel var24 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var24.requestFocus();
    var24.firePropertyChange("ISO-8859-1", 0L, (-1L));
    java.awt.Color var30 = var24.getBackground();
    var24.requestFocus();
    float var32 = var24.getAlignmentY();
    net.sourceforge.schemaspy.ui.DbConfigPanel var33 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var33.requestFocus();
    var33.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var37 = var33.insets();
    var33.requestFocus();
    var33.setOpaque(false);
    var33.enable();
    net.sourceforge.schemaspy.ui.DbConfigPanel var42 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var42.requestFocus();
    var42.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var46 = var42.insets();
    var42.setAlignmentX(1.0f);
    boolean var49 = var42.hasFocus();
    net.sourceforge.schemaspy.ui.DbConfigPanel var50 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var50.requestFocus();
    var50.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var54 = var50.insets();
    float var55 = var50.getAlignmentX();
    var50.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var61 = var50.getMouseListeners();
    boolean var62 = var42.isAncestorOf((java.awt.Component)var50);
    javax.swing.TransferHandler var63 = var50.getTransferHandler();
    var33.setComponentZOrder((java.awt.Component)var50, 1);
    var33.setDebugGraphicsOptions(312);
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var70 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.List var71 = net.sourceforge.schemaspy.DbAnalyzer.getRailsConstraints((java.util.Map)var70);
    java.util.Set var72 = var70.keySet();
    var33.setFocusTraversalKeys(2, var72);
    boolean var74 = var33.requestDefaultFocus();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.add((java.awt.Component)var24, (java.lang.Object)var74);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);

  }

  public void test29() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test29");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    net.sourceforge.schemaspy.ui.DbConfigPanel var6 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var6.requestFocus();
    var6.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var10 = var6.insets();
    var6.setAlignmentX(1.0f);
    boolean var13 = var6.hasFocus();
    boolean var14 = var6.getFocusTraversalKeysEnabled();
    boolean var15 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var6);
    net.sourceforge.schemaspy.ui.DbConfigPanel var16 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var17 = var16.isManagingFocus();
    java.awt.Rectangle var18 = var16.getVisibleRect();
    java.awt.Rectangle var19 = var6.getBounds(var18);
    java.awt.Dimension var20 = var6.getPreferredSize();
    var0.setMinimumSize(var20);
    var0.toBack();
    net.sourceforge.schemaspy.ui.DbConfigPanel var23 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var23.requestFocus();
    var23.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var27 = var23.insets();
    float var28 = var23.getAlignmentX();
    boolean var31 = var23.contains(1, (-1));
    var23.setOpaque(false);
    boolean var34 = var23.getInheritsPopupMenu();
    var0.setGlassPane((java.awt.Component)var23);
    var0.setUndecorated(true);
    net.sourceforge.schemaspy.ui.DbConfigPanel var38 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var38.requestFocus();
    var38.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var42 = var38.insets();
    var38.setAlignmentX(1.0f);
    boolean var45 = var38.hasFocus();
    boolean var46 = var38.getFocusTraversalKeysEnabled();
    boolean var47 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var38);
    var38.firePropertyChange("hi!", 'a', 'a');
    java.lang.String var52 = var38.getUIClassID();
    var38.repaint();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var56 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.Set var57 = var56.entrySet();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var59 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.List var60 = net.sourceforge.schemaspy.DbAnalyzer.getRailsConstraints((java.util.Map)var59);
    net.sourceforge.schemaspy.Config var61 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var62 = var61.getTableExclusions();
    boolean var63 = var61.isHtmlGenerationEnabled();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var65 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    var65.clear();
    var61.setDbSpecificOptions((java.util.Map)var65);
    java.lang.String var68 = var65.toString();
    var59.putAll((java.util.Map)var65);
    var56.putAll((java.util.Map)var65);
    java.util.Set var71 = var56.entrySet();
    var38.setFocusTraversalKeys(2, var71);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setComponentZOrder((java.awt.Component)var38, 5);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "PanelUI"+ "'", var52.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "{}"+ "'", var68.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test30() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test30");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    net.sourceforge.schemaspy.ui.DbConfigPanel var6 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var6.requestFocus();
    var6.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var10 = var6.insets();
    var6.setAlignmentX(1.0f);
    boolean var13 = var6.hasFocus();
    boolean var14 = var6.getFocusTraversalKeysEnabled();
    boolean var15 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var6);
    net.sourceforge.schemaspy.ui.DbConfigPanel var16 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var17 = var16.isManagingFocus();
    java.awt.Rectangle var18 = var16.getVisibleRect();
    java.awt.Rectangle var19 = var6.getBounds(var18);
    java.awt.Dimension var20 = var6.getPreferredSize();
    var0.setMinimumSize(var20);
    javax.swing.TransferHandler var22 = var0.getTransferHandler();
    java.awt.event.WindowListener[] var23 = var0.getWindowListeners();
    boolean var24 = var0.isForegroundSet();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var25.requestFocus();
    var25.setFocusTraversalPolicyProvider(true);
    var25.firePropertyChange("a", (byte)10, (byte)0);
    java.awt.Insets var33 = var25.insets();
    var25.setAlignmentY(100.0f);
    java.lang.Object var36 = var25.getTreeLock();
    net.sourceforge.schemaspy.ui.MainFrame var37 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var38 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var38.requestFocus();
    var38.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var42 = var38.insets();
    var38.setAlignmentX(1.0f);
    java.awt.Color var45 = var38.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var46 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var46.requestFocus();
    var46.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var50 = var46.insets();
    float var51 = var46.getAlignmentX();
    var46.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var57 = var46.getMouseListeners();
    java.awt.Rectangle var58 = var46.bounds();
    var38.setBounds(var58);
    var37.setMaximizedBounds(var58);
    java.util.List var61 = var37.getIconImages();
    java.awt.Rectangle var62 = var37.getMaximizedBounds();
    java.awt.Rectangle var63 = var25.getBounds(var62);
    var0.setBounds(var63);
    java.awt.im.InputContext var65 = var0.getInputContext();
    java.awt.Dialog.ModalExclusionType var66 = var0.getModalExclusionType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test31() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test31");


    net.sourceforge.schemaspy.util.CaseInsensitiveMap var1 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    var1.clear();
    java.util.List var3 = net.sourceforge.schemaspy.DbAnalyzer.getRailsConstraints((java.util.Map)var1);
    java.util.Set var4 = var1.entrySet();
    java.lang.Object var5 = var1.clone();
    net.sourceforge.schemaspy.Config var6 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var7 = var6.getTableExclusions();
    java.lang.String var8 = var6.getConnectionPropertiesFile();
    boolean var9 = var6.isSchemaDisabled();
    net.sourceforge.schemaspy.view.SqlFormatter var10 = var6.getSqlFormatter();
    java.lang.Integer var11 = var6.getPort();
    net.sourceforge.schemaspy.Config var12 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var13 = var12.getTableExclusions();
    boolean var14 = var12.isHtmlGenerationEnabled();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var16 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    var16.clear();
    var12.setDbSpecificOptions((java.util.Map)var16);
    var6.setDbSpecificOptions((java.util.Map)var16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var20 = var1.remove((java.lang.Object)var6);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test32() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test32");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    var0.setFocusableWindowState(true);
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    boolean var17 = var9.contains(1, (-1));
    var9.transferFocus();
    var9.removeAll();
    java.awt.Component var21 = var0.add((java.awt.Component)var9, 0);
    boolean var22 = var0.isLocationByPlatform();
    boolean var23 = var0.isFocusableWindow();
    net.sourceforge.schemaspy.ui.DbConfigPanel var24 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var25 = var24.isManagingFocus();
    int var26 = var24.getWidth();
    java.awt.Point var27 = var24.getMousePosition();
    boolean var30 = var24.contains(1, (-1));
    boolean var31 = var24.isValid();
    net.sourceforge.schemaspy.ui.MainFrame var32 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var33 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var34 = var33.getTableExclusions();
    boolean var35 = var33.isEvaluateAllEnabled();
    java.util.List var36 = var33.getColumnDetails();
    var32.setIconImages(var36);
    boolean var38 = var32.isAlwaysOnTop();
    var32.setFocusableWindowState(true);
    boolean var41 = var32.isFocusCycleRoot();
    java.awt.Graphics var42 = var32.getGraphics();
    boolean var43 = var32.isFocusCycleRoot();
    net.sourceforge.schemaspy.ui.MainFrame var44 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var45 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var45.requestFocus();
    var45.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var49 = var45.insets();
    var45.setAlignmentX(1.0f);
    java.awt.Color var52 = var45.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var53 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var53.requestFocus();
    var53.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var57 = var53.insets();
    float var58 = var53.getAlignmentX();
    var53.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var64 = var53.getMouseListeners();
    java.awt.Rectangle var65 = var53.bounds();
    var45.setBounds(var65);
    var44.setMaximizedBounds(var65);
    java.awt.Container var68 = var44.getContentPane();
    boolean var69 = var44.isLocationByPlatform();
    net.sourceforge.schemaspy.ui.MainFrame var70 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var71 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var72 = var71.getTableExclusions();
    boolean var73 = var71.isEvaluateAllEnabled();
    java.util.List var74 = var71.getColumnDetails();
    var70.setIconImages(var74);
    boolean var76 = var70.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var77 = var70.getModalExclusionType();
    var44.setModalExclusionType(var77);
    var44.setEnabled(true);
    javax.swing.JLayeredPane var81 = var44.getLayeredPane();
    var32.setLayeredPane(var81);
    boolean var83 = var24.isAncestorOf((java.awt.Component)var81);
    java.awt.Color var84 = var81.getBackground();
    var0.setLayeredPane(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test33() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test33");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.util.List var24 = var0.getIconImages();
    java.awt.Rectangle var25 = var0.getMaximizedBounds();
    java.awt.event.InputMethodListener[] var26 = var0.getInputMethodListeners();
    java.awt.Rectangle var27 = var0.getBounds();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test34() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test34");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.doLayout();
    boolean var8 = var0.isCursorSet();
    var0.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var13 = var0.getLocation();
    var0.setSize(2, 10);
    java.awt.Component var19 = var0.getComponentAt(300, 300);
    javax.swing.JPopupMenu var20 = var0.getComponentPopupMenu();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test35() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test35");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.requestFocus();
    net.sourceforge.schemaspy.ui.DbConfigPanel var6 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var6.requestFocus();
    java.awt.Component var8 = var6.getNextFocusableComponent();
    java.lang.String var9 = var6.toString();
    var0.setNextFocusableComponent((java.awt.Component)var6);
    java.awt.Dimension var11 = var6.getPreferredSize();
    boolean var12 = var6.isOpaque();
    net.sourceforge.schemaspy.ui.MainFrame var13 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var14 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var15 = var14.getTableExclusions();
    boolean var16 = var14.isEvaluateAllEnabled();
    java.util.List var17 = var14.getColumnDetails();
    var13.setIconImages(var17);
    boolean var19 = var13.isAlwaysOnTop();
    var13.setFocusableWindowState(true);
    net.sourceforge.schemaspy.ui.DbConfigPanel var22 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var22.requestFocus();
    var22.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var26 = var22.insets();
    float var27 = var22.getAlignmentX();
    boolean var30 = var22.contains(1, (-1));
    var22.transferFocus();
    var22.removeAll();
    java.awt.Component var34 = var13.add((java.awt.Component)var22, 0);
    boolean var35 = var13.isValidateRoot();
    net.sourceforge.schemaspy.ui.DbConfigPanel var36 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var36.requestFocus();
    var36.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var40 = var36.insets();
    var36.reshape(1, 1, 1, 100);
    net.sourceforge.schemaspy.ui.DbConfigPanel var46 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var46.requestFocus();
    var46.setFocusTraversalPolicyProvider(true);
    java.awt.Point var51 = var46.getMousePosition(true);
    java.awt.Component var52 = var46.getNextFocusableComponent();
    java.awt.Dimension var53 = var46.getMinimumSize();
    java.awt.Dimension var54 = var36.getSize(var53);
    java.awt.Rectangle var55 = var36.bounds();
    java.awt.Component var57 = var13.add((java.awt.Component)var36, 2);
    var13.firePropertyChange("/Users/Jesh/Documents/School/Summer 2015/Independent Study/Eclipse/workspace/36_schemaspy/bin", 100.0d, 10.0d);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var6.setComponentZOrder((java.awt.Component)var13, 3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0var9,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var9.equals("net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0var9,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test36() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test36");


    net.sourceforge.schemaspy.util.Dot var0 = net.sourceforge.schemaspy.util.Dot.getInstance();
    var0.setFormat("ISO-8859-1");
    boolean var3 = var0.supportsCenteredEastWestEdges();
    net.sourceforge.schemaspy.util.Dot.DotFailure var5 = var0.new DotFailure("Value");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test37() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test37");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.doLayout();
    boolean var8 = var0.isCursorSet();
    java.awt.event.HierarchyListener[] var9 = var0.getHierarchyListeners();
    var0.setFocusTraversalKeysEnabled(true);
    net.sourceforge.schemaspy.ui.DbConfigPanel var12 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var12.requestFocus();
    var12.setFocusTraversalPolicyProvider(true);
    boolean var16 = var12.requestFocusInWindow();
    java.awt.Dimension var17 = var12.getMaximumSize();
    net.sourceforge.schemaspy.ui.DbConfigPanel var18 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var18.requestFocus();
    var18.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var22 = var18.insets();
    var18.setAlignmentX(1.0f);
    boolean var25 = var18.hasFocus();
    boolean var26 = var18.getFocusTraversalKeysEnabled();
    boolean var27 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var18);
    net.sourceforge.schemaspy.ui.DbConfigPanel var28 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var28.requestFocus();
    var28.setFocusTraversalPolicyProvider(true);
    java.awt.Point var33 = var28.getMousePosition(true);
    int var34 = var28.getComponentCount();
    int var35 = var28.getHeight();
    net.sourceforge.schemaspy.ui.DbConfigPanel var36 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var36.requestFocus();
    java.beans.PropertyChangeListener[] var38 = var36.getPropertyChangeListeners();
    var36.paintImmediately(0, (-1), (-1), 0);
    java.awt.Font var44 = var36.getFont();
    java.awt.FontMetrics var45 = var28.getFontMetrics(var44);
    java.awt.FontMetrics var46 = var18.getFontMetrics(var44);
    java.awt.FontMetrics var47 = var12.getFontMetrics(var44);
    java.awt.FontMetrics var48 = var0.getFontMetrics(var44);
    net.sourceforge.schemaspy.ui.DbConfigPanel var49 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var49.requestFocus();
    var49.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var53 = var49.insets();
    var49.setAlignmentX(1.0f);
    var49.doLayout();
    boolean var57 = var49.isCursorSet();
    var49.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var62 = var49.getLocation();
    var49.setSize(2, 10);
    java.awt.Component var68 = var49.getComponentAt(300, 300);
    boolean var69 = var0.isFocusCycleRoot((java.awt.Container)var49);
    net.sourceforge.schemaspy.ui.MainFrame var70 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var71 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var72 = var71.getTableExclusions();
    boolean var73 = var71.isEvaluateAllEnabled();
    java.util.List var74 = var71.getColumnDetails();
    var70.setIconImages(var74);
    boolean var76 = var70.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var77 = var70.getModalExclusionType();
    net.sourceforge.schemaspy.ui.DbConfigPanel var78 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var78.requestFocus();
    var78.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var82 = var78.insets();
    var78.setAlignmentX(1.0f);
    boolean var85 = var78.hasFocus();
    boolean var86 = var78.getFocusTraversalKeysEnabled();
    boolean var87 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var78);
    net.sourceforge.schemaspy.ui.DbConfigPanel var88 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var89 = var88.isManagingFocus();
    java.awt.Rectangle var90 = var88.getVisibleRect();
    java.awt.Rectangle var91 = var78.getBounds(var90);
    java.awt.Dimension var92 = var78.getPreferredSize();
    var70.setSize(var92);
    java.awt.im.InputContext var94 = var70.getInputContext();
    float var95 = var70.getOpacity();
    java.lang.String var96 = var70.getTitle();
    int var97 = var70.getDefaultCloseOperation();
    var0.setNextFocusableComponent((java.awt.Component)var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var96 + "' != '" + "SchemaSpy"+ "'", var96.equals("SchemaSpy"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == 1);

  }

  public void test38() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test38");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.requestFocus();
    var0.doLayout();
    var0.firePropertyChange("hi!", 0.0d, 10.0d);
    java.awt.Component var11 = var0.getNextFocusableComponent();
    net.sourceforge.schemaspy.ui.DbConfigPanel var12 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var12.requestFocus();
    var12.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var16 = var12.insets();
    var12.setAlignmentX(1.0f);
    java.awt.Color var19 = var12.getForeground();
    var0.setBackground(var19);
    net.sourceforge.schemaspy.ui.DbConfigPanel var22 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var22.requestFocus();
    var22.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var26 = var22.insets();
    float var27 = var22.getAlignmentX();
    var22.setBounds(0, 1, 10, 100);
    javax.swing.InputMap var33 = var22.getInputMap();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setInputMap(431, var33);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test39() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test39");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var7 = var0.getModalExclusionType();
    boolean var8 = var0.isAutoRequestFocus();
    java.awt.Toolkit var9 = var0.getToolkit();
    var0.hide();
    net.sourceforge.schemaspy.ui.DbConfigPanel var11 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var11.requestFocus();
    var11.setFocusTraversalPolicyProvider(true);
    boolean var15 = var11.requestFocusInWindow();
    java.awt.Dimension var16 = var11.getMaximumSize();
    var0.setPreferredSize(var16);
    javax.swing.JLayeredPane var18 = var0.getLayeredPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var19 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var19.requestFocus();
    var19.setFocusTraversalPolicyProvider(true);
    boolean var23 = var19.requestFocusInWindow();
    java.awt.FocusTraversalPolicy var24 = var19.getFocusTraversalPolicy();
    boolean var25 = var19.isForegroundSet();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setComponentZOrder((java.awt.Component)var19, 100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);

  }

  public void test40() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test40");


    net.sourceforge.schemaspy.model.Routine var9 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var10 = var9.getDataAccess();
    java.lang.String var11 = var9.getComment();
    java.lang.String var12 = var9.getType();
    java.lang.String var13 = var9.getDataAccess();
    java.lang.String var14 = var9.getDefinitionLanguage();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "a"+ "'", var11.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "a"+ "'", var14.equals("a"));

  }

  public void test41() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test41");


    net.sourceforge.schemaspy.ui.DbTypeSelectorModel var1 = new net.sourceforge.schemaspy.ui.DbTypeSelectorModel("net.sourceforge.schemaspy.ui.MainFrame[frame4,0,23,500x312,invalid,hidden,layout=java.awt.BorderLayout,title=SchemaSpy,resizable,normal,defaultCloseOperation=HIDE_ON_CLOSE,rootPane=javax.swing.JRootPane[,0,0,0x0,invalid,layout=javax.swing.JRootPane$RootLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777673,maximumSize=,minimumSize=,preferredSize=],rootPaneCheckingEnabled=true]");

  }

  public void test42() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test42");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    java.awt.Window.Type var1 = var0.getType();
    java.awt.Component var2 = var0.getMostRecentFocusOwner();
    var0.setState(1);
    net.sourceforge.schemaspy.ui.DbConfigPanel var5 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var5.requestFocus();
    var5.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var9 = var5.insets();
    float var10 = var5.getAlignmentX();
    var5.setVisible(false);
    var5.validate();
    net.sourceforge.schemaspy.ui.DbConfigPanel var14 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var14.requestFocus();
    var14.setFocusTraversalPolicyProvider(true);
    java.awt.Point var19 = var14.getMousePosition(true);
    int var20 = var14.getComponentCount();
    int var21 = var14.getHeight();
    var14.setName("hi!s");
    net.sourceforge.schemaspy.ui.DbConfigPanel var24 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var24.requestFocus();
    var24.setFocusTraversalPolicyProvider(true);
    java.awt.Point var29 = var24.getMousePosition(true);
    java.awt.Component var30 = var24.getNextFocusableComponent();
    java.awt.Dimension var31 = var24.getMinimumSize();
    var14.setSize(var31);
    java.awt.Dimension var33 = var5.getSize(var31);
    var0.setMinimumSize(var33);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var36 = var0.areFocusTraversalKeysSet((-3));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test43() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test43");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    var0.setFocusableWindowState(true);
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    boolean var17 = var9.contains(1, (-1));
    var9.transferFocus();
    var9.removeAll();
    java.awt.Component var21 = var0.add((java.awt.Component)var9, 0);
    boolean var22 = var0.isValidateRoot();
    java.util.Locale var23 = var0.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test44() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test44");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    boolean var25 = var0.isLocationByPlatform();
    net.sourceforge.schemaspy.ui.MainFrame var26 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var27 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var28 = var27.getTableExclusions();
    boolean var29 = var27.isEvaluateAllEnabled();
    java.util.List var30 = var27.getColumnDetails();
    var26.setIconImages(var30);
    boolean var32 = var26.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var33 = var26.getModalExclusionType();
    var0.setModalExclusionType(var33);
    var0.setEnabled(true);
    javax.swing.JLayeredPane var37 = var0.getLayeredPane();
    java.awt.Dimension var38 = var0.getMinimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test45() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test45");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isDbHelpRequired();
    var0.setCharset("dot version 2.2.1 or versions greater than 2.4");
    java.util.regex.Pattern var7 = var0.getIndirectColumnExclusions();
    boolean var8 = var0.isNumRowsEnabled();
    var0.setMaxDbThreads(11);
    boolean var11 = var0.isRankDirBugEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test46() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test46");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    boolean var7 = var0.isOpaque();
    net.sourceforge.schemaspy.ui.MainFrame var8 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var9 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var10 = var9.getTableExclusions();
    boolean var11 = var9.isEvaluateAllEnabled();
    java.util.List var12 = var9.getColumnDetails();
    var8.setIconImages(var12);
    net.sourceforge.schemaspy.ui.DbConfigPanel var14 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var14.requestFocus();
    java.beans.PropertyChangeListener[] var16 = var14.getPropertyChangeListeners();
    var14.paintImmediately(0, (-1), (-1), 0);
    java.awt.event.KeyListener[] var22 = var14.getKeyListeners();
    net.sourceforge.schemaspy.ui.DbConfigPanel var23 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var23.requestFocus();
    var23.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var27 = var23.insets();
    var23.setAlignmentX(1.0f);
    java.awt.Color var30 = var23.getForeground();
    var14.setForeground(var30);
    var8.setBackground(var30);
    java.awt.Window.Type var33 = var8.getType();
    var0.setType(var33);
    net.sourceforge.schemaspy.ui.DbConfigPanel var35 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var35.requestFocus();
    var35.setFocusTraversalPolicyProvider(true);
    boolean var39 = var35.requestFocusInWindow();
    java.awt.Cursor var40 = var35.getCursor();
    var0.setCursor(var40);
    java.awt.event.ContainerListener[] var42 = var0.getContainerListeners();
    java.awt.Component var43 = var0.getGlassPane();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test47() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test47");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var26 = var25.isManagingFocus();
    java.awt.Rectangle var27 = var25.getVisibleRect();
    var0.setBounds(var27);
    var0.hide();
    java.util.List var30 = var0.getIconImages();
    var0.resize(2, 0);
    net.sourceforge.schemaspy.ui.DbConfigPanel var34 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var34.requestFocus();
    var34.setFocusTraversalPolicyProvider(true);
    javax.swing.event.AncestorListener[] var38 = var34.getAncestorListeners();
    var34.paintImmediately(1, 0, 0, (-1));
    java.awt.ComponentOrientation var44 = var34.getComponentOrientation();
    var0.applyComponentOrientation(var44);
    net.sourceforge.schemaspy.ui.DbConfigPanel var46 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var46.requestFocus();
    var46.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var50 = var46.insets();
    var46.requestFocus();
    var46.setOpaque(false);
    var46.invalidate();
    java.awt.event.KeyListener[] var55 = var46.getKeyListeners();
    java.awt.event.ContainerListener[] var56 = var46.getContainerListeners();
    net.sourceforge.schemaspy.ui.DbConfigPanel var57 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var57.requestFocus();
    var57.setFocusTraversalPolicyProvider(true);
    java.awt.Point var62 = var57.getMousePosition(true);
    java.awt.Component var63 = var57.getNextFocusableComponent();
    boolean var64 = var57.isBackgroundSet();
    var57.requestFocus();
    java.awt.Rectangle var66 = var57.getVisibleRect();
    java.awt.Rectangle var67 = var46.getBounds(var66);
    var0.setBounds(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test48() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test48");


    net.sourceforge.schemaspy.model.ProcessExecutionException var1 = new net.sourceforge.schemaspy.model.ProcessExecutionException("net.sourceforge.schemaspy.ui.MainFrame[frame1,0,23,500x312,invalid,hidden,layout=java.awt.BorderLayout,title=SchemaSpy,resizable,normal,defaultCloseOperation=HIDE_ON_CLOSE,rootPane=javax.swing.JRootPane[,0,0,0x0,invalid,layout=javax.swing.JRootPane$RootLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777673,maximumSize=,minimumSize=,preferredSize=],rootPaneCheckingEnabled=true]");

  }

  public void test49() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test49");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.setFocusable(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var3 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var3.requestFocus();
    var3.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var7 = var3.insets();
    var3.setAlignmentX(1.0f);
    boolean var10 = var3.hasFocus();
    boolean var11 = var3.getFocusTraversalKeysEnabled();
    var3.setSize(1, (-1));
    java.lang.Object var15 = var0.getClientProperty((java.lang.Object)var3);
    java.awt.Component var16 = var0.getNextFocusableComponent();
    boolean var17 = var0.requestDefaultFocus();
    boolean var18 = var0.isShowing();
    java.lang.String var19 = var0.getName();
    java.awt.event.MouseMotionListener[] var20 = var0.getMouseMotionListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test50() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test50");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    var0.firePropertyChange("a", (byte)10, (byte)0);
    java.awt.Insets var8 = var0.insets();
    var0.setAlignmentY(100.0f);
    java.awt.Image var13 = var0.createImage(1, 1);
    java.awt.Dimension var14 = var0.getSize();
    net.sourceforge.schemaspy.ui.DbConfigPanel var15 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var15.requestFocus();
    var15.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var19 = var15.insets();
    var15.setAlignmentX(1.0f);
    java.awt.Color var22 = var15.getForeground();
    javax.swing.InputVerifier var23 = var15.getInputVerifier();
    var15.repaint(100L, 10, 1, 0, 100);
    java.awt.Component.BaselineResizeBehavior var30 = var15.getBaselineResizeBehavior();
    java.util.Locale var31 = var15.getLocale();
    java.awt.Component var32 = var0.add((java.awt.Component)var15);
    float var33 = var0.getAlignmentX();
    var0.setAlignmentY(10.0f);
    net.sourceforge.schemaspy.ui.MainFrame var36 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var37 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var37.requestFocus();
    var37.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var41 = var37.insets();
    var37.setAlignmentX(1.0f);
    java.awt.Color var44 = var37.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var45 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var45.requestFocus();
    var45.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var49 = var45.insets();
    float var50 = var45.getAlignmentX();
    var45.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var56 = var45.getMouseListeners();
    java.awt.Rectangle var57 = var45.bounds();
    var37.setBounds(var57);
    var36.setMaximizedBounds(var57);
    java.awt.Container var60 = var36.getContentPane();
    boolean var61 = var36.isLocationByPlatform();
    net.sourceforge.schemaspy.ui.MainFrame var62 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var63 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var64 = var63.getTableExclusions();
    boolean var65 = var63.isEvaluateAllEnabled();
    java.util.List var66 = var63.getColumnDetails();
    var62.setIconImages(var66);
    boolean var68 = var62.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var69 = var62.getModalExclusionType();
    var36.setModalExclusionType(var69);
    var36.setEnabled(true);
    java.awt.Color var73 = var36.getBackground();
    var0.setForeground(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test51() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test51");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var26 = var25.isManagingFocus();
    java.awt.Rectangle var27 = var25.getVisibleRect();
    var0.setBounds(var27);
    var0.repaint(1L, 10, 2, 0, 0);
    boolean var37 = var0.inside((-3), 1);
    net.sourceforge.schemaspy.ui.MainFrame var38 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var39 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var39.requestFocus();
    var39.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var43 = var39.insets();
    var39.setAlignmentX(1.0f);
    java.awt.Color var46 = var39.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var47 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var47.requestFocus();
    var47.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var51 = var47.insets();
    float var52 = var47.getAlignmentX();
    var47.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var58 = var47.getMouseListeners();
    java.awt.Rectangle var59 = var47.bounds();
    var39.setBounds(var59);
    var38.setMaximizedBounds(var59);
    net.sourceforge.schemaspy.ui.DbConfigPanel var62 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var62.requestFocus();
    var62.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var66 = var62.insets();
    var62.setAlignmentX(1.0f);
    boolean var69 = var62.hasFocus();
    boolean var70 = var62.getFocusTraversalKeysEnabled();
    boolean var71 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var62);
    var62.firePropertyChange("hi!", 'a', 'a');
    net.sourceforge.schemaspy.ui.DbConfigPanel var76 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var77 = var76.isManagingFocus();
    int var78 = var76.getWidth();
    java.awt.Insets var79 = var76.insets();
    javax.accessibility.AccessibleContext var80 = var76.getAccessibleContext();
    boolean var83 = var76.inside(100, (-3));
    java.awt.Rectangle var84 = var76.getVisibleRect();
    var62.setBounds(var84);
    var38.setMaximizedBounds(var84);
    java.awt.Window[] var87 = var38.getOwnedWindows();
    java.awt.Dialog.ModalExclusionType var88 = var38.getModalExclusionType();
    var0.setModalExclusionType(var88);
    java.awt.Component var90 = var0.getGlassPane();
    java.awt.event.InputMethodListener[] var91 = var0.getInputMethodListeners();
    boolean var92 = var0.isShowing();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);

  }

  public void test52() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test52");


    net.sourceforge.schemaspy.util.Version var1 = new net.sourceforge.schemaspy.util.Version("");
    java.lang.String var2 = var1.toString();
    net.sourceforge.schemaspy.util.Dot var3 = net.sourceforge.schemaspy.util.Dot.getInstance();
    var3.setHighQuality(true);
    net.sourceforge.schemaspy.util.Dot.DotFailure var7 = var3.new DotFailure("a");
    boolean var8 = var3.exists();
    net.sourceforge.schemaspy.util.Version var9 = var3.getVersion();
    net.sourceforge.schemaspy.util.Version var11 = new net.sourceforge.schemaspy.util.Version("");
    net.sourceforge.schemaspy.util.Version var13 = new net.sourceforge.schemaspy.util.Version("");
    int var14 = var11.compareTo(var13);
    net.sourceforge.schemaspy.util.Version var16 = new net.sourceforge.schemaspy.util.Version("");
    int var17 = var11.compareTo(var16);
    net.sourceforge.schemaspy.util.Version var19 = new net.sourceforge.schemaspy.util.Version("");
    net.sourceforge.schemaspy.util.Version var21 = new net.sourceforge.schemaspy.util.Version("");
    int var22 = var19.compareTo(var21);
    net.sourceforge.schemaspy.util.Version var24 = new net.sourceforge.schemaspy.util.Version("");
    int var25 = var19.compareTo(var24);
    int var26 = var11.compareTo(var24);
    int var27 = var9.compareTo(var24);
    int var28 = var1.compareTo(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);

  }

  public void test53() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test53");


    net.sourceforge.schemaspy.util.DbSpecificOption var2 = new net.sourceforge.schemaspy.util.DbSpecificOption("", "ISO-8859-1");
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.getDescription();
    java.lang.String var5 = var2.getName();
    java.lang.String var6 = var2.getName();
    java.lang.String var7 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"+ "'", var3.equals("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ISO-8859-1"+ "'", var4.equals("ISO-8859-1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"+ "'", var7.equals("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"));

  }

  public void test54() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test54");


    net.sourceforge.schemaspy.Config var0 = net.sourceforge.schemaspy.Config.getInstance();
    var0.setRenderer(" ");
    java.lang.String var3 = var0.getServer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test55() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test55");


    net.sourceforge.schemaspy.util.Dot var0 = net.sourceforge.schemaspy.util.Dot.getInstance();
    java.lang.String var1 = var0.getRenderer();
    var0.setFormat("hi!s");
    java.lang.String var4 = var0.getFormat();
    var0.setFormat("ora");
    boolean var7 = var0.isValid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!s"+ "'", var4.equals("hi!s"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test56() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test56");


    java.util.Set var1 = net.sourceforge.schemaspy.Config.getBuiltInDatabaseTypes("hi!s{hi!s}hi!s.ISO-8859-1.net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test57() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test57");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    java.lang.Object var5 = var0.getTreeLock();
    var0.validate();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var8 = var0.getComponent(10);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test58() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test58");


    net.sourceforge.schemaspy.util.LineWriter var3 = new net.sourceforge.schemaspy.util.LineWriter("Unknown", 100, "ISO-8859-1");
    var3.newLine();
    var3.writeln("[]");
    var3.flush();

  }

  public void test59() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test59");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    var0.setSqlFormatter("hi!");
    java.io.File var4 = var0.getGraphvizDir();
    var0.setHost("hi!s");
    java.lang.String var7 = var0.getSchema();
    var0.setPort((java.lang.Integer)1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test60() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test60");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    boolean var7 = var0.isOpaque();
    var0.pack();
    boolean var9 = var0.isUndecorated();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test61() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test61");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    javax.swing.event.AncestorListener[] var4 = var0.getAncestorListeners();
    var0.repaint(100, 1, 10, (-1));
    int var10 = var0.getX();
    var0.updateUI();
    net.sourceforge.schemaspy.ui.DbConfigPanel var12 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var13 = var12.isManagingFocus();
    int var14 = var12.getWidth();
    java.awt.Point var15 = var12.getMousePosition();
    boolean var18 = var12.contains(1, (-1));
    boolean var19 = var12.isBackgroundSet();
    var12.requestFocus();
    net.sourceforge.schemaspy.ui.MainFrame var21 = new net.sourceforge.schemaspy.ui.MainFrame();
    java.awt.event.MouseMotionListener[] var22 = var21.getMouseMotionListeners();
    java.util.Locale var23 = var21.getLocale();
    java.awt.Dimension var24 = var21.getSize();
    var12.setMaximumSize(var24);
    var0.setMinimumSize(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test62() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test62");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var1 = var0.isManagingFocus();
    int var2 = var0.getWidth();
    java.awt.Insets var3 = var0.insets();
    javax.accessibility.AccessibleContext var4 = var0.getAccessibleContext();
    boolean var7 = var0.inside(100, (-3));
    java.awt.Rectangle var8 = var0.getVisibleRect();
    java.awt.Point var9 = var0.getLocation();
    boolean var10 = var0.getFocusTraversalKeysEnabled();
    net.sourceforge.schemaspy.ui.DbConfigPanel var12 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var12.requestFocus();
    var12.setFocusTraversalPolicyProvider(true);
    javax.swing.event.AncestorListener[] var16 = var12.getAncestorListeners();
    var12.paintImmediately(1, 0, 0, (-1));
    int var22 = var12.getY();
    var12.setSize(5, 5);
    javax.swing.TransferHandler var26 = var12.getTransferHandler();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var27 = var0.add("ISO-8859-1s", (java.awt.Component)var12);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test63() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test63");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var26 = var25.isManagingFocus();
    java.awt.Rectangle var27 = var25.getVisibleRect();
    var0.setBounds(var27);
    var0.hide();
    java.util.List var30 = var0.getIconImages();
    boolean var31 = var0.isFocused();
    boolean var32 = var0.isFocused();
    java.awt.Color var33 = var0.getBackground();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test64() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test64");


    net.sourceforge.schemaspy.ui.DbConfigTableModel var0 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    net.sourceforge.schemaspy.util.DbSpecificConfig var2 = new net.sourceforge.schemaspy.util.DbSpecificConfig("");
    var2.dumpUsage();
    var0.setDbSpecificConfig(var2);
    net.sourceforge.schemaspy.Config var5 = var2.getConfig();
    java.util.List var6 = var5.getSchemas();
    var5.setEvaluateAllEnabled(false);
    java.util.logging.Level var9 = var5.getLogLevel();
    var5.setSchemaSpec("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test65() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test65");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    java.awt.Toolkit var6 = var0.getToolkit();
    boolean var7 = var0.isFocused();
    java.awt.event.ComponentListener[] var8 = var0.getComponentListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test66() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test66");


    net.sourceforge.schemaspy.util.Dot var0 = net.sourceforge.schemaspy.util.Dot.getInstance();
    java.lang.String var1 = var0.getRenderer();
    var0.setFormat("hi!s");
    java.lang.String var4 = var0.getFormat();
    boolean var5 = var0.isHighQuality();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!s"+ "'", var4.equals("hi!s"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test67() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test67");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setMaxDbThreads(1);
    var0.setHasRoutines(false);
    net.sourceforge.schemaspy.SchemaAnalyzer var5 = new net.sourceforge.schemaspy.SchemaAnalyzer();
    net.sourceforge.schemaspy.Config var6 = new net.sourceforge.schemaspy.Config();
    var6.setDb("a");
    java.lang.String var9 = var6.getServer();
    boolean var10 = var6.isHtmlGenerationEnabled();
    boolean var11 = var6.isMeterEnabled();
    net.sourceforge.schemaspy.model.Database var12 = var5.analyze(var6);
    var6.setHasOrphans(true);
    net.sourceforge.schemaspy.view.SqlFormatter var15 = var6.getSqlFormatter();
    var0.setSqlFormatter(var15);
    java.lang.String var17 = var0.getCss();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "schemaSpy.css"+ "'", var17.equals("schemaSpy.css"));

  }

  public void test68() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test68");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    java.lang.Integer var2 = var0.getPort();
    boolean var3 = var0.isOneOfMultipleSchemas();
    var0.setHighQuality(false);
    int var6 = var0.getMaxDetailedTables();
    boolean var7 = var0.isEvaluateAllEnabled();
    boolean var8 = var0.isSchemaDisabled();
    var0.setDescription("Value");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 300);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test69() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test69");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    net.sourceforge.schemaspy.ui.DbConfigPanel var24 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var24.requestFocus();
    var24.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var28 = var24.insets();
    var24.setAlignmentX(1.0f);
    boolean var31 = var24.hasFocus();
    boolean var32 = var24.getFocusTraversalKeysEnabled();
    boolean var33 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var24);
    var24.firePropertyChange("hi!", 'a', 'a');
    net.sourceforge.schemaspy.ui.DbConfigPanel var38 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var39 = var38.isManagingFocus();
    int var40 = var38.getWidth();
    java.awt.Insets var41 = var38.insets();
    javax.accessibility.AccessibleContext var42 = var38.getAccessibleContext();
    boolean var45 = var38.inside(100, (-3));
    java.awt.Rectangle var46 = var38.getVisibleRect();
    var24.setBounds(var46);
    var0.setMaximizedBounds(var46);
    java.awt.event.ComponentListener[] var49 = var0.getComponentListeners();
    int var50 = var0.getCursorType();
    int var51 = var0.getHeight();
    java.awt.Container var52 = var0.getContentPane();
    var0.setAlwaysOnTop(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 312);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test70() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test70");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    java.beans.PropertyChangeListener[] var2 = var0.getPropertyChangeListeners();
    var0.paintImmediately(0, (-1), (-1), 0);
    boolean var8 = var0.isForegroundSet();
    javax.swing.JRootPane var9 = var0.getRootPane();
    var0.setAutoscrolls(true);
    javax.swing.TransferHandler var12 = var0.getTransferHandler();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test71() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test71");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.util.List var24 = var0.getIconImages();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var25.requestFocus();
    var25.setFocusTraversalPolicyProvider(true);
    boolean var29 = var25.requestFocusInWindow();
    java.awt.FocusTraversalPolicy var30 = var25.getFocusTraversalPolicy();
    var0.setFocusTraversalPolicy(var30);
    var0.setFocusTraversalKeysEnabled(true);
    net.sourceforge.schemaspy.ui.DbConfigPanel var34 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var34.requestFocus();
    var34.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var38 = var34.insets();
    var34.setAlignmentX(1.0f);
    var34.doLayout();
    boolean var42 = var34.isCursorSet();
    var34.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var47 = var34.getLocation();
    var34.setSize(2, 10);
    var34.grabFocus();
    java.awt.Color var52 = var34.getForeground();
    var0.setBackground(var52);
    net.sourceforge.schemaspy.ui.DbConfigPanel var54 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var54.requestFocus();
    var54.setFocusTraversalPolicyProvider(true);
    java.awt.Point var59 = var54.getMousePosition(true);
    java.awt.Component var60 = var54.getNextFocusableComponent();
    boolean var61 = var54.isBackgroundSet();
    var54.requestFocus();
    net.sourceforge.schemaspy.ui.DbConfigPanel var63 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var63.requestFocus();
    var63.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var67 = var63.insets();
    float var68 = var63.getAlignmentX();
    var63.setBounds(0, 1, 10, 100);
    java.awt.Rectangle var74 = var63.getBounds();
    var54.scrollRectToVisible(var74);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setShape((java.awt.Shape)var74);
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test72() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test72");


    net.sourceforge.schemaspy.ui.DbTypeSelectorModel var1 = new net.sourceforge.schemaspy.ui.DbTypeSelectorModel("hi!");
    int var2 = var1.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);

  }

  public void test73() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test73");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var26 = var25.isManagingFocus();
    java.awt.Rectangle var27 = var25.getVisibleRect();
    var0.setBounds(var27);
    var0.hide();
    java.util.List var30 = var0.getIconImages();
    boolean var31 = var0.isFocused();
    net.sourceforge.schemaspy.ui.DbConfigPanel var32 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var32.requestFocus();
    var32.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var36 = var32.insets();
    var32.setAlignmentX(1.0f);
    var32.firePropertyChange("hi!", 10, 2);
    var32.paintImmediately(100, 10, 2, 0);
    java.util.Set var49 = var32.getFocusTraversalKeys(2);
    java.awt.Cursor var50 = var32.getCursor();
    var0.setCursor(var50);
    net.sourceforge.schemaspy.ui.MainFrame var52 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var53 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var54 = var53.getTableExclusions();
    boolean var55 = var53.isEvaluateAllEnabled();
    java.util.List var56 = var53.getColumnDetails();
    var52.setIconImages(var56);
    boolean var58 = var52.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var59 = var52.getModalExclusionType();
    net.sourceforge.schemaspy.ui.DbConfigPanel var60 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var60.requestFocus();
    var60.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var64 = var60.insets();
    var60.setAlignmentX(1.0f);
    boolean var67 = var60.hasFocus();
    boolean var68 = var60.getFocusTraversalKeysEnabled();
    boolean var69 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var60);
    net.sourceforge.schemaspy.ui.DbConfigPanel var70 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var71 = var70.isManagingFocus();
    java.awt.Rectangle var72 = var70.getVisibleRect();
    java.awt.Rectangle var73 = var60.getBounds(var72);
    java.awt.Dimension var74 = var60.getPreferredSize();
    var52.setSize(var74);
    java.awt.im.InputContext var76 = var52.getInputContext();
    float var77 = var52.getOpacity();
    java.lang.String var78 = var52.getTitle();
    var52.reshape(0, 11, (-3), 0);
    net.sourceforge.schemaspy.ui.DbConfigPanel var84 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var84.requestFocus();
    var84.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var88 = var84.insets();
    boolean var89 = var84.isFontSet();
    var84.transferFocusUpCycle();
    java.awt.LayoutManager var91 = var84.getLayout();
    var52.setLayout(var91);
    var0.setLayout(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "SchemaSpy"+ "'", var78.equals("SchemaSpy"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test74() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test74");


    net.sourceforge.schemaspy.MultipleSchemaAnalyzer var0 = net.sourceforge.schemaspy.MultipleSchemaAnalyzer.getInstance();
    net.sourceforge.schemaspy.model.Routine var11 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var12 = var11.getDataAccess();
    java.lang.String var13 = var11.getDefinitionLanguage();
    net.sourceforge.schemaspy.model.Routine var23 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var24 = var23.getDataAccess();
    java.lang.String var25 = var23.getComment();
    int var26 = var11.compareTo(var23);
    net.sourceforge.schemaspy.model.Routine var36 = new net.sourceforge.schemaspy.model.Routine("", "hi!", "a", "", "", false, "", "hi!", "");
    int var37 = var11.compareTo(var36);
    java.util.List var38 = var36.getParameters();
    net.sourceforge.schemaspy.model.Routine var48 = new net.sourceforge.schemaspy.model.Routine("", "hi!", "a", "", "", false, "", "hi!", "");
    java.lang.String var49 = var48.getDefinition();
    net.sourceforge.schemaspy.model.Routine var59 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var60 = var59.getDataAccess();
    java.lang.String var61 = var59.getDefinitionLanguage();
    int var62 = var48.compareTo(var59);
    java.util.List var63 = var48.getParameters();
    net.sourceforge.schemaspy.view.WriteStats var64 = new net.sourceforge.schemaspy.view.WriteStats((java.util.Collection)var63);
    java.util.List var65 = net.sourceforge.schemaspy.DbAnalyzer.getOrphans((java.util.Collection)var63);
    java.util.List var66 = net.sourceforge.schemaspy.DbAnalyzer.getTablesWithoutIndexes((java.util.Collection)var65);
    net.sourceforge.schemaspy.Config var67 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var68 = var67.getTableExclusions();
    boolean var69 = var67.isEvaluateAllEnabled();
    java.lang.String var70 = var67.getDescription();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.analyze("net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", var38, var66, var67);
      fail("Expected exception of type net.sourceforge.schemaspy.Config.MissingRequiredParameterException");
    } catch (net.sourceforge.schemaspy.Config.MissingRequiredParameterException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "a"+ "'", var13.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "a"+ "'", var25.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == (-3));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + ""+ "'", var49.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "a"+ "'", var61.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);

  }

  public void test75() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test75");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    boolean var7 = var0.hasFocus();
    boolean var8 = var0.getFocusTraversalKeysEnabled();
    boolean var9 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var0);
    var0.firePropertyChange("hi!", 'a', 'a');
    java.lang.String var14 = var0.getUIClassID();
    java.awt.Point var16 = var0.getMousePosition(false);
    java.awt.Point var17 = var0.location();
    net.sourceforge.schemaspy.ui.MainFrame var18 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var19 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var19.requestFocus();
    var19.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var23 = var19.insets();
    var19.setAlignmentX(1.0f);
    java.awt.Color var26 = var19.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var27 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var27.requestFocus();
    var27.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var31 = var27.insets();
    float var32 = var27.getAlignmentX();
    var27.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var38 = var27.getMouseListeners();
    java.awt.Rectangle var39 = var27.bounds();
    var19.setBounds(var39);
    var18.setMaximizedBounds(var39);
    net.sourceforge.schemaspy.ui.DbConfigPanel var42 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var42.requestFocus();
    var42.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var46 = var42.insets();
    var42.setAlignmentX(1.0f);
    boolean var49 = var42.hasFocus();
    boolean var50 = var42.getFocusTraversalKeysEnabled();
    boolean var51 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var42);
    var42.firePropertyChange("hi!", 'a', 'a');
    net.sourceforge.schemaspy.ui.DbConfigPanel var56 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var57 = var56.isManagingFocus();
    int var58 = var56.getWidth();
    java.awt.Insets var59 = var56.insets();
    javax.accessibility.AccessibleContext var60 = var56.getAccessibleContext();
    boolean var63 = var56.inside(100, (-3));
    java.awt.Rectangle var64 = var56.getVisibleRect();
    var42.setBounds(var64);
    var18.setMaximizedBounds(var64);
    java.awt.event.ComponentListener[] var67 = var18.getComponentListeners();
    int var68 = var18.getCursorType();
    int var69 = var18.getHeight();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var71 = var0.add((java.awt.Component)var18, (-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 312);

  }

  public void test76() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test76");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    net.sourceforge.schemaspy.ui.MainFrame var6 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var7 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var7.requestFocus();
    var7.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var11 = var7.insets();
    var7.setAlignmentX(1.0f);
    java.awt.Color var14 = var7.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var15 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var15.requestFocus();
    var15.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var19 = var15.insets();
    float var20 = var15.getAlignmentX();
    var15.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var26 = var15.getMouseListeners();
    java.awt.Rectangle var27 = var15.bounds();
    var7.setBounds(var27);
    var6.setMaximizedBounds(var27);
    java.awt.Container var30 = var6.getContentPane();
    boolean var31 = var6.isLocationByPlatform();
    net.sourceforge.schemaspy.ui.MainFrame var32 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var33 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var34 = var33.getTableExclusions();
    boolean var35 = var33.isEvaluateAllEnabled();
    java.util.List var36 = var33.getColumnDetails();
    var32.setIconImages(var36);
    boolean var38 = var32.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var39 = var32.getModalExclusionType();
    var6.setModalExclusionType(var39);
    var6.setEnabled(true);
    java.awt.Color var43 = var6.getBackground();
    var0.setForeground(var43);
    boolean var45 = var0.getIgnoreRepaint();
    var0.setBounds(100, (-3), 3, 100);
    java.awt.Window.Type var51 = var0.getType();
    var0.setName("net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory).hi!. ");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test77() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test77");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var26 = var25.isManagingFocus();
    java.awt.Rectangle var27 = var25.getVisibleRect();
    var0.setBounds(var27);
    var0.hide();
    java.util.List var30 = var0.getIconImages();
    boolean var31 = var0.isFocused();
    net.sourceforge.schemaspy.ui.DbConfigPanel var32 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var32.requestFocus();
    var32.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var36 = var32.insets();
    var32.setAlignmentX(1.0f);
    var32.firePropertyChange("hi!", 10, 2);
    var32.paintImmediately(100, 10, 2, 0);
    java.util.Set var49 = var32.getFocusTraversalKeys(2);
    java.awt.Cursor var50 = var32.getCursor();
    var0.setCursor(var50);
    net.sourceforge.schemaspy.ui.DbConfigPanel var52 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var52.requestFocus();
    var52.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var56 = var52.insets();
    float var57 = var52.getAlignmentX();
    boolean var60 = var52.contains(1, (-1));
    var52.setOpaque(false);
    var52.repaint(10L);
    java.awt.Dimension var65 = var52.getSize();
    var0.setSize(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test78() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test78");


    net.sourceforge.schemaspy.util.LineWriter var3 = new net.sourceforge.schemaspy.util.LineWriter("Unknown", 100, "ISO-8859-1");
    var3.flush();
    var3.write("a");
    var3.flush();
    var3.writeln("Unknown");

  }

  public void test79() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test79");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var7 = var0.getModalExclusionType();
    boolean var8 = var0.isAutoRequestFocus();
    boolean var9 = var0.isResizable();
    net.sourceforge.schemaspy.ui.DbConfigPanel var10 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var10.requestFocus();
    var10.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var14 = var10.insets();
    var10.setAlignmentX(1.0f);
    java.awt.Color var17 = var10.getForeground();
    var0.setForeground(var17);
    var0.setBounds((-3), 5, 0, 100);
    boolean var24 = var0.isFocusTraversalPolicyProvider();
    var0.setResizable(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test80() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test80");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    net.sourceforge.schemaspy.Config var3 = new net.sourceforge.schemaspy.Config();
    boolean var4 = var3.isImpliedConstraintsEnabled();
    var3.setHasOrphans(false);
    java.lang.String var7 = var3.getSchemaSpec();
    boolean var8 = var3.isHighQuality();
    var3.setPassword("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'");
    boolean var11 = var3.isEncodeCommentsEnabled();
    int var12 = var3.getFontSize();
    java.util.Properties var14 = var3.determineDbProperties("hi!s");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sourceforge.schemaspy.util.ConnectionURLBuilder var15 = new net.sourceforge.schemaspy.util.ConnectionURLBuilder(var0, var14);
      fail("Expected exception of type net.sourceforge.schemaspy.model.InvalidConfigurationException");
    } catch (net.sourceforge.schemaspy.model.InvalidConfigurationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test81() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test81");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    var0.setSqlFormatter("hi!");
    java.io.File var4 = var0.getGraphvizDir();
    java.util.regex.Pattern var5 = var0.getTableExclusions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test82() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test82");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.util.Locale var4 = javax.swing.JComponent.getDefaultLocale();
    var0.setLocale(var4);
    net.sourceforge.schemaspy.ui.DbConfigPanel var6 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var6.requestFocus();
    var6.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var10 = var6.insets();
    float var11 = var6.getAlignmentX();
    var6.setBounds(0, 1, 10, 100);
    java.awt.Rectangle var17 = var6.getBounds();
    var0.computeVisibleRect(var17);
    net.sourceforge.schemaspy.ui.DbConfigPanel var19 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var19.requestFocus();
    var19.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var23 = var19.insets();
    var19.requestFocus();
    var19.setIgnoreRepaint(true);
    java.awt.Component var27 = var19.getNextFocusableComponent();
    net.sourceforge.schemaspy.ui.MainFrame var28 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var29 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var30 = var29.getTableExclusions();
    boolean var31 = var29.isEvaluateAllEnabled();
    java.util.List var32 = var29.getColumnDetails();
    var28.setIconImages(var32);
    boolean var34 = var28.isAlwaysOnTop();
    var28.setFocusableWindowState(true);
    boolean var37 = var28.isFocusCycleRoot();
    java.awt.Graphics var38 = var28.getGraphics();
    boolean var39 = var28.isFocusCycleRoot();
    java.awt.Dimension var40 = var28.size();
    var19.setMaximumSize(var40);
    java.awt.Component var42 = var0.add((java.awt.Component)var19);
    java.awt.event.MouseListener[] var43 = var42.getMouseListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test83() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test83");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    java.lang.Integer var2 = var0.getPort();
    var0.setConnectionProperties("a");
    java.lang.String var5 = var0.getSchema();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setColumnDetails(".hi!sdhi!sohi!sthi!s hi!svhi!sehi!srhi!sshi!sihi!sohi!snhi!s hi!s2hi!s.hi!s2hi!s.hi!s1hi!s hi!sohi!srhi!s hi!svhi!sehi!srhi!sshi!sihi!sohi!snhi!sshi!s hi!sghi!srhi!sehi!sahi!sthi!sehi!srhi!s hi!sthi!shhi!sahi!snhi!s hi!s2hi!s.hi!s4hi!s.hi!s{hi!s}hi!s");
      fail("Expected exception of type net.sourceforge.schemaspy.model.InvalidConfigurationException");
    } catch (net.sourceforge.schemaspy.model.InvalidConfigurationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test84() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test84");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    boolean var7 = var0.hasFocus();
    var0.paintImmediately(10, 100, 2, 10);
    java.awt.Point var13 = var0.getLocation();
    int var14 = var0.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);

  }

  public void test85() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test85");


    net.sourceforge.schemaspy.util.DbSpecificOption var2 = new net.sourceforge.schemaspy.util.DbSpecificOption("", "ISO-8859-1");
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.getDescription();
    java.lang.Object var5 = var2.getValue();
    net.sourceforge.schemaspy.ui.MainFrame var6 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var7 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var8 = var7.getTableExclusions();
    boolean var9 = var7.isEvaluateAllEnabled();
    java.util.List var10 = var7.getColumnDetails();
    var6.setIconImages(var10);
    boolean var12 = var6.isAlwaysOnTop();
    var6.setFocusableWindowState(true);
    java.awt.Window[] var15 = var6.getOwnedWindows();
    java.awt.Component var16 = var6.getMostRecentFocusOwner();
    var2.setValue((java.lang.Object)var6);
    java.util.List var18 = var6.getIconImages();
    var6.setExtendedState(312);
    var6.invalidate();
    boolean var22 = var6.isShowing();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"+ "'", var3.equals("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ISO-8859-1"+ "'", var4.equals("ISO-8859-1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test86() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test86");


    net.sourceforge.schemaspy.model.ConnectionFailure var1 = new net.sourceforge.schemaspy.model.ConnectionFailure(" ");

  }

  public void test87() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test87");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var26 = var25.isManagingFocus();
    java.awt.Rectangle var27 = var25.getVisibleRect();
    var0.setBounds(var27);
    var0.repaint(1L, 10, 2, 0, 0);
    java.awt.Point var36 = var0.getMousePosition(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);

  }

  public void test88() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test88");


    net.sourceforge.schemaspy.model.Routine var9 = new net.sourceforge.schemaspy.model.Routine("", "hi!", "a", "", "", false, "", "hi!", "");
    boolean var10 = var9.isDeterministic();
    java.lang.String var11 = var9.getSecurityType();
    java.lang.String var12 = var9.getDefinitionLanguage();
    java.lang.String var13 = var9.getDataAccess();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + ""+ "'", var13.equals(""));

  }

  public void test89() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test89");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    var0.firePropertyChange("a", (byte)10, (byte)0);
    java.awt.Insets var8 = var0.insets();
    var0.setAlignmentY(100.0f);
    java.awt.Image var13 = var0.createImage(1, 1);
    int var14 = var0.getComponentCount();
    net.sourceforge.schemaspy.ui.DbConfigPanel var15 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var15.requestFocus();
    var15.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var19 = var15.insets();
    java.lang.Object var20 = var15.getTreeLock();
    var15.setAutoscrolls(true);
    java.awt.Component var24 = var0.add((java.awt.Component)var15, 1);
    var0.show(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test90() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test90");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    var0.setConnectionPropertiesFile("ISO-8859-1s");
    var0.setPromptForPasswordEnabled(false);
    var0.setHtmlGenerationEnabled(false);
    java.lang.String var10 = var0.getHost();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test91() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test91");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    java.awt.Window.Type var1 = var0.getType();
    var0.hide();
    var0.firePropertyChange("schemaSpy.css", '4', '#');
    boolean var7 = var0.isAutoRequestFocus();
    boolean var8 = var0.isDoubleBuffered();
    java.awt.Font var9 = var0.getFont();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test92() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test92");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var7 = var0.getModalExclusionType();
    net.sourceforge.schemaspy.ui.DbConfigPanel var8 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var8.requestFocus();
    var8.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var12 = var8.insets();
    var8.setAlignmentX(1.0f);
    boolean var15 = var8.hasFocus();
    boolean var16 = var8.getFocusTraversalKeysEnabled();
    boolean var17 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var8);
    net.sourceforge.schemaspy.ui.DbConfigPanel var18 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var19 = var18.isManagingFocus();
    java.awt.Rectangle var20 = var18.getVisibleRect();
    java.awt.Rectangle var21 = var8.getBounds(var20);
    java.awt.Dimension var22 = var8.getPreferredSize();
    var0.setSize(var22);
    java.awt.im.InputContext var24 = var0.getInputContext();
    float var25 = var0.getOpacity();
    java.lang.String var26 = var0.getTitle();
    var0.reshape(0, 11, (-3), 0);
    java.awt.event.ContainerListener[] var32 = var0.getContainerListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "SchemaSpy"+ "'", var26.equals("SchemaSpy"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test93() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test93");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.doLayout();
    boolean var8 = var0.isCursorSet();
    java.awt.event.HierarchyListener[] var9 = var0.getHierarchyListeners();
    net.sourceforge.schemaspy.ui.DbConfigPanel var10 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var10.requestFocus();
    var10.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var14 = var10.insets();
    var10.setAlignmentX(1.0f);
    java.awt.Color var17 = var10.getForeground();
    javax.swing.InputVerifier var18 = var10.getInputVerifier();
    var10.repaint(100L, 10, 1, 0, 100);
    var10.setEnabled(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var27 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var27.requestFocus();
    java.beans.PropertyChangeListener[] var29 = var27.getPropertyChangeListeners();
    var27.paintImmediately(0, (-1), (-1), 0);
    java.awt.event.KeyListener[] var35 = var27.getKeyListeners();
    net.sourceforge.schemaspy.ui.DbConfigPanel var36 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var36.requestFocus();
    var36.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var40 = var36.insets();
    var36.setAlignmentX(1.0f);
    java.awt.Color var43 = var36.getForeground();
    var27.setForeground(var43);
    var10.setBackground(var43);
    var0.setForeground(var43);
    boolean var47 = var0.isDoubleBuffered();
    var0.setOpaque(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);

  }

  public void test94() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test94");


    java.lang.String[] var1 = new java.lang.String[] { "net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"};
    net.sourceforge.schemaspy.Config var2 = new net.sourceforge.schemaspy.Config(var1);
    net.sourceforge.schemaspy.Config var3 = new net.sourceforge.schemaspy.Config(var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var4 = var3.getRemainingParameters();
      fail("Expected exception of type net.sourceforge.schemaspy.model.InvalidConfigurationException");
    } catch (net.sourceforge.schemaspy.model.InvalidConfigurationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test95() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test95");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    boolean var1 = var0.isImpliedConstraintsEnabled();
    var0.setHasOrphans(false);
    java.lang.String var4 = var0.getSchemaSpec();
    boolean var5 = var0.isHighQuality();
    int var6 = var0.getMaxDetailedTables();
    boolean var7 = var0.isViewsEnabled();
    boolean var8 = var0.isSchemaDisabled();
    var0.setOutputDir("a");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 300);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test96() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test96");


    net.sourceforge.schemaspy.util.CaseInsensitiveMap var1 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    var1.clear();
    java.util.List var3 = net.sourceforge.schemaspy.DbAnalyzer.getRailsConstraints((java.util.Map)var1);
    var1.clear();
    java.lang.Object var5 = var1.clone();
    java.lang.String var6 = var1.toString();
    java.util.Set var7 = var1.keySet();
    net.sourceforge.schemaspy.Config var8 = new net.sourceforge.schemaspy.Config();
    var8.setDb("a");
    boolean var11 = var8.isEvaluateAllEnabled();
    boolean var12 = var8.isLogoEnabled();
    boolean var13 = var1.equals((java.lang.Object)var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "{}"+ "'", var6.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test97() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test97");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    boolean var25 = var0.isLocationByPlatform();
    net.sourceforge.schemaspy.ui.MainFrame var26 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var27 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var28 = var27.getTableExclusions();
    boolean var29 = var27.isEvaluateAllEnabled();
    java.util.List var30 = var27.getColumnDetails();
    var26.setIconImages(var30);
    boolean var32 = var26.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var33 = var26.getModalExclusionType();
    var0.setModalExclusionType(var33);
    var0.pack();
    java.awt.Window.Type var36 = var0.getType();
    boolean var37 = var0.isUndecorated();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test98() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test98");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    java.beans.PropertyChangeListener[] var2 = var0.getPropertyChangeListeners();
    var0.paintImmediately(0, (-1), (-1), 0);
    var0.firePropertyChange("/Users/Jesh/Documents/School/Summer 2015/Independent Study/Eclipse/workspace/36_schemaspy/bin", ' ', ' ');
    var0.repaint(1L, 0, 0, (-3), 23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test99() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test99");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    boolean var25 = var0.isLocationByPlatform();
    boolean var26 = var0.isUndecorated();
    net.sourceforge.schemaspy.ui.DbConfigPanel var27 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    net.sourceforge.schemaspy.ui.DbConfigPanel var28 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var28.requestFocus();
    var28.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var32 = var28.insets();
    var28.setAlignmentX(1.0f);
    boolean var35 = var28.hasFocus();
    boolean var36 = var28.getFocusTraversalKeysEnabled();
    var28.setSize(1, (-1));
    boolean var41 = var28.requestFocus(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var42 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var42.requestFocus();
    java.beans.PropertyChangeListener[] var44 = var42.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var45 = var42.getBaselineResizeBehavior();
    net.sourceforge.schemaspy.ui.DbConfigPanel var46 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var46.requestFocus();
    var46.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var50 = var46.insets();
    var46.setAlignmentX(1.0f);
    var46.doLayout();
    boolean var54 = var46.isCursorSet();
    var46.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var59 = var46.getLocation();
    boolean var60 = var42.contains(var59);
    java.awt.Point var61 = var28.getLocation(var59);
    java.awt.Component var62 = var27.add((java.awt.Component)var28);
    java.awt.Insets var63 = var27.insets();
    var0.setContentPane((java.awt.Container)var27);
    var0.setTitle("{}s");
    boolean var67 = var0.isEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);

  }

  public void test100() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test100");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.requestFocus();
    boolean var6 = var0.isVisible();
    var0.hide();
    java.awt.Dimension var8 = var0.getPreferredSize();
    java.beans.VetoableChangeListener[] var9 = var0.getVetoableChangeListeners();
    int var10 = var0.getDebugGraphicsOptions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);

  }

  public void test101() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test101");


    java.lang.String[] var1 = new java.lang.String[] { "net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"};
    net.sourceforge.schemaspy.Config var2 = new net.sourceforge.schemaspy.Config(var1);
    net.sourceforge.schemaspy.Config var3 = new net.sourceforge.schemaspy.Config(var1);
    net.sourceforge.schemaspy.Config var4 = new net.sourceforge.schemaspy.Config(var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var5 = var4.getMaxDbThreads();
      fail("Expected exception of type net.sourceforge.schemaspy.model.InvalidConfigurationException");
    } catch (net.sourceforge.schemaspy.model.InvalidConfigurationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test102() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test102");


    net.sourceforge.schemaspy.Config.MissingRequiredParameterException var2 = new net.sourceforge.schemaspy.Config.MissingRequiredParameterException("net.sourceforge.schemaspy.ui.MainFrame[frame4,0,23,500x312,invalid,hidden,layout=java.awt.BorderLayout,title=SchemaSpy,resizable,normal,defaultCloseOperation=HIDE_ON_CLOSE,rootPane=javax.swing.JRootPane[,0,0,0x0,invalid,layout=javax.swing.JRootPane$RootLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777673,maximumSize=,minimumSize=,preferredSize=],rootPaneCheckingEnabled=true]", true);

  }

  public void test103() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test103");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    var0.setFocusableWindowState(true);
    java.awt.Window[] var9 = var0.getOwnedWindows();
    java.awt.Component var10 = var0.getMostRecentFocusOwner();
    java.awt.im.InputMethodRequests var11 = var0.getInputMethodRequests();
    java.awt.Component var12 = var0.getFocusOwner();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test104() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test104");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    java.lang.String var5 = var0.getSchemaSpec();
    var0.setViewsEnabled(false);
    var0.setHtmlGenerationEnabled(true);
    var0.setHasRoutines(false);
    java.util.regex.Pattern var12 = var0.getTableInclusions();
    var0.setViewsEnabled(false);
    var0.setSqlFormatter("schemaSpy.css");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test105() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test105");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    boolean var7 = var0.hasFocus();
    net.sourceforge.schemaspy.ui.DbConfigPanel var8 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var8.requestFocus();
    var8.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var12 = var8.insets();
    float var13 = var8.getAlignmentX();
    var8.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var19 = var8.getMouseListeners();
    boolean var20 = var0.isAncestorOf((java.awt.Component)var8);
    java.awt.im.InputMethodRequests var21 = var8.getInputMethodRequests();
    net.sourceforge.schemaspy.ui.DbConfigPanel var22 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var22.requestFocus();
    var22.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var26 = var22.insets();
    var22.setAlignmentX(1.0f);
    var22.doLayout();
    boolean var30 = var22.isCursorSet();
    var22.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var35 = var22.getLocation();
    java.awt.Component var36 = var8.findComponentAt(var35);
    boolean var37 = var8.getIgnoreRepaint();
    var8.setAutoscrolls(false);
    int var40 = var8.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);

  }

  public void test106() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test106");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    boolean var25 = var0.isLocationByPlatform();
    net.sourceforge.schemaspy.ui.MainFrame var26 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var27 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var28 = var27.getTableExclusions();
    boolean var29 = var27.isEvaluateAllEnabled();
    java.util.List var30 = var27.getColumnDetails();
    var26.setIconImages(var30);
    boolean var32 = var26.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var33 = var26.getModalExclusionType();
    var0.setModalExclusionType(var33);
    var0.pack();
    var0.setFocusableWindowState(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var38 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var38.requestFocus();
    var38.setFocusTraversalPolicyProvider(true);
    java.awt.Point var43 = var38.getMousePosition(true);
    int var44 = var38.getComponentCount();
    int var45 = var38.getHeight();
    net.sourceforge.schemaspy.ui.DbConfigPanel var46 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var46.requestFocus();
    java.beans.PropertyChangeListener[] var48 = var46.getPropertyChangeListeners();
    var46.paintImmediately(0, (-1), (-1), 0);
    java.awt.Font var54 = var46.getFont();
    java.awt.FontMetrics var55 = var38.getFontMetrics(var54);
    java.awt.FontMetrics var56 = var0.getFontMetrics(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test107() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test107");


    net.sourceforge.schemaspy.TableOrderer var0 = new net.sourceforge.schemaspy.TableOrderer();
    net.sourceforge.schemaspy.ui.MainFrame var1 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var2 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var2.requestFocus();
    var2.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var6 = var2.insets();
    var2.setAlignmentX(1.0f);
    java.awt.Color var9 = var2.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var10 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var10.requestFocus();
    var10.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var14 = var10.insets();
    float var15 = var10.getAlignmentX();
    var10.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var21 = var10.getMouseListeners();
    java.awt.Rectangle var22 = var10.bounds();
    var2.setBounds(var22);
    var1.setMaximizedBounds(var22);
    java.util.List var25 = var1.getIconImages();
    net.sourceforge.schemaspy.model.Routine var35 = new net.sourceforge.schemaspy.model.Routine("", "hi!", "a", "", "", false, "", "hi!", "");
    java.lang.String var36 = var35.getDefinition();
    net.sourceforge.schemaspy.model.Routine var46 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var47 = var46.getDataAccess();
    java.lang.String var48 = var46.getDefinitionLanguage();
    int var49 = var35.compareTo(var46);
    java.util.List var50 = var35.getParameters();
    java.util.List var51 = var0.getTablesOrderedByRI((java.util.Collection)var25, (java.util.Collection)var50);
    java.util.List var52 = net.sourceforge.schemaspy.DbAnalyzer.getMustBeUniqueNullableColumns((java.util.Collection)var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + ""+ "'", var36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "hi!"+ "'", var47.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "a"+ "'", var48.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test108() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test108");


    net.sourceforge.schemaspy.util.CaseInsensitiveMap var1 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    var1.clear();
    java.util.List var3 = net.sourceforge.schemaspy.DbAnalyzer.getRailsConstraints((java.util.Map)var1);
    var1.clear();
    java.lang.Object var5 = var1.clone();
    java.lang.String var6 = var1.toString();
    int var7 = var1.size();
    net.sourceforge.schemaspy.ui.DbConfigPanel var8 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var8.requestFocus();
    var8.firePropertyChange("ISO-8859-1", 0L, (-1L));
    java.awt.Point var14 = var8.getLocation();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var15 = var1.get((java.lang.Object)var14);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "{}"+ "'", var6.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test109() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test109");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    boolean var2 = var0.isEvaluateAllEnabled();
    java.lang.String var4 = var0.getParam("hi!s");
    java.lang.String var5 = var0.getCss();
    boolean var6 = var0.isEncodeCommentsEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "schemaSpy.css"+ "'", var5.equals("schemaSpy.css"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test110() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test110");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    boolean var25 = var0.isLocationByPlatform();
    boolean var26 = var0.isUndecorated();
    net.sourceforge.schemaspy.ui.DbConfigPanel var27 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    net.sourceforge.schemaspy.ui.DbConfigPanel var28 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var28.requestFocus();
    var28.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var32 = var28.insets();
    var28.setAlignmentX(1.0f);
    boolean var35 = var28.hasFocus();
    boolean var36 = var28.getFocusTraversalKeysEnabled();
    var28.setSize(1, (-1));
    boolean var41 = var28.requestFocus(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var42 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var42.requestFocus();
    java.beans.PropertyChangeListener[] var44 = var42.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var45 = var42.getBaselineResizeBehavior();
    net.sourceforge.schemaspy.ui.DbConfigPanel var46 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var46.requestFocus();
    var46.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var50 = var46.insets();
    var46.setAlignmentX(1.0f);
    var46.doLayout();
    boolean var54 = var46.isCursorSet();
    var46.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var59 = var46.getLocation();
    boolean var60 = var42.contains(var59);
    java.awt.Point var61 = var28.getLocation(var59);
    java.awt.Component var62 = var27.add((java.awt.Component)var28);
    java.awt.Insets var63 = var27.insets();
    var0.setContentPane((java.awt.Container)var27);
    var0.setEnabled(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test111() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test111");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    net.sourceforge.schemaspy.ui.DbConfigPanel var24 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var24.requestFocus();
    var24.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var28 = var24.insets();
    var24.setAlignmentX(1.0f);
    boolean var31 = var24.hasFocus();
    boolean var32 = var24.getFocusTraversalKeysEnabled();
    boolean var33 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var24);
    var24.firePropertyChange("hi!", 'a', 'a');
    net.sourceforge.schemaspy.ui.DbConfigPanel var38 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var39 = var38.isManagingFocus();
    int var40 = var38.getWidth();
    java.awt.Insets var41 = var38.insets();
    javax.accessibility.AccessibleContext var42 = var38.getAccessibleContext();
    boolean var45 = var38.inside(100, (-3));
    java.awt.Rectangle var46 = var38.getVisibleRect();
    var24.setBounds(var46);
    var0.setMaximizedBounds(var46);
    java.awt.Window[] var49 = var0.getOwnedWindows();
    java.awt.Dialog.ModalExclusionType var50 = var0.getModalExclusionType();
    net.sourceforge.schemaspy.ui.DbConfigPanel var51 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var51.requestFocus();
    var51.firePropertyChange("ISO-8859-1", 0L, (-1L));
    java.awt.Color var57 = var51.getBackground();
    var51.firePropertyChange("java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)", '#', ' ');
    java.awt.Component var63 = var0.add((java.awt.Component)var51, 0);
    java.awt.im.InputMethodRequests var64 = var51.getInputMethodRequests();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);

  }

  public void test112() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test112");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    boolean var1 = var0.isImpliedConstraintsEnabled();
    var0.setHasOrphans(false);
    java.lang.String var4 = var0.getSchemaSpec();
    boolean var5 = var0.isHighQuality();
    var0.setPassword("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'");
    boolean var8 = var0.isEncodeCommentsEnabled();
    int var9 = var0.getFontSize();
    java.lang.String var10 = var0.getPassword();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"+ "'", var10.equals("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"));

  }

  public void test113() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test113");


    java.util.Set var1 = net.sourceforge.schemaspy.Config.getBuiltInDatabaseTypes("schemaSpy.css");
    java.util.List var2 = net.sourceforge.schemaspy.DbAnalyzer.getTablesWithIncrementingColumnNames((java.util.Collection)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test114() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test114");


    net.sourceforge.schemaspy.model.InvalidConfigurationException var1 = new net.sourceforge.schemaspy.model.InvalidConfigurationException("net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "net.sourceforge.schemaspy.model.InvalidConfigurationException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0var2,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)"+ "'", var2.equals("net.sourceforge.schemaspy.model.InvalidConfigurationException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0var2,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)"));

  }

  public void test115() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test115");


    net.sourceforge.schemaspy.model.Routine var9 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var10 = var9.getDataAccess();
    java.util.List var11 = var9.getParameters();
    net.sourceforge.schemaspy.model.Routine var21 = new net.sourceforge.schemaspy.model.Routine("", "hi!", "a", "", "", false, "", "hi!", "");
    java.lang.String var22 = var21.getDefinition();
    net.sourceforge.schemaspy.model.Routine var32 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var33 = var32.getDataAccess();
    java.lang.String var34 = var32.getDefinitionLanguage();
    int var35 = var21.compareTo(var32);
    int var36 = var9.compareTo(var32);
    java.lang.String var37 = var9.getComment();
    boolean var38 = var9.isDeterministic();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "hi!"+ "'", var33.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "a"+ "'", var34.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "a"+ "'", var37.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);

  }

  public void test116() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test116");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    java.lang.String var2 = var0.getConnectionPropertiesFile();
    boolean var3 = var0.isSchemaDisabled();
    net.sourceforge.schemaspy.view.SqlFormatter var4 = var0.getSqlFormatter();
    java.lang.Integer var5 = var0.getPort();
    var0.setNumRowsEnabled(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test117() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test117");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    float var5 = var0.getAlignmentX();
    boolean var8 = var0.contains(1, (-1));
    var0.setOpaque(false);
    var0.repaint(10L);
    java.awt.Dimension var13 = var0.getSize();
    java.awt.Rectangle var14 = var0.getBounds();
    net.sourceforge.schemaspy.ui.DbConfigPanel var15 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var15.requestFocus();
    java.beans.PropertyChangeListener[] var17 = var15.getPropertyChangeListeners();
    var15.paintImmediately(0, (-1), (-1), 0);
    boolean var23 = var15.isForegroundSet();
    boolean var24 = var15.isValidateRoot();
    boolean var25 = var15.isVisible();
    var15.enable();
    net.sourceforge.schemaspy.ui.DbConfigPanel var27 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var27.requestFocus();
    var27.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var31 = var27.insets();
    float var32 = var27.getAlignmentX();
    boolean var35 = var27.contains(1, (-1));
    var27.setOpaque(false);
    var27.repaint(10L);
    java.awt.Dimension var40 = var27.getSize();
    java.beans.PropertyChangeListener[] var41 = var27.getPropertyChangeListeners();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.add((java.awt.Component)var15, (java.lang.Object)var27, 2);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test118() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test118");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Point var5 = var0.getMousePosition(true);
    java.awt.Component var6 = var0.getNextFocusableComponent();
    boolean var7 = var0.isBackgroundSet();
    var0.setSize(0, (-1));
    float var11 = var0.getAlignmentX();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);

  }

  public void test119() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test119");


    net.sourceforge.schemaspy.MultipleSchemaAnalyzer var0 = net.sourceforge.schemaspy.MultipleSchemaAnalyzer.getInstance();
    net.sourceforge.schemaspy.model.Routine var11 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var12 = var11.getDataAccess();
    java.util.List var13 = var11.getParameters();
    net.sourceforge.schemaspy.view.WriteStats var14 = new net.sourceforge.schemaspy.view.WriteStats((java.util.Collection)var13);
    java.util.List var15 = net.sourceforge.schemaspy.DbAnalyzer.getMustBeUniqueNullableColumns((java.util.Collection)var13);
    java.lang.String var16 = net.sourceforge.schemaspy.model.ForeignKeyConstraint.toString(var15);
    net.sourceforge.schemaspy.view.WriteStats var17 = new net.sourceforge.schemaspy.view.WriteStats((java.util.Collection)var15);
    java.util.List var18 = net.sourceforge.schemaspy.DbAnalyzer.sortTablesByName(var15);
    java.util.List var19 = net.sourceforge.schemaspy.DbAnalyzer.sortTablesByName(var15);
    java.util.List var20 = net.sourceforge.schemaspy.DbAnalyzer.getDefaultNullStringColumns((java.util.Collection)var19);
    net.sourceforge.schemaspy.TableOrderer var21 = new net.sourceforge.schemaspy.TableOrderer();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var23 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    var23.clear();
    java.util.List var25 = net.sourceforge.schemaspy.DbAnalyzer.getRailsConstraints((java.util.Map)var23);
    java.util.Set var26 = var23.entrySet();
    net.sourceforge.schemaspy.model.Routine var36 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var37 = var36.getDataAccess();
    java.lang.String var38 = var36.getDefinitionLanguage();
    java.util.List var39 = var36.getParameters();
    java.util.List var40 = var21.getTablesOrderedByRI((java.util.Collection)var26, (java.util.Collection)var39);
    java.util.List var41 = net.sourceforge.schemaspy.DbAnalyzer.getMustBeUniqueNullableColumns((java.util.Collection)var39);
    java.util.List var42 = net.sourceforge.schemaspy.DbAnalyzer.getImpliedConstraints((java.util.Collection)var39);
    net.sourceforge.schemaspy.Config var43 = new net.sourceforge.schemaspy.Config();
    boolean var44 = var43.isLogoEnabled();
    boolean var45 = var43.isHighQuality();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.analyze("DbSpecificOption name: 'net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s' value: 'null' description: 'a'", var19, var42, var43);
      fail("Expected exception of type net.sourceforge.schemaspy.Config.MissingRequiredParameterException");
    } catch (net.sourceforge.schemaspy.Config.MissingRequiredParameterException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "[]"+ "'", var16.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "hi!"+ "'", var37.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "a"+ "'", var38.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);

  }

  public void test120() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test120");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    java.awt.Window.Type var1 = var0.getType();
    java.awt.Component var2 = var0.getMostRecentFocusOwner();
    var0.setState(1);
    javax.swing.TransferHandler var5 = var0.getTransferHandler();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test121() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test121");


    net.sourceforge.schemaspy.util.CaseInsensitiveMap var1 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.List var2 = net.sourceforge.schemaspy.DbAnalyzer.getRailsConstraints((java.util.Map)var1);
    net.sourceforge.schemaspy.Config var3 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var4 = var3.getTableExclusions();
    boolean var5 = var3.isHtmlGenerationEnabled();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var7 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    var7.clear();
    var3.setDbSpecificOptions((java.util.Map)var7);
    java.lang.String var10 = var7.toString();
    var1.putAll((java.util.Map)var7);
    java.util.Set var12 = var1.entrySet();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var14 = var1.containsKey((java.lang.Object)1.0f);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "{}"+ "'", var10.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test122() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test122");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var1 = var0.isManagingFocus();
    int var2 = var0.getWidth();
    java.awt.Insets var3 = var0.insets();
    javax.accessibility.AccessibleContext var4 = var0.getAccessibleContext();
    boolean var7 = var0.inside(100, (-3));
    java.awt.Rectangle var8 = var0.getVisibleRect();
    java.awt.Point var9 = var0.getLocation();
    var0.requestFocus();
    boolean var11 = var0.isManagingFocus();
    float var12 = var0.getAlignmentX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);

  }

  public void test123() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test123");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    var0.setFocusableWindowState(true);
    java.awt.Window[] var9 = var0.getOwnedWindows();
    java.awt.Component var10 = var0.getMostRecentFocusOwner();
    java.awt.im.InputMethodRequests var11 = var0.getInputMethodRequests();
    net.sourceforge.schemaspy.ui.MainFrame var12 = new net.sourceforge.schemaspy.ui.MainFrame();
    java.awt.event.MouseMotionListener[] var13 = var12.getMouseMotionListeners();
    javax.swing.JRootPane var14 = var12.getRootPane();
    boolean var15 = var14.isForegroundSet();
    java.awt.Cursor var16 = var14.getCursor();
    var0.setCursor(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test124() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test124");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    java.awt.event.MouseMotionListener[] var1 = var0.getMouseMotionListeners();
    java.util.Locale var2 = var0.getLocale();
    java.awt.Dimension var3 = var0.getSize();
    java.awt.Toolkit var4 = var0.getToolkit();
    java.awt.Component var5 = var0.getFocusOwner();
    net.sourceforge.schemaspy.ui.DbConfigPanel var6 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var6.requestFocus();
    var6.setFocusTraversalPolicyProvider(true);
    boolean var10 = var6.requestFocusInWindow();
    java.awt.Dimension var11 = var6.getMaximumSize();
    var0.setMinimumSize(var11);
    boolean var13 = var0.isValidateRoot();
    java.awt.Color var14 = var0.getBackground();
    java.awt.LayoutManager var15 = var0.getLayout();
    java.awt.Toolkit var16 = var0.getToolkit();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test125() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test125");


    net.sourceforge.schemaspy.Config.MissingRequiredParameterException var3 = new net.sourceforge.schemaspy.Config.MissingRequiredParameterException("dot version 2.2.1 or versions greater than 2.4", "ISO-8859-1", false);

  }

  public void test126() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test126");


    net.sourceforge.schemaspy.util.Dot var0 = net.sourceforge.schemaspy.util.Dot.getInstance();
    var0.setHighQuality(true);
    boolean var3 = var0.exists();
    var0.setFormat("ora");
    boolean var6 = var0.isValid();
    net.sourceforge.schemaspy.util.Dot.DotFailure var8 = var0.new DotFailure("hi!s");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test127() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test127");


    net.sourceforge.schemaspy.model.Routine var9 = new net.sourceforge.schemaspy.model.Routine("net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", "Helvetica", "a", "hi!s{hi!s}hi!s", "{}s", false, "javax.swing.JPanel[,0,0,0x0,invalid,layout=java.awt.GridBagLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", "ISO-8859-1", "schemaSpy.css");

  }

  public void test128() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test128");


    net.sourceforge.schemaspy.util.Inflection var1 = new net.sourceforge.schemaspy.util.Inflection("net.sourceforge.schemaspy.model.InvalidConfigurationException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)");

  }

  public void test129() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test129");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    var0.setSqlFormatter("hi!");
    java.io.File var4 = var0.getGraphvizDir();
    java.lang.String var5 = var0.getDbType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "ora"+ "'", var5.equals("ora"));

  }

  public void test130() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test130");


    net.sourceforge.schemaspy.util.DbSpecificOption var2 = new net.sourceforge.schemaspy.util.DbSpecificOption("", "ISO-8859-1");
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.getDescription();
    java.lang.Object var5 = var2.getValue();
    net.sourceforge.schemaspy.ui.MainFrame var6 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var7 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var8 = var7.getTableExclusions();
    boolean var9 = var7.isEvaluateAllEnabled();
    java.util.List var10 = var7.getColumnDetails();
    var6.setIconImages(var10);
    boolean var12 = var6.isAlwaysOnTop();
    var6.setFocusableWindowState(true);
    java.awt.Window[] var15 = var6.getOwnedWindows();
    java.awt.Component var16 = var6.getMostRecentFocusOwner();
    var2.setValue((java.lang.Object)var6);
    net.sourceforge.schemaspy.ui.DbConfigPanel var18 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var18.requestFocus();
    var18.firePropertyChange("ISO-8859-1", 0L, (-1L));
    java.awt.Color var24 = var18.getBackground();
    var18.requestFocus();
    net.sourceforge.schemaspy.ui.DbConfigPanel var26 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var26.requestFocus();
    var26.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var30 = var26.insets();
    var26.setAlignmentX(1.0f);
    var26.firePropertyChange("hi!", 10, 2);
    var26.setVisible(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var39 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var39.requestFocus();
    var39.setFocusTraversalPolicyProvider(true);
    java.awt.Point var44 = var39.getMousePosition(true);
    java.awt.Component var45 = var39.getNextFocusableComponent();
    java.awt.Dimension var46 = var39.getMinimumSize();
    var26.setPreferredSize(var46);
    java.awt.Dimension var48 = var18.getSize(var46);
    var6.setSize(var48);
    var6.pack();
    int var51 = var6.getExtendedState();
    var6.reshape(100, 431, 3, 3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var6.setOpacity(0.5f);
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"+ "'", var3.equals("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ISO-8859-1"+ "'", var4.equals("ISO-8859-1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);

  }

  public void test131() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test131");


    net.sourceforge.schemaspy.model.RoutineParameter var3 = new net.sourceforge.schemaspy.model.RoutineParameter("ISO-8859-1s", "hi!", "");
    java.lang.String var4 = var3.getMode();
    java.lang.String var5 = var3.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));

  }

  public void test132() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test132");


    net.sourceforge.schemaspy.model.Routine var9 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var10 = var9.getDataAccess();
    java.util.List var11 = var9.getParameters();
    net.sourceforge.schemaspy.model.Routine var21 = new net.sourceforge.schemaspy.model.Routine("", "hi!", "a", "", "", false, "", "hi!", "");
    java.lang.String var22 = var21.getDefinition();
    net.sourceforge.schemaspy.model.Routine var32 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var33 = var32.getDataAccess();
    java.lang.String var34 = var32.getDefinitionLanguage();
    int var35 = var21.compareTo(var32);
    int var36 = var9.compareTo(var32);
    java.lang.String var37 = var9.getReturnType();
    java.lang.String var38 = var9.getDefinition();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "hi!"+ "'", var33.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "a"+ "'", var34.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "a"+ "'", var37.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "a"+ "'", var38.equals("a"));

  }

  public void test133() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test133");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    var0.firePropertyChange("a", (byte)10, (byte)0);
    java.awt.Insets var8 = var0.insets();
    var0.setAlignmentY(100.0f);
    net.sourceforge.schemaspy.model.Routine var21 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var22 = var21.getDataAccess();
    java.util.List var23 = var21.getParameters();
    net.sourceforge.schemaspy.view.WriteStats var24 = new net.sourceforge.schemaspy.view.WriteStats((java.util.Collection)var23);
    int var25 = var24.getNumViewsWritten();
    net.sourceforge.schemaspy.view.WriteStats var26 = new net.sourceforge.schemaspy.view.WriteStats(var24);
    java.util.Set var27 = var26.getExcludedColumns();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setFocusTraversalKeys((-3), var27);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test134() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test134");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.util.List var24 = var0.getIconImages();
    var0.setFocusCycleRoot(false);
    java.awt.Component var27 = var0.getFocusOwner();
    var0.setAlwaysOnTop(true);
    net.sourceforge.schemaspy.ui.MainFrame var30 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var31 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var32 = var31.getTableExclusions();
    boolean var33 = var31.isEvaluateAllEnabled();
    java.util.List var34 = var31.getColumnDetails();
    var30.setIconImages(var34);
    boolean var36 = var30.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var37 = var30.getModalExclusionType();
    net.sourceforge.schemaspy.ui.DbConfigPanel var38 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var38.requestFocus();
    var38.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var42 = var38.insets();
    var38.setAlignmentX(1.0f);
    boolean var45 = var38.hasFocus();
    boolean var46 = var38.getFocusTraversalKeysEnabled();
    boolean var47 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var38);
    net.sourceforge.schemaspy.ui.DbConfigPanel var48 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var49 = var48.isManagingFocus();
    java.awt.Rectangle var50 = var48.getVisibleRect();
    java.awt.Rectangle var51 = var38.getBounds(var50);
    java.awt.Dimension var52 = var38.getPreferredSize();
    var30.setSize(var52);
    java.awt.im.InputContext var54 = var30.getInputContext();
    java.lang.String var55 = var30.getWarningString();
    net.sourceforge.schemaspy.ui.DbConfigPanel var56 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var56.requestFocus();
    var56.setFocusTraversalPolicyProvider(true);
    var56.firePropertyChange("a", (byte)10, (byte)0);
    java.awt.Insets var64 = var56.insets();
    var56.setAlignmentY(100.0f);
    java.awt.Image var69 = var56.createImage(1, 1);
    java.awt.Dimension var70 = var56.getSize();
    var30.setSize(var70);
    java.awt.LayoutManager var72 = var30.getLayout();
    var0.setLayout(var72);
    net.sourceforge.schemaspy.ui.DbConfigPanel var74 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var74.requestFocus();
    var74.setFocusTraversalPolicyProvider(true);
    javax.swing.event.AncestorListener[] var78 = var74.getAncestorListeners();
    var74.paintImmediately(1, 0, 0, (-1));
    java.awt.Dimension var84 = var74.size();
    float var85 = var74.getAlignmentY();
    var74.paintImmediately(100, 3, (-3), 10);
    var74.reshape(2, 2, 0, 312);
    var0.remove((java.awt.Component)var74);
    boolean var97 = var0.isAlwaysOnTopSupported();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == true);

  }

  public void test135() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test135");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    boolean var5 = var0.isMeterEnabled();
    java.lang.String var7 = var0.getParam("a");
    var0.setPromptForPasswordEnabled(false);
    java.lang.String var10 = var0.getCatalog();
    var0.setDbType("net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)");
    java.lang.String var13 = var0.getPassword();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test136() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test136");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    java.awt.Toolkit var6 = var0.getToolkit();
    var0.setBounds(10, (-3), (-3), (-3));
    java.awt.Insets var12 = var0.getInsets();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test137() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test137");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    java.lang.String var5 = var0.getSchemaSpec();
    var0.setViewsEnabled(false);
    boolean var8 = var0.isHtmlGenerationEnabled();
    java.util.regex.Pattern var9 = var0.getColumnExclusions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test138() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test138");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.doLayout();
    boolean var8 = var0.isCursorSet();
    java.awt.event.HierarchyListener[] var9 = var0.getHierarchyListeners();
    var0.setFocusTraversalPolicyProvider(false);
    boolean var12 = var0.isBackgroundSet();
    java.awt.image.VolatileImage var15 = var0.createVolatileImage(3, 100);
    java.beans.PropertyChangeListener[] var17 = var0.getPropertyChangeListeners("dot version 2.2.1 or versions greater than 2.4");
    java.beans.PropertyChangeListener[] var18 = var0.getPropertyChangeListeners();
    boolean var19 = var0.isDisplayable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test139() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test139");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    boolean var7 = var0.hasFocus();
    boolean var8 = var0.getFocusTraversalKeysEnabled();
    boolean var9 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var0);
    var0.firePropertyChange("hi!", 'a', 'a');
    javax.swing.TransferHandler var14 = var0.getTransferHandler();
    java.awt.Dimension var15 = var0.getPreferredSize();
    javax.swing.event.AncestorListener[] var16 = var0.getAncestorListeners();
    boolean var17 = var0.isRequestFocusEnabled();
    net.sourceforge.schemaspy.ui.MainFrame var18 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var19 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var19.requestFocus();
    var19.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var23 = var19.insets();
    var19.setAlignmentX(1.0f);
    java.awt.Color var26 = var19.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var27 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var27.requestFocus();
    var27.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var31 = var27.insets();
    float var32 = var27.getAlignmentX();
    var27.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var38 = var27.getMouseListeners();
    java.awt.Rectangle var39 = var27.bounds();
    var19.setBounds(var39);
    var18.setMaximizedBounds(var39);
    java.awt.Container var42 = var18.getContentPane();
    boolean var43 = var18.isLocationByPlatform();
    net.sourceforge.schemaspy.ui.MainFrame var44 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var45 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var46 = var45.getTableExclusions();
    boolean var47 = var45.isEvaluateAllEnabled();
    java.util.List var48 = var45.getColumnDetails();
    var44.setIconImages(var48);
    boolean var50 = var44.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var51 = var44.getModalExclusionType();
    var18.setModalExclusionType(var51);
    var18.setEnabled(true);
    javax.swing.JLayeredPane var55 = var18.getLayeredPane();
    java.awt.Insets var56 = var55.getInsets();
    java.awt.Insets var57 = var0.getInsets(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test140() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test140");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    var0.removeNotify();
    int var26 = var0.getCursorType();
    java.awt.image.BufferStrategy var27 = var0.getBufferStrategy();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test141() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test141");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    java.awt.event.MouseMotionListener[] var1 = var0.getMouseMotionListeners();
    net.sourceforge.schemaspy.ui.MainFrame var2 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var3 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var3.requestFocus();
    var3.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var7 = var3.insets();
    var3.setAlignmentX(1.0f);
    java.awt.Color var10 = var3.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var11 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var11.requestFocus();
    var11.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var15 = var11.insets();
    float var16 = var11.getAlignmentX();
    var11.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var22 = var11.getMouseListeners();
    java.awt.Rectangle var23 = var11.bounds();
    var3.setBounds(var23);
    var2.setMaximizedBounds(var23);
    net.sourceforge.schemaspy.ui.DbConfigPanel var26 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var26.requestFocus();
    var26.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var30 = var26.insets();
    var26.reshape(1, 1, 1, 100);
    net.sourceforge.schemaspy.ui.DbConfigPanel var36 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var36.requestFocus();
    var36.setFocusTraversalPolicyProvider(true);
    java.awt.Point var41 = var36.getMousePosition(true);
    java.awt.Component var42 = var36.getNextFocusableComponent();
    java.awt.Dimension var43 = var36.getMinimumSize();
    java.awt.Dimension var44 = var26.getSize(var43);
    java.awt.Rectangle var45 = var26.bounds();
    var2.setLocationRelativeTo((java.awt.Component)var26);
    net.sourceforge.schemaspy.ui.MainFrame var47 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var48 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var48.requestFocus();
    var48.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var52 = var48.insets();
    var48.setAlignmentX(1.0f);
    java.awt.Color var55 = var48.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var56 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var56.requestFocus();
    var56.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var60 = var56.insets();
    float var61 = var56.getAlignmentX();
    var56.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var67 = var56.getMouseListeners();
    java.awt.Rectangle var68 = var56.bounds();
    var48.setBounds(var68);
    var47.setMaximizedBounds(var68);
    java.awt.Container var71 = var47.getContentPane();
    boolean var72 = var47.isLocationByPlatform();
    net.sourceforge.schemaspy.ui.MainFrame var73 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var74 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var75 = var74.getTableExclusions();
    boolean var76 = var74.isEvaluateAllEnabled();
    java.util.List var77 = var74.getColumnDetails();
    var73.setIconImages(var77);
    boolean var79 = var73.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var80 = var73.getModalExclusionType();
    var47.setModalExclusionType(var80);
    var2.setModalExclusionType(var80);
    var0.setModalExclusionType(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test142() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test142");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var1 = var0.isManagingFocus();
    int var2 = var0.getWidth();
    java.awt.Point var3 = var0.getMousePosition();
    boolean var6 = var0.contains(1, (-1));
    var0.revalidate();
    boolean var8 = var0.getInheritsPopupMenu();
    javax.swing.event.AncestorListener[] var9 = var0.getAncestorListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test143() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test143");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.requestFocus();
    var0.setIgnoreRepaint(true);
    var0.firePropertyChange("net.sourceforge.schemaspy.view.StyleSheet$MissingCssPropertyException: Required property 'hi!' was not found for the definition of '' in schemaSpy.css", (short)(-1), (short)10);
    java.util.Set var13 = var0.getFocusTraversalKeys(2);
    var0.repaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test144() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test144");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var26 = var25.isManagingFocus();
    java.awt.Rectangle var27 = var25.getVisibleRect();
    var0.setBounds(var27);
    var0.hide();
    java.util.List var30 = var0.getIconImages();
    net.sourceforge.schemaspy.ui.DbConfigPanel var31 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var31.requestFocus();
    var31.setFocusTraversalPolicyProvider(true);
    boolean var35 = var31.requestFocusInWindow();
    java.awt.Dimension var36 = var31.getMaximumSize();
    var0.setSize(var36);
    javax.swing.JMenuBar var38 = var0.getJMenuBar();
    boolean var39 = var0.isAlwaysOnTop();
    net.sourceforge.schemaspy.ui.MainFrame var40 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var41 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var41.requestFocus();
    var41.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var45 = var41.insets();
    var41.setAlignmentX(1.0f);
    java.awt.Color var48 = var41.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var49 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var49.requestFocus();
    var49.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var53 = var49.insets();
    float var54 = var49.getAlignmentX();
    var49.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var60 = var49.getMouseListeners();
    java.awt.Rectangle var61 = var49.bounds();
    var41.setBounds(var61);
    var40.setMaximizedBounds(var61);
    java.awt.Container var64 = var40.getContentPane();
    boolean var65 = var40.isLocationByPlatform();
    net.sourceforge.schemaspy.ui.MainFrame var66 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var67 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var68 = var67.getTableExclusions();
    boolean var69 = var67.isEvaluateAllEnabled();
    java.util.List var70 = var67.getColumnDetails();
    var66.setIconImages(var70);
    boolean var72 = var66.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var73 = var66.getModalExclusionType();
    var40.setModalExclusionType(var73);
    var40.setEnabled(true);
    java.awt.Color var77 = var40.getBackground();
    var0.setBackground(var77);
    java.awt.Container var79 = var0.getContentPane();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test145() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test145");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    var0.setSqlFormatter("hi!");
    java.io.File var4 = var0.getGraphvizDir();
    java.util.List var5 = var0.getColumnDetails();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var6 = net.sourceforge.schemaspy.DbAnalyzer.getTablesWithIncrementingColumnNames((java.util.Collection)var5);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test146() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test146");


    net.sourceforge.schemaspy.ui.DbTypeSelectorModel var1 = new net.sourceforge.schemaspy.ui.DbTypeSelectorModel("hi!s");
    int var2 = var1.getSize();
    int var3 = var1.getSize();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var5 = var1.getElementAt((-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test147() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test147");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    boolean var5 = var0.isMeterEnabled();
    java.lang.String var7 = var0.getParam("a");
    boolean var8 = var0.isEncodeCommentsEnabled();
    var0.setNumRowsEnabled(false);
    boolean var11 = var0.isImpliedConstraintsEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test148() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test148");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    boolean var4 = var0.isDoubleBuffered();
    boolean var5 = var0.isValid();
    var0.repaint(1L);
    var0.transferFocusUpCycle();
    java.awt.Dimension var9 = var0.getPreferredSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test149() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test149");


    net.sourceforge.schemaspy.util.CaseInsensitiveMap var1 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.Set var2 = var1.entrySet();
    java.util.Set var3 = var1.entrySet();
    java.lang.String var4 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "{}"+ "'", var4.equals("{}"));

  }

  public void test150() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test150");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    var0.setSchema("");
    java.lang.String var7 = var0.getCss();
    java.util.regex.Pattern var8 = var0.getTableInclusions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "schemaSpy.css"+ "'", var7.equals("schemaSpy.css"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test151() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test151");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    boolean var5 = var0.isMeterEnabled();
    var0.setPromptForPasswordEnabled(false);
    var0.setViewsEnabled(true);
    var0.setDb("DbSpecificOption name: 'DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'' value: 'null' description: 'net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]'");
    var0.setConnectionProperties("ora");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test152() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test152");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.requestFocus();
    var0.setOpaque(false);
    var0.enable();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    var9.setAlignmentX(1.0f);
    boolean var16 = var9.hasFocus();
    net.sourceforge.schemaspy.ui.DbConfigPanel var17 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var17.requestFocus();
    var17.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var21 = var17.insets();
    float var22 = var17.getAlignmentX();
    var17.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var28 = var17.getMouseListeners();
    boolean var29 = var9.isAncestorOf((java.awt.Component)var17);
    javax.swing.TransferHandler var30 = var17.getTransferHandler();
    var0.setComponentZOrder((java.awt.Component)var17, 1);
    var0.setDebugGraphicsOptions(312);
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var37 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.List var38 = net.sourceforge.schemaspy.DbAnalyzer.getRailsConstraints((java.util.Map)var37);
    java.util.Set var39 = var37.keySet();
    var0.setFocusTraversalKeys(2, var39);
    var0.firePropertyChange("hi!sdhi!sohi!sthi!s hi!svhi!sehi!srhi!sshi!sihi!sohi!snhi!s hi!s2hi!s.hi!s2hi!s.hi!s1hi!s hi!sohi!srhi!s hi!svhi!sehi!srhi!sshi!sihi!sohi!snhi!sshi!s hi!sghi!srhi!sehi!sahi!sthi!sehi!srhi!s hi!sthi!shhi!sahi!snhi!s hi!s2hi!s.hi!s4hi!s", false, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test153() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test153");


    net.sourceforge.schemaspy.util.LineWriter var3 = new net.sourceforge.schemaspy.util.LineWriter("Unknown", 100, "ISO-8859-1");
    var3.flush();
    var3.write("a");
    char[] var7 = new char[] { };
    var3.write(var7);
    var3.writeln();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test154() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test154");


    net.sourceforge.schemaspy.SchemaAnalyzer var0 = new net.sourceforge.schemaspy.SchemaAnalyzer();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    net.sourceforge.schemaspy.model.Database var4 = var0.analyze(var1);
    var1.setUser("ora");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test155() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test155");


    net.sourceforge.schemaspy.util.PasswordReader var1 = net.sourceforge.schemaspy.util.PasswordReader.getInstance();
    net.sourceforge.schemaspy.view.StyleSheet.MissingCssPropertyException var5 = new net.sourceforge.schemaspy.view.StyleSheet.MissingCssPropertyException("", "hi!");
    net.sourceforge.schemaspy.model.ConnectionFailure var6 = new net.sourceforge.schemaspy.model.ConnectionFailure("", (java.lang.Throwable)var5);
    net.sourceforge.schemaspy.view.StyleSheet.ParseException var7 = new net.sourceforge.schemaspy.view.StyleSheet.ParseException((java.lang.Exception)var6);
    net.sourceforge.schemaspy.util.PasswordReader.IOError var8 = var1.new IOError((java.lang.Throwable)var7);
    net.sourceforge.schemaspy.Config.MissingRequiredParameterException var12 = new net.sourceforge.schemaspy.Config.MissingRequiredParameterException("hi!", "ISO-8859-1", false);
    net.sourceforge.schemaspy.util.PasswordReader.IOError var13 = var1.new IOError((java.lang.Throwable)var12);
    net.sourceforge.schemaspy.model.InvalidConfigurationException var14 = new net.sourceforge.schemaspy.model.InvalidConfigurationException("net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory).hi!. ", (java.lang.Throwable)var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test156() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test156");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Point var5 = var0.getMousePosition(true);
    int var6 = var0.getComponentCount();
    int var7 = var0.getHeight();
    var0.setName("hi!s");
    java.awt.Color var10 = var0.getBackground();
    int var11 = var0.getHeight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);

  }

  public void test157() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test157");


    net.sourceforge.schemaspy.model.RoutineParameter var3 = new net.sourceforge.schemaspy.model.RoutineParameter("ISO-8859-1s", "hi!", "");
    java.lang.String var4 = var3.getMode();
    java.lang.String var5 = var3.getName();
    java.lang.String var6 = var3.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "ISO-8859-1s"+ "'", var5.equals("ISO-8859-1s"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));

  }

  public void test158() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test158");


    net.sourceforge.schemaspy.util.DbSpecificOption var2 = new net.sourceforge.schemaspy.util.DbSpecificOption("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'", "net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    java.lang.String var3 = var2.getName();
    java.lang.String var4 = var2.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"+ "'", var3.equals("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"+ "'", var4.equals("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"));

  }

  public void test159() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test159");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.requestFocus();
    var0.firePropertyChange("", 10.0f, 1.0f);
    javax.accessibility.AccessibleContext var10 = var0.getAccessibleContext();
    var0.paintImmediately(0, (-1), 300, 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test160() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test160");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    java.beans.PropertyChangeListener[] var2 = var0.getPropertyChangeListeners();
    var0.paintImmediately(0, (-1), (-1), 0);
    java.awt.event.KeyListener[] var8 = var0.getKeyListeners();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    var9.setAlignmentX(1.0f);
    java.awt.Color var16 = var9.getForeground();
    var0.setForeground(var16);
    boolean var18 = var0.hasFocus();
    java.awt.event.MouseListener[] var19 = var0.getMouseListeners();
    boolean var22 = var0.contains(2, (-3));
    java.awt.Insets var23 = var0.getInsets();
    java.awt.Dimension var24 = var0.getMaximumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test161() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test161");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.doLayout();
    boolean var8 = var0.isCursorSet();
    var0.nextFocus();
    var0.list();
    javax.swing.border.Border var11 = var0.getBorder();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test162() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test162");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    boolean var7 = var0.hasFocus();
    boolean var8 = var0.getFocusTraversalKeysEnabled();
    boolean var9 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var0);
    var0.firePropertyChange("hi!", 'a', 'a');
    java.lang.String var14 = var0.getUIClassID();
    java.awt.Point var16 = var0.getMousePosition(false);
    java.awt.Point var17 = var0.location();
    net.sourceforge.schemaspy.ui.DbConfigPanel var18 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var18.requestFocus();
    var18.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var22 = var18.insets();
    var18.setAlignmentX(1.0f);
    boolean var25 = var18.hasFocus();
    boolean var26 = var18.getFocusTraversalKeysEnabled();
    boolean var27 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var18);
    net.sourceforge.schemaspy.ui.DbConfigPanel var28 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var29 = var28.isManagingFocus();
    java.awt.Rectangle var30 = var28.getVisibleRect();
    java.awt.Rectangle var31 = var18.getBounds(var30);
    var0.repaint(var30);
    var0.firePropertyChange("java.io.FileNotFoundException:  (No such file or directory)", (byte)1, (byte)100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test163() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test163");


    net.sourceforge.schemaspy.ui.DbConfigTableModel var0 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    var0.fireTableRowsInserted(2, 1);
    java.lang.Object var6 = var0.getValueAt(0, 100);
    javax.swing.event.TableModelListener[] var7 = var0.getTableModelListeners();
    var0.fireTableRowsUpdated(0, 3);
    var0.fireTableRowsDeleted(300, 11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Class var15 = var0.getClass(11);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test164() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test164");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    java.awt.Color var7 = var0.getForeground();
    int var8 = var0.getWidth();
    java.awt.Rectangle var9 = var0.getBounds();
    boolean var10 = var0.isPreferredSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test165() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test165");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    boolean var5 = var0.isMeterEnabled();
    java.lang.String var7 = var0.getParam("a");
    boolean var8 = var0.isViewsEnabled();
    var0.setDriverPath("{}");
    boolean var11 = var0.isRailsEnabled();
    java.util.Map var12 = var0.getDbSpecificOptions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test166() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test166");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    boolean var25 = var0.isLocationByPlatform();
    boolean var26 = var0.isUndecorated();
    net.sourceforge.schemaspy.ui.DbConfigPanel var27 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    net.sourceforge.schemaspy.ui.DbConfigPanel var28 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var28.requestFocus();
    var28.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var32 = var28.insets();
    var28.setAlignmentX(1.0f);
    boolean var35 = var28.hasFocus();
    boolean var36 = var28.getFocusTraversalKeysEnabled();
    var28.setSize(1, (-1));
    boolean var41 = var28.requestFocus(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var42 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var42.requestFocus();
    java.beans.PropertyChangeListener[] var44 = var42.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var45 = var42.getBaselineResizeBehavior();
    net.sourceforge.schemaspy.ui.DbConfigPanel var46 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var46.requestFocus();
    var46.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var50 = var46.insets();
    var46.setAlignmentX(1.0f);
    var46.doLayout();
    boolean var54 = var46.isCursorSet();
    var46.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var59 = var46.getLocation();
    boolean var60 = var42.contains(var59);
    java.awt.Point var61 = var28.getLocation(var59);
    java.awt.Component var62 = var27.add((java.awt.Component)var28);
    java.awt.Insets var63 = var27.insets();
    var0.setContentPane((java.awt.Container)var27);
    java.awt.FocusTraversalPolicy var65 = var0.getFocusTraversalPolicy();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test167() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test167");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    var0.setConnectionPropertiesFile("ISO-8859-1s");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var6 = var0.getUser();
      fail("Expected exception of type net.sourceforge.schemaspy.Config.MissingRequiredParameterException");
    } catch (net.sourceforge.schemaspy.Config.MissingRequiredParameterException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test168() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test168");


    net.sourceforge.schemaspy.util.CaseInsensitiveMap var1 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    var1.clear();
    java.util.List var3 = net.sourceforge.schemaspy.DbAnalyzer.getRailsConstraints((java.util.Map)var1);
    var1.clear();
    java.lang.Object var5 = var1.clone();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var7 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.Set var8 = var7.entrySet();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var10 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.List var11 = net.sourceforge.schemaspy.DbAnalyzer.getRailsConstraints((java.util.Map)var10);
    net.sourceforge.schemaspy.Config var12 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var13 = var12.getTableExclusions();
    boolean var14 = var12.isHtmlGenerationEnabled();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var16 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    var16.clear();
    var12.setDbSpecificOptions((java.util.Map)var16);
    java.lang.String var19 = var16.toString();
    var10.putAll((java.util.Map)var16);
    var7.putAll((java.util.Map)var16);
    var1.putAll((java.util.Map)var7);
    boolean var23 = var7.isEmpty();
    java.util.Set var24 = var7.entrySet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "{}"+ "'", var19.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test169() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test169");


    net.sourceforge.schemaspy.util.Dot var0 = net.sourceforge.schemaspy.util.Dot.getInstance();
    var0.setHighQuality(true);
    var0.setHighQuality(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test170() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test170");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var7 = var0.getModalExclusionType();
    boolean var8 = var0.isAlwaysOnTop();
    java.awt.Rectangle var9 = var0.getMaximizedBounds();
    java.lang.String var10 = var0.getTitle();
    net.sourceforge.schemaspy.model.Routine var20 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var21 = var20.getDataAccess();
    java.util.List var22 = var20.getParameters();
    net.sourceforge.schemaspy.view.WriteStats var23 = new net.sourceforge.schemaspy.view.WriteStats((java.util.Collection)var22);
    java.util.List var24 = net.sourceforge.schemaspy.DbAnalyzer.getMustBeUniqueNullableColumns((java.util.Collection)var22);
    java.lang.String var25 = net.sourceforge.schemaspy.model.ForeignKeyConstraint.toString(var24);
    net.sourceforge.schemaspy.view.WriteStats var26 = new net.sourceforge.schemaspy.view.WriteStats((java.util.Collection)var24);
    java.util.List var27 = net.sourceforge.schemaspy.DbAnalyzer.sortTablesByName(var24);
    java.util.List var28 = net.sourceforge.schemaspy.DbAnalyzer.sortTablesByName(var24);
    java.util.List var29 = net.sourceforge.schemaspy.DbAnalyzer.getDefaultNullStringColumns((java.util.Collection)var28);
    java.lang.String var30 = net.sourceforge.schemaspy.model.ForeignKeyConstraint.toString(var29);
    var0.setIconImages(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "SchemaSpy"+ "'", var10.equals("SchemaSpy"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "[]"+ "'", var25.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "[]"+ "'", var30.equals("[]"));

  }

  public void test171() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test171");


    net.sourceforge.schemaspy.model.InvalidConfigurationException var1 = new net.sourceforge.schemaspy.model.InvalidConfigurationException("a");
    net.sourceforge.schemaspy.model.InvalidConfigurationException var2 = new net.sourceforge.schemaspy.model.InvalidConfigurationException((java.lang.Throwable)var1);

  }

  public void test172() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test172");


    java.lang.String[] var1 = new java.lang.String[] { "net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"};
    net.sourceforge.schemaspy.Config var2 = new net.sourceforge.schemaspy.Config(var1);
    net.sourceforge.schemaspy.Config var3 = new net.sourceforge.schemaspy.Config(var1);
    net.sourceforge.schemaspy.Config var4 = new net.sourceforge.schemaspy.Config(var1);
    net.sourceforge.schemaspy.Config var5 = new net.sourceforge.schemaspy.Config(var1);
    net.sourceforge.schemaspy.Config var6 = new net.sourceforge.schemaspy.Config(var1);
    boolean var7 = var6.isHtmlGenerationEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);

  }

  public void test173() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test173");


    net.sourceforge.schemaspy.util.LineWriter var3 = new net.sourceforge.schemaspy.util.LineWriter("Unknown", 100, "ISO-8859-1");
    var3.flush();
    var3.write("a");
    var3.writeln("ISO-8859-1");
    java.io.Writer var10 = var3.append((java.lang.CharSequence)" ");
    var3.write("net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)s");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test174() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test174");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    var0.firePropertyChange("a", (byte)10, (byte)0);
    java.awt.Insets var8 = var0.insets();
    var0.setAlignmentY(100.0f);
    java.awt.Image var13 = var0.createImage(1, 1);
    java.awt.Dimension var14 = var0.getSize();
    var0.firePropertyChange("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'", 1.0f, 1.0f);
    javax.swing.JRootPane var19 = var0.getRootPane();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test175() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test175");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    java.beans.PropertyChangeListener[] var2 = var0.getPropertyChangeListeners();
    var0.paintImmediately(0, (-1), (-1), 0);
    boolean var8 = var0.isForegroundSet();
    boolean var9 = var0.isValidateRoot();
    boolean var10 = var0.isVisible();
    net.sourceforge.schemaspy.ui.MainFrame var11 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var12 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var12.requestFocus();
    var12.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var16 = var12.insets();
    var12.setAlignmentX(1.0f);
    java.awt.Color var19 = var12.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var20 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var20.requestFocus();
    var20.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var24 = var20.insets();
    float var25 = var20.getAlignmentX();
    var20.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var31 = var20.getMouseListeners();
    java.awt.Rectangle var32 = var20.bounds();
    var12.setBounds(var32);
    var11.setMaximizedBounds(var32);
    java.awt.Container var35 = var11.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var36 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var37 = var36.isManagingFocus();
    java.awt.Rectangle var38 = var36.getVisibleRect();
    var11.setBounds(var38);
    var11.hide();
    java.util.List var41 = var11.getIconImages();
    boolean var42 = var11.isFocused();
    boolean var43 = var11.isForegroundSet();
    var0.setNextFocusableComponent((java.awt.Component)var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);

  }

  public void test176() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test176");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    net.sourceforge.schemaspy.ui.DbConfigPanel var24 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var24.requestFocus();
    var24.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var28 = var24.insets();
    var24.setAlignmentX(1.0f);
    boolean var31 = var24.hasFocus();
    boolean var32 = var24.getFocusTraversalKeysEnabled();
    boolean var33 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var24);
    var24.firePropertyChange("hi!", 'a', 'a');
    net.sourceforge.schemaspy.ui.DbConfigPanel var38 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var39 = var38.isManagingFocus();
    int var40 = var38.getWidth();
    java.awt.Insets var41 = var38.insets();
    javax.accessibility.AccessibleContext var42 = var38.getAccessibleContext();
    boolean var45 = var38.inside(100, (-3));
    java.awt.Rectangle var46 = var38.getVisibleRect();
    var24.setBounds(var46);
    var0.setMaximizedBounds(var46);
    java.awt.event.ComponentListener[] var49 = var0.getComponentListeners();
    int var50 = var0.getCursorType();
    int var51 = var0.getHeight();
    net.sourceforge.schemaspy.ui.DbConfigPanel var52 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var52.setFocusable(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var55 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var55.requestFocus();
    var55.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var59 = var55.insets();
    var55.setAlignmentX(1.0f);
    boolean var62 = var55.hasFocus();
    boolean var63 = var55.getFocusTraversalKeysEnabled();
    var55.setSize(1, (-1));
    java.lang.Object var67 = var52.getClientProperty((java.lang.Object)var55);
    var55.firePropertyChange("net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s", ' ', ' ');
    var55.repaint(1L);
    boolean var74 = var55.isPaintingForPrint();
    boolean var75 = var0.isAncestorOf((java.awt.Component)var55);
    var0.setLocationByPlatform(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 312);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test177() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test177");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    boolean var7 = var0.hasFocus();
    boolean var8 = var0.getFocusTraversalKeysEnabled();
    boolean var9 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var0);
    var0.firePropertyChange("hi!", 'a', 'a');
    java.lang.String var14 = var0.getUIClassID();
    var0.repaint();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var18 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.Set var19 = var18.entrySet();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var21 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.List var22 = net.sourceforge.schemaspy.DbAnalyzer.getRailsConstraints((java.util.Map)var21);
    net.sourceforge.schemaspy.Config var23 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var24 = var23.getTableExclusions();
    boolean var25 = var23.isHtmlGenerationEnabled();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var27 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    var27.clear();
    var23.setDbSpecificOptions((java.util.Map)var27);
    java.lang.String var30 = var27.toString();
    var21.putAll((java.util.Map)var27);
    var18.putAll((java.util.Map)var27);
    java.util.Set var33 = var18.entrySet();
    var0.setFocusTraversalKeys(2, var33);
    var0.firePropertyChange("DbSpecificOption name: 'net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s' value: 'null' description: 'a'", (-1.0f), 100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "{}"+ "'", var30.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test178() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test178");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var26 = var25.isManagingFocus();
    java.awt.Rectangle var27 = var25.getVisibleRect();
    var0.setBounds(var27);
    var0.hide();
    java.util.List var30 = var0.getIconImages();
    javax.accessibility.AccessibleContext var31 = var0.getAccessibleContext();
    boolean var32 = var0.isForegroundSet();
    net.sourceforge.schemaspy.ui.DbConfigPanel var33 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var33.requestFocus();
    java.beans.PropertyChangeListener[] var35 = var33.getPropertyChangeListeners();
    var33.paintImmediately(0, (-1), (-1), 0);
    java.awt.event.KeyListener[] var41 = var33.getKeyListeners();
    net.sourceforge.schemaspy.ui.DbConfigPanel var42 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var42.requestFocus();
    var42.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var46 = var42.insets();
    var42.setAlignmentX(1.0f);
    java.awt.Color var49 = var42.getForeground();
    var33.setForeground(var49);
    boolean var51 = var33.hasFocus();
    var0.setGlassPane((java.awt.Component)var33);
    var0.show(false);
    int var55 = var0.getDefaultCloseOperation();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);

  }

  public void test179() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test179");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    java.awt.event.MouseMotionListener[] var1 = var0.getMouseMotionListeners();
    java.util.Locale var2 = var0.getLocale();
    java.awt.Dimension var3 = var0.getSize();
    java.awt.Window.Type var4 = var0.getType();
    boolean var5 = var0.isFocusCycleRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test180() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test180");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    net.sourceforge.schemaspy.ui.DbConfigPanel var24 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var24.requestFocus();
    var24.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var28 = var24.insets();
    var24.setAlignmentX(1.0f);
    boolean var31 = var24.hasFocus();
    boolean var32 = var24.getFocusTraversalKeysEnabled();
    boolean var33 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var24);
    var24.firePropertyChange("hi!", 'a', 'a');
    net.sourceforge.schemaspy.ui.DbConfigPanel var38 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var39 = var38.isManagingFocus();
    int var40 = var38.getWidth();
    java.awt.Insets var41 = var38.insets();
    javax.accessibility.AccessibleContext var42 = var38.getAccessibleContext();
    boolean var45 = var38.inside(100, (-3));
    java.awt.Rectangle var46 = var38.getVisibleRect();
    var24.setBounds(var46);
    var0.setMaximizedBounds(var46);
    java.awt.event.ComponentListener[] var49 = var0.getComponentListeners();
    int var50 = var0.getCursorType();
    var0.pack();
    var0.setSize(2, (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);

  }

  public void test181() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test181");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var1 = var0.isManagingFocus();
    int var2 = var0.getWidth();
    javax.swing.InputVerifier var3 = var0.getInputVerifier();
    java.awt.Rectangle var4 = var0.getVisibleRect();
    int var5 = var0.getY();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var8 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.Set var9 = var8.entrySet();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var11 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.List var12 = net.sourceforge.schemaspy.DbAnalyzer.getRailsConstraints((java.util.Map)var11);
    net.sourceforge.schemaspy.Config var13 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var14 = var13.getTableExclusions();
    boolean var15 = var13.isHtmlGenerationEnabled();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var17 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    var17.clear();
    var13.setDbSpecificOptions((java.util.Map)var17);
    java.lang.String var20 = var17.toString();
    var11.putAll((java.util.Map)var17);
    var8.putAll((java.util.Map)var17);
    java.util.Set var23 = var8.entrySet();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setFocusTraversalKeys((-1), var23);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "{}"+ "'", var20.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test182() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test182");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    float var5 = var0.getAlignmentX();
    var0.setVisible(false);
    var0.validate();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Point var14 = var9.getMousePosition(true);
    int var15 = var9.getComponentCount();
    int var16 = var9.getHeight();
    var9.setName("hi!s");
    net.sourceforge.schemaspy.ui.DbConfigPanel var19 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var19.requestFocus();
    var19.setFocusTraversalPolicyProvider(true);
    java.awt.Point var24 = var19.getMousePosition(true);
    java.awt.Component var25 = var19.getNextFocusableComponent();
    java.awt.Dimension var26 = var19.getMinimumSize();
    var9.setSize(var26);
    java.awt.Dimension var28 = var0.getSize(var26);
    var0.setAlignmentX(0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test183() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test183");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var26 = var25.isManagingFocus();
    java.awt.Rectangle var27 = var25.getVisibleRect();
    var0.setBounds(var27);
    var0.hide();
    java.util.List var30 = var0.getIconImages();
    java.util.List var31 = net.sourceforge.schemaspy.DbAnalyzer.sortColumnsByTable(var30);
    net.sourceforge.schemaspy.view.WriteStats var32 = new net.sourceforge.schemaspy.view.WriteStats((java.util.Collection)var31);
    int var33 = var32.getNumViewsWritten();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);

  }

  public void test184() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test184");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.requestFocus();
    var0.firePropertyChange("", 10.0f, 1.0f);
    var0.firePropertyChange("hi!s{hi!s}hi!s.ISO-8859-1.net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s", 'a', 'a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test185() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test185");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var7 = var0.getModalExclusionType();
    net.sourceforge.schemaspy.ui.DbConfigPanel var8 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var8.requestFocus();
    var8.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var12 = var8.insets();
    var8.setAlignmentX(1.0f);
    boolean var15 = var8.hasFocus();
    boolean var16 = var8.getFocusTraversalKeysEnabled();
    boolean var17 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var8);
    net.sourceforge.schemaspy.ui.DbConfigPanel var18 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var19 = var18.isManagingFocus();
    java.awt.Rectangle var20 = var18.getVisibleRect();
    java.awt.Rectangle var21 = var8.getBounds(var20);
    java.awt.Dimension var22 = var8.getPreferredSize();
    var0.setSize(var22);
    java.awt.im.InputContext var24 = var0.getInputContext();
    float var25 = var0.getOpacity();
    var0.revalidate();
    java.util.Locale var27 = var0.getLocale();
    var0.removeAll();
    net.sourceforge.schemaspy.ui.DbConfigPanel var29 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var29.requestFocus();
    var29.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var33 = var29.insets();
    var29.setAlignmentX(1.0f);
    boolean var36 = var29.hasFocus();
    boolean var37 = var29.getFocusTraversalKeysEnabled();
    boolean var38 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var29);
    var29.firePropertyChange("hi!", 'a', 'a');
    java.lang.String var43 = var29.getUIClassID();
    var29.repaint();
    java.awt.Dimension var45 = var29.preferredSize();
    var0.resize(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "PanelUI"+ "'", var43.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test186() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test186");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    net.sourceforge.schemaspy.ui.DbConfigPanel var6 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var6.requestFocus();
    var6.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var10 = var6.insets();
    var6.setAlignmentX(1.0f);
    boolean var13 = var6.hasFocus();
    boolean var14 = var6.getFocusTraversalKeysEnabled();
    boolean var15 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var6);
    net.sourceforge.schemaspy.ui.DbConfigPanel var16 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var17 = var16.isManagingFocus();
    java.awt.Rectangle var18 = var16.getVisibleRect();
    java.awt.Rectangle var19 = var6.getBounds(var18);
    java.awt.Dimension var20 = var6.getPreferredSize();
    var0.setMinimumSize(var20);
    javax.swing.TransferHandler var22 = var0.getTransferHandler();
    java.awt.event.WindowListener[] var23 = var0.getWindowListeners();
    boolean var24 = var0.isForegroundSet();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var25.requestFocus();
    var25.setFocusTraversalPolicyProvider(true);
    var25.firePropertyChange("a", (byte)10, (byte)0);
    java.awt.Insets var33 = var25.insets();
    var25.setAlignmentY(100.0f);
    java.lang.Object var36 = var25.getTreeLock();
    net.sourceforge.schemaspy.ui.MainFrame var37 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var38 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var38.requestFocus();
    var38.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var42 = var38.insets();
    var38.setAlignmentX(1.0f);
    java.awt.Color var45 = var38.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var46 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var46.requestFocus();
    var46.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var50 = var46.insets();
    float var51 = var46.getAlignmentX();
    var46.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var57 = var46.getMouseListeners();
    java.awt.Rectangle var58 = var46.bounds();
    var38.setBounds(var58);
    var37.setMaximizedBounds(var58);
    java.util.List var61 = var37.getIconImages();
    java.awt.Rectangle var62 = var37.getMaximizedBounds();
    java.awt.Rectangle var63 = var25.getBounds(var62);
    var0.setBounds(var63);
    boolean var65 = var0.isEnabled();
    int var66 = var0.getExtendedState();
    boolean var67 = var0.isAlwaysOnTop();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);

  }

  public void test187() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test187");


    net.sourceforge.schemaspy.util.DbSpecificOption var2 = new net.sourceforge.schemaspy.util.DbSpecificOption("", "ISO-8859-1");
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.getDescription();
    java.lang.Object var5 = var2.getValue();
    net.sourceforge.schemaspy.ui.MainFrame var6 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var7 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var8 = var7.getTableExclusions();
    boolean var9 = var7.isEvaluateAllEnabled();
    java.util.List var10 = var7.getColumnDetails();
    var6.setIconImages(var10);
    boolean var12 = var6.isAlwaysOnTop();
    var6.setFocusableWindowState(true);
    java.awt.Window[] var15 = var6.getOwnedWindows();
    java.awt.Component var16 = var6.getMostRecentFocusOwner();
    var2.setValue((java.lang.Object)var6);
    net.sourceforge.schemaspy.ui.DbConfigPanel var18 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var18.requestFocus();
    var18.firePropertyChange("ISO-8859-1", 0L, (-1L));
    java.awt.Color var24 = var18.getBackground();
    var18.requestFocus();
    net.sourceforge.schemaspy.ui.DbConfigPanel var26 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var26.requestFocus();
    var26.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var30 = var26.insets();
    var26.setAlignmentX(1.0f);
    var26.firePropertyChange("hi!", 10, 2);
    var26.setVisible(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var39 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var39.requestFocus();
    var39.setFocusTraversalPolicyProvider(true);
    java.awt.Point var44 = var39.getMousePosition(true);
    java.awt.Component var45 = var39.getNextFocusableComponent();
    java.awt.Dimension var46 = var39.getMinimumSize();
    var26.setPreferredSize(var46);
    java.awt.Dimension var48 = var18.getSize(var46);
    var6.setSize(var48);
    var6.pack();
    int var51 = var6.getExtendedState();
    java.awt.Container var52 = var6.getFocusCycleRootAncestor();
    java.awt.image.BufferStrategy var53 = var6.getBufferStrategy();
    java.awt.Component var56 = var6.findComponentAt(5, 300);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"+ "'", var3.equals("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ISO-8859-1"+ "'", var4.equals("ISO-8859-1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);

  }

  public void test188() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test188");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    boolean var25 = var0.isLocationByPlatform();
    net.sourceforge.schemaspy.ui.MainFrame var26 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var27 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var28 = var27.getTableExclusions();
    boolean var29 = var27.isEvaluateAllEnabled();
    java.util.List var30 = var27.getColumnDetails();
    var26.setIconImages(var30);
    boolean var32 = var26.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var33 = var26.getModalExclusionType();
    var0.setModalExclusionType(var33);
    var0.pack();
    var0.setFocusableWindowState(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var38 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var38.requestFocus();
    var38.setFocusTraversalPolicyProvider(true);
    boolean var42 = var38.requestFocusInWindow();
    net.sourceforge.schemaspy.ui.DbConfigPanel var43 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var43.requestFocus();
    java.beans.PropertyChangeListener[] var45 = var43.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var46 = var43.getBaselineResizeBehavior();
    net.sourceforge.schemaspy.ui.DbConfigPanel var47 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var47.requestFocus();
    var47.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var51 = var47.insets();
    var47.setAlignmentX(1.0f);
    var47.doLayout();
    boolean var55 = var47.isCursorSet();
    var47.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var60 = var47.getLocation();
    boolean var61 = var43.contains(var60);
    java.awt.Component var62 = var38.findComponentAt(var60);
    var38.setOpaque(true);
    net.sourceforge.schemaspy.ui.DbConfigPanel var65 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var65.requestFocus();
    var65.setFocusTraversalPolicyProvider(true);
    java.awt.Point var70 = var65.getMousePosition(true);
    int var71 = var65.getComponentCount();
    int var72 = var65.getHeight();
    var65.setName("hi!s");
    net.sourceforge.schemaspy.ui.DbConfigPanel var75 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var75.requestFocus();
    var75.setFocusTraversalPolicyProvider(true);
    java.awt.Point var80 = var75.getMousePosition(true);
    java.awt.Component var81 = var75.getNextFocusableComponent();
    java.awt.Dimension var82 = var75.getMinimumSize();
    var65.setSize(var82);
    var38.resize(var82);
    var0.setSize(var82);
    var0.setState(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test189() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test189");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    java.awt.Color var7 = var0.getForeground();
    javax.swing.InputVerifier var8 = var0.getInputVerifier();
    var0.repaint(100L, 10, 1, 0, 100);
    var0.revalidate();
    boolean var16 = var0.requestDefaultFocus();
    java.awt.event.HierarchyListener[] var17 = var0.getHierarchyListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test190() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test190");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    boolean var4 = var0.isDoubleBuffered();
    var0.reshape(10, (-1), 1, 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test191() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test191");


    net.sourceforge.schemaspy.model.Routine var9 = new net.sourceforge.schemaspy.model.Routine("", "hi!", "a", "", "", false, "", "hi!", "");
    boolean var10 = var9.isDeterministic();
    java.lang.String var11 = var9.getName();
    java.util.List var12 = var9.getParameters();
    java.util.List var13 = var9.getParameters();
    java.lang.String var14 = var9.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));

  }

  public void test192() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test192");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    boolean var1 = var0.isImpliedConstraintsEnabled();
    var0.setHasOrphans(false);
    java.lang.String var4 = var0.getSchemaSpec();
    java.util.regex.Pattern var5 = var0.getIndirectColumnExclusions();
    java.lang.String var6 = var0.getCharset();
    java.lang.String var7 = var0.getDescription();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ISO-8859-1"+ "'", var6.equals("ISO-8859-1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test193() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test193");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.layout();
    java.awt.image.VolatileImage var8 = var0.createVolatileImage((-3), 1);
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    var9.setAlignmentX(1.0f);
    var9.doLayout();
    boolean var17 = var9.isCursorSet();
    java.awt.event.HierarchyListener[] var18 = var9.getHierarchyListeners();
    var9.setFocusTraversalPolicyProvider(false);
    boolean var21 = var9.isBackgroundSet();
    java.awt.image.VolatileImage var24 = var9.createVolatileImage(3, 100);
    int var25 = var0.getComponentZOrder((java.awt.Component)var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));

  }

  public void test194() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test194");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    boolean var1 = var0.isImpliedConstraintsEnabled();
    var0.setHasOrphans(false);
    java.lang.String var4 = var0.getSchemaSpec();
    boolean var5 = var0.isHighQuality();
    var0.setPassword("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'");
    boolean var8 = var0.isEncodeCommentsEnabled();
    var0.setCss("hi!s{hi!s}hi!s.ISO-8859-1.net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test195() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test195");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    boolean var7 = var0.hasFocus();
    boolean var8 = var0.getFocusTraversalKeysEnabled();
    boolean var9 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var0);
    var0.firePropertyChange("hi!", 'a', 'a');
    boolean var14 = var0.isFocusTraversalPolicySet();
    javax.swing.InputVerifier var15 = var0.getInputVerifier();
    var0.repaint(10, 300, (-1), 23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test196() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test196");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isDbHelpRequired();
    var0.setCharset("dot version 2.2.1 or versions greater than 2.4");
    java.util.regex.Pattern var7 = var0.getIndirectColumnExclusions();
    var0.setOutputDir("net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test197() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test197");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    net.sourceforge.schemaspy.ui.DbConfigPanel var24 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var24.requestFocus();
    var24.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var28 = var24.insets();
    var24.setAlignmentX(1.0f);
    boolean var31 = var24.hasFocus();
    boolean var32 = var24.getFocusTraversalKeysEnabled();
    boolean var33 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var24);
    var24.firePropertyChange("hi!", 'a', 'a');
    net.sourceforge.schemaspy.ui.DbConfigPanel var38 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var39 = var38.isManagingFocus();
    int var40 = var38.getWidth();
    java.awt.Insets var41 = var38.insets();
    javax.accessibility.AccessibleContext var42 = var38.getAccessibleContext();
    boolean var45 = var38.inside(100, (-3));
    java.awt.Rectangle var46 = var38.getVisibleRect();
    var24.setBounds(var46);
    var0.setMaximizedBounds(var46);
    java.awt.Window[] var49 = var0.getOwnedWindows();
    net.sourceforge.schemaspy.ui.DbConfigPanel var50 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var51 = var50.isManagingFocus();
    int var52 = var50.getWidth();
    javax.swing.InputVerifier var53 = var50.getInputVerifier();
    net.sourceforge.schemaspy.ui.DbConfigPanel var54 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var54.requestFocus();
    var54.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var58 = var54.insets();
    var54.requestFocus();
    boolean var60 = var54.isVisible();
    java.awt.Dimension var61 = var54.preferredSize();
    java.awt.Dimension var62 = var50.getSize(var61);
    var0.setSize(var61);
    java.beans.PropertyChangeListener[] var65 = var0.getPropertyChangeListeners("hi!s");
    boolean var66 = var0.isShowing();
    java.awt.Component[] var67 = var0.getComponents();
    java.awt.Component.BaselineResizeBehavior var68 = var0.getBaselineResizeBehavior();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test198() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test198");


    net.sourceforge.schemaspy.SchemaAnalyzer var0 = new net.sourceforge.schemaspy.SchemaAnalyzer();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    var1.setDb("a");
    java.lang.String var4 = var1.getServer();
    boolean var5 = var1.isHtmlGenerationEnabled();
    boolean var6 = var1.isMeterEnabled();
    net.sourceforge.schemaspy.model.Database var7 = var0.analyze(var1);
    var1.setHasOrphans(true);
    net.sourceforge.schemaspy.view.SqlFormatter var10 = var1.getSqlFormatter();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var11 = var1.asList();
      fail("Expected exception of type net.sourceforge.schemaspy.Config.MissingRequiredParameterException");
    } catch (net.sourceforge.schemaspy.Config.MissingRequiredParameterException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test199() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test199");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    boolean var25 = var0.isLocationByPlatform();
    net.sourceforge.schemaspy.ui.MainFrame var26 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var27 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var28 = var27.getTableExclusions();
    boolean var29 = var27.isEvaluateAllEnabled();
    java.util.List var30 = var27.getColumnDetails();
    var26.setIconImages(var30);
    boolean var32 = var26.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var33 = var26.getModalExclusionType();
    var0.setModalExclusionType(var33);
    var0.pack();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var36 = var0.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test200() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test200");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    boolean var2 = var0.isEvaluateAllEnabled();
    java.lang.String var4 = var0.getParam("hi!s");
    boolean var5 = var0.isHelpRequired();
    boolean var6 = var0.hasRoutines();
    var0.setNumRowsEnabled(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test201() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test201");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    java.awt.Color var7 = var0.getForeground();
    javax.swing.InputVerifier var8 = var0.getInputVerifier();
    var0.repaint(100L, 10, 1, 0, 100);
    net.sourceforge.schemaspy.model.Routine var24 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var25 = var24.getDataAccess();
    java.util.List var26 = var24.getParameters();
    net.sourceforge.schemaspy.view.WriteStats var27 = new net.sourceforge.schemaspy.view.WriteStats((java.util.Collection)var26);
    int var28 = var27.getNumViewsWritten();
    net.sourceforge.schemaspy.view.WriteStats var29 = new net.sourceforge.schemaspy.view.WriteStats(var27);
    int var30 = var29.getNumTablesWritten();
    java.lang.Object var31 = var0.getClientProperty((java.lang.Object)var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi!"+ "'", var25.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);

  }

  public void test202() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test202");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.firePropertyChange("ISO-8859-1", 0L, (-1L));
    java.awt.Color var6 = var0.getBackground();
    var0.firePropertyChange("java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)", '#', ' ');
    boolean var13 = var0.contains((-3), 300);
    var0.setVisible(false);
    net.sourceforge.schemaspy.ui.MainFrame var16 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var17 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var18 = var17.getTableExclusions();
    boolean var19 = var17.isEvaluateAllEnabled();
    java.util.List var20 = var17.getColumnDetails();
    var16.setIconImages(var20);
    boolean var22 = var16.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var23 = var16.getModalExclusionType();
    boolean var24 = var16.isAutoRequestFocus();
    java.awt.Toolkit var25 = var16.getToolkit();
    var16.hide();
    net.sourceforge.schemaspy.ui.DbConfigPanel var27 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var27.requestFocus();
    java.beans.PropertyChangeListener[] var29 = var27.getPropertyChangeListeners();
    var27.paintImmediately(0, (-1), (-1), 0);
    java.awt.event.KeyListener[] var35 = var27.getKeyListeners();
    var27.setLocation(100, (-1));
    net.sourceforge.schemaspy.ui.MainFrame var39 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var40 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var40.requestFocus();
    var40.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var44 = var40.insets();
    var40.setAlignmentX(1.0f);
    java.awt.Color var47 = var40.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var48 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var48.requestFocus();
    var48.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var52 = var48.insets();
    float var53 = var48.getAlignmentX();
    var48.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var59 = var48.getMouseListeners();
    java.awt.Rectangle var60 = var48.bounds();
    var40.setBounds(var60);
    var39.setMaximizedBounds(var60);
    net.sourceforge.schemaspy.ui.DbConfigPanel var63 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var63.requestFocus();
    var63.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var67 = var63.insets();
    var63.setAlignmentX(1.0f);
    boolean var70 = var63.hasFocus();
    boolean var71 = var63.getFocusTraversalKeysEnabled();
    boolean var72 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var63);
    var63.firePropertyChange("hi!", 'a', 'a');
    net.sourceforge.schemaspy.ui.DbConfigPanel var77 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var78 = var77.isManagingFocus();
    int var79 = var77.getWidth();
    java.awt.Insets var80 = var77.insets();
    javax.accessibility.AccessibleContext var81 = var77.getAccessibleContext();
    boolean var84 = var77.inside(100, (-3));
    java.awt.Rectangle var85 = var77.getVisibleRect();
    var63.setBounds(var85);
    var39.setMaximizedBounds(var85);
    java.awt.Rectangle var88 = var27.getBounds(var85);
    var16.setMaximizedBounds(var88);
    var0.repaint(var88);
    var0.layout();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test203() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test203");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    float var5 = var0.getAlignmentX();
    java.awt.Insets var6 = var0.insets();
    net.sourceforge.schemaspy.ui.DbConfigPanel var7 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var7.requestFocus();
    var7.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var11 = var7.insets();
    var7.setAlignmentX(1.0f);
    boolean var14 = var7.hasFocus();
    net.sourceforge.schemaspy.ui.DbConfigPanel var15 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var15.requestFocus();
    var15.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var19 = var15.insets();
    float var20 = var15.getAlignmentX();
    var15.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var26 = var15.getMouseListeners();
    boolean var27 = var7.isAncestorOf((java.awt.Component)var15);
    var7.setFocusTraversalPolicyProvider(true);
    net.sourceforge.schemaspy.ui.DbConfigPanel var30 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var30.requestFocus();
    var30.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var34 = var30.insets();
    var30.setAlignmentX(1.0f);
    var30.doLayout();
    boolean var38 = var30.isCursorSet();
    java.awt.Insets var39 = var30.getInsets();
    java.awt.Insets var40 = var7.getInsets(var39);
    net.sourceforge.schemaspy.ui.DbConfigPanel var41 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var41.requestFocus();
    var41.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var45 = var41.insets();
    var41.requestFocus();
    var41.setIgnoreRepaint(true);
    java.awt.Component var49 = var41.getNextFocusableComponent();
    net.sourceforge.schemaspy.ui.MainFrame var50 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var51 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var52 = var51.getTableExclusions();
    boolean var53 = var51.isEvaluateAllEnabled();
    java.util.List var54 = var51.getColumnDetails();
    var50.setIconImages(var54);
    boolean var56 = var50.isAlwaysOnTop();
    var50.setFocusableWindowState(true);
    boolean var59 = var50.isFocusCycleRoot();
    java.awt.Graphics var60 = var50.getGraphics();
    boolean var61 = var50.isFocusCycleRoot();
    java.awt.Dimension var62 = var50.size();
    var41.setMaximumSize(var62);
    java.awt.Dimension var64 = var7.getSize(var62);
    var0.setMaximumSize(var64);
    java.awt.Image var68 = var0.createImage(312, 431);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);

  }

  public void test204() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test204");


    net.sourceforge.schemaspy.util.PasswordReader var0 = net.sourceforge.schemaspy.util.PasswordReader.getInstance();
    net.sourceforge.schemaspy.view.StyleSheet.MissingCssPropertyException var5 = new net.sourceforge.schemaspy.view.StyleSheet.MissingCssPropertyException("", "hi!");
    net.sourceforge.schemaspy.model.ConnectionFailure var6 = new net.sourceforge.schemaspy.model.ConnectionFailure("", (java.lang.Throwable)var5);
    net.sourceforge.schemaspy.model.ConnectionFailure var7 = new net.sourceforge.schemaspy.model.ConnectionFailure("ISO-8859-1", (java.lang.Throwable)var6);
    net.sourceforge.schemaspy.util.PasswordReader.IOError var8 = var0.new IOError((java.lang.Throwable)var6);
    net.sourceforge.schemaspy.ui.DbTypeSelectorModel var11 = new net.sourceforge.schemaspy.ui.DbTypeSelectorModel("ISO-8859-1");
    int var12 = var11.getSize();
    java.lang.Object var13 = var11.getSelectedItem();
    int var14 = var11.getSize();
    int var15 = var11.getSize();
    javax.swing.event.ListDataListener[] var16 = var11.getListDataListeners();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      char[] var17 = var0.readPassword("frame2", (java.lang.Object[])var16);
    } catch (Exception e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test205() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test205");


    net.sourceforge.schemaspy.util.CaseInsensitiveMap var1 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.Set var2 = var1.entrySet();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var4 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.List var5 = net.sourceforge.schemaspy.DbAnalyzer.getRailsConstraints((java.util.Map)var4);
    net.sourceforge.schemaspy.Config var6 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var7 = var6.getTableExclusions();
    boolean var8 = var6.isHtmlGenerationEnabled();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var10 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    var10.clear();
    var6.setDbSpecificOptions((java.util.Map)var10);
    java.lang.String var13 = var10.toString();
    var4.putAll((java.util.Map)var10);
    var1.putAll((java.util.Map)var10);
    java.util.Set var16 = var1.entrySet();
    boolean var17 = var1.isEmpty();
    net.sourceforge.schemaspy.ui.DbConfigPanel var18 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var18.requestFocus();
    var18.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var22 = var18.insets();
    var18.requestFocus();
    boolean var24 = var18.isVisible();
    java.awt.Dimension var25 = var18.preferredSize();
    java.awt.Cursor var26 = var18.getCursor();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var27 = var1.remove((java.lang.Object)var18);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "{}"+ "'", var13.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test206() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test206");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    java.awt.Color var7 = var0.getForeground();
    javax.swing.InputVerifier var8 = var0.getInputVerifier();
    var0.repaint(100L, 10, 1, 0, 100);
    java.awt.Component.BaselineResizeBehavior var15 = var0.getBaselineResizeBehavior();
    var0.hide();
    var0.resetKeyboardActions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test207() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test207");


    net.sourceforge.schemaspy.util.CaseInsensitiveMap var1 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    var1.clear();
    java.util.List var3 = net.sourceforge.schemaspy.DbAnalyzer.getRailsConstraints((java.util.Map)var1);
    java.util.Set var4 = var1.entrySet();
    net.sourceforge.schemaspy.Config var5 = new net.sourceforge.schemaspy.Config();
    var5.setDb("a");
    java.lang.String var8 = var5.getServer();
    boolean var9 = var5.isHtmlGenerationEnabled();
    java.lang.String var10 = var5.getSchemaSpec();
    var5.setViewsEnabled(false);
    boolean var13 = var1.containsValue((java.lang.Object)false);
    java.lang.Object var14 = var1.clone();
    java.util.Collection var15 = var1.values();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test208() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test208");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    float var5 = var0.getAlignmentX();
    var0.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var11 = var0.getMouseListeners();
    var0.setAutoscrolls(true);
    boolean var15 = var0.requestFocus(false);
    java.awt.Component var18 = var0.findComponentAt(2, 100);
    net.sourceforge.schemaspy.ui.DbConfigPanel var19 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var19.requestFocus();
    var19.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var23 = var19.insets();
    var19.setAlignmentX(1.0f);
    var19.firePropertyChange("hi!", 10, 2);
    var19.paintImmediately(100, 10, 2, 0);
    java.util.Set var36 = var19.getFocusTraversalKeys(2);
    net.sourceforge.schemaspy.ui.DbConfigPanel var37 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var37.requestFocus();
    var37.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var41 = var37.insets();
    float var42 = var37.getAlignmentX();
    var37.setBounds(0, 1, 10, 100);
    java.awt.Rectangle var48 = var37.getBounds();
    var19.computeVisibleRect(var48);
    var0.paintImmediately(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test209() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test209");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    java.lang.String var5 = var0.getSchemaSpec();
    var0.setViewsEnabled(false);
    boolean var8 = var0.isEncodeCommentsEnabled();
    var0.setTableInclusions("Unknown");
    java.util.regex.Pattern var11 = var0.getIndirectColumnExclusions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test210() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test210");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isDbHelpRequired();
    var0.setCharset("dot version 2.2.1 or versions greater than 2.4");
    java.util.regex.Pattern var7 = var0.getIndirectColumnExclusions();
    boolean var8 = var0.isNumRowsEnabled();
    var0.setMaxDbThreads(11);
    var0.setCss("hi!s{hi!s}hi!s");
    boolean var13 = var0.isHtmlGenerationEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test211() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test211");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    java.awt.Window.Type var1 = var0.getType();
    java.awt.Window var2 = var0.getOwner();
    var0.repaint((-3), 2, (-1), 100);
    var0.show(false);
    var0.toFront();
    var0.setSize(11, 431);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test212() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test212");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    java.beans.PropertyChangeListener[] var2 = var0.getPropertyChangeListeners();
    boolean var3 = var0.isPreferredSizeSet();
    int var4 = var0.getY();
    var0.firePropertyChange("net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s", 10.0d, (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test213() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test213");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    java.awt.Window.Type var1 = var0.getType();
    java.awt.Component var2 = var0.getMostRecentFocusOwner();
    var0.setState(1);
    net.sourceforge.schemaspy.ui.DbConfigPanel var5 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var5.requestFocus();
    var5.setFocusTraversalPolicyProvider(true);
    boolean var9 = var5.requestFocusInWindow();
    net.sourceforge.schemaspy.ui.DbConfigPanel var10 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var10.requestFocus();
    java.beans.PropertyChangeListener[] var12 = var10.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var13 = var10.getBaselineResizeBehavior();
    net.sourceforge.schemaspy.ui.DbConfigPanel var14 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var14.requestFocus();
    var14.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var18 = var14.insets();
    var14.setAlignmentX(1.0f);
    var14.doLayout();
    boolean var22 = var14.isCursorSet();
    var14.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var27 = var14.getLocation();
    boolean var28 = var10.contains(var27);
    java.awt.Component var29 = var5.findComponentAt(var27);
    boolean var30 = var5.isRequestFocusEnabled();
    net.sourceforge.schemaspy.ui.DbConfigPanel var31 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var31.requestFocus();
    var31.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var35 = var31.insets();
    var31.setAlignmentX(1.0f);
    boolean var38 = var31.hasFocus();
    boolean var39 = var31.getFocusTraversalKeysEnabled();
    var31.setSize(1, (-1));
    boolean var44 = var31.requestFocus(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var45 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var45.requestFocus();
    java.beans.PropertyChangeListener[] var47 = var45.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var48 = var45.getBaselineResizeBehavior();
    net.sourceforge.schemaspy.ui.DbConfigPanel var49 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var49.requestFocus();
    var49.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var53 = var49.insets();
    var49.setAlignmentX(1.0f);
    var49.doLayout();
    boolean var57 = var49.isCursorSet();
    var49.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var62 = var49.getLocation();
    boolean var63 = var45.contains(var62);
    java.awt.Point var64 = var31.getLocation(var62);
    java.awt.Point var65 = var5.getLocation(var62);
    java.awt.Point var66 = var0.getLocation(var65);
    java.awt.Container var67 = var0.getContentPane();
    var0.repaint(10L, 312, (-1), 5, 300);
    java.awt.Component var75 = var0.getComponent(0);
    java.awt.Shape var76 = var0.getShape();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);

  }

  public void test214() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test214");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var1 = var0.isManagingFocus();
    int var2 = var0.getWidth();
    java.awt.Insets var3 = var0.insets();
    javax.accessibility.AccessibleContext var4 = var0.getAccessibleContext();
    boolean var7 = var0.inside(100, (-3));
    var0.setDebugGraphicsOptions(2);
    java.awt.event.InputMethodListener[] var10 = var0.getInputMethodListeners();
    javax.swing.JToolTip var11 = var0.createToolTip();
    var11.repaint(10L, 23, 0, 2, (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test215() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test215");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.util.List var24 = var0.getIconImages();
    java.awt.Rectangle var25 = var0.getMaximizedBounds();
    java.awt.Dimension var26 = var0.minimumSize();
    var0.setCursor(5);
    java.lang.String var29 = var0.getWarningString();
    var0.setBounds(2, 300, (-3), 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test216() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test216");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    java.beans.PropertyChangeListener[] var2 = var0.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var3 = var0.getBaselineResizeBehavior();
    net.sourceforge.schemaspy.ui.DbConfigPanel var4 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var4.requestFocus();
    var4.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var8 = var4.insets();
    var4.setAlignmentX(1.0f);
    var4.doLayout();
    boolean var12 = var4.isCursorSet();
    var4.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var17 = var4.getLocation();
    boolean var18 = var0.contains(var17);
    java.awt.peer.ComponentPeer var19 = var0.getPeer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test217() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test217");


    net.sourceforge.schemaspy.util.CaseInsensitiveMap var1 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    var1.clear();
    java.util.List var3 = net.sourceforge.schemaspy.DbAnalyzer.getRailsConstraints((java.util.Map)var1);
    var1.clear();
    java.lang.Object var5 = var1.clone();
    java.lang.String var6 = var1.toString();
    java.util.Set var7 = var1.keySet();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    java.beans.PropertyChangeListener[] var11 = var9.getPropertyChangeListeners();
    var9.paintImmediately(0, (-1), (-1), 0);
    boolean var17 = var9.isForegroundSet();
    boolean var18 = var9.isValidateRoot();
    boolean var19 = var9.isVisible();
    var9.enable();
    java.lang.Object var21 = var1.put("schemaSpy.css", (java.lang.Object)var9);
    var9.setVisible(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "{}"+ "'", var6.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test218() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test218");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    boolean var25 = var0.isLocationByPlatform();
    boolean var26 = var0.isUndecorated();
    net.sourceforge.schemaspy.ui.DbConfigPanel var27 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    net.sourceforge.schemaspy.ui.DbConfigPanel var28 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var28.requestFocus();
    var28.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var32 = var28.insets();
    var28.setAlignmentX(1.0f);
    boolean var35 = var28.hasFocus();
    boolean var36 = var28.getFocusTraversalKeysEnabled();
    var28.setSize(1, (-1));
    boolean var41 = var28.requestFocus(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var42 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var42.requestFocus();
    java.beans.PropertyChangeListener[] var44 = var42.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var45 = var42.getBaselineResizeBehavior();
    net.sourceforge.schemaspy.ui.DbConfigPanel var46 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var46.requestFocus();
    var46.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var50 = var46.insets();
    var46.setAlignmentX(1.0f);
    var46.doLayout();
    boolean var54 = var46.isCursorSet();
    var46.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var59 = var46.getLocation();
    boolean var60 = var42.contains(var59);
    java.awt.Point var61 = var28.getLocation(var59);
    java.awt.Component var62 = var27.add((java.awt.Component)var28);
    java.awt.Insets var63 = var27.insets();
    var0.setContentPane((java.awt.Container)var27);
    var0.setTitle("{}s");
    boolean var67 = var0.isResizable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);

  }

  public void test219() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test219");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.util.List var24 = var0.getIconImages();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var25.requestFocus();
    var25.setFocusTraversalPolicyProvider(true);
    boolean var29 = var25.requestFocusInWindow();
    java.awt.FocusTraversalPolicy var30 = var25.getFocusTraversalPolicy();
    var0.setFocusTraversalPolicy(var30);
    var0.setFocusTraversalKeysEnabled(true);
    net.sourceforge.schemaspy.ui.DbConfigPanel var34 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var34.requestFocus();
    var34.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var38 = var34.insets();
    var34.setAlignmentX(1.0f);
    var34.doLayout();
    boolean var42 = var34.isCursorSet();
    var34.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var47 = var34.getLocation();
    var34.setSize(2, 10);
    var34.grabFocus();
    java.awt.Color var52 = var34.getForeground();
    var0.setBackground(var52);
    net.sourceforge.schemaspy.ui.MainFrame var54 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var55 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var56 = var55.getTableExclusions();
    boolean var57 = var55.isEvaluateAllEnabled();
    java.util.List var58 = var55.getColumnDetails();
    var54.setIconImages(var58);
    boolean var60 = var54.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var61 = var54.getModalExclusionType();
    net.sourceforge.schemaspy.ui.DbConfigPanel var62 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var62.requestFocus();
    var62.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var66 = var62.insets();
    var62.setAlignmentX(1.0f);
    boolean var69 = var62.hasFocus();
    boolean var70 = var62.getFocusTraversalKeysEnabled();
    boolean var71 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var62);
    net.sourceforge.schemaspy.ui.DbConfigPanel var72 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var73 = var72.isManagingFocus();
    java.awt.Rectangle var74 = var72.getVisibleRect();
    java.awt.Rectangle var75 = var62.getBounds(var74);
    java.awt.Dimension var76 = var62.getPreferredSize();
    var54.setSize(var76);
    java.awt.im.InputContext var78 = var54.getInputContext();
    float var79 = var54.getOpacity();
    var54.revalidate();
    java.util.Locale var81 = var54.getLocale();
    var0.setLocale(var81);
    var0.enable(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test220() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test220");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.util.Locale var4 = javax.swing.JComponent.getDefaultLocale();
    var0.setLocale(var4);
    net.sourceforge.schemaspy.ui.DbConfigPanel var6 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var6.requestFocus();
    var6.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var10 = var6.insets();
    float var11 = var6.getAlignmentX();
    var6.setBounds(0, 1, 10, 100);
    java.awt.Rectangle var17 = var6.getBounds();
    var0.computeVisibleRect(var17);
    java.awt.Component var21 = var0.getComponentAt(100, 2);
    var0.invalidate();
    var0.firePropertyChange("4", 1.0f, 10.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test221() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test221");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    net.sourceforge.schemaspy.ui.DbConfigPanel var6 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var6.requestFocus();
    var6.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var10 = var6.insets();
    var6.setAlignmentX(1.0f);
    boolean var13 = var6.hasFocus();
    boolean var14 = var6.getFocusTraversalKeysEnabled();
    boolean var15 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var6);
    net.sourceforge.schemaspy.ui.DbConfigPanel var16 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var17 = var16.isManagingFocus();
    java.awt.Rectangle var18 = var16.getVisibleRect();
    java.awt.Rectangle var19 = var6.getBounds(var18);
    java.awt.Dimension var20 = var6.getPreferredSize();
    var0.setMinimumSize(var20);
    var0.toBack();
    net.sourceforge.schemaspy.ui.DbConfigPanel var23 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var23.requestFocus();
    var23.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var27 = var23.insets();
    float var28 = var23.getAlignmentX();
    boolean var31 = var23.contains(1, (-1));
    var23.setOpaque(false);
    boolean var34 = var23.getInheritsPopupMenu();
    var0.setGlassPane((java.awt.Component)var23);
    net.sourceforge.schemaspy.ui.MainFrame var36 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var37 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var37.requestFocus();
    var37.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var41 = var37.insets();
    var37.setAlignmentX(1.0f);
    java.awt.Color var44 = var37.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var45 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var45.requestFocus();
    var45.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var49 = var45.insets();
    float var50 = var45.getAlignmentX();
    var45.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var56 = var45.getMouseListeners();
    java.awt.Rectangle var57 = var45.bounds();
    var37.setBounds(var57);
    var36.setMaximizedBounds(var57);
    net.sourceforge.schemaspy.ui.DbConfigPanel var60 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var60.requestFocus();
    var60.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var64 = var60.insets();
    var60.setAlignmentX(1.0f);
    boolean var67 = var60.hasFocus();
    boolean var68 = var60.getFocusTraversalKeysEnabled();
    boolean var69 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var60);
    var60.firePropertyChange("hi!", 'a', 'a');
    net.sourceforge.schemaspy.ui.DbConfigPanel var74 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var75 = var74.isManagingFocus();
    int var76 = var74.getWidth();
    java.awt.Insets var77 = var74.insets();
    javax.accessibility.AccessibleContext var78 = var74.getAccessibleContext();
    boolean var81 = var74.inside(100, (-3));
    java.awt.Rectangle var82 = var74.getVisibleRect();
    var60.setBounds(var82);
    var36.setMaximizedBounds(var82);
    var0.setBounds(var82);
    java.awt.Graphics var86 = var0.getGraphics();
    float var87 = var0.getAlignmentY();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0.5f);

  }

  public void test222() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test222");


    net.sourceforge.schemaspy.model.InvalidConfigurationException var1 = new net.sourceforge.schemaspy.model.InvalidConfigurationException("hi!sdhi!sohi!sthi!s hi!svhi!sehi!srhi!sshi!sihi!sohi!snhi!s hi!s2hi!s.hi!s2hi!s.hi!s1hi!s hi!sohi!srhi!s hi!svhi!sehi!srhi!sshi!sihi!sohi!snhi!sshi!s hi!sghi!srhi!sehi!sahi!sthi!sehi!srhi!s hi!sthi!shhi!sahi!snhi!s hi!s2hi!s.hi!s4hi!s");

  }

  public void test223() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test223");


    net.sourceforge.schemaspy.ui.DbConfigTableModel var0 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    var0.fireTableRowsInserted(2, 1);
    java.lang.Object var6 = var0.getValueAt(0, 100);
    javax.swing.event.TableModelListener[] var7 = var0.getTableModelListeners();
    var0.fireTableRowsUpdated(0, 3);
    javax.swing.event.TableModelListener[] var11 = var0.getTableModelListeners();
    boolean var14 = var0.isCellEditable(0, 10);
    int var15 = var0.getColumnCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2);

  }

  public void test224() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test224");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    boolean var2 = var0.isEvaluateAllEnabled();
    boolean var3 = var0.isEncodeCommentsEnabled();
    int var4 = var0.getMaxDetailedTables();
    var0.setPassword("ora");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.io.File var7 = var0.getOutputDir();
      fail("Expected exception of type net.sourceforge.schemaspy.Config.MissingRequiredParameterException");
    } catch (net.sourceforge.schemaspy.Config.MissingRequiredParameterException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 300);

  }

  public void test225() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test225");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    java.lang.String var2 = var0.getCharset();
    boolean var3 = var0.isViewsEnabled();
    var0.setMaxDbThreads(23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "ISO-8859-1"+ "'", var2.equals("ISO-8859-1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);

  }

  public void test226() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test226");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    boolean var7 = var0.hasFocus();
    var0.paintImmediately(10, 100, 2, 10);
    int var13 = var0.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);

  }

  public void test227() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test227");


    net.sourceforge.schemaspy.model.InvalidConfigurationException var1 = new net.sourceforge.schemaspy.model.InvalidConfigurationException("net.sourceforge.schemaspy.ui.MainFrame[frame0,0,23,500x431,invalid,hidden,layout=java.awt.BorderLayout,title=SchemaSpy,resizable,normal,defaultCloseOperation=HIDE_ON_CLOSE,rootPane=javax.swing.JRootPane[,0,0,0x0,invalid,layout=javax.swing.JRootPane$RootLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777673,maximumSize=,minimumSize=,preferredSize=],rootPaneCheckingEnabled=true]");
    java.lang.Throwable[] var2 = var1.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test228() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test228");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    boolean var7 = var0.hasFocus();
    boolean var8 = var0.getFocusTraversalKeysEnabled();
    boolean var9 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var0);
    net.sourceforge.schemaspy.ui.DbConfigPanel var10 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var10.requestFocus();
    var10.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var14 = var10.insets();
    float var15 = var10.getAlignmentX();
    var10.setBounds(0, 1, 10, 100);
    java.awt.Rectangle var21 = var10.getBounds();
    var0.scrollRectToVisible(var21);
    var0.transferFocusBackward();
    var0.setVisible(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test229() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test229");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    java.beans.PropertyChangeListener[] var2 = var0.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var3 = var0.getBaselineResizeBehavior();
    javax.swing.InputMap var4 = var0.getInputMap();
    net.sourceforge.schemaspy.ui.DbConfigTableModel var5 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    var5.fireTableRowsInserted(2, 1);
    java.lang.Class var10 = var5.getClass(3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.EventListener[] var11 = var0.<java.util.EventListener>getListeners(var10);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test230() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test230");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    var0.setFocusableWindowState(true);
    boolean var9 = var0.isFocusCycleRoot();
    java.awt.Graphics var10 = var0.getGraphics();
    boolean var11 = var0.isFocusCycleRoot();
    net.sourceforge.schemaspy.ui.MainFrame var12 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var13 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var13.requestFocus();
    var13.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var17 = var13.insets();
    var13.setAlignmentX(1.0f);
    java.awt.Color var20 = var13.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var21 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var21.requestFocus();
    var21.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var25 = var21.insets();
    float var26 = var21.getAlignmentX();
    var21.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var32 = var21.getMouseListeners();
    java.awt.Rectangle var33 = var21.bounds();
    var13.setBounds(var33);
    var12.setMaximizedBounds(var33);
    java.awt.Container var36 = var12.getContentPane();
    boolean var37 = var12.isLocationByPlatform();
    net.sourceforge.schemaspy.ui.MainFrame var38 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var39 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var40 = var39.getTableExclusions();
    boolean var41 = var39.isEvaluateAllEnabled();
    java.util.List var42 = var39.getColumnDetails();
    var38.setIconImages(var42);
    boolean var44 = var38.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var45 = var38.getModalExclusionType();
    var12.setModalExclusionType(var45);
    var12.setEnabled(true);
    javax.swing.JLayeredPane var49 = var12.getLayeredPane();
    var0.setLayeredPane(var49);
    java.awt.im.InputContext var51 = var0.getInputContext();
    java.awt.Point var52 = var0.getLocation();
    net.sourceforge.schemaspy.ui.DbConfigPanel var53 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var53.requestFocus();
    var53.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var57 = var53.insets();
    var53.setAlignmentX(1.0f);
    boolean var60 = var53.hasFocus();
    net.sourceforge.schemaspy.ui.DbConfigPanel var61 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var61.requestFocus();
    var61.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var65 = var61.insets();
    float var66 = var61.getAlignmentX();
    var61.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var72 = var61.getMouseListeners();
    boolean var73 = var53.isAncestorOf((java.awt.Component)var61);
    java.awt.im.InputMethodRequests var74 = var61.getInputMethodRequests();
    net.sourceforge.schemaspy.ui.DbConfigPanel var75 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var75.requestFocus();
    var75.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var79 = var75.insets();
    var75.setAlignmentX(1.0f);
    var75.doLayout();
    boolean var83 = var75.isCursorSet();
    var75.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var88 = var75.getLocation();
    java.awt.Component var89 = var61.findComponentAt(var88);
    var0.setLocation(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test231() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test231");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    java.lang.String var5 = var0.getSchemaSpec();
    var0.setViewsEnabled(false);
    boolean var8 = var0.isEncodeCommentsEnabled();
    boolean var9 = var0.isRankDirBugEnabled();
    var0.setTableExclusions("net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test232() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test232");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    var0.setFocusableWindowState(true);
    java.awt.Window[] var9 = var0.getOwnedWindows();
    java.awt.Component var10 = var0.getMostRecentFocusOwner();
    net.sourceforge.schemaspy.ui.DbConfigPanel var11 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var11.requestFocus();
    var11.setFocusTraversalPolicyProvider(true);
    java.util.Locale var15 = javax.swing.JComponent.getDefaultLocale();
    var11.setLocale(var15);
    net.sourceforge.schemaspy.ui.DbConfigPanel var17 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var17.requestFocus();
    var17.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var21 = var17.insets();
    float var22 = var17.getAlignmentX();
    var17.setBounds(0, 1, 10, 100);
    java.awt.Rectangle var28 = var17.getBounds();
    var11.computeVisibleRect(var28);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setShape((java.awt.Shape)var28);
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test233() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test233");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    net.sourceforge.schemaspy.ui.DbConfigPanel var6 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var6.requestFocus();
    var6.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var10 = var6.insets();
    var6.setAlignmentX(1.0f);
    boolean var13 = var6.hasFocus();
    boolean var14 = var6.getFocusTraversalKeysEnabled();
    boolean var15 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var6);
    net.sourceforge.schemaspy.ui.DbConfigPanel var16 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var17 = var16.isManagingFocus();
    java.awt.Rectangle var18 = var16.getVisibleRect();
    java.awt.Rectangle var19 = var6.getBounds(var18);
    java.awt.Dimension var20 = var6.getPreferredSize();
    var0.setMinimumSize(var20);
    javax.swing.TransferHandler var22 = var0.getTransferHandler();
    java.awt.event.WindowListener[] var23 = var0.getWindowListeners();
    boolean var24 = var0.isForegroundSet();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var25.requestFocus();
    var25.setFocusTraversalPolicyProvider(true);
    var25.firePropertyChange("a", (byte)10, (byte)0);
    java.awt.Insets var33 = var25.insets();
    var25.setAlignmentY(100.0f);
    java.lang.Object var36 = var25.getTreeLock();
    net.sourceforge.schemaspy.ui.MainFrame var37 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var38 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var38.requestFocus();
    var38.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var42 = var38.insets();
    var38.setAlignmentX(1.0f);
    java.awt.Color var45 = var38.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var46 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var46.requestFocus();
    var46.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var50 = var46.insets();
    float var51 = var46.getAlignmentX();
    var46.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var57 = var46.getMouseListeners();
    java.awt.Rectangle var58 = var46.bounds();
    var38.setBounds(var58);
    var37.setMaximizedBounds(var58);
    java.util.List var61 = var37.getIconImages();
    java.awt.Rectangle var62 = var37.getMaximizedBounds();
    java.awt.Rectangle var63 = var25.getBounds(var62);
    var0.setBounds(var63);
    boolean var65 = var0.isEnabled();
    int var66 = var0.getExtendedState();
    java.util.Set var68 = var0.getFocusTraversalKeys(3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test234() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test234");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    net.sourceforge.schemaspy.ui.DbConfigPanel var24 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var24.requestFocus();
    var24.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var28 = var24.insets();
    var24.reshape(1, 1, 1, 100);
    net.sourceforge.schemaspy.ui.DbConfigPanel var34 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var34.requestFocus();
    var34.setFocusTraversalPolicyProvider(true);
    java.awt.Point var39 = var34.getMousePosition(true);
    java.awt.Component var40 = var34.getNextFocusableComponent();
    java.awt.Dimension var41 = var34.getMinimumSize();
    java.awt.Dimension var42 = var24.getSize(var41);
    java.awt.Rectangle var43 = var24.bounds();
    var0.setLocationRelativeTo((java.awt.Component)var24);
    var24.paintImmediately((-1), 11, (-1), 3);
    net.sourceforge.schemaspy.ui.DbConfigPanel var50 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var50.requestFocus();
    java.beans.PropertyChangeListener[] var52 = var50.getPropertyChangeListeners();
    var50.paintImmediately(0, (-1), (-1), 0);
    boolean var58 = var50.isForegroundSet();
    javax.swing.JRootPane var59 = var50.getRootPane();
    var50.setAutoscrolls(true);
    var24.setComponentZOrder((java.awt.Component)var50, 2);
    var24.revalidate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);

  }

  public void test235() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test235");


    net.sourceforge.schemaspy.model.Routine var9 = new net.sourceforge.schemaspy.model.Routine("", "hi!", "a", "", "", false, "", "hi!", "");
    java.lang.String var10 = var9.getDefinition();
    net.sourceforge.schemaspy.model.Routine var20 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var21 = var20.getDataAccess();
    java.lang.String var22 = var20.getDefinitionLanguage();
    int var23 = var9.compareTo(var20);
    java.util.List var24 = var9.getParameters();
    net.sourceforge.schemaspy.view.WriteStats var25 = new net.sourceforge.schemaspy.view.WriteStats((java.util.Collection)var24);
    java.util.List var26 = net.sourceforge.schemaspy.DbAnalyzer.getOrphans((java.util.Collection)var24);
    java.lang.String var27 = net.sourceforge.schemaspy.model.ForeignKeyConstraint.toString(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + ""+ "'", var10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "a"+ "'", var22.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "[]"+ "'", var27.equals("[]"));

  }

  public void test236() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test236");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Point var5 = var0.getMousePosition(true);
    java.awt.Component var6 = var0.getNextFocusableComponent();
    boolean var7 = var0.isBackgroundSet();
    var0.requestFocus();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    var9.setAlignmentX(1.0f);
    boolean var16 = var9.hasFocus();
    boolean var17 = var9.getFocusTraversalKeysEnabled();
    boolean var18 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var9);
    net.sourceforge.schemaspy.ui.DbConfigPanel var19 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var19.requestFocus();
    var19.setFocusTraversalPolicyProvider(true);
    java.awt.Point var24 = var19.getMousePosition(true);
    int var25 = var19.getComponentCount();
    int var26 = var19.getHeight();
    net.sourceforge.schemaspy.ui.DbConfigPanel var27 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var27.requestFocus();
    java.beans.PropertyChangeListener[] var29 = var27.getPropertyChangeListeners();
    var27.paintImmediately(0, (-1), (-1), 0);
    java.awt.Font var35 = var27.getFont();
    java.awt.FontMetrics var36 = var19.getFontMetrics(var35);
    java.awt.FontMetrics var37 = var9.getFontMetrics(var35);
    var0.setFont(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test237() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test237");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.doLayout();
    boolean var8 = var0.isCursorSet();
    var0.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var13 = var0.getLocation();
    var0.setSize(2, 10);
    var0.grabFocus();
    var0.firePropertyChange("4", 0.0f, 1.0f);
    java.awt.LayoutManager var22 = var0.getLayout();
    java.awt.image.ColorModel var23 = var0.getColorModel();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test238() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test238");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.util.List var24 = var0.getIconImages();
    boolean var25 = var0.isDisplayable();
    java.awt.MenuBar var26 = var0.getMenuBar();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test239() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test239");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    java.beans.PropertyChangeListener[] var2 = var0.getPropertyChangeListeners();
    var0.paintImmediately(0, (-1), (-1), 0);
    boolean var8 = var0.isForegroundSet();
    java.awt.event.ContainerListener[] var9 = var0.getContainerListeners();
    var0.setFocusTraversalKeysEnabled(true);
    var0.setRequestFocusEnabled(false);
    int var14 = var0.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);

  }

  public void test240() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test240");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    java.awt.event.HierarchyBoundsListener[] var5 = var0.getHierarchyBoundsListeners();
    javax.swing.border.Border var6 = var0.getBorder();
    javax.swing.JPopupMenu var7 = var0.getComponentPopupMenu();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test241() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test241");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.event.KeyListener[] var24 = var0.getKeyListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test242() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test242");


    net.sourceforge.schemaspy.ui.DbConfigTableModel var0 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    int var2 = var0.findColumn("a");
    net.sourceforge.schemaspy.util.DbSpecificConfig var4 = new net.sourceforge.schemaspy.util.DbSpecificConfig("net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    var0.setDbSpecificConfig(var4);
    var0.fireTableStructureChanged();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var8 = var0.getDescription(11);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1));

  }

  public void test243() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test243");


    net.sourceforge.schemaspy.util.LineWriter var3 = new net.sourceforge.schemaspy.util.LineWriter("Unknown", 100, "ISO-8859-1");
    var3.newLine();
    var3.writeln("[]");
    java.io.Writer var8 = var3.append((java.lang.CharSequence)"hi!");
    java.io.Writer var10 = var3.append('a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test244() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test244");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    java.beans.PropertyChangeListener[] var2 = var0.getPropertyChangeListeners();
    boolean var3 = var0.isPreferredSizeSet();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var6 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.Set var7 = var6.entrySet();
    java.util.List var8 = net.sourceforge.schemaspy.DbAnalyzer.getOrphans((java.util.Collection)var7);
    java.util.List var9 = net.sourceforge.schemaspy.DbAnalyzer.getTablesWithIncrementingColumnNames((java.util.Collection)var7);
    java.util.List var10 = net.sourceforge.schemaspy.DbAnalyzer.getOrphans((java.util.Collection)var7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setFocusTraversalKeys(100, var7);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test245() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test245");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    net.sourceforge.schemaspy.ui.DbConfigPanel var6 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var6.requestFocus();
    var6.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var10 = var6.insets();
    var6.setAlignmentX(1.0f);
    boolean var13 = var6.hasFocus();
    boolean var14 = var6.getFocusTraversalKeysEnabled();
    boolean var15 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var6);
    net.sourceforge.schemaspy.ui.DbConfigPanel var16 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var17 = var16.isManagingFocus();
    java.awt.Rectangle var18 = var16.getVisibleRect();
    java.awt.Rectangle var19 = var6.getBounds(var18);
    java.awt.Dimension var20 = var6.getPreferredSize();
    var0.setMinimumSize(var20);
    var0.toBack();
    net.sourceforge.schemaspy.ui.DbConfigPanel var23 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var23.requestFocus();
    var23.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var27 = var23.insets();
    float var28 = var23.getAlignmentX();
    boolean var31 = var23.contains(1, (-1));
    var23.setOpaque(false);
    boolean var34 = var23.getInheritsPopupMenu();
    var0.setGlassPane((java.awt.Component)var23);
    net.sourceforge.schemaspy.ui.MainFrame var36 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var37 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var37.requestFocus();
    var37.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var41 = var37.insets();
    var37.setAlignmentX(1.0f);
    java.awt.Color var44 = var37.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var45 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var45.requestFocus();
    var45.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var49 = var45.insets();
    float var50 = var45.getAlignmentX();
    var45.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var56 = var45.getMouseListeners();
    java.awt.Rectangle var57 = var45.bounds();
    var37.setBounds(var57);
    var36.setMaximizedBounds(var57);
    net.sourceforge.schemaspy.ui.DbConfigPanel var60 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var60.requestFocus();
    var60.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var64 = var60.insets();
    var60.setAlignmentX(1.0f);
    boolean var67 = var60.hasFocus();
    boolean var68 = var60.getFocusTraversalKeysEnabled();
    boolean var69 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var60);
    var60.firePropertyChange("hi!", 'a', 'a');
    net.sourceforge.schemaspy.ui.DbConfigPanel var74 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var75 = var74.isManagingFocus();
    int var76 = var74.getWidth();
    java.awt.Insets var77 = var74.insets();
    javax.accessibility.AccessibleContext var78 = var74.getAccessibleContext();
    boolean var81 = var74.inside(100, (-3));
    java.awt.Rectangle var82 = var74.getVisibleRect();
    var60.setBounds(var82);
    var36.setMaximizedBounds(var82);
    var0.setBounds(var82);
    java.awt.event.WindowListener[] var86 = var0.getWindowListeners();
    var0.addNotify();
    java.awt.image.BufferStrategy var88 = var0.getBufferStrategy();
    float var89 = var0.getOpacity();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 1.0f);

  }

  public void test246() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test246");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.setFocusable(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var3 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var3.requestFocus();
    var3.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var7 = var3.insets();
    var3.setAlignmentX(1.0f);
    boolean var10 = var3.hasFocus();
    boolean var11 = var3.getFocusTraversalKeysEnabled();
    var3.setSize(1, (-1));
    java.lang.Object var15 = var0.getClientProperty((java.lang.Object)var3);
    net.sourceforge.schemaspy.ui.DbConfigPanel var16 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var16.requestFocus();
    var16.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var20 = var16.insets();
    var16.requestFocus();
    var16.setOpaque(false);
    var16.enableInputMethods(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var26 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var26.requestFocus();
    var26.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var30 = var26.insets();
    var26.setAlignmentX(1.0f);
    boolean var33 = var26.hasFocus();
    boolean var34 = var26.getFocusTraversalKeysEnabled();
    boolean var35 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var26);
    var26.firePropertyChange("hi!", 'a', 'a');
    net.sourceforge.schemaspy.ui.DbConfigPanel var40 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var41 = var40.isManagingFocus();
    int var42 = var40.getWidth();
    java.awt.Insets var43 = var40.insets();
    javax.accessibility.AccessibleContext var44 = var40.getAccessibleContext();
    boolean var47 = var40.inside(100, (-3));
    java.awt.Rectangle var48 = var40.getVisibleRect();
    var26.setBounds(var48);
    var16.paintImmediately(var48);
    java.awt.Rectangle var51 = var3.getBounds(var48);
    float var52 = var3.getAlignmentX();
    java.awt.Component var55 = var3.findComponentAt(100, 431);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);

  }

  public void test247() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test247");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.hasOrphans();
    var0.setNumRowsEnabled(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setConnectionPropertiesFile(".hi!sdhi!sohi!sthi!s hi!svhi!sehi!srhi!sshi!sihi!sohi!snhi!s hi!s2hi!s.hi!s2hi!s.hi!s1hi!s hi!sohi!srhi!s hi!svhi!sehi!srhi!sshi!sihi!sohi!snhi!sshi!s hi!sghi!srhi!sehi!sahi!sthi!sehi!srhi!s hi!sthi!shhi!sahi!snhi!s hi!s2hi!s.hi!s4hi!s.hi!s{hi!s}hi!s");
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test248() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test248");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    boolean var5 = var0.isMeterEnabled();
    java.lang.String var7 = var0.getParam("a");
    var0.setPromptForPasswordEnabled(false);
    java.lang.String var10 = var0.getCatalog();
    java.lang.String var11 = var0.getDescription();
    java.util.regex.Pattern var12 = var0.getColumnExclusions();
    var0.setConnectionProperties("Value");
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var16 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    var16.clear();
    java.util.List var18 = net.sourceforge.schemaspy.DbAnalyzer.getRailsConstraints((java.util.Map)var16);
    var16.clear();
    java.lang.Object var20 = var16.clone();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var22 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.Set var23 = var22.entrySet();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var25 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.List var26 = net.sourceforge.schemaspy.DbAnalyzer.getRailsConstraints((java.util.Map)var25);
    net.sourceforge.schemaspy.Config var27 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var28 = var27.getTableExclusions();
    boolean var29 = var27.isHtmlGenerationEnabled();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var31 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    var31.clear();
    var27.setDbSpecificOptions((java.util.Map)var31);
    java.lang.String var34 = var31.toString();
    var25.putAll((java.util.Map)var31);
    var22.putAll((java.util.Map)var31);
    var16.putAll((java.util.Map)var22);
    boolean var38 = var22.isEmpty();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var40 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    var40.clear();
    java.util.List var42 = net.sourceforge.schemaspy.DbAnalyzer.getRailsConstraints((java.util.Map)var40);
    java.util.Set var43 = var40.entrySet();
    net.sourceforge.schemaspy.Config var44 = new net.sourceforge.schemaspy.Config();
    var44.setDb("a");
    java.lang.String var47 = var44.getServer();
    boolean var48 = var44.isHtmlGenerationEnabled();
    java.lang.String var49 = var44.getSchemaSpec();
    var44.setViewsEnabled(false);
    boolean var52 = var40.containsValue((java.lang.Object)false);
    var22.putAll((java.util.Map)var40);
    var40.clear();
    var0.setDbSpecificOptions((java.util.Map)var40);
    int var56 = var0.getFontSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "{}"+ "'", var34.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 11);

  }

  public void test249() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test249");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.reshape(1, 1, 1, 100);
    net.sourceforge.schemaspy.ui.DbConfigPanel var10 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var10.requestFocus();
    var10.setFocusTraversalPolicyProvider(true);
    java.awt.Point var15 = var10.getMousePosition(true);
    java.awt.Component var16 = var10.getNextFocusableComponent();
    java.awt.Dimension var17 = var10.getMinimumSize();
    java.awt.Dimension var18 = var0.getSize(var17);
    boolean var19 = var0.getFocusTraversalKeysEnabled();
    var0.grabFocus();
    boolean var21 = var0.hasFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test250() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test250");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    var0.removeNotify();
    int var26 = var0.getCursorType();
    java.awt.Window var27 = var0.getOwner();
    float var28 = var0.getAlignmentX();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);

  }

  public void test251() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test251");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.util.List var24 = var0.getIconImages();
    java.awt.Rectangle var25 = var0.getMaximizedBounds();
    var0.setEnabled(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test252() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test252");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    net.sourceforge.schemaspy.ui.DbConfigPanel var6 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var6.requestFocus();
    var6.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var10 = var6.insets();
    var6.setAlignmentX(1.0f);
    boolean var13 = var6.hasFocus();
    boolean var14 = var6.getFocusTraversalKeysEnabled();
    boolean var15 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var6);
    net.sourceforge.schemaspy.ui.DbConfigPanel var16 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var17 = var16.isManagingFocus();
    java.awt.Rectangle var18 = var16.getVisibleRect();
    java.awt.Rectangle var19 = var6.getBounds(var18);
    java.awt.Dimension var20 = var6.getPreferredSize();
    var0.setMinimumSize(var20);
    var0.toBack();
    net.sourceforge.schemaspy.ui.DbConfigPanel var23 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var23.requestFocus();
    var23.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var27 = var23.insets();
    float var28 = var23.getAlignmentX();
    boolean var31 = var23.contains(1, (-1));
    var23.setOpaque(false);
    boolean var34 = var23.getInheritsPopupMenu();
    var0.setGlassPane((java.awt.Component)var23);
    net.sourceforge.schemaspy.ui.MainFrame var36 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var37 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var37.requestFocus();
    var37.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var41 = var37.insets();
    var37.setAlignmentX(1.0f);
    java.awt.Color var44 = var37.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var45 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var45.requestFocus();
    var45.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var49 = var45.insets();
    float var50 = var45.getAlignmentX();
    var45.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var56 = var45.getMouseListeners();
    java.awt.Rectangle var57 = var45.bounds();
    var37.setBounds(var57);
    var36.setMaximizedBounds(var57);
    net.sourceforge.schemaspy.ui.DbConfigPanel var60 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var60.requestFocus();
    var60.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var64 = var60.insets();
    var60.setAlignmentX(1.0f);
    boolean var67 = var60.hasFocus();
    boolean var68 = var60.getFocusTraversalKeysEnabled();
    boolean var69 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var60);
    var60.firePropertyChange("hi!", 'a', 'a');
    net.sourceforge.schemaspy.ui.DbConfigPanel var74 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var75 = var74.isManagingFocus();
    int var76 = var74.getWidth();
    java.awt.Insets var77 = var74.insets();
    javax.accessibility.AccessibleContext var78 = var74.getAccessibleContext();
    boolean var81 = var74.inside(100, (-3));
    java.awt.Rectangle var82 = var74.getVisibleRect();
    var60.setBounds(var82);
    var36.setMaximizedBounds(var82);
    var0.setBounds(var82);
    java.awt.Component var88 = var0.getComponentAt(0, 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test253() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test253");


    net.sourceforge.schemaspy.TableOrderer var0 = new net.sourceforge.schemaspy.TableOrderer();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var2 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    var2.clear();
    java.util.List var4 = net.sourceforge.schemaspy.DbAnalyzer.getRailsConstraints((java.util.Map)var2);
    java.util.Set var5 = var2.entrySet();
    net.sourceforge.schemaspy.model.Routine var15 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var16 = var15.getDataAccess();
    java.lang.String var17 = var15.getDefinitionLanguage();
    java.util.List var18 = var15.getParameters();
    java.util.List var19 = var0.getTablesOrderedByRI((java.util.Collection)var5, (java.util.Collection)var18);
    java.util.List var20 = net.sourceforge.schemaspy.DbAnalyzer.getMustBeUniqueNullableColumns((java.util.Collection)var18);
    net.sourceforge.schemaspy.view.WriteStats var21 = new net.sourceforge.schemaspy.view.WriteStats((java.util.Collection)var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "a"+ "'", var17.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test254() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test254");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    net.sourceforge.schemaspy.ui.DbConfigPanel var24 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var24.requestFocus();
    var24.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var28 = var24.insets();
    var24.setAlignmentX(1.0f);
    boolean var31 = var24.hasFocus();
    boolean var32 = var24.getFocusTraversalKeysEnabled();
    boolean var33 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var24);
    var24.firePropertyChange("hi!", 'a', 'a');
    net.sourceforge.schemaspy.ui.DbConfigPanel var38 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var39 = var38.isManagingFocus();
    int var40 = var38.getWidth();
    java.awt.Insets var41 = var38.insets();
    javax.accessibility.AccessibleContext var42 = var38.getAccessibleContext();
    boolean var45 = var38.inside(100, (-3));
    java.awt.Rectangle var46 = var38.getVisibleRect();
    var24.setBounds(var46);
    var0.setMaximizedBounds(var46);
    var0.reshape(5, 5, 300, 3);
    net.sourceforge.schemaspy.ui.MainFrame var54 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var55 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var56 = var55.getTableExclusions();
    boolean var57 = var55.isEvaluateAllEnabled();
    java.util.List var58 = var55.getColumnDetails();
    var54.setIconImages(var58);
    net.sourceforge.schemaspy.ui.DbConfigPanel var60 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var60.requestFocus();
    var60.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var64 = var60.insets();
    var60.setAlignmentX(1.0f);
    boolean var67 = var60.hasFocus();
    boolean var68 = var60.getFocusTraversalKeysEnabled();
    boolean var69 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var60);
    net.sourceforge.schemaspy.ui.DbConfigPanel var70 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var71 = var70.isManagingFocus();
    java.awt.Rectangle var72 = var70.getVisibleRect();
    java.awt.Rectangle var73 = var60.getBounds(var72);
    java.awt.Dimension var74 = var60.getPreferredSize();
    var54.setMinimumSize(var74);
    var54.toBack();
    boolean var77 = var54.requestFocusInWindow();
    var0.setLocationRelativeTo((java.awt.Component)var54);
    java.util.Locale var79 = var54.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test255() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test255");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var26 = var25.isManagingFocus();
    java.awt.Rectangle var27 = var25.getVisibleRect();
    var0.setBounds(var27);
    var0.removeAll();
    java.awt.Container var30 = var0.getContentPane();
    var0.toBack();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test256() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test256");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    boolean var25 = var0.isLocationByPlatform();
    net.sourceforge.schemaspy.ui.MainFrame var26 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var27 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var28 = var27.getTableExclusions();
    boolean var29 = var27.isEvaluateAllEnabled();
    java.util.List var30 = var27.getColumnDetails();
    var26.setIconImages(var30);
    boolean var32 = var26.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var33 = var26.getModalExclusionType();
    var0.setModalExclusionType(var33);
    var0.pack();
    java.awt.Color var36 = var0.getBackground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var37 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var38 = var37.isManagingFocus();
    int var39 = var37.getWidth();
    java.awt.Insets var40 = var37.insets();
    javax.accessibility.AccessibleContext var41 = var37.getAccessibleContext();
    boolean var44 = var37.inside(100, (-3));
    java.awt.Rectangle var45 = var37.getVisibleRect();
    java.awt.Point var46 = var37.getLocation();
    java.awt.Component var47 = var0.getComponentAt(var46);
    boolean var48 = var0.isFocusable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);

  }

  public void test257() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test257");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var26 = var25.isManagingFocus();
    java.awt.Rectangle var27 = var25.getVisibleRect();
    var0.setBounds(var27);
    var0.hide();
    java.util.List var30 = var0.getIconImages();
    boolean var31 = var0.isFocused();
    var0.toBack();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test258() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test258");


    net.sourceforge.schemaspy.util.CaseInsensitiveMap var1 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.List var2 = net.sourceforge.schemaspy.DbAnalyzer.getRailsConstraints((java.util.Map)var1);
    net.sourceforge.schemaspy.Config var3 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var4 = var3.getTableExclusions();
    boolean var5 = var3.isHtmlGenerationEnabled();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var7 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    var7.clear();
    var3.setDbSpecificOptions((java.util.Map)var7);
    java.lang.String var10 = var7.toString();
    var1.putAll((java.util.Map)var7);
    java.util.Set var12 = var1.entrySet();
    java.lang.Object var13 = var1.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "{}"+ "'", var10.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test259() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test259");


    net.sourceforge.schemaspy.view.StyleSheet.MissingCssPropertyException var2 = new net.sourceforge.schemaspy.view.StyleSheet.MissingCssPropertyException("javax.swing.JPanel[,0,0,0x0,invalid,layout=java.awt.GridBagLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", "[]");

  }

  public void test260() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test260");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    java.lang.Integer var2 = var0.getPort();
    boolean var3 = var0.isOneOfMultipleSchemas();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var4 = var0.getMaxDbThreads();
      fail("Expected exception of type net.sourceforge.schemaspy.model.InvalidConfigurationException");
    } catch (net.sourceforge.schemaspy.model.InvalidConfigurationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test261() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test261");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var1 = var0.isManagingFocus();
    int var2 = var0.getWidth();
    java.awt.Insets var3 = var0.insets();
    javax.accessibility.AccessibleContext var4 = var0.getAccessibleContext();
    boolean var7 = var0.inside(100, (-3));
    java.awt.Rectangle var8 = var0.getVisibleRect();
    java.awt.Point var9 = var0.getLocation();
    var0.requestFocus();
    var0.setSize(312, 23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test262() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test262");


    net.sourceforge.schemaspy.ui.DbTypeSelectorModel var1 = new net.sourceforge.schemaspy.ui.DbTypeSelectorModel("ISO-8859-1");
    int var2 = var1.getSize();
    java.lang.Object var3 = var1.getSelectedItem();
    net.sourceforge.schemaspy.ui.DbConfigPanel var4 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var4.requestFocus();
    var4.setFocusTraversalPolicyProvider(true);
    var4.firePropertyChange("a", (byte)10, (byte)0);
    java.awt.Insets var12 = var4.insets();
    var4.setAlignmentY(100.0f);
    var1.setSelectedItem((java.lang.Object)100.0f);
    javax.swing.event.ListDataListener[] var16 = var1.getListDataListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test263() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test263");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sourceforge.schemaspy.util.LineWriter var2 = new net.sourceforge.schemaspy.util.LineWriter("hi!s{hi!s}hi!s", ".hi!sdhi!sohi!sthi!s hi!svhi!sehi!srhi!sshi!sihi!sohi!snhi!s hi!s2hi!s.hi!s2hi!s.hi!s1hi!s hi!sohi!srhi!s hi!svhi!sehi!srhi!sshi!sihi!sohi!snhi!sshi!s hi!sghi!srhi!sehi!sahi!sthi!sehi!srhi!s hi!sthi!shhi!sahi!snhi!s hi!s2hi!s.hi!s4hi!s.hi!s{hi!s}hi!s.{}.");
      fail("Expected exception of type java.io.UnsupportedEncodingException");
    } catch (java.io.UnsupportedEncodingException e) {
      // Expected exception.
    }

  }

  public void test264() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test264");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var26 = var25.isManagingFocus();
    java.awt.Rectangle var27 = var25.getVisibleRect();
    var0.setBounds(var27);
    var0.hide();
    java.util.List var30 = var0.getIconImages();
    net.sourceforge.schemaspy.ui.DbConfigPanel var31 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var31.requestFocus();
    var31.setFocusTraversalPolicyProvider(true);
    boolean var35 = var31.requestFocusInWindow();
    java.awt.Dimension var36 = var31.getMaximumSize();
    var0.setSize(var36);
    javax.swing.JMenuBar var38 = var0.getJMenuBar();
    boolean var39 = var0.isPreferredSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test265() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test265");


    net.sourceforge.schemaspy.util.Dot var0 = net.sourceforge.schemaspy.util.Dot.getInstance();
    var0.setHighQuality(true);
    net.sourceforge.schemaspy.util.Dot.DotFailure var4 = var0.new DotFailure("hi!s");
    var0.setHighQuality(true);
    boolean var7 = var0.supportsCenteredEastWestEdges();
    var0.setFormat("hi!");
    java.lang.String var10 = var0.getSupportedVersions();
    java.lang.String var11 = var0.getRenderer();
    var0.setFormat("ISO-8859-1");
    var0.setFormat("Password associated with user id");
    boolean var16 = var0.isValid();
    java.lang.String var17 = var0.getSupportedVersions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "dot version 2.2.1 or versions greater than 2.4"+ "'", var10.equals("dot version 2.2.1 or versions greater than 2.4"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "dot version 2.2.1 or versions greater than 2.4"+ "'", var17.equals("dot version 2.2.1 or versions greater than 2.4"));

  }

  public void test266() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test266");


    java.lang.String[] var1 = new java.lang.String[] { "net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"};
    net.sourceforge.schemaspy.Config var2 = new net.sourceforge.schemaspy.Config(var1);
    java.lang.String var3 = var2.getRenderer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));

  }

  public void test267() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test267");


    net.sourceforge.schemaspy.MultipleSchemaAnalyzer var0 = net.sourceforge.schemaspy.MultipleSchemaAnalyzer.getInstance();
    net.sourceforge.schemaspy.model.Routine var11 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var12 = var11.getDataAccess();
    java.lang.String var13 = var11.getDefinitionLanguage();
    java.util.List var14 = var11.getParameters();
    java.util.List var15 = net.sourceforge.schemaspy.DbAnalyzer.sortColumnsByTable(var14);
    net.sourceforge.schemaspy.TableOrderer var16 = new net.sourceforge.schemaspy.TableOrderer();
    net.sourceforge.schemaspy.model.Routine var26 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var27 = var26.getDataAccess();
    java.lang.String var28 = var26.getDefinitionLanguage();
    java.util.List var29 = var26.getParameters();
    java.util.List var30 = net.sourceforge.schemaspy.DbAnalyzer.sortColumnsByTable(var29);
    net.sourceforge.schemaspy.model.Routine var40 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var41 = var40.getDataAccess();
    java.lang.String var42 = var40.getDefinitionLanguage();
    java.util.List var43 = var40.getParameters();
    java.util.List var44 = net.sourceforge.schemaspy.DbAnalyzer.sortColumnsByTable(var43);
    java.util.List var45 = var16.getTablesOrderedByRI((java.util.Collection)var29, (java.util.Collection)var43);
    net.sourceforge.schemaspy.Config var46 = new net.sourceforge.schemaspy.Config();
    boolean var47 = var46.isImpliedConstraintsEnabled();
    var46.setHasOrphans(false);
    java.lang.String var50 = var46.getSchemaSpec();
    boolean var51 = var46.isHighQuality();
    var46.setHasOrphans(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.analyze("hi!", var15, var45, var46);
      fail("Expected exception of type net.sourceforge.schemaspy.Config.MissingRequiredParameterException");
    } catch (net.sourceforge.schemaspy.Config.MissingRequiredParameterException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "a"+ "'", var13.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!"+ "'", var27.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "a"+ "'", var28.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi!"+ "'", var41.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "a"+ "'", var42.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test268() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test268");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.util.List var24 = var0.getIconImages();
    java.awt.Rectangle var25 = var0.getMaximizedBounds();
    java.util.List var26 = var0.getIconImages();
    java.awt.Component var29 = var0.locate((-3), 5);
    boolean var30 = var0.isValidateRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);

  }

  public void test269() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test269");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.hasOrphans();
    var0.setHtmlGenerationEnabled(true);
    var0.setEvaluateAllEnabled(false);
    var0.setConnectionProperties("{}s");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test270() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test270");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    java.awt.Toolkit var6 = var0.getToolkit();
    boolean var7 = var0.isFocused();
    boolean var8 = var0.isFocusCycleRoot();
    java.awt.im.InputContext var9 = var0.getInputContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test271() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test271");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    boolean var7 = var0.hasFocus();
    net.sourceforge.schemaspy.ui.DbConfigPanel var8 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var8.requestFocus();
    var8.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var12 = var8.insets();
    float var13 = var8.getAlignmentX();
    var8.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var19 = var8.getMouseListeners();
    boolean var20 = var0.isAncestorOf((java.awt.Component)var8);
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.event.ComponentListener[] var23 = var0.getComponentListeners();
    javax.swing.InputVerifier var24 = var0.getInputVerifier();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var25.requestFocus();
    var25.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var29 = var25.insets();
    var25.reshape(1, 1, 1, 100);
    net.sourceforge.schemaspy.ui.DbConfigPanel var35 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var35.requestFocus();
    var35.setFocusTraversalPolicyProvider(true);
    java.awt.Point var40 = var35.getMousePosition(true);
    java.awt.Component var41 = var35.getNextFocusableComponent();
    java.awt.Dimension var42 = var35.getMinimumSize();
    java.awt.Dimension var43 = var25.getSize(var42);
    boolean var44 = var25.getFocusTraversalKeysEnabled();
    var25.nextFocus();
    net.sourceforge.schemaspy.ui.DbConfigPanel var46 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var46.requestFocus();
    var46.setFocusTraversalPolicyProvider(true);
    var46.firePropertyChange("a", (byte)10, (byte)0);
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var56 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.Set var57 = var56.entrySet();
    var46.setFocusTraversalKeys(0, var57);
    java.util.List var59 = net.sourceforge.schemaspy.DbAnalyzer.getTablesWithOneColumn((java.util.Collection)var57);
    java.util.List var60 = net.sourceforge.schemaspy.DbAnalyzer.getOrphans((java.util.Collection)var59);
    var0.putClientProperty((java.lang.Object)var25, (java.lang.Object)var60);
    boolean var62 = var0.requestDefaultFocus();
    java.awt.Dimension var63 = var0.getMaximumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test272() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test272");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.requestFocus();
    net.sourceforge.schemaspy.ui.DbConfigPanel var6 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var6.requestFocus();
    java.awt.Component var8 = var6.getNextFocusableComponent();
    java.lang.String var9 = var6.toString();
    var0.setNextFocusableComponent((java.awt.Component)var6);
    java.awt.Dimension var11 = var6.getPreferredSize();
    boolean var12 = var6.getFocusTraversalKeysEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0var9,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var9.equals("net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0var9,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test273() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test273");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.firePropertyChange("hi!", 10, 2);
    var0.setVisible(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var13 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var13.requestFocus();
    var13.setFocusTraversalPolicyProvider(true);
    java.awt.Point var18 = var13.getMousePosition(true);
    java.awt.Component var19 = var13.getNextFocusableComponent();
    java.awt.Dimension var20 = var13.getMinimumSize();
    var0.setPreferredSize(var20);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var23 = var0.getFocusTraversalKeys(312);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test274() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test274");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.doLayout();
    boolean var8 = var0.isCursorSet();
    java.awt.event.HierarchyListener[] var9 = var0.getHierarchyListeners();
    var0.setFocusTraversalPolicyProvider(false);
    boolean var12 = var0.isBackgroundSet();
    net.sourceforge.schemaspy.ui.DbConfigPanel var13 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var13.enable();
    boolean var15 = var13.isBackgroundSet();
    var0.setComponentZOrder((java.awt.Component)var13, 0);
    java.lang.String var18 = var13.getUIClassID();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "PanelUI"+ "'", var18.equals("PanelUI"));

  }

  public void test275() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test275");


    net.sourceforge.schemaspy.ui.DbTypeSelectorModel var1 = new net.sourceforge.schemaspy.ui.DbTypeSelectorModel("ISO-8859-1");
    int var2 = var1.getSize();
    net.sourceforge.schemaspy.ui.DbConfigPanel var3 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var3.requestFocus();
    var3.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var7 = var3.insets();
    var3.setAlignmentX(1.0f);
    java.awt.Color var10 = var3.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var11 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var11.requestFocus();
    var11.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var15 = var11.insets();
    float var16 = var11.getAlignmentX();
    var11.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var22 = var11.getMouseListeners();
    java.awt.Rectangle var23 = var11.bounds();
    var3.setBounds(var23);
    var1.setSelectedItem((java.lang.Object)var3);
    net.sourceforge.schemaspy.ui.DbConfigPanel var26 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var27 = var26.isManagingFocus();
    java.awt.Rectangle var28 = var26.getVisibleRect();
    var3.computeVisibleRect(var28);
    int var30 = var3.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);

  }

  public void test276() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test276");


    net.sourceforge.schemaspy.util.LineWriter var3 = new net.sourceforge.schemaspy.util.LineWriter("Unknown", 100, "ISO-8859-1");
    var3.writeln();
    var3.writeln();
    var3.write(100);

  }

  public void test277() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test277");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.requestFocus();
    boolean var6 = var0.isVisible();
    java.awt.Dimension var7 = var0.preferredSize();
    var0.show();
    boolean var9 = var0.isManagingFocus();
    net.sourceforge.schemaspy.ui.DbConfigPanel var10 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var10.setFocusable(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var13 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var13.requestFocus();
    var13.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var17 = var13.insets();
    var13.setAlignmentX(1.0f);
    boolean var20 = var13.hasFocus();
    boolean var21 = var13.getFocusTraversalKeysEnabled();
    var13.setSize(1, (-1));
    java.lang.Object var25 = var10.getClientProperty((java.lang.Object)var13);
    var13.firePropertyChange("net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s", ' ', ' ');
    var13.repaint(1L);
    boolean var32 = var13.isFocusOwner();
    net.sourceforge.schemaspy.ui.DbConfigPanel var33 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var33.requestFocus();
    var33.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var37 = var33.insets();
    var33.setAlignmentX(1.0f);
    net.sourceforge.schemaspy.ui.DbConfigPanel var40 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var40.requestFocus();
    var40.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var44 = var40.insets();
    float var45 = var40.getAlignmentX();
    var40.setBounds(0, 1, 10, 100);
    java.awt.Rectangle var51 = var40.getBounds();
    java.awt.Rectangle var52 = var33.getBounds(var51);
    java.awt.Rectangle var53 = var13.getBounds(var51);
    var13.resize((-3), 100);
    net.sourceforge.schemaspy.ui.DbConfigPanel var57 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var57.requestFocus();
    var57.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var61 = var57.insets();
    var57.setAlignmentX(1.0f);
    boolean var64 = var57.hasFocus();
    net.sourceforge.schemaspy.ui.DbConfigPanel var65 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var65.requestFocus();
    var65.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var69 = var65.insets();
    float var70 = var65.getAlignmentX();
    var65.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var76 = var65.getMouseListeners();
    boolean var77 = var57.isAncestorOf((java.awt.Component)var65);
    net.sourceforge.schemaspy.ui.DbConfigPanel var78 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var78.requestFocus();
    java.beans.PropertyChangeListener[] var80 = var78.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var81 = var78.getBaselineResizeBehavior();
    net.sourceforge.schemaspy.ui.DbConfigPanel var82 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var82.requestFocus();
    var82.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var86 = var82.insets();
    var82.setAlignmentX(1.0f);
    var82.doLayout();
    boolean var90 = var82.isCursorSet();
    var82.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var95 = var82.getLocation();
    boolean var96 = var78.contains(var95);
    var57.setLocation(var95);
    java.awt.Point var98 = var13.getLocation(var95);
    java.awt.Point var99 = var0.getLocation(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test278() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test278");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    int var6 = var0.getExtendedState();
    var0.setFocusableWindowState(true);
    var0.setExtendedState(1);
    net.sourceforge.schemaspy.ui.MainFrame var11 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var12 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var13 = var12.getTableExclusions();
    boolean var14 = var12.isEvaluateAllEnabled();
    java.util.List var15 = var12.getColumnDetails();
    var11.setIconImages(var15);
    boolean var17 = var11.isAlwaysOnTop();
    var11.setFocusableWindowState(true);
    net.sourceforge.schemaspy.ui.DbConfigPanel var20 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var21 = var20.isManagingFocus();
    int var22 = var20.getWidth();
    javax.swing.InputVerifier var23 = var20.getInputVerifier();
    net.sourceforge.schemaspy.ui.DbConfigPanel var24 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var24.requestFocus();
    var24.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var28 = var24.insets();
    var24.requestFocus();
    boolean var30 = var24.isVisible();
    java.awt.Dimension var31 = var24.preferredSize();
    java.awt.Dimension var32 = var20.getSize(var31);
    var11.setSize(var31);
    var0.setSize(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test279() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test279");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    net.sourceforge.schemaspy.ui.DbConfigPanel var6 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var6.requestFocus();
    java.beans.PropertyChangeListener[] var8 = var6.getPropertyChangeListeners();
    var6.paintImmediately(0, (-1), (-1), 0);
    java.awt.event.KeyListener[] var14 = var6.getKeyListeners();
    net.sourceforge.schemaspy.ui.DbConfigPanel var15 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var15.requestFocus();
    var15.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var19 = var15.insets();
    var15.setAlignmentX(1.0f);
    java.awt.Color var22 = var15.getForeground();
    var6.setForeground(var22);
    var0.setBackground(var22);
    java.awt.image.BufferStrategy var25 = var0.getBufferStrategy();
    boolean var26 = var0.isUndecorated();
    var0.layout();
    java.awt.im.InputMethodRequests var28 = var0.getInputMethodRequests();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.show();
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test280() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test280");


    net.sourceforge.schemaspy.MultipleSchemaAnalyzer var0 = net.sourceforge.schemaspy.MultipleSchemaAnalyzer.getInstance();
    net.sourceforge.schemaspy.ui.DbConfigPanel var2 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var2.requestFocus();
    var2.setFocusTraversalPolicyProvider(true);
    var2.firePropertyChange("a", (byte)10, (byte)0);
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var12 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.Set var13 = var12.entrySet();
    var2.setFocusTraversalKeys(0, var13);
    java.util.List var15 = net.sourceforge.schemaspy.DbAnalyzer.getTablesWithOneColumn((java.util.Collection)var13);
    java.util.List var16 = net.sourceforge.schemaspy.DbAnalyzer.getOrphans((java.util.Collection)var15);
    java.util.List var17 = net.sourceforge.schemaspy.DbAnalyzer.getTablesWithOneColumn((java.util.Collection)var15);
    net.sourceforge.schemaspy.TableOrderer var18 = new net.sourceforge.schemaspy.TableOrderer();
    net.sourceforge.schemaspy.ui.MainFrame var19 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var20 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var20.requestFocus();
    var20.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var24 = var20.insets();
    var20.setAlignmentX(1.0f);
    java.awt.Color var27 = var20.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var28 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var28.requestFocus();
    var28.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var32 = var28.insets();
    float var33 = var28.getAlignmentX();
    var28.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var39 = var28.getMouseListeners();
    java.awt.Rectangle var40 = var28.bounds();
    var20.setBounds(var40);
    var19.setMaximizedBounds(var40);
    java.util.List var43 = var19.getIconImages();
    net.sourceforge.schemaspy.model.Routine var53 = new net.sourceforge.schemaspy.model.Routine("", "hi!", "a", "", "", false, "", "hi!", "");
    java.lang.String var54 = var53.getDefinition();
    net.sourceforge.schemaspy.model.Routine var64 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var65 = var64.getDataAccess();
    java.lang.String var66 = var64.getDefinitionLanguage();
    int var67 = var53.compareTo(var64);
    java.util.List var68 = var53.getParameters();
    java.util.List var69 = var18.getTablesOrderedByRI((java.util.Collection)var43, (java.util.Collection)var68);
    net.sourceforge.schemaspy.Config var70 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var71 = var70.getTableExclusions();
    boolean var72 = var70.isEvaluateAllEnabled();
    java.lang.String var74 = var70.getParam("hi!s");
    boolean var75 = var70.isEvaluateAllEnabled();
    java.io.File var76 = var70.getGraphvizDir();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.analyze("net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory).hi!. ", var15, var43, var70);
      fail("Expected exception of type net.sourceforge.schemaspy.Config.MissingRequiredParameterException");
    } catch (net.sourceforge.schemaspy.Config.MissingRequiredParameterException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + ""+ "'", var54.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "a"+ "'", var66.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);

  }

  public void test281() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test281");


    net.sourceforge.schemaspy.util.LineWriter var3 = new net.sourceforge.schemaspy.util.LineWriter("Unknown", 100, "ISO-8859-1");
    var3.newLine();
    java.io.Writer var6 = var3.append('a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test282() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test282");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    java.lang.String var5 = var0.getSchemaSpec();
    java.lang.String var6 = var0.getDb();
    var0.setEvaluateAllEnabled(false);
    var0.setPort((java.lang.Integer)300);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "a"+ "'", var6.equals("a"));

  }

  public void test283() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test283");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    boolean var7 = var0.hasFocus();
    var0.paintImmediately(10, 100, 2, 10);
    net.sourceforge.schemaspy.ui.DbConfigPanel var13 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var13.requestFocus();
    var13.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var17 = var13.insets();
    var13.setAlignmentX(1.0f);
    java.awt.Color var20 = var13.getForeground();
    javax.swing.InputVerifier var21 = var13.getInputVerifier();
    var13.repaint(100L, 10, 1, 0, 100);
    var13.setEnabled(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var30 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var30.requestFocus();
    java.beans.PropertyChangeListener[] var32 = var30.getPropertyChangeListeners();
    var30.paintImmediately(0, (-1), (-1), 0);
    java.awt.event.KeyListener[] var38 = var30.getKeyListeners();
    net.sourceforge.schemaspy.ui.DbConfigPanel var39 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var39.requestFocus();
    var39.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var43 = var39.insets();
    var39.setAlignmentX(1.0f);
    java.awt.Color var46 = var39.getForeground();
    var30.setForeground(var46);
    var13.setBackground(var46);
    var0.remove((java.awt.Component)var13);
    java.awt.event.FocusListener[] var50 = var13.getFocusListeners();
    boolean var51 = var13.isValidateRoot();
    java.awt.Component var53 = var13.getComponent(1);
    boolean var54 = var13.isValidateRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);

  }

  public void test284() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test284");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    javax.swing.event.AncestorListener[] var4 = var0.getAncestorListeners();
    var0.paintImmediately(1, 0, 0, (-1));
    int var10 = var0.getY();
    java.beans.VetoableChangeListener[] var11 = var0.getVetoableChangeListeners();
    net.sourceforge.schemaspy.ui.DbConfigPanel var13 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var13.requestFocus();
    var13.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var17 = var13.insets();
    var13.setAlignmentX(1.0f);
    boolean var20 = var13.hasFocus();
    boolean var21 = var13.getFocusTraversalKeysEnabled();
    boolean var22 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var13);
    var13.firePropertyChange("hi!", 'a', 'a');
    java.lang.String var27 = var13.getUIClassID();
    java.awt.Point var29 = var13.getMousePosition(false);
    var13.setEnabled(false);
    javax.swing.border.Border var32 = var13.getBorder();
    var13.enable(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var35 = var0.add("net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s", (java.awt.Component)var13);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "PanelUI"+ "'", var27.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);

  }

  public void test285() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test285");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Point var5 = var0.getMousePosition(true);
    java.awt.Component var6 = var0.getNextFocusableComponent();
    boolean var7 = var0.isBackgroundSet();
    var0.requestFocus();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.Rectangle var20 = var9.getBounds();
    var0.scrollRectToVisible(var20);
    net.sourceforge.schemaspy.ui.DbConfigPanel var22 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var22.requestFocus();
    java.beans.PropertyChangeListener[] var24 = var22.getPropertyChangeListeners();
    boolean var25 = var22.isPreferredSizeSet();
    int var26 = var22.getY();
    java.lang.Object var27 = var0.getClientProperty((java.lang.Object)var22);
    net.sourceforge.schemaspy.ui.MainFrame var28 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var29 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var29.requestFocus();
    var29.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var33 = var29.insets();
    var29.setAlignmentX(1.0f);
    java.awt.Color var36 = var29.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var37 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var37.requestFocus();
    var37.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var41 = var37.insets();
    float var42 = var37.getAlignmentX();
    var37.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var48 = var37.getMouseListeners();
    java.awt.Rectangle var49 = var37.bounds();
    var29.setBounds(var49);
    var28.setMaximizedBounds(var49);
    java.awt.Container var52 = var28.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var53 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var54 = var53.isManagingFocus();
    java.awt.Rectangle var55 = var53.getVisibleRect();
    var28.setBounds(var55);
    var28.addNotify();
    int var58 = var0.getComponentZOrder((java.awt.Component)var28);
    int var59 = var0.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);

  }

  public void test286() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test286");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.setFocusable(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var3 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var3.requestFocus();
    var3.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var7 = var3.insets();
    var3.setAlignmentX(1.0f);
    boolean var10 = var3.hasFocus();
    boolean var11 = var3.getFocusTraversalKeysEnabled();
    var3.setSize(1, (-1));
    java.lang.Object var15 = var0.getClientProperty((java.lang.Object)var3);
    var3.firePropertyChange("net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s", ' ', ' ');
    net.sourceforge.schemaspy.ui.DbConfigPanel var20 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var20.setFocusable(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var23 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var23.requestFocus();
    var23.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var27 = var23.insets();
    var23.setAlignmentX(1.0f);
    boolean var30 = var23.hasFocus();
    boolean var31 = var23.getFocusTraversalKeysEnabled();
    var23.setSize(1, (-1));
    java.lang.Object var35 = var20.getClientProperty((java.lang.Object)var23);
    net.sourceforge.schemaspy.ui.DbConfigPanel var36 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var36.requestFocus();
    var36.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var40 = var36.insets();
    var36.requestFocus();
    var36.setOpaque(false);
    var36.enableInputMethods(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var46 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var46.requestFocus();
    var46.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var50 = var46.insets();
    var46.setAlignmentX(1.0f);
    boolean var53 = var46.hasFocus();
    boolean var54 = var46.getFocusTraversalKeysEnabled();
    boolean var55 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var46);
    var46.firePropertyChange("hi!", 'a', 'a');
    net.sourceforge.schemaspy.ui.DbConfigPanel var60 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var61 = var60.isManagingFocus();
    int var62 = var60.getWidth();
    java.awt.Insets var63 = var60.insets();
    javax.accessibility.AccessibleContext var64 = var60.getAccessibleContext();
    boolean var67 = var60.inside(100, (-3));
    java.awt.Rectangle var68 = var60.getVisibleRect();
    var46.setBounds(var68);
    var36.paintImmediately(var68);
    java.awt.Rectangle var71 = var23.getBounds(var68);
    java.awt.Rectangle var72 = var3.getBounds(var68);
    var3.doLayout();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test287() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test287");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    boolean var2 = var0.isHtmlGenerationEnabled();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var4 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    var4.clear();
    var0.setDbSpecificOptions((java.util.Map)var4);
    boolean var7 = var0.isLogoEnabled();
    boolean var8 = var0.isHtmlGenerationEnabled();
    boolean var9 = var0.isEncodeCommentsEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test288() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test288");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    boolean var7 = var0.isOpaque();
    net.sourceforge.schemaspy.ui.MainFrame var8 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var9 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var10 = var9.getTableExclusions();
    boolean var11 = var9.isEvaluateAllEnabled();
    java.util.List var12 = var9.getColumnDetails();
    var8.setIconImages(var12);
    net.sourceforge.schemaspy.ui.DbConfigPanel var14 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var14.requestFocus();
    java.beans.PropertyChangeListener[] var16 = var14.getPropertyChangeListeners();
    var14.paintImmediately(0, (-1), (-1), 0);
    java.awt.event.KeyListener[] var22 = var14.getKeyListeners();
    net.sourceforge.schemaspy.ui.DbConfigPanel var23 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var23.requestFocus();
    var23.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var27 = var23.insets();
    var23.setAlignmentX(1.0f);
    java.awt.Color var30 = var23.getForeground();
    var14.setForeground(var30);
    var8.setBackground(var30);
    java.awt.Window.Type var33 = var8.getType();
    var0.setType(var33);
    net.sourceforge.schemaspy.ui.DbConfigPanel var35 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var35.requestFocus();
    var35.setFocusTraversalPolicyProvider(true);
    boolean var39 = var35.requestFocusInWindow();
    java.awt.Cursor var40 = var35.getCursor();
    var0.setCursor(var40);
    net.sourceforge.schemaspy.ui.DbConfigPanel var42 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var43 = var42.isManagingFocus();
    int var44 = var42.getWidth();
    java.awt.Point var45 = var42.getMousePosition();
    java.lang.Object var46 = var42.getTreeLock();
    var42.doLayout();
    java.awt.Toolkit var48 = var42.getToolkit();
    var0.setLocationRelativeTo((java.awt.Component)var42);
    boolean var50 = var0.isFocused();
    net.sourceforge.schemaspy.ui.DbConfigPanel var51 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var51.requestFocus();
    var51.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var55 = var51.insets();
    var51.setAlignmentX(1.0f);
    java.awt.Color var58 = var51.getForeground();
    javax.swing.InputVerifier var59 = var51.getInputVerifier();
    var51.repaint(100L, 10, 1, 0, 100);
    java.awt.Component.BaselineResizeBehavior var66 = var51.getBaselineResizeBehavior();
    javax.swing.TransferHandler var67 = var51.getTransferHandler();
    boolean var68 = var0.isAncestorOf((java.awt.Component)var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);

  }

  public void test289() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test289");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var7 = var0.getModalExclusionType();
    boolean var8 = var0.isAutoRequestFocus();
    java.awt.Toolkit var9 = var0.getToolkit();
    var0.hide();
    boolean var11 = var0.isAutoRequestFocus();
    boolean var12 = var0.isFocusCycleRoot();
    java.awt.Container var13 = var0.getContentPane();
    java.lang.String var14 = var13.toString();
    boolean var15 = var13.isFocusCycleRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "javax.swing.JPanel[,0,0,0var14,invalid,layout=java.awt.GridBagLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var14.equals("javax.swing.JPanel[,0,0,0var14,invalid,layout=java.awt.GridBagLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test290() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test290");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    java.awt.Color var7 = var0.getForeground();
    javax.swing.InputVerifier var8 = var0.getInputVerifier();
    var0.repaint(100L, 10, 1, 0, 100);
    var0.setEnabled(false);
    javax.swing.InputMap var17 = var0.getInputMap();
    var0.setIgnoreRepaint(false);
    java.awt.Graphics var20 = var0.getGraphics();
    var0.nextFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test291() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test291");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    net.sourceforge.schemaspy.ui.DbConfigPanel var6 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var6.requestFocus();
    java.beans.PropertyChangeListener[] var8 = var6.getPropertyChangeListeners();
    var6.paintImmediately(0, (-1), (-1), 0);
    java.awt.event.KeyListener[] var14 = var6.getKeyListeners();
    net.sourceforge.schemaspy.ui.DbConfigPanel var15 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var15.requestFocus();
    var15.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var19 = var15.insets();
    var15.setAlignmentX(1.0f);
    java.awt.Color var22 = var15.getForeground();
    var6.setForeground(var22);
    var0.setBackground(var22);
    java.awt.image.BufferStrategy var25 = var0.getBufferStrategy();
    boolean var26 = var0.isUndecorated();
    java.awt.MenuBar var27 = var0.getMenuBar();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test292() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test292");


    net.sourceforge.schemaspy.util.CaseInsensitiveMap var1 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.Set var2 = var1.entrySet();
    int var3 = var1.size();
    int var4 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test293() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test293");


    net.sourceforge.schemaspy.model.Routine var9 = new net.sourceforge.schemaspy.model.Routine("", "hi!", "a", "", "", false, "", "hi!", "");
    java.lang.String var10 = var9.getDefinition();
    java.lang.String var11 = var9.getDataAccess();
    boolean var12 = var9.isDeterministic();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + ""+ "'", var10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test294() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test294");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    boolean var25 = var0.isLocationByPlatform();
    java.awt.Dimension var26 = var0.getSize();
    net.sourceforge.schemaspy.model.Routine var36 = new net.sourceforge.schemaspy.model.Routine("", "hi!", "a", "", "", false, "", "hi!", "");
    java.lang.String var37 = var36.getDefinition();
    net.sourceforge.schemaspy.model.Routine var47 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var48 = var47.getDataAccess();
    java.lang.String var49 = var47.getDefinitionLanguage();
    int var50 = var36.compareTo(var47);
    java.util.List var51 = var36.getParameters();
    var0.setIconImages(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + ""+ "'", var37.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "hi!"+ "'", var48.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "a"+ "'", var49.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test295() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test295");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    net.sourceforge.schemaspy.ui.DbConfigPanel var6 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var6.requestFocus();
    var6.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var10 = var6.insets();
    var6.setAlignmentX(1.0f);
    boolean var13 = var6.hasFocus();
    boolean var14 = var6.getFocusTraversalKeysEnabled();
    boolean var15 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var6);
    net.sourceforge.schemaspy.ui.DbConfigPanel var16 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var17 = var16.isManagingFocus();
    java.awt.Rectangle var18 = var16.getVisibleRect();
    java.awt.Rectangle var19 = var6.getBounds(var18);
    java.awt.Dimension var20 = var6.getPreferredSize();
    var0.setMinimumSize(var20);
    javax.swing.TransferHandler var22 = var0.getTransferHandler();
    java.awt.event.WindowListener[] var23 = var0.getWindowListeners();
    boolean var24 = var0.isForegroundSet();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var25.requestFocus();
    var25.setFocusTraversalPolicyProvider(true);
    var25.firePropertyChange("a", (byte)10, (byte)0);
    java.awt.Insets var33 = var25.insets();
    var25.setAlignmentY(100.0f);
    java.lang.Object var36 = var25.getTreeLock();
    net.sourceforge.schemaspy.ui.MainFrame var37 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var38 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var38.requestFocus();
    var38.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var42 = var38.insets();
    var38.setAlignmentX(1.0f);
    java.awt.Color var45 = var38.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var46 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var46.requestFocus();
    var46.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var50 = var46.insets();
    float var51 = var46.getAlignmentX();
    var46.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var57 = var46.getMouseListeners();
    java.awt.Rectangle var58 = var46.bounds();
    var38.setBounds(var58);
    var37.setMaximizedBounds(var58);
    java.util.List var61 = var37.getIconImages();
    java.awt.Rectangle var62 = var37.getMaximizedBounds();
    java.awt.Rectangle var63 = var25.getBounds(var62);
    var0.setBounds(var63);
    boolean var65 = var0.isEnabled();
    java.awt.FocusTraversalPolicy var66 = var0.getFocusTraversalPolicy();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test296() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test296");


    net.sourceforge.schemaspy.view.StyleSheet.MissingCssPropertyException var5 = new net.sourceforge.schemaspy.view.StyleSheet.MissingCssPropertyException("", "hi!");
    net.sourceforge.schemaspy.model.ConnectionFailure var6 = new net.sourceforge.schemaspy.model.ConnectionFailure("", (java.lang.Throwable)var5);
    net.sourceforge.schemaspy.model.ConnectionFailure var7 = new net.sourceforge.schemaspy.model.ConnectionFailure("", (java.lang.Throwable)var5);
    net.sourceforge.schemaspy.model.ConnectionFailure var8 = new net.sourceforge.schemaspy.model.ConnectionFailure((java.lang.Throwable)var5);
    net.sourceforge.schemaspy.model.InvalidConfigurationException var9 = new net.sourceforge.schemaspy.model.InvalidConfigurationException("net.sourceforge.schemaspy.ui.MainFrame[frame1,0,23,500x312,invalid,hidden,layout=java.awt.BorderLayout,title=SchemaSpy,resizable,normal,defaultCloseOperation=HIDE_ON_CLOSE,rootPane=javax.swing.JRootPane[,0,0,0x0,invalid,layout=javax.swing.JRootPane$RootLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777673,maximumSize=,minimumSize=,preferredSize=],rootPaneCheckingEnabled=true]", (java.lang.Throwable)var5);

  }

  public void test297() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test297");


    net.sourceforge.schemaspy.model.InvalidConfigurationException var2 = new net.sourceforge.schemaspy.model.InvalidConfigurationException("net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)");
    net.sourceforge.schemaspy.model.ConnectionFailure var3 = new net.sourceforge.schemaspy.model.ConnectionFailure((java.lang.Throwable)var2);
    net.sourceforge.schemaspy.model.ConnectionFailure var4 = new net.sourceforge.schemaspy.model.ConnectionFailure("net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.lang.Throwable)var2);

  }

  public void test298() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test298");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    net.sourceforge.schemaspy.ui.DbConfigPanel var6 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var6.requestFocus();
    var6.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var10 = var6.insets();
    var6.setAlignmentX(1.0f);
    boolean var13 = var6.hasFocus();
    boolean var14 = var6.getFocusTraversalKeysEnabled();
    boolean var15 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var6);
    net.sourceforge.schemaspy.ui.DbConfigPanel var16 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var17 = var16.isManagingFocus();
    java.awt.Rectangle var18 = var16.getVisibleRect();
    java.awt.Rectangle var19 = var6.getBounds(var18);
    java.awt.Dimension var20 = var6.getPreferredSize();
    var0.setMinimumSize(var20);
    var0.toBack();
    net.sourceforge.schemaspy.ui.DbConfigPanel var23 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var23.requestFocus();
    var23.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var27 = var23.insets();
    float var28 = var23.getAlignmentX();
    boolean var31 = var23.contains(1, (-1));
    var23.setOpaque(false);
    boolean var34 = var23.getInheritsPopupMenu();
    var0.setGlassPane((java.awt.Component)var23);
    var0.setState((-1));
    java.awt.Window var38 = var0.getOwner();
    java.awt.event.WindowStateListener[] var39 = var0.getWindowStateListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test299() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test299");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.Map var1 = var0.getDbSpecificOptions();
    var0.setPort((java.lang.Integer)312);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test300() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test300");


    net.sourceforge.schemaspy.ui.DbConfigTableModel var0 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    int var2 = var0.findColumn("a");
    net.sourceforge.schemaspy.util.DbSpecificConfig var4 = new net.sourceforge.schemaspy.util.DbSpecificConfig("net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    var0.setDbSpecificConfig(var4);
    javax.swing.event.TableModelListener[] var6 = var0.getTableModelListeners();
    int var7 = var0.getRowCount();
    int var9 = var0.findColumn("a");
    int var11 = var0.findColumn("[]");
    net.sourceforge.schemaspy.ui.DbConfigPanel var12 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var12.requestFocus();
    var12.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var16 = var12.insets();
    java.lang.Object var17 = var12.getTreeLock();
    var12.validate();
    boolean var19 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var12);
    net.sourceforge.schemaspy.ui.DbConfigPanel var20 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var20.requestFocus();
    var20.setFocusTraversalPolicyProvider(true);
    boolean var24 = var20.requestFocusInWindow();
    java.awt.Cursor var25 = var20.getCursor();
    net.sourceforge.schemaspy.ui.DbConfigPanel var26 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var26.requestFocus();
    var26.setFocusTraversalPolicyProvider(true);
    java.awt.Point var31 = var26.getMousePosition(true);
    int var32 = var26.getComponentCount();
    int var33 = var26.getHeight();
    var26.setName("hi!s");
    net.sourceforge.schemaspy.ui.DbConfigPanel var36 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var36.requestFocus();
    var36.setFocusTraversalPolicyProvider(true);
    java.awt.Point var41 = var36.getMousePosition(true);
    java.awt.Component var42 = var36.getNextFocusableComponent();
    java.awt.Dimension var43 = var36.getMinimumSize();
    var26.setSize(var43);
    var20.setPreferredSize(var43);
    java.awt.Dimension var46 = var12.getSize(var43);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setValueAt((java.lang.Object)var43, 300, 312);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test301() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test301");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    java.lang.String var5 = var0.getSchemaSpec();
    java.lang.String var6 = var0.getDb();
    var0.setFontSize(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "a"+ "'", var6.equals("a"));

  }

  public void test302() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test302");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    boolean var5 = var0.isMeterEnabled();
    java.lang.String var7 = var0.getParam("a");
    var0.setRankDirBugEnabled(false);
    var0.setPromptForPasswordEnabled(true);
    java.lang.String var12 = var0.getCharset();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.io.File var13 = var0.getOutputDir();
      fail("Expected exception of type net.sourceforge.schemaspy.Config.MissingRequiredParameterException");
    } catch (net.sourceforge.schemaspy.Config.MissingRequiredParameterException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "ISO-8859-1"+ "'", var12.equals("ISO-8859-1"));

  }

  public void test303() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test303");


    net.sourceforge.schemaspy.ui.DbTypeSelectorModel var1 = new net.sourceforge.schemaspy.ui.DbTypeSelectorModel("ISO-8859-1");
    int var2 = var1.getSize();
    javax.swing.event.ListDataListener[] var3 = var1.getListDataListeners();
    javax.swing.event.ListDataListener[] var4 = var1.getListDataListeners();
    javax.swing.event.ListDataListener[] var5 = var1.getListDataListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test304() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test304");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var1 = var0.isManagingFocus();
    int var2 = var0.getWidth();
    java.awt.Insets var3 = var0.insets();
    javax.accessibility.AccessibleContext var4 = var0.getAccessibleContext();
    boolean var7 = var0.inside(100, (-3));
    java.awt.Insets var8 = var0.insets();
    var0.firePropertyChange("[]", (byte)100, (byte)(-1));
    boolean var13 = var0.isEnabled();
    float var14 = var0.getAlignmentY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);

  }

  public void test305() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test305");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    var0.setFocusableWindowState(true);
    boolean var9 = var0.isFocusCycleRoot();
    java.awt.Graphics var10 = var0.getGraphics();
    boolean var11 = var0.isFocusCycleRoot();
    int var12 = var0.getState();
    var0.addNotify();
    var0.setAlwaysOnTop(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);

  }

  public void test306() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test306");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isDbHelpRequired();
    var0.setCharset("dot version 2.2.1 or versions greater than 2.4");
    java.util.regex.Pattern var7 = var0.getIndirectColumnExclusions();
    boolean var8 = var0.isNumRowsEnabled();
    int var9 = var0.getFontSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 11);

  }

  public void test307() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test307");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isDbHelpRequired();
    var0.setCharset("dot version 2.2.1 or versions greater than 2.4");
    var0.setGraphvizDir("DbSpecificOption name: 'net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s' value: 'null' description: 'a'");
    boolean var9 = var0.isMeterEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test308() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test308");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    boolean var1 = var0.isImpliedConstraintsEnabled();
    var0.setHasOrphans(false);
    java.lang.String var4 = var0.getSchemaSpec();
    java.util.regex.Pattern var5 = var0.getIndirectColumnExclusions();
    java.lang.String var6 = var0.getCharset();
    java.lang.String var7 = var0.getHost();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ISO-8859-1"+ "'", var6.equals("ISO-8859-1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test309() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test309");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    boolean var7 = var0.hasFocus();
    boolean var8 = var0.getFocusTraversalKeysEnabled();
    boolean var9 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var0);
    net.sourceforge.schemaspy.ui.DbConfigPanel var10 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var10.requestFocus();
    var10.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var14 = var10.insets();
    float var15 = var10.getAlignmentX();
    var10.setBounds(0, 1, 10, 100);
    java.awt.Rectangle var21 = var10.getBounds();
    var0.scrollRectToVisible(var21);
    java.beans.PropertyChangeListener[] var24 = var0.getPropertyChangeListeners("Helvetica");
    var0.layout();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test310() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test310");


    net.sourceforge.schemaspy.model.Routine var9 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var10 = var9.getDataAccess();
    net.sourceforge.schemaspy.model.RoutineParameter var14 = new net.sourceforge.schemaspy.model.RoutineParameter("/Users/Jesh/Documents/School/Summer 2015/Independent Study/Eclipse/workspace/36_schemaspy/bin", "DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'", "DbSpecificOption name: 'net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s' value: 'null' description: 'a'");
    java.lang.String var15 = var14.getMode();
    var9.addParameter(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "DbSpecificOption name: 'net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0var15,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s' value: 'null' description: 'a'"+ "'", var15.equals("DbSpecificOption name: 'net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0var15,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s' value: 'null' description: 'a'"));

  }

  public void test311() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test311");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    boolean var7 = var0.hasFocus();
    boolean var8 = var0.getFocusTraversalKeysEnabled();
    boolean var9 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var0);
    var0.firePropertyChange("hi!", 'a', 'a');
    java.lang.String var14 = var0.getUIClassID();
    java.awt.Point var16 = var0.getMousePosition(false);
    java.awt.Point var17 = var0.location();
    net.sourceforge.schemaspy.ui.DbConfigPanel var18 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var18.requestFocus();
    var18.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var22 = var18.insets();
    var18.setAlignmentX(1.0f);
    boolean var25 = var18.hasFocus();
    boolean var26 = var18.getFocusTraversalKeysEnabled();
    boolean var27 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var18);
    net.sourceforge.schemaspy.ui.DbConfigPanel var28 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var29 = var28.isManagingFocus();
    java.awt.Rectangle var30 = var28.getVisibleRect();
    java.awt.Rectangle var31 = var18.getBounds(var30);
    var0.repaint(var30);
    var0.show();
    net.sourceforge.schemaspy.ui.DbConfigPanel var35 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var35.requestFocus();
    var35.setFocusTraversalPolicyProvider(true);
    var35.firePropertyChange("a", (byte)10, (byte)0);
    java.awt.Insets var43 = var35.insets();
    var35.setAlignmentY(100.0f);
    java.lang.Object var46 = var35.getTreeLock();
    net.sourceforge.schemaspy.ui.MainFrame var47 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var48 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var48.requestFocus();
    var48.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var52 = var48.insets();
    var48.setAlignmentX(1.0f);
    java.awt.Color var55 = var48.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var56 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var56.requestFocus();
    var56.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var60 = var56.insets();
    float var61 = var56.getAlignmentX();
    var56.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var67 = var56.getMouseListeners();
    java.awt.Rectangle var68 = var56.bounds();
    var48.setBounds(var68);
    var47.setMaximizedBounds(var68);
    java.util.List var71 = var47.getIconImages();
    java.awt.Rectangle var72 = var47.getMaximizedBounds();
    java.awt.Rectangle var73 = var35.getBounds(var72);
    javax.swing.InputMap var74 = var35.getInputMap();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setInputMap(431, var74);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test312() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test312");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Point var5 = var0.getMousePosition(true);
    int var6 = var0.getComponentCount();
    boolean var7 = var0.getVerifyInputWhenFocusTarget();
    net.sourceforge.schemaspy.ui.DbConfigPanel var8 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var8.requestFocus();
    var8.setFocusTraversalPolicyProvider(true);
    java.util.Locale var12 = javax.swing.JComponent.getDefaultLocale();
    var8.setLocale(var12);
    var0.setLocale(var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var15 = var0.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test313() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test313");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    boolean var7 = var0.hasFocus();
    boolean var8 = var0.getFocusTraversalKeysEnabled();
    boolean var9 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var0);
    var0.firePropertyChange("hi!", 'a', 'a');
    javax.swing.event.AncestorListener[] var14 = var0.getAncestorListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test314() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test314");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var7 = var0.getModalExclusionType();
    net.sourceforge.schemaspy.ui.DbConfigPanel var8 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var8.requestFocus();
    var8.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var12 = var8.insets();
    var8.setAlignmentX(1.0f);
    boolean var15 = var8.hasFocus();
    boolean var16 = var8.getFocusTraversalKeysEnabled();
    boolean var17 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var8);
    net.sourceforge.schemaspy.ui.DbConfigPanel var18 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var19 = var18.isManagingFocus();
    java.awt.Rectangle var20 = var18.getVisibleRect();
    java.awt.Rectangle var21 = var8.getBounds(var20);
    java.awt.Dimension var22 = var8.getPreferredSize();
    var0.setSize(var22);
    java.awt.im.InputContext var24 = var0.getInputContext();
    float var25 = var0.getOpacity();
    java.util.Locale var26 = var0.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test315() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test315");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.requestFocus();
    boolean var6 = var0.isVisible();
    java.awt.Dimension var7 = var0.preferredSize();
    var0.show();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    var9.setAlignmentX(1.0f);
    java.awt.Color var16 = var9.getForeground();
    int var17 = var9.getWidth();
    java.awt.Rectangle var18 = var9.getBounds();
    java.awt.Rectangle var19 = var0.getBounds(var18);
    java.lang.Object var20 = var0.getTreeLock();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test316() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test316");


    net.sourceforge.schemaspy.util.LineWriter var3 = new net.sourceforge.schemaspy.util.LineWriter("Unknown", 100, "ISO-8859-1");
    var3.writeln();
    var3.flush();
    var3.newLine();

  }

  public void test317() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test317");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    boolean var2 = var0.isEvaluateAllEnabled();
    java.lang.String var4 = var0.getParam("hi!s");
    boolean var5 = var0.isSchemaDisabled();
    var0.setPort((java.lang.Integer)100);
    var0.setHost("Password associated with user id");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test318() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test318");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    javax.swing.event.AncestorListener[] var4 = var0.getAncestorListeners();
    var0.paintImmediately(1, 0, 0, (-1));
    java.awt.Dimension var10 = var0.size();
    float var11 = var0.getAlignmentY();
    var0.paintImmediately(100, 3, (-3), 10);
    var0.firePropertyChange("hi!s", 1L, 10L);
    var0.setEnabled(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);

  }

  public void test319() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test319");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var7 = var0.getModalExclusionType();
    boolean var8 = var0.isAutoRequestFocus();
    java.awt.Toolkit var9 = var0.getToolkit();
    var0.hide();
    net.sourceforge.schemaspy.ui.DbConfigPanel var11 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var11.requestFocus();
    java.beans.PropertyChangeListener[] var13 = var11.getPropertyChangeListeners();
    var11.paintImmediately(0, (-1), (-1), 0);
    java.awt.event.KeyListener[] var19 = var11.getKeyListeners();
    var11.setLocation(100, (-1));
    net.sourceforge.schemaspy.ui.MainFrame var23 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var24 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var24.requestFocus();
    var24.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var28 = var24.insets();
    var24.setAlignmentX(1.0f);
    java.awt.Color var31 = var24.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var32 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var32.requestFocus();
    var32.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var36 = var32.insets();
    float var37 = var32.getAlignmentX();
    var32.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var43 = var32.getMouseListeners();
    java.awt.Rectangle var44 = var32.bounds();
    var24.setBounds(var44);
    var23.setMaximizedBounds(var44);
    net.sourceforge.schemaspy.ui.DbConfigPanel var47 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var47.requestFocus();
    var47.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var51 = var47.insets();
    var47.setAlignmentX(1.0f);
    boolean var54 = var47.hasFocus();
    boolean var55 = var47.getFocusTraversalKeysEnabled();
    boolean var56 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var47);
    var47.firePropertyChange("hi!", 'a', 'a');
    net.sourceforge.schemaspy.ui.DbConfigPanel var61 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var62 = var61.isManagingFocus();
    int var63 = var61.getWidth();
    java.awt.Insets var64 = var61.insets();
    javax.accessibility.AccessibleContext var65 = var61.getAccessibleContext();
    boolean var68 = var61.inside(100, (-3));
    java.awt.Rectangle var69 = var61.getVisibleRect();
    var47.setBounds(var69);
    var23.setMaximizedBounds(var69);
    java.awt.Rectangle var72 = var11.getBounds(var69);
    var0.setMaximizedBounds(var72);
    var0.setAlwaysOnTop(true);
    java.awt.Component var78 = var0.getComponentAt(100, 312);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);

  }

  public void test320() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test320");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    boolean var1 = var0.isImpliedConstraintsEnabled();
    var0.setRenderer("{}s");
    var0.setTableExclusions("net.sourceforge.schemaspy.ui.MainFrame[frame0,0,23,500x431,invalid,hidden,layout=java.awt.BorderLayout,title=SchemaSpy,resizable,normal,defaultCloseOperation=HIDE_ON_CLOSE,rootPane=javax.swing.JRootPane[,0,0,0x0,invalid,layout=javax.swing.JRootPane$RootLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777673,maximumSize=,minimumSize=,preferredSize=],rootPaneCheckingEnabled=true]");
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var7 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.List var8 = net.sourceforge.schemaspy.DbAnalyzer.getRailsConstraints((java.util.Map)var7);
    net.sourceforge.schemaspy.Config var9 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var10 = var9.getTableExclusions();
    boolean var11 = var9.isHtmlGenerationEnabled();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var13 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    var13.clear();
    var9.setDbSpecificOptions((java.util.Map)var13);
    java.lang.String var16 = var13.toString();
    var7.putAll((java.util.Map)var13);
    var0.setDbSpecificOptions((java.util.Map)var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "{}"+ "'", var16.equals("{}"));

  }

  public void test321() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test321");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    java.lang.String var5 = var0.getSchemaSpec();
    var0.setViewsEnabled(false);
    var0.setTableInclusions("");
    var0.setSchema("{}s");
    boolean var12 = var0.isDbHelpRequired();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test322() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test322");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    boolean var7 = var0.hasFocus();
    boolean var8 = var0.getFocusTraversalKeysEnabled();
    var0.setSize(1, (-1));
    java.awt.image.VolatileImage var14 = var0.createVolatileImage(1, (-3));
    java.awt.Graphics var15 = var0.getGraphics();
    var0.firePropertyChange("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'", false, true);
    boolean var20 = var0.isFocusCycleRoot();
    net.sourceforge.schemaspy.ui.MainFrame var21 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var22 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var22.requestFocus();
    var22.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var26 = var22.insets();
    var22.setAlignmentX(1.0f);
    java.awt.Color var29 = var22.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var30 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var30.requestFocus();
    var30.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var34 = var30.insets();
    float var35 = var30.getAlignmentX();
    var30.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var41 = var30.getMouseListeners();
    java.awt.Rectangle var42 = var30.bounds();
    var22.setBounds(var42);
    var21.setMaximizedBounds(var42);
    net.sourceforge.schemaspy.ui.DbConfigPanel var45 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var45.requestFocus();
    var45.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var49 = var45.insets();
    var45.setAlignmentX(1.0f);
    boolean var52 = var45.hasFocus();
    boolean var53 = var45.getFocusTraversalKeysEnabled();
    boolean var54 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var45);
    var45.firePropertyChange("hi!", 'a', 'a');
    net.sourceforge.schemaspy.ui.DbConfigPanel var59 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var60 = var59.isManagingFocus();
    int var61 = var59.getWidth();
    java.awt.Insets var62 = var59.insets();
    javax.accessibility.AccessibleContext var63 = var59.getAccessibleContext();
    boolean var66 = var59.inside(100, (-3));
    java.awt.Rectangle var67 = var59.getVisibleRect();
    var45.setBounds(var67);
    var21.setMaximizedBounds(var67);
    java.awt.Rectangle var70 = var0.getBounds(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test323() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test323");


    net.sourceforge.schemaspy.util.Version var1 = new net.sourceforge.schemaspy.util.Version("");
    net.sourceforge.schemaspy.util.DbSpecificOption var4 = new net.sourceforge.schemaspy.util.DbSpecificOption("", "ISO-8859-1");
    java.lang.String var5 = var4.toString();
    net.sourceforge.schemaspy.Config var6 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var7 = var6.getTableExclusions();
    boolean var8 = var6.isEvaluateAllEnabled();
    java.lang.String var10 = var6.getParam("hi!s");
    var4.setValue((java.lang.Object)"hi!s");
    boolean var12 = var1.equals((java.lang.Object)"hi!s");
    net.sourceforge.schemaspy.util.Version var14 = new net.sourceforge.schemaspy.util.Version("");
    net.sourceforge.schemaspy.util.DbSpecificOption var17 = new net.sourceforge.schemaspy.util.DbSpecificOption("", "ISO-8859-1");
    java.lang.String var18 = var17.toString();
    net.sourceforge.schemaspy.Config var19 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var20 = var19.getTableExclusions();
    boolean var21 = var19.isEvaluateAllEnabled();
    java.lang.String var23 = var19.getParam("hi!s");
    var17.setValue((java.lang.Object)"hi!s");
    boolean var25 = var14.equals((java.lang.Object)"hi!s");
    net.sourceforge.schemaspy.util.Version var27 = new net.sourceforge.schemaspy.util.Version("");
    net.sourceforge.schemaspy.util.Version var29 = new net.sourceforge.schemaspy.util.Version("");
    int var30 = var27.compareTo(var29);
    net.sourceforge.schemaspy.util.Version var32 = new net.sourceforge.schemaspy.util.Version("");
    int var33 = var27.compareTo(var32);
    int var34 = var14.compareTo(var27);
    int var35 = var1.compareTo(var14);
    java.lang.String var36 = var14.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"+ "'", var5.equals("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"+ "'", var18.equals("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + ""+ "'", var36.equals(""));

  }

  public void test324() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test324");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.requestFocus();
    boolean var6 = var0.isVisible();
    java.awt.Graphics var7 = var0.getGraphics();
    net.sourceforge.schemaspy.ui.DbConfigPanel var8 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var8.requestFocus();
    var8.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var12 = var8.insets();
    var8.setAlignmentX(1.0f);
    boolean var15 = var8.hasFocus();
    var8.paintImmediately(10, 100, 2, 10);
    net.sourceforge.schemaspy.ui.DbConfigPanel var21 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var21.requestFocus();
    var21.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var25 = var21.insets();
    var21.setAlignmentX(1.0f);
    java.awt.Color var28 = var21.getForeground();
    javax.swing.InputVerifier var29 = var21.getInputVerifier();
    var21.repaint(100L, 10, 1, 0, 100);
    var21.setEnabled(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var38 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var38.requestFocus();
    java.beans.PropertyChangeListener[] var40 = var38.getPropertyChangeListeners();
    var38.paintImmediately(0, (-1), (-1), 0);
    java.awt.event.KeyListener[] var46 = var38.getKeyListeners();
    net.sourceforge.schemaspy.ui.DbConfigPanel var47 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var47.requestFocus();
    var47.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var51 = var47.insets();
    var47.setAlignmentX(1.0f);
    java.awt.Color var54 = var47.getForeground();
    var38.setForeground(var54);
    var21.setBackground(var54);
    var8.remove((java.awt.Component)var21);
    java.awt.Dimension var58 = var8.getMinimumSize();
    var0.setPreferredSize(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test325() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test325");


    net.sourceforge.schemaspy.util.Dot var0 = net.sourceforge.schemaspy.util.Dot.getInstance();
    var0.setHighQuality(true);
    net.sourceforge.schemaspy.util.Dot.DotFailure var4 = var0.new DotFailure("hi!s");
    var0.setFormat(".hi!sdhi!sohi!sthi!s hi!svhi!sehi!srhi!sshi!sihi!sohi!snhi!s hi!s2hi!s.hi!s2hi!s.hi!s1hi!s hi!sohi!srhi!s hi!svhi!sehi!srhi!sshi!sihi!sohi!snhi!sshi!s hi!sghi!srhi!sehi!sahi!sthi!sehi!srhi!s hi!sthi!shhi!sahi!snhi!s hi!s2hi!s.hi!s4hi!s.hi!s{hi!s}hi!s");
    boolean var7 = var0.isValid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test326() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test326");


    java.lang.String var1 = net.sourceforge.schemaspy.util.Inflection.pluralize(".hi!sdhi!sohi!sthi!s hi!svhi!sehi!srhi!sshi!sihi!sohi!snhi!s hi!s2hi!s.hi!s2hi!s.hi!s1hi!s hi!sohi!srhi!s hi!svhi!sehi!srhi!sshi!sihi!sohi!snhi!sshi!s hi!sghi!srhi!sehi!sahi!sthi!sehi!srhi!s hi!sthi!shhi!sahi!snhi!s hi!s2hi!s.hi!s4hi!s.hi!s{hi!s}hi!s");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ".hi!sdhi!sohi!sthi!s hi!svhi!sehi!srhi!sshi!sihi!sohi!snhi!s hi!s2hi!s.hi!s2hi!s.hi!s1hi!s hi!sohi!srhi!s hi!svhi!sehi!srhi!sshi!sihi!sohi!snhi!sshi!s hi!sghi!srhi!sehi!sahi!sthi!sehi!srhi!s hi!sthi!shhi!sahi!snhi!s hi!s2hi!s.hi!s4hi!s.hi!s{hi!s}hi!s"+ "'", var1.equals(".hi!sdhi!sohi!sthi!s hi!svhi!sehi!srhi!sshi!sihi!sohi!snhi!s hi!s2hi!s.hi!s2hi!s.hi!s1hi!s hi!sohi!srhi!s hi!svhi!sehi!srhi!sshi!sihi!sohi!snhi!sshi!s hi!sghi!srhi!sehi!sahi!sthi!sehi!srhi!s hi!sthi!shhi!sahi!snhi!s hi!s2hi!s.hi!s4hi!s.hi!s{hi!s}hi!s"));

  }

  public void test327() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test327");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.requestFocus();
    boolean var6 = var0.isVisible();
    java.awt.Dimension var7 = var0.preferredSize();
    java.awt.Cursor var8 = var0.getCursor();
    var0.setVerifyInputWhenFocusTarget(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test328() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test328");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    var0.setFocusableWindowState(true);
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    boolean var17 = var9.contains(1, (-1));
    var9.transferFocus();
    var9.removeAll();
    java.awt.Component var21 = var0.add((java.awt.Component)var9, 0);
    java.awt.dnd.DropTarget var22 = var0.getDropTarget();
    var0.setState((-3));
    var0.requestFocus();
    var0.setExtendedState(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test329() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test329");


    java.lang.String[] var1 = new java.lang.String[] { "net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"};
    net.sourceforge.schemaspy.Config var2 = new net.sourceforge.schemaspy.Config(var1);
    net.sourceforge.schemaspy.Config var3 = new net.sourceforge.schemaspy.Config(var1);
    net.sourceforge.schemaspy.Config var4 = new net.sourceforge.schemaspy.Config(var1);
    net.sourceforge.schemaspy.Config var5 = new net.sourceforge.schemaspy.Config(var1);
    net.sourceforge.schemaspy.Config var6 = new net.sourceforge.schemaspy.Config(var1);
    var6.setDescription("net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test330() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test330");


    net.sourceforge.schemaspy.util.CaseInsensitiveMap var1 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.Set var2 = var1.entrySet();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var4 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.List var5 = net.sourceforge.schemaspy.DbAnalyzer.getRailsConstraints((java.util.Map)var4);
    net.sourceforge.schemaspy.Config var6 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var7 = var6.getTableExclusions();
    boolean var8 = var6.isHtmlGenerationEnabled();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var10 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    var10.clear();
    var6.setDbSpecificOptions((java.util.Map)var10);
    java.lang.String var13 = var10.toString();
    var4.putAll((java.util.Map)var10);
    var1.putAll((java.util.Map)var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var17 = var10.containsKey((java.lang.Object)0);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "{}"+ "'", var13.equals("{}"));

  }

  public void test331() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test331");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    java.awt.event.MouseMotionListener[] var1 = var0.getMouseMotionListeners();
    java.util.Locale var2 = var0.getLocale();
    java.awt.Dimension var3 = var0.getSize();
    java.awt.Window.Type var4 = var0.getType();
    java.awt.Image var5 = var0.getIconImage();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test332() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test332");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    javax.swing.event.AncestorListener[] var4 = var0.getAncestorListeners();
    var0.paintImmediately(1, 0, 0, (-1));
    java.awt.ComponentOrientation var10 = var0.getComponentOrientation();
    java.lang.String var11 = var0.getName();
    var0.enable(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test333() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test333");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    net.sourceforge.schemaspy.ui.DbConfigPanel var6 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var6.requestFocus();
    var6.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var10 = var6.insets();
    var6.setAlignmentX(1.0f);
    boolean var13 = var6.hasFocus();
    boolean var14 = var6.getFocusTraversalKeysEnabled();
    boolean var15 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var6);
    net.sourceforge.schemaspy.ui.DbConfigPanel var16 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var17 = var16.isManagingFocus();
    java.awt.Rectangle var18 = var16.getVisibleRect();
    java.awt.Rectangle var19 = var6.getBounds(var18);
    java.awt.Dimension var20 = var6.getPreferredSize();
    var0.setMinimumSize(var20);
    javax.swing.TransferHandler var22 = var0.getTransferHandler();
    java.awt.event.WindowListener[] var23 = var0.getWindowListeners();
    boolean var24 = var0.isForegroundSet();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var25.requestFocus();
    var25.setFocusTraversalPolicyProvider(true);
    var25.firePropertyChange("a", (byte)10, (byte)0);
    java.awt.Insets var33 = var25.insets();
    var25.setAlignmentY(100.0f);
    java.lang.Object var36 = var25.getTreeLock();
    net.sourceforge.schemaspy.ui.MainFrame var37 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var38 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var38.requestFocus();
    var38.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var42 = var38.insets();
    var38.setAlignmentX(1.0f);
    java.awt.Color var45 = var38.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var46 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var46.requestFocus();
    var46.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var50 = var46.insets();
    float var51 = var46.getAlignmentX();
    var46.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var57 = var46.getMouseListeners();
    java.awt.Rectangle var58 = var46.bounds();
    var38.setBounds(var58);
    var37.setMaximizedBounds(var58);
    java.util.List var61 = var37.getIconImages();
    java.awt.Rectangle var62 = var37.getMaximizedBounds();
    java.awt.Rectangle var63 = var25.getBounds(var62);
    var0.setBounds(var63);
    boolean var65 = var0.isEnabled();
    boolean var66 = var0.isActive();
    java.awt.Container var67 = var0.getContentPane();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test334() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test334");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.requestFocus();
    var0.setOpaque(false);
    var0.enableInputMethods(false);
    var0.setBounds((-3), 5, 1, 0);
    var0.hide();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test335() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test335");


    net.sourceforge.schemaspy.TableOrderer var0 = new net.sourceforge.schemaspy.TableOrderer();
    net.sourceforge.schemaspy.model.Routine var10 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var11 = var10.getDataAccess();
    java.util.List var12 = var10.getParameters();
    net.sourceforge.schemaspy.view.WriteStats var13 = new net.sourceforge.schemaspy.view.WriteStats((java.util.Collection)var12);
    java.util.List var14 = net.sourceforge.schemaspy.DbAnalyzer.getMustBeUniqueNullableColumns((java.util.Collection)var12);
    java.lang.String var15 = net.sourceforge.schemaspy.model.ForeignKeyConstraint.toString(var14);
    net.sourceforge.schemaspy.view.WriteStats var16 = new net.sourceforge.schemaspy.view.WriteStats((java.util.Collection)var14);
    java.util.List var17 = net.sourceforge.schemaspy.DbAnalyzer.sortTablesByName(var14);
    net.sourceforge.schemaspy.model.Routine var27 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var28 = var27.getDataAccess();
    java.util.List var29 = var27.getParameters();
    java.util.List var30 = var0.getTablesOrderedByRI((java.util.Collection)var17, (java.util.Collection)var29);
    java.util.List var31 = net.sourceforge.schemaspy.DbAnalyzer.getTablesWithOneColumn((java.util.Collection)var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "[]"+ "'", var15.equals("[]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi!"+ "'", var28.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test336() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test336");


    net.sourceforge.schemaspy.ui.DbConfigTableModel var0 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    int var2 = var0.findColumn("a");
    net.sourceforge.schemaspy.util.DbSpecificConfig var4 = new net.sourceforge.schemaspy.util.DbSpecificConfig("net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    var0.setDbSpecificConfig(var4);
    var0.fireTableRowsInserted((-1), 2);
    java.lang.String var10 = var0.getColumnName((-3));
    var0.fireTableRowsDeleted(431, 312);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Value"+ "'", var10.equals("Value"));

  }

  public void test337() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test337");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    var0.setEncodeCommentsEnabled(true);
    var0.setSchema("Unknown");

  }

  public void test338() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test338");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    net.sourceforge.schemaspy.ui.DbConfigPanel var24 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var24.requestFocus();
    var24.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var28 = var24.insets();
    var24.setAlignmentX(1.0f);
    boolean var31 = var24.hasFocus();
    boolean var32 = var24.getFocusTraversalKeysEnabled();
    boolean var33 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var24);
    var24.firePropertyChange("hi!", 'a', 'a');
    net.sourceforge.schemaspy.ui.DbConfigPanel var38 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var39 = var38.isManagingFocus();
    int var40 = var38.getWidth();
    java.awt.Insets var41 = var38.insets();
    javax.accessibility.AccessibleContext var42 = var38.getAccessibleContext();
    boolean var45 = var38.inside(100, (-3));
    java.awt.Rectangle var46 = var38.getVisibleRect();
    var24.setBounds(var46);
    var0.setMaximizedBounds(var46);
    var0.enable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test339() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test339");


    net.sourceforge.schemaspy.ui.DbConfigTableModel var0 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    var0.fireTableRowsInserted(2, 1);
    java.lang.Object var6 = var0.getValueAt(0, 100);
    javax.swing.event.TableModelListener[] var7 = var0.getTableModelListeners();
    var0.fireTableRowsUpdated(0, 3);
    int var12 = var0.findColumn("hi!s{hi!s}hi!s");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1));

  }

  public void test340() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test340");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    float var5 = var0.getAlignmentX();
    var0.setVisible(false);
    boolean var8 = var0.isValidateRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test341() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test341");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sourceforge.schemaspy.util.Version var1 = new net.sourceforge.schemaspy.util.Version("[]");
      fail("Expected exception of type java.lang.NumberFormatException");
    } catch (java.lang.NumberFormatException e) {
      // Expected exception.
    }

  }

  public void test342() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test342");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var25.requestFocus();
    var25.setFocusTraversalPolicyProvider(true);
    javax.swing.event.AncestorListener[] var29 = var25.getAncestorListeners();
    javax.swing.event.AncestorListener[] var30 = var25.getAncestorListeners();
    var0.setContentPane((java.awt.Container)var25);
    java.awt.Toolkit var32 = var0.getToolkit();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test343() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test343");


    net.sourceforge.schemaspy.view.StyleSheet.ParseException var1 = new net.sourceforge.schemaspy.view.StyleSheet.ParseException("net.sourceforge.schemaspy.ui.MainFrame[frame0,0,23,500x431,invalid,hidden,layout=java.awt.BorderLayout,title=SchemaSpy,resizable,normal,defaultCloseOperation=HIDE_ON_CLOSE,rootPane=javax.swing.JRootPane[,0,0,0x0,invalid,layout=javax.swing.JRootPane$RootLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777673,maximumSize=,minimumSize=,preferredSize=],rootPaneCheckingEnabled=true]");

  }

  public void test344() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test344");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Point var5 = var0.getMousePosition(true);
    java.awt.Component var6 = var0.getNextFocusableComponent();
    boolean var7 = var0.isBackgroundSet();
    var0.requestFocus();
    java.awt.Rectangle var9 = var0.getVisibleRect();
    var0.setVerifyInputWhenFocusTarget(true);
    boolean var12 = var0.isCursorSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test345() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test345");


    net.sourceforge.schemaspy.ui.DbTypeSelectorModel var1 = new net.sourceforge.schemaspy.ui.DbTypeSelectorModel("java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)");
    java.lang.Object var2 = var1.getSelectedItem();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test346() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test346");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.requestFocus();
    boolean var6 = var0.isVisible();
    var0.hide();
    int var8 = var0.getX();
    boolean var9 = var0.isFontSet();
    java.awt.Point var11 = var0.getMousePosition(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test347() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test347");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isDbHelpRequired();
    var0.setCharset("dot version 2.2.1 or versions greater than 2.4");
    java.util.regex.Pattern var7 = var0.getIndirectColumnExclusions();
    var0.setIndirectColumnExclusions("ISO-8859-1");
    java.util.regex.Pattern var10 = var0.getTableInclusions();
    var0.setDbType("schemaSpy.css");
    java.util.regex.Pattern var13 = var0.getTableExclusions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test348() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test348");


    net.sourceforge.schemaspy.util.CaseInsensitiveMap var1 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.Set var2 = var1.entrySet();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var4 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.List var5 = net.sourceforge.schemaspy.DbAnalyzer.getRailsConstraints((java.util.Map)var4);
    net.sourceforge.schemaspy.Config var6 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var7 = var6.getTableExclusions();
    boolean var8 = var6.isHtmlGenerationEnabled();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var10 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    var10.clear();
    var6.setDbSpecificOptions((java.util.Map)var10);
    java.lang.String var13 = var10.toString();
    var4.putAll((java.util.Map)var10);
    var1.putAll((java.util.Map)var10);
    java.util.Set var16 = var1.entrySet();
    boolean var17 = var1.isEmpty();
    net.sourceforge.schemaspy.Config var18 = new net.sourceforge.schemaspy.Config();
    var18.setDb("a");
    java.lang.String var21 = var18.getServer();
    boolean var22 = var18.isDbHelpRequired();
    java.lang.String var23 = var18.getFont();
    java.util.Map var24 = var18.getDbSpecificOptions();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var25 = var1.get((java.lang.Object)var24);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "{}"+ "'", var13.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "Helvetica"+ "'", var23.equals("Helvetica"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test349() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test349");


    net.sourceforge.schemaspy.model.Routine var9 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    net.sourceforge.schemaspy.model.Routine var19 = new net.sourceforge.schemaspy.model.Routine("", "hi!", "a", "", "", false, "", "hi!", "");
    java.lang.String var20 = var19.getDefinition();
    net.sourceforge.schemaspy.model.Routine var30 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var31 = var30.getDataAccess();
    java.lang.String var32 = var30.getDefinitionLanguage();
    int var33 = var19.compareTo(var30);
    net.sourceforge.schemaspy.model.RoutineParameter var37 = new net.sourceforge.schemaspy.model.RoutineParameter("ISO-8859-1s", "hi!", "");
    var30.addParameter(var37);
    var9.addParameter(var37);
    java.lang.String var40 = var9.getReturnType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + ""+ "'", var20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "hi!"+ "'", var31.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "a"+ "'", var32.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "a"+ "'", var40.equals("a"));

  }

  public void test350() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test350");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    net.sourceforge.schemaspy.ui.DbConfigPanel var6 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var6.requestFocus();
    var6.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var10 = var6.insets();
    var6.setAlignmentX(1.0f);
    boolean var13 = var6.hasFocus();
    boolean var14 = var6.getFocusTraversalKeysEnabled();
    boolean var15 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var6);
    net.sourceforge.schemaspy.ui.DbConfigPanel var16 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var17 = var16.isManagingFocus();
    java.awt.Rectangle var18 = var16.getVisibleRect();
    java.awt.Rectangle var19 = var6.getBounds(var18);
    java.awt.Dimension var20 = var6.getPreferredSize();
    var0.setMinimumSize(var20);
    var0.toBack();
    net.sourceforge.schemaspy.ui.DbConfigPanel var23 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var23.requestFocus();
    var23.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var27 = var23.insets();
    float var28 = var23.getAlignmentX();
    boolean var31 = var23.contains(1, (-1));
    var23.setOpaque(false);
    boolean var34 = var23.getInheritsPopupMenu();
    var0.setGlassPane((java.awt.Component)var23);
    java.util.List var36 = var0.getIconImages();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test351() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test351");


    net.sourceforge.schemaspy.view.StyleSheet.MissingCssPropertyException var2 = new net.sourceforge.schemaspy.view.StyleSheet.MissingCssPropertyException("ora", "schemaSpy.css");

  }

  public void test352() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test352");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    float var5 = var0.getAlignmentX();
    var0.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var11 = var0.getMouseListeners();
    java.awt.Rectangle var12 = var0.bounds();
    var0.hide();
    java.awt.Dimension var14 = var0.preferredSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test353() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test353");


    net.sourceforge.schemaspy.util.Dot var0 = net.sourceforge.schemaspy.util.Dot.getInstance();
    var0.setHighQuality(true);
    net.sourceforge.schemaspy.util.Dot.DotFailure var4 = var0.new DotFailure("hi!s");
    boolean var5 = var0.requiresGdRenderer();
    java.lang.String var6 = var0.getRenderer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));

  }

  public void test354() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test354");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.hasOrphans();
    java.lang.String var5 = var0.getHost();
    boolean var6 = var0.isHtmlGenerationEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test355() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test355");


    net.sourceforge.schemaspy.util.DbSpecificOption var2 = new net.sourceforge.schemaspy.util.DbSpecificOption("", "ISO-8859-1");
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.getDescription();
    java.lang.Object var5 = var2.getValue();
    net.sourceforge.schemaspy.ui.MainFrame var6 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var7 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var8 = var7.getTableExclusions();
    boolean var9 = var7.isEvaluateAllEnabled();
    java.util.List var10 = var7.getColumnDetails();
    var6.setIconImages(var10);
    boolean var12 = var6.isAlwaysOnTop();
    var6.setFocusableWindowState(true);
    java.awt.Window[] var15 = var6.getOwnedWindows();
    java.awt.Component var16 = var6.getMostRecentFocusOwner();
    var2.setValue((java.lang.Object)var6);
    java.lang.String var18 = var2.getDescription();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"+ "'", var3.equals("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ISO-8859-1"+ "'", var4.equals("ISO-8859-1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "ISO-8859-1"+ "'", var18.equals("ISO-8859-1"));

  }

  public void test356() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test356");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var26 = var25.isManagingFocus();
    java.awt.Rectangle var27 = var25.getVisibleRect();
    var0.setBounds(var27);
    var0.hide();
    java.util.List var30 = var0.getIconImages();
    var0.resize(2, 0);
    net.sourceforge.schemaspy.ui.DbConfigPanel var34 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var34.requestFocus();
    var34.setFocusTraversalPolicyProvider(true);
    javax.swing.event.AncestorListener[] var38 = var34.getAncestorListeners();
    var34.paintImmediately(1, 0, 0, (-1));
    java.awt.ComponentOrientation var44 = var34.getComponentOrientation();
    var0.applyComponentOrientation(var44);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.applyResourceBundle("{}s");
      fail("Expected exception of type java.util.MissingResourceException");
    } catch (java.util.MissingResourceException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test357() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test357");


    net.sourceforge.schemaspy.ui.DbTypeSelectorModel var1 = new net.sourceforge.schemaspy.ui.DbTypeSelectorModel("hi!s");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var3 = var1.getElementAt(1);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test358() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test358");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.requestFocus();
    java.awt.Dimension var6 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test359() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test359");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.requestFocus();
    var0.doLayout();
    boolean var9 = var0.inside(3, 0);
    boolean var10 = var0.isForegroundSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test360() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test360");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    java.lang.String var5 = var0.getSchemaSpec();
    var0.setViewsEnabled(false);
    boolean var8 = var0.isHtmlGenerationEnabled();
    java.lang.String var9 = var0.getDbType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "ora"+ "'", var9.equals("ora"));

  }

  public void test361() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test361");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    boolean var5 = var0.isMeterEnabled();
    java.lang.String var7 = var0.getParam("a");
    boolean var8 = var0.isEncodeCommentsEnabled();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.io.File var9 = var0.getOutputDir();
      fail("Expected exception of type net.sourceforge.schemaspy.Config.MissingRequiredParameterException");
    } catch (net.sourceforge.schemaspy.Config.MissingRequiredParameterException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test362() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test362");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    boolean var2 = var0.isRankDirBugEnabled();
    net.sourceforge.schemaspy.Config var3 = new net.sourceforge.schemaspy.Config();
    var3.setDb("a");
    java.lang.String var6 = var3.getServer();
    boolean var7 = var3.isHtmlGenerationEnabled();
    boolean var8 = var3.isMeterEnabled();
    java.lang.String var10 = var3.getParam("a");
    java.lang.String var11 = var3.getDescription();
    var3.setFontSize(100);
    var3.setHtmlGenerationEnabled(false);
    net.sourceforge.schemaspy.Config var16 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var17 = var16.getTableExclusions();
    var16.setSqlFormatter("hi!");
    net.sourceforge.schemaspy.view.DefaultSqlFormatter var20 = new net.sourceforge.schemaspy.view.DefaultSqlFormatter();
    var16.setSqlFormatter((net.sourceforge.schemaspy.view.SqlFormatter)var20);
    var3.setSqlFormatter((net.sourceforge.schemaspy.view.SqlFormatter)var20);
    var0.setSqlFormatter((net.sourceforge.schemaspy.view.SqlFormatter)var20);
    java.lang.String var24 = var0.getConnectionPropertiesFile();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }

  public void test363() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test363");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Point var5 = var0.getMousePosition(true);
    java.awt.Component var6 = var0.getNextFocusableComponent();
    java.awt.Dimension var7 = var0.getMinimumSize();
    var0.setEnabled(false);
    var0.firePropertyChange("hi!s{hi!s}hi!s.ISO-8859-1.net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s", '4', ' ');
    boolean var14 = var0.isCursorSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test364() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test364");


    net.sourceforge.schemaspy.ui.DbConfigTableModel var0 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    var0.fireTableRowsInserted(2, 1);
    java.lang.Object var6 = var0.getValueAt(0, 100);
    javax.swing.event.TableModelListener[] var7 = var0.getTableModelListeners();
    var0.fireTableRowsUpdated(0, 3);
    javax.swing.event.TableModelListener[] var11 = var0.getTableModelListeners();
    var0.fireTableCellUpdated(0, 0);
    java.lang.Object var17 = var0.getValueAt(1, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test365() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test365");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    boolean var7 = var0.isResizable();
    var0.pack();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);

  }

  public void test366() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test366");


    net.sourceforge.schemaspy.util.LineWriter var3 = new net.sourceforge.schemaspy.util.LineWriter("Unknown", 100, "ISO-8859-1");
    var3.flush();
    var3.flush();
    var3.write(0);
    java.io.Writer var9 = var3.append((java.lang.CharSequence)"net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test367() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test367");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    var0.setEncodeCommentsEnabled(true);
    var0.setRankDirBugEnabled(false);
    var0.setSqlFormatter("hi!");
    var0.setHost("");
    java.lang.String var11 = var0.getDescription();
    boolean var12 = var0.isOneOfMultipleSchemas();
    java.util.Properties var13 = var0.getConnectionProperties();
    java.util.regex.Pattern var14 = var0.getTableInclusions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test368() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test368");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    net.sourceforge.schemaspy.ui.DbConfigPanel var24 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var24.requestFocus();
    var24.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var28 = var24.insets();
    var24.setAlignmentX(1.0f);
    boolean var31 = var24.hasFocus();
    boolean var32 = var24.getFocusTraversalKeysEnabled();
    boolean var33 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var24);
    var24.firePropertyChange("hi!", 'a', 'a');
    net.sourceforge.schemaspy.ui.DbConfigPanel var38 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var39 = var38.isManagingFocus();
    int var40 = var38.getWidth();
    java.awt.Insets var41 = var38.insets();
    javax.accessibility.AccessibleContext var42 = var38.getAccessibleContext();
    boolean var45 = var38.inside(100, (-3));
    java.awt.Rectangle var46 = var38.getVisibleRect();
    var24.setBounds(var46);
    var0.setMaximizedBounds(var46);
    java.awt.event.ComponentListener[] var49 = var0.getComponentListeners();
    int var50 = var0.getCursorType();
    int var51 = var0.getHeight();
    java.awt.Container var52 = var0.getContentPane();
    boolean var53 = var0.isOpaque();
    java.awt.Graphics var54 = var0.getGraphics();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 312);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);

  }

  public void test369() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test369");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    boolean var4 = var0.requestFocusInWindow();
    java.util.Locale var5 = var0.getLocale();
    java.awt.Component var8 = var0.locate(3, 100);
    var0.invalidate();
    java.awt.event.HierarchyBoundsListener[] var10 = var0.getHierarchyBoundsListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test370() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test370");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.doLayout();
    boolean var8 = var0.isCursorSet();
    java.awt.event.HierarchyListener[] var9 = var0.getHierarchyListeners();
    var0.setFocusTraversalPolicyProvider(false);
    boolean var12 = var0.isBackgroundSet();
    java.awt.event.HierarchyBoundsListener[] var13 = var0.getHierarchyBoundsListeners();
    var0.firePropertyChange("4", 0L, 10L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test371() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test371");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    java.awt.Component var1 = var0.getGlassPane();
    javax.swing.TransferHandler var2 = var0.getTransferHandler();
    java.awt.dnd.DropTarget var3 = var0.getDropTarget();
    java.awt.MenuBar var4 = var0.getMenuBar();
    var0.removeAll();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test372() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test372");


    net.sourceforge.schemaspy.util.CaseInsensitiveMap var1 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    var1.clear();
    java.util.List var3 = net.sourceforge.schemaspy.DbAnalyzer.getRailsConstraints((java.util.Map)var1);
    var1.clear();
    java.lang.Object var5 = var1.clone();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var7 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.Set var8 = var7.entrySet();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var10 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.List var11 = net.sourceforge.schemaspy.DbAnalyzer.getRailsConstraints((java.util.Map)var10);
    net.sourceforge.schemaspy.Config var12 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var13 = var12.getTableExclusions();
    boolean var14 = var12.isHtmlGenerationEnabled();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var16 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    var16.clear();
    var12.setDbSpecificOptions((java.util.Map)var16);
    java.lang.String var19 = var16.toString();
    var10.putAll((java.util.Map)var16);
    var7.putAll((java.util.Map)var16);
    var1.putAll((java.util.Map)var7);
    boolean var23 = var7.isEmpty();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var25 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    var25.clear();
    java.util.List var27 = net.sourceforge.schemaspy.DbAnalyzer.getRailsConstraints((java.util.Map)var25);
    java.util.Set var28 = var25.entrySet();
    net.sourceforge.schemaspy.Config var29 = new net.sourceforge.schemaspy.Config();
    var29.setDb("a");
    java.lang.String var32 = var29.getServer();
    boolean var33 = var29.isHtmlGenerationEnabled();
    java.lang.String var34 = var29.getSchemaSpec();
    var29.setViewsEnabled(false);
    boolean var37 = var25.containsValue((java.lang.Object)false);
    var7.putAll((java.util.Map)var25);
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var40 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.Set var41 = var40.entrySet();
    java.util.Set var42 = var40.entrySet();
    var7.putAll((java.util.Map)var40);
    net.sourceforge.schemaspy.ui.MainFrame var44 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var45 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var46 = var45.getTableExclusions();
    boolean var47 = var45.isEvaluateAllEnabled();
    java.util.List var48 = var45.getColumnDetails();
    var44.setIconImages(var48);
    boolean var50 = var44.isAlwaysOnTop();
    var44.setFocusableWindowState(true);
    boolean var53 = var44.isFocusCycleRoot();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var54 = var7.get((java.lang.Object)var53);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "{}"+ "'", var19.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);

  }

  public void test373() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test373");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.reshape(1, 1, 1, 100);
    var0.transferFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test374() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test374");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    java.lang.String var5 = var0.getSchemaSpec();
    var0.setViewsEnabled(false);
    var0.setTableInclusions("");
    var0.setRailsEnabled(false);
    boolean var12 = var0.isSingleSignOn();
    java.lang.String var13 = var0.getSchema();
    var0.setEncodeCommentsEnabled(false);
    var0.setDriverPath("frame2");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test375() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test375");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.util.List var24 = var0.getIconImages();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var25.requestFocus();
    var25.setFocusTraversalPolicyProvider(true);
    boolean var29 = var25.requestFocusInWindow();
    java.awt.FocusTraversalPolicy var30 = var25.getFocusTraversalPolicy();
    var0.setFocusTraversalPolicy(var30);
    var0.setFocusTraversalKeysEnabled(true);
    net.sourceforge.schemaspy.ui.DbConfigPanel var34 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var34.requestFocus();
    var34.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var38 = var34.insets();
    var34.setAlignmentX(1.0f);
    var34.doLayout();
    boolean var42 = var34.isCursorSet();
    var34.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var47 = var34.getLocation();
    var34.setSize(2, 10);
    var34.grabFocus();
    java.awt.Color var52 = var34.getForeground();
    var0.setBackground(var52);
    net.sourceforge.schemaspy.ui.DbConfigTableModel var54 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    var54.fireTableStructureChanged();
    java.lang.Class var57 = var54.getClass(2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.EventListener[] var58 = var0.<java.util.EventListener>getListeners(var57);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test376() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test376");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var7 = var0.getModalExclusionType();
    net.sourceforge.schemaspy.ui.DbConfigPanel var8 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var8.requestFocus();
    var8.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var12 = var8.insets();
    var8.setAlignmentX(1.0f);
    boolean var15 = var8.hasFocus();
    boolean var16 = var8.getFocusTraversalKeysEnabled();
    boolean var17 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var8);
    net.sourceforge.schemaspy.ui.DbConfigPanel var18 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var19 = var18.isManagingFocus();
    java.awt.Rectangle var20 = var18.getVisibleRect();
    java.awt.Rectangle var21 = var8.getBounds(var20);
    java.awt.Dimension var22 = var8.getPreferredSize();
    var0.setSize(var22);
    java.awt.im.InputContext var24 = var0.getInputContext();
    boolean var25 = var0.isValidateRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);

  }

  public void test377() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test377");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var1 = var0.isManagingFocus();
    boolean var2 = var0.getVerifyInputWhenFocusTarget();
    java.lang.String var3 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0var3,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var3.equals("net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0var3,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));

  }

  public void test378() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test378");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    var0.setNumRowsEnabled(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.io.File var4 = var0.getOutputDir();
      fail("Expected exception of type net.sourceforge.schemaspy.Config.MissingRequiredParameterException");
    } catch (net.sourceforge.schemaspy.Config.MissingRequiredParameterException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test379() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test379");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    java.lang.String var2 = var0.getConnectionPropertiesFile();
    boolean var3 = var0.isSchemaDisabled();
    net.sourceforge.schemaspy.view.SqlFormatter var4 = var0.getSqlFormatter();
    java.lang.Integer var5 = var0.getPort();
    net.sourceforge.schemaspy.Config var6 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var7 = var6.getTableExclusions();
    boolean var8 = var6.isHtmlGenerationEnabled();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var10 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    var10.clear();
    var6.setDbSpecificOptions((java.util.Map)var10);
    var0.setDbSpecificOptions((java.util.Map)var10);
    net.sourceforge.schemaspy.ui.DbConfigPanel var14 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var14.requestFocus();
    var14.setFocusTraversalPolicyProvider(true);
    java.awt.Point var19 = var14.getMousePosition(true);
    int var20 = var14.getComponentCount();
    boolean var21 = var14.getVerifyInputWhenFocusTarget();
    boolean var22 = var14.requestFocusInWindow();
    boolean var23 = var10.containsValue((java.lang.Object)var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test380() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test380");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    boolean var1 = var0.isImpliedConstraintsEnabled();
    var0.setHasOrphans(false);
    java.lang.String var4 = var0.getSchemaSpec();
    boolean var5 = var0.isHighQuality();
    var0.setPassword("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'");
    java.util.logging.Level var8 = var0.getLogLevel();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test381() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test381");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    boolean var2 = var0.isEvaluateAllEnabled();
    java.lang.String var4 = var0.getParam("hi!s");
    java.lang.String var5 = var0.getCss();
    var0.setSingleSignOn(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "schemaSpy.css"+ "'", var5.equals("schemaSpy.css"));

  }

  public void test382() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test382");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    boolean var2 = var0.isEvaluateAllEnabled();
    java.lang.String var3 = var0.getDescription();
    var0.setHighQuality(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test383() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test383");


    net.sourceforge.schemaspy.util.Dot var0 = net.sourceforge.schemaspy.util.Dot.getInstance();
    var0.setFormat("ISO-8859-1");
    boolean var3 = var0.supportsCenteredEastWestEdges();
    var0.setHighQuality(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test384() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test384");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    int var6 = var0.getExtendedState();
    net.sourceforge.schemaspy.ui.DbConfigPanel var7 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var7.requestFocus();
    var7.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var11 = var7.insets();
    var7.setAlignmentX(1.0f);
    boolean var14 = var7.hasFocus();
    boolean var15 = var7.getFocusTraversalKeysEnabled();
    boolean var16 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var7);
    var7.firePropertyChange("hi!", 'a', 'a');
    java.lang.String var21 = var7.getUIClassID();
    java.awt.Point var23 = var7.getMousePosition(false);
    java.awt.Point var24 = var7.location();
    java.awt.Dimension var25 = var7.preferredSize();
    var0.setLocationRelativeTo((java.awt.Component)var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "PanelUI"+ "'", var21.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test385() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test385");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var1 = var0.isManagingFocus();
    int var2 = var0.getWidth();
    java.awt.Point var3 = var0.getMousePosition();
    var0.repaint();
    var0.firePropertyChange("ISO-8859-1", (byte)10, (byte)1);
    javax.swing.JRootPane var9 = var0.getRootPane();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test386() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test386");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var1 = var0.isManagingFocus();
    int var2 = var0.getWidth();
    java.awt.Point var3 = var0.getMousePosition();
    boolean var6 = var0.contains(1, (-1));
    var0.revalidate();
    boolean var8 = var0.getInheritsPopupMenu();
    float var9 = var0.getAlignmentY();
    int var12 = var0.getBaseline(431, 23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1));

  }

  public void test387() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test387");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    float var5 = var0.getAlignmentX();
    var0.setBounds(0, 1, 10, 100);
    var0.repaint(0L, (-1), 1, (-3), (-3));
    java.awt.FocusTraversalPolicy var17 = var0.getFocusTraversalPolicy();
    java.awt.Component.BaselineResizeBehavior var18 = var0.getBaselineResizeBehavior();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test388() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test388");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.util.List var24 = var0.getIconImages();
    boolean var25 = var0.isFocusCycleRoot();
    var0.revalidate();
    java.awt.Window var27 = var0.getOwner();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test389() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test389");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    boolean var5 = var0.isMeterEnabled();
    java.lang.String var7 = var0.getParam("a");
    boolean var8 = var0.isEncodeCommentsEnabled();
    boolean var9 = var0.isPromptForPasswordEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test390() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test390");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    java.lang.String var5 = var0.getSchemaSpec();
    var0.setViewsEnabled(false);
    var0.setViewsEnabled(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test391() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test391");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    int var6 = var0.getExtendedState();
    var0.setFocusableWindowState(true);
    var0.toBack();
    java.awt.LayoutManager var10 = var0.getLayout();
    java.awt.event.ContainerListener[] var11 = var0.getContainerListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test392() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test392");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var26 = var25.isManagingFocus();
    java.awt.Rectangle var27 = var25.getVisibleRect();
    var0.setBounds(var27);
    var0.hide();
    java.util.List var30 = var0.getIconImages();
    boolean var31 = var0.isFocused();
    boolean var32 = var0.isForegroundSet();
    java.awt.Color var33 = var0.getBackground();
    boolean var34 = var0.isFocusTraversalPolicyProvider();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test393() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test393");


    net.sourceforge.schemaspy.util.DbSpecificConfig var1 = new net.sourceforge.schemaspy.util.DbSpecificConfig(" ");

  }

  public void test394() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test394");


    java.lang.String[] var1 = new java.lang.String[] { "net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"};
    net.sourceforge.schemaspy.Config var2 = new net.sourceforge.schemaspy.Config(var1);
    net.sourceforge.schemaspy.Config var3 = new net.sourceforge.schemaspy.Config(var1);
    net.sourceforge.schemaspy.Config var4 = new net.sourceforge.schemaspy.Config(var1);
    net.sourceforge.schemaspy.Config var5 = new net.sourceforge.schemaspy.Config(var1);
    net.sourceforge.schemaspy.Config var6 = new net.sourceforge.schemaspy.Config(var1);
    net.sourceforge.schemaspy.Config var7 = new net.sourceforge.schemaspy.Config(var1);
    boolean var8 = var7.isSchemaDisabled();
    boolean var9 = var7.isViewsEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test395() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test395");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var1 = var0.isManagingFocus();
    int var2 = var0.getWidth();
    javax.swing.InputVerifier var3 = var0.getInputVerifier();
    boolean var4 = var0.getAutoscrolls();
    boolean var5 = var0.isPaintingTile();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test396() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test396");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    boolean var3 = var0.isEvaluateAllEnabled();
    boolean var4 = var0.isLogoEnabled();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Properties var6 = var0.determineDbProperties("dot version 2.2.1 or versions greater than 2.4");
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test397() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test397");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    var0.setFocusableWindowState(true);
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var10 = var9.isManagingFocus();
    int var11 = var9.getWidth();
    javax.swing.InputVerifier var12 = var9.getInputVerifier();
    net.sourceforge.schemaspy.ui.DbConfigPanel var13 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var13.requestFocus();
    var13.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var17 = var13.insets();
    var13.requestFocus();
    boolean var19 = var13.isVisible();
    java.awt.Dimension var20 = var13.preferredSize();
    java.awt.Dimension var21 = var9.getSize(var20);
    var0.setSize(var20);
    java.lang.String var23 = var0.getWarningString();
    var0.setFocusableWindowState(true);
    javax.swing.JRootPane var26 = var0.getRootPane();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test398() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test398");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    boolean var5 = var0.isHtmlGenerationEnabled();
    net.sourceforge.schemaspy.view.SqlFormatter var6 = var0.getSqlFormatter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test399() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test399");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.requestFocus();
    boolean var6 = var0.isVisible();
    var0.hide();
    java.awt.Dimension var8 = var0.getPreferredSize();
    boolean var9 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var0);
    var0.requestFocus();
    var0.transferFocusBackward();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test400() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test400");


    net.sourceforge.schemaspy.util.Inflection var2 = new net.sourceforge.schemaspy.util.Inflection("java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)", "/Users/Jesh/Documents/School/Summer 2015/Independent Study/Eclipse/workspace/36_schemaspy/bin");
    java.lang.String var4 = var2.replace("ISO-8859-1s");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ISO-8859-1s"+ "'", var4.equals("ISO-8859-1s"));

  }

  public void test401() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test401");


    net.sourceforge.schemaspy.ui.DbTypeSelectorModel var1 = new net.sourceforge.schemaspy.ui.DbTypeSelectorModel("hi!");
    net.sourceforge.schemaspy.ui.DbConfigTableModel var2 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    var2.fireTableStructureChanged();
    java.lang.Class var5 = var2.getClass(2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.EventListener[] var6 = var1.<java.util.EventListener>getListeners(var5);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test402() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test402");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    var0.setFocusableWindowState(true);
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    boolean var17 = var9.contains(1, (-1));
    var9.transferFocus();
    var9.removeAll();
    java.awt.Component var21 = var0.add((java.awt.Component)var9, 0);
    boolean var22 = var0.isValidateRoot();
    net.sourceforge.schemaspy.ui.DbConfigPanel var23 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var23.requestFocus();
    var23.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var27 = var23.insets();
    var23.reshape(1, 1, 1, 100);
    net.sourceforge.schemaspy.ui.DbConfigPanel var33 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var33.requestFocus();
    var33.setFocusTraversalPolicyProvider(true);
    java.awt.Point var38 = var33.getMousePosition(true);
    java.awt.Component var39 = var33.getNextFocusableComponent();
    java.awt.Dimension var40 = var33.getMinimumSize();
    java.awt.Dimension var41 = var23.getSize(var40);
    java.awt.Rectangle var42 = var23.bounds();
    java.awt.Component var44 = var0.add((java.awt.Component)var23, 2);
    var44.transferFocusBackward();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test403() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test403");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    net.sourceforge.schemaspy.ui.DbConfigPanel var6 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var6.requestFocus();
    var6.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var10 = var6.insets();
    var6.setAlignmentX(1.0f);
    boolean var13 = var6.hasFocus();
    boolean var14 = var6.getFocusTraversalKeysEnabled();
    boolean var15 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var6);
    net.sourceforge.schemaspy.ui.DbConfigPanel var16 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var17 = var16.isManagingFocus();
    java.awt.Rectangle var18 = var16.getVisibleRect();
    java.awt.Rectangle var19 = var6.getBounds(var18);
    java.awt.Dimension var20 = var6.getPreferredSize();
    var0.setMinimumSize(var20);
    var0.toBack();
    net.sourceforge.schemaspy.ui.DbConfigPanel var23 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var23.requestFocus();
    var23.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var27 = var23.insets();
    float var28 = var23.getAlignmentX();
    boolean var31 = var23.contains(1, (-1));
    var23.setOpaque(false);
    boolean var34 = var23.getInheritsPopupMenu();
    var0.setGlassPane((java.awt.Component)var23);
    net.sourceforge.schemaspy.ui.MainFrame var36 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var37 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var38 = var37.getTableExclusions();
    boolean var39 = var37.isEvaluateAllEnabled();
    java.util.List var40 = var37.getColumnDetails();
    var36.setIconImages(var40);
    boolean var42 = var36.isAlwaysOnTop();
    var36.setFocusableWindowState(true);
    boolean var45 = var36.isFocusCycleRoot();
    java.awt.Graphics var46 = var36.getGraphics();
    boolean var47 = var36.isFocusCycleRoot();
    net.sourceforge.schemaspy.ui.MainFrame var48 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var49 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var49.requestFocus();
    var49.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var53 = var49.insets();
    var49.setAlignmentX(1.0f);
    java.awt.Color var56 = var49.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var57 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var57.requestFocus();
    var57.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var61 = var57.insets();
    float var62 = var57.getAlignmentX();
    var57.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var68 = var57.getMouseListeners();
    java.awt.Rectangle var69 = var57.bounds();
    var49.setBounds(var69);
    var48.setMaximizedBounds(var69);
    java.awt.Container var72 = var48.getContentPane();
    boolean var73 = var48.isLocationByPlatform();
    net.sourceforge.schemaspy.ui.MainFrame var74 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var75 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var76 = var75.getTableExclusions();
    boolean var77 = var75.isEvaluateAllEnabled();
    java.util.List var78 = var75.getColumnDetails();
    var74.setIconImages(var78);
    boolean var80 = var74.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var81 = var74.getModalExclusionType();
    var48.setModalExclusionType(var81);
    var48.setEnabled(true);
    javax.swing.JLayeredPane var85 = var48.getLayeredPane();
    var36.setLayeredPane(var85);
    var0.setLayeredPane(var85);
    java.awt.event.MouseListener[] var88 = var0.getMouseListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test404() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test404");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    var0.setSchema("");
    java.lang.String var7 = var0.getCss();
    var0.setDb("dot version 2.2.1 or versions greater than 2.4");
    var0.setRenderer("net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)");
    var0.setServer("net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory).hi!. ");
    net.sourceforge.schemaspy.Config var14 = new net.sourceforge.schemaspy.Config();
    boolean var15 = var14.isImpliedConstraintsEnabled();
    var14.setHasOrphans(false);
    var14.setImpliedConstraintsEnabled(true);
    var14.setSchema("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'");
    net.sourceforge.schemaspy.Config var22 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var23 = var22.getTableExclusions();
    var22.setSqlFormatter("hi!");
    net.sourceforge.schemaspy.view.DefaultSqlFormatter var26 = new net.sourceforge.schemaspy.view.DefaultSqlFormatter();
    var22.setSqlFormatter((net.sourceforge.schemaspy.view.SqlFormatter)var26);
    var14.setSqlFormatter((net.sourceforge.schemaspy.view.SqlFormatter)var26);
    var0.setSqlFormatter((net.sourceforge.schemaspy.view.SqlFormatter)var26);
    java.lang.String var30 = var0.getCharset();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "schemaSpy.css"+ "'", var7.equals("schemaSpy.css"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "ISO-8859-1"+ "'", var30.equals("ISO-8859-1"));

  }

  public void test405() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test405");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Point var5 = var0.getMousePosition(true);
    var0.disable();
    java.awt.Dimension var7 = var0.getMaximumSize();
    java.awt.Component[] var8 = var0.getComponents();
    javax.swing.TransferHandler var9 = var0.getTransferHandler();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test406() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test406");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    int var6 = var0.getExtendedState();
    var0.setFocusableWindowState(true);
    java.awt.Color var9 = var0.getBackground();
    java.awt.Graphics var10 = var0.getGraphics();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Image var11 = var0.getIconImage();
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test407() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test407");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.doLayout();
    boolean var8 = var0.isCursorSet();
    java.awt.event.HierarchyListener[] var9 = var0.getHierarchyListeners();
    var0.setFocusTraversalPolicyProvider(false);
    java.awt.Container var12 = var0.getFocusCycleRootAncestor();
    int var13 = var0.getHeight();
    net.sourceforge.schemaspy.ui.DbConfigPanel var15 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    int var16 = var15.getY();
    net.sourceforge.schemaspy.ui.DbConfigPanel var17 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var17.requestFocus();
    var17.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var21 = var17.insets();
    var17.setAlignmentX(1.0f);
    boolean var24 = var17.hasFocus();
    boolean var25 = var17.getFocusTraversalKeysEnabled();
    boolean var26 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var17);
    var17.firePropertyChange("hi!", 'a', 'a');
    java.lang.String var31 = var17.getUIClassID();
    java.awt.Point var33 = var17.getMousePosition(false);
    java.awt.Point var34 = var17.location();
    java.awt.Component var35 = var15.getComponentAt(var34);
    net.sourceforge.schemaspy.ui.DbConfigPanel var36 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var36.requestFocus();
    var36.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var40 = var36.insets();
    float var41 = var36.getAlignmentX();
    var36.setBounds(0, 1, 10, 100);
    java.awt.Rectangle var47 = var36.getBounds();
    var15.repaint(var47);
    javax.swing.InputMap var50 = var15.getInputMap(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setInputMap(10, var50);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "PanelUI"+ "'", var31.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test408() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test408");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.requestFocus();
    var0.firePropertyChange("", 10.0f, 1.0f);
    var0.firePropertyChange("", 1.0d, (-1.0d));
    java.lang.String var14 = var0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test409() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test409");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    net.sourceforge.schemaspy.ui.DbConfigPanel var24 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var24.requestFocus();
    var24.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var28 = var24.insets();
    var24.setAlignmentX(1.0f);
    boolean var31 = var24.hasFocus();
    boolean var32 = var24.getFocusTraversalKeysEnabled();
    boolean var33 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var24);
    var24.firePropertyChange("hi!", 'a', 'a');
    net.sourceforge.schemaspy.ui.DbConfigPanel var38 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var39 = var38.isManagingFocus();
    int var40 = var38.getWidth();
    java.awt.Insets var41 = var38.insets();
    javax.accessibility.AccessibleContext var42 = var38.getAccessibleContext();
    boolean var45 = var38.inside(100, (-3));
    java.awt.Rectangle var46 = var38.getVisibleRect();
    var24.setBounds(var46);
    var0.setMaximizedBounds(var46);
    var0.setFocusCycleRoot(false);
    var0.setSize(1, 23);
    java.awt.Window.Type var54 = var0.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test410() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test410");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    java.beans.PropertyChangeListener[] var2 = var0.getPropertyChangeListeners();
    java.awt.Component.BaselineResizeBehavior var3 = var0.getBaselineResizeBehavior();
    boolean var4 = var0.isDisplayable();
    java.awt.event.KeyListener[] var5 = var0.getKeyListeners();
    java.awt.Color var6 = var0.getBackground();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test411() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test411");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    net.sourceforge.schemaspy.ui.DbConfigPanel var6 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var6.requestFocus();
    var6.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var10 = var6.insets();
    var6.setAlignmentX(1.0f);
    boolean var13 = var6.hasFocus();
    boolean var14 = var6.getFocusTraversalKeysEnabled();
    boolean var15 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var6);
    net.sourceforge.schemaspy.ui.DbConfigPanel var16 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var17 = var16.isManagingFocus();
    java.awt.Rectangle var18 = var16.getVisibleRect();
    java.awt.Rectangle var19 = var6.getBounds(var18);
    java.awt.Dimension var20 = var6.getPreferredSize();
    var0.setMinimumSize(var20);
    java.awt.Dialog.ModalExclusionType var22 = var0.getModalExclusionType();
    var0.setSize(1, 100);
    java.awt.Component var26 = var0.getFocusOwner();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test412() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test412");


    net.sourceforge.schemaspy.TableOrderer var0 = new net.sourceforge.schemaspy.TableOrderer();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var2 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    var2.clear();
    java.util.List var4 = net.sourceforge.schemaspy.DbAnalyzer.getRailsConstraints((java.util.Map)var2);
    java.util.Set var5 = var2.entrySet();
    net.sourceforge.schemaspy.model.Routine var15 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var16 = var15.getDataAccess();
    java.lang.String var17 = var15.getDefinitionLanguage();
    java.util.List var18 = var15.getParameters();
    java.util.List var19 = var0.getTablesOrderedByRI((java.util.Collection)var5, (java.util.Collection)var18);
    net.sourceforge.schemaspy.model.Routine var29 = new net.sourceforge.schemaspy.model.Routine("", "hi!", "a", "", "", false, "", "hi!", "");
    java.lang.String var30 = var29.getDefinition();
    net.sourceforge.schemaspy.model.Routine var40 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var41 = var40.getDataAccess();
    java.lang.String var42 = var40.getDefinitionLanguage();
    int var43 = var29.compareTo(var40);
    java.util.List var44 = var29.getParameters();
    net.sourceforge.schemaspy.view.WriteStats var45 = new net.sourceforge.schemaspy.view.WriteStats((java.util.Collection)var44);
    java.util.List var46 = net.sourceforge.schemaspy.DbAnalyzer.getOrphans((java.util.Collection)var44);
    net.sourceforge.schemaspy.model.Routine var56 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var57 = var56.getDataAccess();
    java.lang.String var58 = var56.getDefinitionLanguage();
    java.util.List var59 = var56.getParameters();
    java.util.List var60 = net.sourceforge.schemaspy.DbAnalyzer.sortColumnsByTable(var59);
    java.util.List var61 = var0.getTablesOrderedByRI((java.util.Collection)var46, (java.util.Collection)var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "a"+ "'", var17.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + ""+ "'", var30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "hi!"+ "'", var41.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "a"+ "'", var42.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "hi!"+ "'", var57.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "a"+ "'", var58.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test413() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test413");


    java.lang.String[] var1 = new java.lang.String[] { "net.sourceforge.schemaspy.ui.MainFrame[frame4,0,23,500x312,invalid,hidden,layout=java.awt.BorderLayout,title=SchemaSpy,resizable,normal,defaultCloseOperation=HIDE_ON_CLOSE,rootPane=javax.swing.JRootPane[,0,0,0x0,invalid,layout=javax.swing.JRootPane$RootLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777673,maximumSize=,minimumSize=,preferredSize=],rootPaneCheckingEnabled=true]"};
    net.sourceforge.schemaspy.Config var2 = new net.sourceforge.schemaspy.Config(var1);
    net.sourceforge.schemaspy.Config var3 = new net.sourceforge.schemaspy.Config(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test414() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test414");


    net.sourceforge.schemaspy.util.DbSpecificOption var2 = new net.sourceforge.schemaspy.util.DbSpecificOption("", "ISO-8859-1");
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.getDescription();
    java.lang.String var5 = var2.getName();
    net.sourceforge.schemaspy.Config var6 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var7 = var6.getTableExclusions();
    net.sourceforge.schemaspy.model.Routine var17 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var18 = var17.getDataAccess();
    java.lang.String var19 = var17.getDefinitionLanguage();
    java.util.List var20 = var17.getParameters();
    var6.setColumnDetails(var20);
    var6.setPort((java.lang.Integer)0);
    var6.setDb("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'");
    java.util.regex.Pattern var26 = var6.getIndirectColumnExclusions();
    java.util.logging.Level var27 = var6.getLogLevel();
    boolean var28 = var6.isDbHelpRequired();
    var6.setUser("ora");
    var2.setValue((java.lang.Object)var6);
    net.sourceforge.schemaspy.Config.setInstance(var6);
    int var33 = var6.getMaxDetailedTables();
    java.lang.String var34 = var6.getDb();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"+ "'", var3.equals("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ISO-8859-1"+ "'", var4.equals("ISO-8859-1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "a"+ "'", var19.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 300);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"+ "'", var34.equals("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"));

  }

  public void test415() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test415");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    java.beans.PropertyChangeListener[] var2 = var0.getPropertyChangeListeners();
    var0.addNotify();
    net.sourceforge.schemaspy.Config var4 = new net.sourceforge.schemaspy.Config();
    var4.setDb("a");
    java.lang.String var7 = var4.getServer();
    var4.setConnectionPropertiesFile("ISO-8859-1s");
    java.lang.Object var10 = var0.getClientProperty((java.lang.Object)var4);
    var0.reshape((-1), 0, 2, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test416() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test416");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    var0.firePropertyChange("a", (byte)10, (byte)0);
    java.awt.Insets var8 = var0.insets();
    var0.setAlignmentY(100.0f);
    java.awt.Image var13 = var0.createImage(1, 1);
    int var14 = var0.getComponentCount();
    net.sourceforge.schemaspy.ui.DbConfigPanel var15 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var15.requestFocus();
    var15.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var19 = var15.insets();
    java.lang.Object var20 = var15.getTreeLock();
    var15.setAutoscrolls(true);
    java.awt.Component var24 = var0.add((java.awt.Component)var15, 1);
    var24.setEnabled(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test417() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test417");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    var0.setOutputDir("hi!");
    java.util.regex.Pattern var7 = var0.getColumnExclusions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test418() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test418");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.requestFocus();
    net.sourceforge.schemaspy.ui.DbConfigPanel var6 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var6.requestFocus();
    java.awt.Component var8 = var6.getNextFocusableComponent();
    java.lang.String var9 = var6.toString();
    var0.setNextFocusableComponent((java.awt.Component)var6);
    java.awt.Dimension var11 = var6.getPreferredSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0var9,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var9.equals("net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0var9,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test419() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test419");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    net.sourceforge.schemaspy.model.Routine var11 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var12 = var11.getDataAccess();
    java.lang.String var13 = var11.getDefinitionLanguage();
    java.util.List var14 = var11.getParameters();
    var0.setColumnDetails(var14);
    var0.setPort((java.lang.Integer)0);
    var0.setDb("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'");
    net.sourceforge.schemaspy.Config var20 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var21 = var20.getTableExclusions();
    boolean var22 = var20.isEvaluateAllEnabled();
    java.util.List var23 = var20.getColumnDetails();
    var0.setColumnDetails(var23);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.List var25 = net.sourceforge.schemaspy.DbAnalyzer.getForeignKeyConstraints((java.util.Collection)var23);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "a"+ "'", var13.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test420() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test420");


    net.sourceforge.schemaspy.util.DbSpecificConfig var1 = new net.sourceforge.schemaspy.util.DbSpecificConfig("net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    net.sourceforge.schemaspy.Config var2 = var1.getConfig();
    java.util.regex.Pattern var3 = var2.getIndirectColumnExclusions();
    int var4 = var2.getFontSize();
    boolean var5 = var2.isViewsEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test421() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test421");


    net.sourceforge.schemaspy.util.Dot var0 = net.sourceforge.schemaspy.util.Dot.getInstance();
    var0.setHighQuality(true);
    boolean var4 = var0.supportsRenderer("java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)");
    boolean var5 = var0.exists();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test422() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test422");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    java.beans.PropertyChangeListener[] var2 = var0.getPropertyChangeListeners();
    boolean var3 = var0.hasFocus();
    var0.move(3, 23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test423() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test423");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    java.util.regex.Pattern var5 = var0.getTableExclusions();
    var0.setDriverPath("net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)s");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test424() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test424");


    net.sourceforge.schemaspy.ui.DbConfigTableModel var0 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    net.sourceforge.schemaspy.util.DbSpecificConfig var2 = new net.sourceforge.schemaspy.util.DbSpecificConfig("");
    var2.dumpUsage();
    var0.setDbSpecificConfig(var2);
    net.sourceforge.schemaspy.Config var5 = var2.getConfig();
    var5.setCss("ISO-8859-1s");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test425() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test425");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    var0.setSchemaSpec("hi!");
    boolean var7 = var0.isViewsEnabled();
    java.lang.String var8 = var0.getFont();
    java.lang.String var9 = var0.getMeta();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "Helvetica"+ "'", var8.equals("Helvetica"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test426() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test426");


    net.sourceforge.schemaspy.ui.DbConfigTableModel var0 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var3 = var0.getValueAt(431, 5);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test427() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test427");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    var0.setCss("dot version 2.2.1 or versions greater than 2.4");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test428() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test428");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    java.lang.String var5 = var0.getSchemaSpec();
    var0.setViewsEnabled(false);
    boolean var8 = var0.isEncodeCommentsEnabled();
    java.lang.String var9 = var0.getRenderer();
    var0.setConnectionProperties("ISO-8859-1");
    java.util.List var12 = var0.getColumnDetails();
    boolean var13 = var0.isImpliedConstraintsEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ""+ "'", var9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test429() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test429");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var7 = var0.getModalExclusionType();
    boolean var8 = var0.isAlwaysOnTop();
    java.lang.String var9 = var0.toString();
    net.sourceforge.schemaspy.ui.DbConfigPanel var10 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var10.requestFocus();
    var10.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var14 = var10.insets();
    var10.setAlignmentX(1.0f);
    java.awt.Color var17 = var10.getForeground();
    javax.swing.InputVerifier var18 = var10.getInputVerifier();
    var10.repaint(100L, 10, 1, 0, 100);
    java.awt.Component.BaselineResizeBehavior var25 = var10.getBaselineResizeBehavior();
    float var26 = var10.getAlignmentX();
    java.lang.String var27 = var10.getName();
    javax.swing.KeyStroke[] var28 = var10.getRegisteredKeyStrokes();
    java.awt.event.MouseMotionListener[] var29 = var10.getMouseMotionListeners();
    net.sourceforge.schemaspy.ui.MainFrame var30 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var31 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var32 = var31.getTableExclusions();
    boolean var33 = var31.isEvaluateAllEnabled();
    java.util.List var34 = var31.getColumnDetails();
    var30.setIconImages(var34);
    java.awt.LayoutManager var36 = var30.getLayout();
    var10.setLayout(var36);
    var0.setLayout(var36);
    boolean var39 = var0.isAlwaysOnTop();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "net.sourceforge.schemaspy.ui.MainFrame[frame6,0,23,500x312,invalid,hidden,layout=java.awt.BorderLayout,title=SchemaSpy,resizable,normal,defaultCloseOperation=HIDE_ON_CLOSE,rootPane=javax.swing.JRootPane[,0,0,0var9,invalid,layout=javax.swing.JRootPane$RootLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777673,maximumSize=,minimumSize=,preferredSize=],rootPaneCheckingEnabled=true]"+ "'", var9.equals("net.sourceforge.schemaspy.ui.MainFrame[frame6,0,23,500x312,invalid,hidden,layout=java.awt.BorderLayout,title=SchemaSpy,resizable,normal,defaultCloseOperation=HIDE_ON_CLOSE,rootPane=javax.swing.JRootPane[,0,0,0var9,invalid,layout=javax.swing.JRootPane$RootLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777673,maximumSize=,minimumSize=,preferredSize=],rootPaneCheckingEnabled=true]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test430() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test430");


    net.sourceforge.schemaspy.model.Routine var9 = new net.sourceforge.schemaspy.model.Routine("", "hi!", "a", "", "", false, "", "hi!", "");
    java.lang.String var10 = var9.getDefinition();
    net.sourceforge.schemaspy.model.Routine var20 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var21 = var20.getDataAccess();
    java.lang.String var22 = var20.getDefinitionLanguage();
    int var23 = var9.compareTo(var20);
    java.util.List var24 = var9.getParameters();
    net.sourceforge.schemaspy.view.WriteStats var25 = new net.sourceforge.schemaspy.view.WriteStats((java.util.Collection)var24);
    int var26 = var25.getNumTablesWritten();
    net.sourceforge.schemaspy.view.WriteStats var27 = new net.sourceforge.schemaspy.view.WriteStats(var25);
    int var28 = var27.getNumViewsWritten();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + ""+ "'", var10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "a"+ "'", var22.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);

  }

  public void test431() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test431");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    float var5 = var0.getAlignmentX();
    boolean var8 = var0.contains(1, (-1));
    var0.setOpaque(false);
    boolean var11 = var0.isRequestFocusEnabled();
    boolean var12 = var0.getInheritsPopupMenu();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test432() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test432");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    net.sourceforge.schemaspy.ui.DbConfigPanel var24 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var24.requestFocus();
    var24.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var28 = var24.insets();
    var24.setAlignmentX(1.0f);
    boolean var31 = var24.hasFocus();
    boolean var32 = var24.getFocusTraversalKeysEnabled();
    boolean var33 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var24);
    var24.firePropertyChange("hi!", 'a', 'a');
    net.sourceforge.schemaspy.ui.DbConfigPanel var38 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var39 = var38.isManagingFocus();
    int var40 = var38.getWidth();
    java.awt.Insets var41 = var38.insets();
    javax.accessibility.AccessibleContext var42 = var38.getAccessibleContext();
    boolean var45 = var38.inside(100, (-3));
    java.awt.Rectangle var46 = var38.getVisibleRect();
    var24.setBounds(var46);
    var0.setMaximizedBounds(var46);
    java.awt.Window[] var49 = var0.getOwnedWindows();
    java.awt.Dialog.ModalExclusionType var50 = var0.getModalExclusionType();
    var0.removeNotify();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test433() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test433");


    net.sourceforge.schemaspy.util.Dot var0 = net.sourceforge.schemaspy.util.Dot.getInstance();
    var0.setHighQuality(true);
    net.sourceforge.schemaspy.util.Dot.DotFailure var4 = var0.new DotFailure("a");
    boolean var5 = var0.exists();
    boolean var6 = var0.isHighQuality();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test434() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test434");


    net.sourceforge.schemaspy.model.Routine var9 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var10 = var9.getDataAccess();
    java.lang.String var11 = var9.getDefinitionLanguage();
    net.sourceforge.schemaspy.model.Routine var21 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var22 = var21.getDataAccess();
    java.lang.String var23 = var21.getComment();
    int var24 = var9.compareTo(var21);
    java.lang.String var25 = var9.getReturnType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "a"+ "'", var11.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "hi!"+ "'", var22.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "a"+ "'", var23.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "a"+ "'", var25.equals("a"));

  }

  public void test435() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test435");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    net.sourceforge.schemaspy.model.Routine var11 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var12 = var11.getDataAccess();
    java.lang.String var13 = var11.getDefinitionLanguage();
    java.util.List var14 = var11.getParameters();
    var0.setColumnDetails(var14);
    java.util.List var16 = net.sourceforge.schemaspy.DbAnalyzer.sortColumnsByTable(var14);
    java.util.List var17 = net.sourceforge.schemaspy.DbAnalyzer.getTablesWithIncrementingColumnNames((java.util.Collection)var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "a"+ "'", var13.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test436() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test436");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.firePropertyChange("ISO-8859-1", 0L, (-1L));
    var0.firePropertyChange("a", 0.0d, 1.0d);
    java.awt.Graphics var10 = var0.getGraphics();
    boolean var11 = var0.isPaintingForPrint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test437() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test437");


    net.sourceforge.schemaspy.model.Routine var9 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var10 = var9.getDataAccess();
    java.util.List var11 = var9.getParameters();
    java.util.List var12 = net.sourceforge.schemaspy.DbAnalyzer.getTablesWithoutIndexes((java.util.Collection)var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test438() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test438");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var26 = var25.isManagingFocus();
    java.awt.Rectangle var27 = var25.getVisibleRect();
    var0.setBounds(var27);
    var0.removeAll();
    java.awt.Container var30 = var0.getContentPane();
    javax.swing.JRootPane var31 = var0.getRootPane();
    java.awt.Point var32 = var31.getMousePosition();
    javax.swing.InputMap var33 = var31.getInputMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test439() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test439");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var26 = var25.isManagingFocus();
    java.awt.Rectangle var27 = var25.getVisibleRect();
    var0.setBounds(var27);
    var0.hide();
    java.util.List var30 = var0.getIconImages();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var32 = var0.getFocusTraversalKeys(300);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test440() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test440");


    net.sourceforge.schemaspy.model.Routine var9 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var10 = var9.getDataAccess();
    java.lang.String var11 = var9.getDefinitionLanguage();
    java.util.List var12 = var9.getParameters();
    java.util.List var13 = net.sourceforge.schemaspy.DbAnalyzer.sortColumnsByTable(var12);
    java.util.List var14 = net.sourceforge.schemaspy.DbAnalyzer.sortColumnsByTable(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "a"+ "'", var11.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test441() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test441");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    java.lang.String var5 = var0.getSchemaSpec();
    var0.setViewsEnabled(false);
    var0.setTableInclusions("");
    var0.setHasOrphans(true);
    java.lang.String var12 = var0.getFont();
    java.lang.String var13 = var0.getConnectionPropertiesFile();
    java.lang.String var14 = var0.getDb();
    boolean var15 = var0.isImpliedConstraintsEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "Helvetica"+ "'", var12.equals("Helvetica"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "a"+ "'", var14.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);

  }

  public void test442() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test442");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var26 = var25.isManagingFocus();
    java.awt.Rectangle var27 = var25.getVisibleRect();
    var0.setBounds(var27);
    var0.hide();
    java.util.List var30 = var0.getIconImages();
    net.sourceforge.schemaspy.ui.DbConfigPanel var31 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var31.requestFocus();
    var31.setFocusTraversalPolicyProvider(true);
    var31.firePropertyChange("a", (byte)10, (byte)0);
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var41 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.Set var42 = var41.entrySet();
    var31.setFocusTraversalKeys(0, var42);
    var0.setLocationRelativeTo((java.awt.Component)var31);
    java.awt.Insets var45 = var31.insets();
    boolean var46 = var31.getAutoscrolls();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test443() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test443");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    var0.setFocusableWindowState(true);
    var0.setSize(312, (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test444() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test444");


    net.sourceforge.schemaspy.view.DotNode.DotNodeConfig var2 = new net.sourceforge.schemaspy.view.DotNode.DotNodeConfig(true, true);

  }

  public void test445() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test445");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Point var5 = var0.getMousePosition(true);
    java.awt.Component var6 = var0.getNextFocusableComponent();
    boolean var7 = var0.isBackgroundSet();
    var0.transferFocus();
    net.sourceforge.schemaspy.util.DbSpecificOption var11 = new net.sourceforge.schemaspy.util.DbSpecificOption("", "ISO-8859-1");
    java.lang.String var12 = var11.toString();
    java.lang.String var13 = var11.getDescription();
    java.lang.Object var14 = var11.getValue();
    net.sourceforge.schemaspy.ui.MainFrame var15 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var16 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var17 = var16.getTableExclusions();
    boolean var18 = var16.isEvaluateAllEnabled();
    java.util.List var19 = var16.getColumnDetails();
    var15.setIconImages(var19);
    boolean var21 = var15.isAlwaysOnTop();
    var15.setFocusableWindowState(true);
    java.awt.Window[] var24 = var15.getOwnedWindows();
    java.awt.Component var25 = var15.getMostRecentFocusOwner();
    var11.setValue((java.lang.Object)var15);
    net.sourceforge.schemaspy.ui.DbConfigPanel var27 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var27.requestFocus();
    var27.firePropertyChange("ISO-8859-1", 0L, (-1L));
    java.awt.Color var33 = var27.getBackground();
    var27.requestFocus();
    net.sourceforge.schemaspy.ui.DbConfigPanel var35 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var35.requestFocus();
    var35.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var39 = var35.insets();
    var35.setAlignmentX(1.0f);
    var35.firePropertyChange("hi!", 10, 2);
    var35.setVisible(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var48 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var48.requestFocus();
    var48.setFocusTraversalPolicyProvider(true);
    java.awt.Point var53 = var48.getMousePosition(true);
    java.awt.Component var54 = var48.getNextFocusableComponent();
    java.awt.Dimension var55 = var48.getMinimumSize();
    var35.setPreferredSize(var55);
    java.awt.Dimension var57 = var27.getSize(var55);
    var15.setSize(var57);
    var0.setMaximumSize(var57);
    var0.revalidate();
    java.awt.im.InputMethodRequests var61 = var0.getInputMethodRequests();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"+ "'", var12.equals("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "ISO-8859-1"+ "'", var13.equals("ISO-8859-1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);

  }

  public void test446() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test446");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.requestFocus();
    var0.setOpaque(false);
    var0.invalidate();
    boolean var9 = var0.isFocusCycleRoot();
    net.sourceforge.schemaspy.ui.MainFrame var10 = new net.sourceforge.schemaspy.ui.MainFrame();
    java.awt.Window.Type var11 = var10.getType();
    var10.setFocusCycleRoot(true);
    java.util.Locale var14 = var10.getLocale();
    var0.setLocale(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test447() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test447");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.firePropertyChange("ISO-8859-1", 0L, (-1L));
    java.awt.Color var6 = var0.getBackground();
    var0.firePropertyChange("java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)", '#', ' ');
    boolean var13 = var0.contains((-3), 300);
    net.sourceforge.schemaspy.ui.DbConfigPanel var14 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var14.requestFocus();
    var14.setFocusTraversalPolicyProvider(true);
    boolean var18 = var14.isMinimumSizeSet();
    java.awt.Component var19 = var0.add((java.awt.Component)var14);
    java.awt.Dimension var20 = var0.getSize();
    var0.setOpaque(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test448() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test448");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    java.awt.Window.Type var1 = var0.getType();
    var0.hide();
    var0.firePropertyChange("schemaSpy.css", '4', '#');
    boolean var7 = var0.isAutoRequestFocus();
    net.sourceforge.schemaspy.ui.MainFrame var8 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var9 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var10 = var9.getTableExclusions();
    boolean var11 = var9.isEvaluateAllEnabled();
    java.util.List var12 = var9.getColumnDetails();
    var8.setIconImages(var12);
    net.sourceforge.schemaspy.ui.DbConfigPanel var14 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var14.requestFocus();
    var14.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var18 = var14.insets();
    var14.setAlignmentX(1.0f);
    boolean var21 = var14.hasFocus();
    boolean var22 = var14.getFocusTraversalKeysEnabled();
    boolean var23 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var14);
    net.sourceforge.schemaspy.ui.DbConfigPanel var24 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var25 = var24.isManagingFocus();
    java.awt.Rectangle var26 = var24.getVisibleRect();
    java.awt.Rectangle var27 = var14.getBounds(var26);
    java.awt.Dimension var28 = var14.getPreferredSize();
    var8.setMinimumSize(var28);
    var8.toBack();
    net.sourceforge.schemaspy.ui.MainFrame var31 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var32 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var33 = var32.getTableExclusions();
    boolean var34 = var32.isEvaluateAllEnabled();
    java.util.List var35 = var32.getColumnDetails();
    var31.setIconImages(var35);
    boolean var37 = var31.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var38 = var31.getModalExclusionType();
    net.sourceforge.schemaspy.ui.DbConfigPanel var39 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var39.requestFocus();
    var39.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var43 = var39.insets();
    var39.setAlignmentX(1.0f);
    boolean var46 = var39.hasFocus();
    boolean var47 = var39.getFocusTraversalKeysEnabled();
    boolean var48 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var39);
    net.sourceforge.schemaspy.ui.DbConfigPanel var49 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var50 = var49.isManagingFocus();
    java.awt.Rectangle var51 = var49.getVisibleRect();
    java.awt.Rectangle var52 = var39.getBounds(var51);
    java.awt.Dimension var53 = var39.getPreferredSize();
    var31.setSize(var53);
    java.awt.im.InputContext var55 = var31.getInputContext();
    java.lang.String var56 = var31.getWarningString();
    net.sourceforge.schemaspy.ui.DbConfigPanel var57 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var57.requestFocus();
    var57.setFocusTraversalPolicyProvider(true);
    var57.firePropertyChange("a", (byte)10, (byte)0);
    java.awt.Insets var65 = var57.insets();
    var57.setAlignmentY(100.0f);
    java.awt.Image var70 = var57.createImage(1, 1);
    java.awt.Dimension var71 = var57.getSize();
    var31.setSize(var71);
    var8.setMinimumSize(var71);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setGlassPane((java.awt.Component)var8);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test449() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test449");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    boolean var5 = var0.isMeterEnabled();
    java.lang.String var7 = var0.getParam("a");
    var0.setPromptForPasswordEnabled(false);
    java.lang.String var10 = var0.getCatalog();
    java.lang.String var11 = var0.getDescription();
    java.util.regex.Pattern var12 = var0.getColumnExclusions();
    java.lang.String var13 = var0.getRenderer();
    java.util.List var14 = var0.getColumnDetails();
    boolean var15 = var0.isRankDirBugEnabled();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setConnectionPropertiesFile(".hi!sdhi!sohi!sthi!s hi!svhi!sehi!srhi!sshi!sihi!sohi!snhi!s hi!s2hi!s.hi!s2hi!s.hi!s1hi!s hi!sohi!srhi!s hi!svhi!sehi!srhi!sshi!sihi!sohi!snhi!sshi!s hi!sghi!srhi!sehi!sahi!sthi!sehi!srhi!s hi!sthi!shhi!sahi!snhi!s hi!s2hi!s.hi!s4hi!s.hi!s{hi!s}hi!s.{}.");
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + ""+ "'", var13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test450() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test450");


    net.sourceforge.schemaspy.util.Dot var0 = net.sourceforge.schemaspy.util.Dot.getInstance();
    var0.setHighQuality(true);
    net.sourceforge.schemaspy.util.Dot.DotFailure var4 = var0.new DotFailure("a");
    boolean var5 = var0.exists();
    net.sourceforge.schemaspy.util.Version var6 = var0.getVersion();
    var0.setHighQuality(false);
    net.sourceforge.schemaspy.util.Version var9 = var0.getVersion();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test451() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test451");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.doLayout();
    boolean var8 = var0.isCursorSet();
    boolean var9 = var0.isValidateRoot();
    boolean var10 = var0.requestFocusInWindow();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test452() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test452");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isEncodeCommentsEnabled();
    java.lang.String var5 = var0.getRenderer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));

  }

  public void test453() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test453");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    java.awt.Color var7 = var0.getForeground();
    javax.swing.InputVerifier var8 = var0.getInputVerifier();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var0.computeVisibleRect(var21);
    net.sourceforge.schemaspy.ui.DbConfigPanel var23 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var23.requestFocus();
    var23.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var27 = var23.insets();
    java.lang.Object var28 = var23.getTreeLock();
    boolean var29 = var23.isFocusTraversalPolicyProvider();
    java.awt.Dimension var30 = var23.getMaximumSize();
    var0.setMinimumSize(var30);
    boolean var32 = var0.isFocusOwner();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test454() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test454");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    java.beans.PropertyChangeListener[] var2 = var0.getPropertyChangeListeners();
    var0.paintImmediately(0, (-1), (-1), 0);
    java.awt.event.KeyListener[] var8 = var0.getKeyListeners();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    var9.setAlignmentX(1.0f);
    java.awt.Color var16 = var9.getForeground();
    var0.setForeground(var16);
    java.awt.Container var18 = var0.getFocusCycleRootAncestor();
    boolean var19 = var0.getInheritsPopupMenu();
    var0.show();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test455() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test455");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    var0.setFocusableWindowState(true);
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var10 = var9.isManagingFocus();
    int var11 = var9.getWidth();
    javax.swing.InputVerifier var12 = var9.getInputVerifier();
    net.sourceforge.schemaspy.ui.DbConfigPanel var13 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var13.requestFocus();
    var13.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var17 = var13.insets();
    var13.requestFocus();
    boolean var19 = var13.isVisible();
    java.awt.Dimension var20 = var13.preferredSize();
    java.awt.Dimension var21 = var9.getSize(var20);
    var0.setSize(var20);
    java.lang.String var23 = var0.getWarningString();
    java.lang.String var24 = var0.getTitle();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "SchemaSpy"+ "'", var24.equals("SchemaSpy"));

  }

  public void test456() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test456");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.setFocusable(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var3 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var3.requestFocus();
    var3.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var7 = var3.insets();
    var3.setAlignmentX(1.0f);
    boolean var10 = var3.hasFocus();
    boolean var11 = var3.getFocusTraversalKeysEnabled();
    var3.setSize(1, (-1));
    java.lang.Object var15 = var0.getClientProperty((java.lang.Object)var3);
    var3.firePropertyChange("net.sourceforge.schemaspy.model.ProcessExecutionException: net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory) hi!s", ' ', ' ');
    var3.repaint(1L);
    boolean var22 = var3.isPaintingForPrint();
    java.awt.event.HierarchyBoundsListener[] var23 = var3.getHierarchyBoundsListeners();
    boolean var25 = var3.requestFocus(true);
    net.sourceforge.schemaspy.ui.MainFrame var26 = new net.sourceforge.schemaspy.ui.MainFrame();
    java.awt.Component var27 = var26.getGlassPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var28 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var28.requestFocus();
    java.beans.PropertyChangeListener[] var30 = var28.getPropertyChangeListeners();
    var28.paintImmediately(0, (-1), (-1), 0);
    java.awt.event.KeyListener[] var36 = var28.getKeyListeners();
    net.sourceforge.schemaspy.ui.DbConfigPanel var37 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var37.requestFocus();
    var37.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var41 = var37.insets();
    var37.setAlignmentX(1.0f);
    java.awt.Color var44 = var37.getForeground();
    var28.setForeground(var44);
    java.awt.Container var46 = var28.getFocusCycleRootAncestor();
    boolean var47 = var28.getInheritsPopupMenu();
    net.sourceforge.schemaspy.ui.DbConfigPanel var48 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var48.requestFocus();
    var48.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var52 = var48.insets();
    var48.setAlignmentX(1.0f);
    var48.firePropertyChange("hi!", 10, 2);
    var48.setVisible(false);
    net.sourceforge.schemaspy.ui.DbConfigPanel var61 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var61.requestFocus();
    var61.setFocusTraversalPolicyProvider(true);
    java.awt.Point var66 = var61.getMousePosition(true);
    java.awt.Component var67 = var61.getNextFocusableComponent();
    java.awt.Dimension var68 = var61.getMinimumSize();
    var48.setPreferredSize(var68);
    var28.setMinimumSize(var68);
    var26.resize(var68);
    var3.setPreferredSize(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test457() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test457");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.requestFocus();
    boolean var6 = var0.isVisible();
    var0.hide();
    java.awt.Dimension var8 = var0.getPreferredSize();
    net.sourceforge.schemaspy.ui.MainFrame var9 = new net.sourceforge.schemaspy.ui.MainFrame();
    java.awt.event.MouseMotionListener[] var10 = var9.getMouseMotionListeners();
    java.util.Locale var11 = var9.getLocale();
    java.awt.Dimension var12 = var9.getSize();
    java.awt.Toolkit var13 = var9.getToolkit();
    java.awt.Component var14 = var9.getFocusOwner();
    net.sourceforge.schemaspy.ui.DbConfigPanel var15 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var15.requestFocus();
    var15.setFocusTraversalPolicyProvider(true);
    boolean var19 = var15.requestFocusInWindow();
    java.awt.Dimension var20 = var15.getMaximumSize();
    var9.setMinimumSize(var20);
    boolean var22 = var9.isValidateRoot();
    java.awt.Color var23 = var9.getBackground();
    var0.setForeground(var23);
    java.awt.event.ComponentListener[] var25 = var0.getComponentListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test458() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test458");


    java.lang.String[] var1 = new java.lang.String[] { "net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"};
    net.sourceforge.schemaspy.Config var2 = new net.sourceforge.schemaspy.Config(var1);
    net.sourceforge.schemaspy.Config var3 = new net.sourceforge.schemaspy.Config(var1);
    net.sourceforge.schemaspy.Config var4 = new net.sourceforge.schemaspy.Config(var1);
    net.sourceforge.schemaspy.Config var5 = new net.sourceforge.schemaspy.Config(var1);
    java.util.List var6 = var5.getColumnDetails();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test459() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test459");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    java.awt.event.MouseMotionListener[] var1 = var0.getMouseMotionListeners();
    java.util.Locale var2 = var0.getLocale();
    java.awt.Dimension var3 = var0.getSize();
    boolean var4 = var0.isMinimumSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test460() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test460");


    net.sourceforge.schemaspy.model.Routine var9 = new net.sourceforge.schemaspy.model.Routine("a", "java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)", "net.sourceforge.schemaspy.view.StyleSheet$ParseException: java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)", "PanelUI", "/Users/Jesh/Documents/School/Summer 2015/Independent Study/Eclipse/workspace/36_schemaspy/bin", false, "Value", "java.io.FileNotFoundException: net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] (No such file or directory)", "schemaSpy.css");
    java.lang.String var10 = var9.getDataAccess();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Value"+ "'", var10.equals("Value"));

  }

  public void test461() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test461");


    net.sourceforge.schemaspy.MultipleSchemaAnalyzer var0 = net.sourceforge.schemaspy.MultipleSchemaAnalyzer.getInstance();
    net.sourceforge.schemaspy.ui.MainFrame var2 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var3 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var3.requestFocus();
    var3.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var7 = var3.insets();
    var3.setAlignmentX(1.0f);
    java.awt.Color var10 = var3.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var11 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var11.requestFocus();
    var11.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var15 = var11.insets();
    float var16 = var11.getAlignmentX();
    var11.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var22 = var11.getMouseListeners();
    java.awt.Rectangle var23 = var11.bounds();
    var3.setBounds(var23);
    var2.setMaximizedBounds(var23);
    java.awt.Container var26 = var2.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var27 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var28 = var27.isManagingFocus();
    java.awt.Rectangle var29 = var27.getVisibleRect();
    var2.setBounds(var29);
    var2.hide();
    java.util.List var32 = var2.getIconImages();
    java.util.List var33 = net.sourceforge.schemaspy.DbAnalyzer.sortColumnsByTable(var32);
    net.sourceforge.schemaspy.view.WriteStats var34 = new net.sourceforge.schemaspy.view.WriteStats((java.util.Collection)var33);
    net.sourceforge.schemaspy.TableOrderer var35 = new net.sourceforge.schemaspy.TableOrderer();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var37 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    var37.clear();
    java.util.List var39 = net.sourceforge.schemaspy.DbAnalyzer.getRailsConstraints((java.util.Map)var37);
    java.util.Set var40 = var37.entrySet();
    net.sourceforge.schemaspy.model.Routine var50 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var51 = var50.getDataAccess();
    java.lang.String var52 = var50.getDefinitionLanguage();
    java.util.List var53 = var50.getParameters();
    java.util.List var54 = var35.getTablesOrderedByRI((java.util.Collection)var40, (java.util.Collection)var53);
    java.util.List var55 = net.sourceforge.schemaspy.DbAnalyzer.getImpliedConstraints((java.util.Collection)var40);
    net.sourceforge.schemaspy.Config var56 = new net.sourceforge.schemaspy.Config();
    var56.setDb("a");
    java.lang.String var59 = var56.getServer();
    boolean var60 = var56.isHtmlGenerationEnabled();
    java.lang.String var61 = var56.getSchemaSpec();
    var56.setViewsEnabled(false);
    var56.setTableInclusions("");
    var56.setEvaluateAllEnabled(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.analyze("Password associated with user id", var33, var55, var56);
      fail("Expected exception of type net.sourceforge.schemaspy.Config.MissingRequiredParameterException");
    } catch (net.sourceforge.schemaspy.Config.MissingRequiredParameterException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "hi!"+ "'", var51.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "a"+ "'", var52.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);

  }

  public void test462() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test462");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    java.awt.Toolkit var6 = var0.getToolkit();
    boolean var7 = var0.isFocused();
    int var8 = var0.getExtendedState();
    java.awt.Window.Type var9 = var0.getType();
    net.sourceforge.schemaspy.ui.MainFrame var10 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var11 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var12 = var11.getTableExclusions();
    boolean var13 = var11.isEvaluateAllEnabled();
    java.util.List var14 = var11.getColumnDetails();
    var10.setIconImages(var14);
    boolean var16 = var10.isAlwaysOnTop();
    var10.setFocusableWindowState(true);
    net.sourceforge.schemaspy.ui.DbConfigPanel var19 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var20 = var19.isManagingFocus();
    int var21 = var19.getWidth();
    javax.swing.InputVerifier var22 = var19.getInputVerifier();
    net.sourceforge.schemaspy.ui.DbConfigPanel var23 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var23.requestFocus();
    var23.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var27 = var23.insets();
    var23.requestFocus();
    boolean var29 = var23.isVisible();
    java.awt.Dimension var30 = var23.preferredSize();
    java.awt.Dimension var31 = var19.getSize(var30);
    var10.setSize(var30);
    java.lang.String var33 = var10.getWarningString();
    java.awt.Dimension var34 = var10.getMinimumSize();
    var0.setSize(var34);
    var0.setTitle("Password associated with user id");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test463() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test463");


    java.lang.String[] var1 = new java.lang.String[] { "net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"};
    net.sourceforge.schemaspy.Config var2 = new net.sourceforge.schemaspy.Config(var1);
    net.sourceforge.schemaspy.Config var3 = new net.sourceforge.schemaspy.Config(var1);
    net.sourceforge.schemaspy.Config var4 = new net.sourceforge.schemaspy.Config(var1);
    net.sourceforge.schemaspy.Config var5 = new net.sourceforge.schemaspy.Config(var1);
    net.sourceforge.schemaspy.Config var6 = new net.sourceforge.schemaspy.Config(var1);
    var6.setSchemaSpec("net.sourceforge.schemaspy.ui.MainFrame[frame1,0,23,500x312,invalid,hidden,layout=java.awt.BorderLayout,title=SchemaSpy,resizable,normal,defaultCloseOperation=HIDE_ON_CLOSE,rootPane=javax.swing.JRootPane[,0,0,0x0,invalid,layout=javax.swing.JRootPane$RootLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777673,maximumSize=,minimumSize=,preferredSize=],rootPaneCheckingEnabled=true]");
    boolean var9 = var6.isEncodeCommentsEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test464() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test464");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    java.awt.event.MouseMotionListener[] var1 = var0.getMouseMotionListeners();
    java.util.Locale var2 = var0.getLocale();
    javax.swing.JComponent.setDefaultLocale(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test465() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test465");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.doLayout();
    boolean var8 = var0.isCursorSet();
    var0.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var13 = var0.getLocation();
    var0.setSize(2, 10);
    var0.grabFocus();
    var0.setFocusTraversalKeysEnabled(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test466() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test466");


    net.sourceforge.schemaspy.util.CaseInsensitiveMap var1 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    var1.clear();
    java.util.List var3 = net.sourceforge.schemaspy.DbAnalyzer.getRailsConstraints((java.util.Map)var1);
    var1.clear();
    java.lang.Object var5 = var1.clone();
    java.lang.String var6 = var1.toString();
    java.util.Set var7 = var1.keySet();
    net.sourceforge.schemaspy.ui.MainFrame var8 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var9 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var10 = var9.getTableExclusions();
    boolean var11 = var9.isEvaluateAllEnabled();
    java.util.List var12 = var9.getColumnDetails();
    var8.setIconImages(var12);
    boolean var14 = var8.isAlwaysOnTop();
    var8.setFocusableWindowState(true);
    boolean var17 = var8.isFocusCycleRoot();
    java.awt.Graphics var18 = var8.getGraphics();
    boolean var19 = var8.isFocusCycleRoot();
    java.awt.Dimension var20 = var8.size();
    boolean var21 = var1.equals((java.lang.Object)var8);
    net.sourceforge.schemaspy.Config var22 = new net.sourceforge.schemaspy.Config();
    var22.setDb("a");
    java.lang.String var25 = var22.getServer();
    boolean var26 = var22.isHtmlGenerationEnabled();
    var22.setOutputDir("hi!");
    net.sourceforge.schemaspy.Config var29 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var30 = var29.getTableExclusions();
    var29.setSqlFormatter("hi!");
    net.sourceforge.schemaspy.view.DefaultSqlFormatter var33 = new net.sourceforge.schemaspy.view.DefaultSqlFormatter();
    var29.setSqlFormatter((net.sourceforge.schemaspy.view.SqlFormatter)var33);
    var22.setSqlFormatter((net.sourceforge.schemaspy.view.SqlFormatter)var33);
    boolean var36 = var1.equals((java.lang.Object)var22);
    net.sourceforge.schemaspy.ui.MainFrame var37 = new net.sourceforge.schemaspy.ui.MainFrame();
    java.awt.event.MouseMotionListener[] var38 = var37.getMouseMotionListeners();
    javax.swing.JRootPane var39 = var37.getRootPane();
    net.sourceforge.schemaspy.ui.MainFrame var40 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var41 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var41.requestFocus();
    var41.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var45 = var41.insets();
    var41.setAlignmentX(1.0f);
    java.awt.Color var48 = var41.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var49 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var49.requestFocus();
    var49.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var53 = var49.insets();
    float var54 = var49.getAlignmentX();
    var49.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var60 = var49.getMouseListeners();
    java.awt.Rectangle var61 = var49.bounds();
    var41.setBounds(var61);
    var40.setMaximizedBounds(var61);
    java.util.List var64 = var40.getIconImages();
    java.awt.Rectangle var65 = var40.getMaximizedBounds();
    var40.setVisible(true);
    java.awt.Point var68 = var40.getLocation();
    var37.setLocation(var68);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var70 = var1.remove((java.lang.Object)var68);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "{}"+ "'", var6.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test467() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test467");


    net.sourceforge.schemaspy.util.CaseInsensitiveMap var1 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.List var2 = net.sourceforge.schemaspy.DbAnalyzer.getRailsConstraints((java.util.Map)var1);
    java.util.Set var3 = var1.keySet();
    java.util.Set var4 = var1.entrySet();
    var1.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test468() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test468");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    java.awt.Component var2 = var0.getNextFocusableComponent();
    java.lang.String var3 = var0.toString();
    javax.swing.TransferHandler var4 = var0.getTransferHandler();
    var0.paintImmediately((-3), 5, 0, 5);
    var0.revalidate();
    int var11 = var0.getHeight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0var3,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var3.equals("net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0var3,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);

  }

  public void test469() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test469");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.awt.Container var24 = var0.getContentPane();
    net.sourceforge.schemaspy.ui.DbConfigPanel var25 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var26 = var25.isManagingFocus();
    java.awt.Rectangle var27 = var25.getVisibleRect();
    var0.setBounds(var27);
    var0.hide();
    java.util.List var30 = var0.getIconImages();
    java.util.List var31 = net.sourceforge.schemaspy.DbAnalyzer.sortColumnsByTable(var30);
    java.util.List var32 = net.sourceforge.schemaspy.DbAnalyzer.getTablesWithOneColumn((java.util.Collection)var31);
    java.util.List var33 = net.sourceforge.schemaspy.DbAnalyzer.getTablesWithoutIndexes((java.util.Collection)var32);
    net.sourceforge.schemaspy.view.WriteStats var34 = new net.sourceforge.schemaspy.view.WriteStats((java.util.Collection)var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test470() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test470");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    var0.firePropertyChange("a", (byte)10, (byte)0);
    java.awt.Insets var8 = var0.insets();
    var0.setAlignmentY(100.0f);
    java.lang.Object var11 = var0.getTreeLock();
    var0.addNotify();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test471() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test471");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    java.awt.Color var7 = var0.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var8 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var8.requestFocus();
    var8.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var12 = var8.insets();
    float var13 = var8.getAlignmentX();
    var8.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var19 = var8.getMouseListeners();
    java.awt.Rectangle var20 = var8.bounds();
    var0.setBounds(var20);
    net.sourceforge.schemaspy.ui.MainFrame var22 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var23 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var24 = var23.getTableExclusions();
    boolean var25 = var23.isEvaluateAllEnabled();
    java.util.List var26 = var23.getColumnDetails();
    var22.setIconImages(var26);
    boolean var28 = var22.isAlwaysOnTop();
    var22.setFocusableWindowState(true);
    net.sourceforge.schemaspy.ui.DbConfigPanel var31 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var32 = var31.isManagingFocus();
    int var33 = var31.getWidth();
    javax.swing.InputVerifier var34 = var31.getInputVerifier();
    net.sourceforge.schemaspy.ui.DbConfigPanel var35 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var35.requestFocus();
    var35.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var39 = var35.insets();
    var35.requestFocus();
    boolean var41 = var35.isVisible();
    java.awt.Dimension var42 = var35.preferredSize();
    java.awt.Dimension var43 = var31.getSize(var42);
    var22.setSize(var42);
    var0.setMaximumSize(var42);
    boolean var46 = var0.requestDefaultFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test472() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test472");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var7 = var0.getModalExclusionType();
    net.sourceforge.schemaspy.ui.DbConfigPanel var8 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var8.requestFocus();
    var8.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var12 = var8.insets();
    var8.setAlignmentX(1.0f);
    boolean var15 = var8.hasFocus();
    boolean var16 = var8.getFocusTraversalKeysEnabled();
    boolean var17 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var8);
    net.sourceforge.schemaspy.ui.DbConfigPanel var18 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var19 = var18.isManagingFocus();
    java.awt.Rectangle var20 = var18.getVisibleRect();
    java.awt.Rectangle var21 = var8.getBounds(var20);
    java.awt.Dimension var22 = var8.getPreferredSize();
    var0.setSize(var22);
    java.awt.im.InputContext var24 = var0.getInputContext();
    float var25 = var0.getOpacity();
    java.lang.String var26 = var0.getTitle();
    var0.reshape(0, 11, (-3), 0);
    net.sourceforge.schemaspy.ui.DbConfigPanel var32 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var32.requestFocus();
    var32.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var36 = var32.insets();
    boolean var37 = var32.isFontSet();
    var32.transferFocusUpCycle();
    java.awt.LayoutManager var39 = var32.getLayout();
    var0.setLayout(var39);
    java.awt.Container var41 = var0.getFocusCycleRootAncestor();
    net.sourceforge.schemaspy.ui.DbConfigPanel var42 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var42.requestFocus();
    var42.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var46 = var42.insets();
    var42.setAlignmentX(1.0f);
    boolean var49 = var42.hasFocus();
    boolean var50 = var42.getFocusTraversalKeysEnabled();
    boolean var51 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var42);
    net.sourceforge.schemaspy.ui.DbConfigPanel var52 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var53 = var52.isManagingFocus();
    java.awt.Rectangle var54 = var52.getVisibleRect();
    java.awt.Rectangle var55 = var42.getBounds(var54);
    java.awt.Dimension var56 = var42.getPreferredSize();
    var0.setSize(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "SchemaSpy"+ "'", var26.equals("SchemaSpy"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test473() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test473");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isHtmlGenerationEnabled();
    java.lang.String var5 = var0.getSchemaSpec();
    var0.setViewsEnabled(false);
    boolean var8 = var0.isEncodeCommentsEnabled();
    var0.setTableInclusions("Unknown");
    var0.setConnectionProperties("hi!s");
    var0.setHasOrphans(false);
    boolean var15 = var0.isViewsEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test474() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test474");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    var0.setFocusableWindowState(true);
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var10 = var9.isManagingFocus();
    int var11 = var9.getWidth();
    javax.swing.InputVerifier var12 = var9.getInputVerifier();
    net.sourceforge.schemaspy.ui.DbConfigPanel var13 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var13.requestFocus();
    var13.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var17 = var13.insets();
    var13.requestFocus();
    boolean var19 = var13.isVisible();
    java.awt.Dimension var20 = var13.preferredSize();
    java.awt.Dimension var21 = var9.getSize(var20);
    var0.setSize(var20);
    java.lang.String var23 = var0.getWarningString();
    var0.setFocusableWindowState(true);
    boolean var26 = var0.isAutoRequestFocus();
    int var27 = var0.getComponentCount();
    java.awt.Color var28 = var0.getBackground();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test475() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test475");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    var0.setRankDirBugEnabled(true);
    java.lang.String var4 = var0.getServer();
    var0.setEncodeCommentsEnabled(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Properties var8 = var0.determineDbProperties("Helvetica");
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test476() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test476");


    net.sourceforge.schemaspy.util.DbSpecificOption var2 = new net.sourceforge.schemaspy.util.DbSpecificOption("", "ISO-8859-1");
    java.lang.String var3 = var2.toString();
    java.lang.String var4 = var2.getDescription();
    java.lang.String var5 = var2.getName();
    java.lang.String var6 = var2.getDescription();
    java.lang.String var7 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"+ "'", var3.equals("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ISO-8859-1"+ "'", var4.equals("ISO-8859-1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ISO-8859-1"+ "'", var6.equals("ISO-8859-1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"+ "'", var7.equals("DbSpecificOption name: '' value: 'null' description: 'ISO-8859-1'"));

  }

  public void test477() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test477");


    net.sourceforge.schemaspy.util.DbSpecificConfig var1 = new net.sourceforge.schemaspy.util.DbSpecificConfig("net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    net.sourceforge.schemaspy.Config var2 = var1.getConfig();
    net.sourceforge.schemaspy.Config var3 = var1.getConfig();
    var3.setIndirectColumnExclusions("ISO-8859-1s");
    net.sourceforge.schemaspy.Config.setInstance(var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.setLogLevel("SchemaSpy");
      fail("Expected exception of type net.sourceforge.schemaspy.model.InvalidConfigurationException");
    } catch (net.sourceforge.schemaspy.model.InvalidConfigurationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test478() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test478");


    net.sourceforge.schemaspy.ui.DbConfigTableModel var0 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    net.sourceforge.schemaspy.util.DbSpecificConfig var2 = new net.sourceforge.schemaspy.util.DbSpecificConfig("");
    var2.dumpUsage();
    var0.setDbSpecificConfig(var2);
    net.sourceforge.schemaspy.Config var5 = var2.getConfig();
    var5.setSchemaSpec("ISO-8859-1");
    java.util.List var8 = var5.getSchemas();
    boolean var9 = var5.hasRoutines();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Properties var10 = var5.getDbProperties();
      fail("Expected exception of type net.sourceforge.schemaspy.model.InvalidConfigurationException");
    } catch (net.sourceforge.schemaspy.model.InvalidConfigurationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test479() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test479");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.hasOrphans();
    var0.setRankDirBugEnabled(true);
    java.util.regex.Pattern var7 = var0.getTableExclusions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test480() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test480");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    java.awt.Color var7 = var0.getForeground();
    javax.swing.InputVerifier var8 = var0.getInputVerifier();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var0.computeVisibleRect(var21);
    net.sourceforge.schemaspy.ui.DbConfigPanel var23 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var23.requestFocus();
    var23.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var27 = var23.insets();
    var23.setAlignmentX(1.0f);
    java.awt.Color var30 = var23.getForeground();
    javax.swing.InputVerifier var31 = var23.getInputVerifier();
    var23.repaint(100L, 10, 1, 0, 100);
    var23.setEnabled(false);
    javax.swing.InputMap var40 = var23.getInputMap();
    var23.firePropertyChange("{}s", '#', 'a');
    net.sourceforge.schemaspy.ui.DbConfigPanel var45 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var45.requestFocus();
    var45.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var49 = var45.insets();
    var45.setAlignmentX(1.0f);
    boolean var52 = var45.hasFocus();
    boolean var53 = var45.getFocusTraversalKeysEnabled();
    boolean var54 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var45);
    var45.firePropertyChange("hi!", 'a', 'a');
    java.lang.String var59 = var45.getUIClassID();
    var45.repaint();
    javax.swing.ActionMap var61 = var45.getActionMap();
    var23.setActionMap(var61);
    var0.setActionMap(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "PanelUI"+ "'", var59.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test481() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test481");


    net.sourceforge.schemaspy.ui.DbTypeSelectorModel var1 = new net.sourceforge.schemaspy.ui.DbTypeSelectorModel("ISO-8859-1");
    int var2 = var1.getSize();
    java.lang.Object var3 = var1.getSelectedItem();
    net.sourceforge.schemaspy.ui.DbConfigPanel var4 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var4.requestFocus();
    var4.setFocusTraversalPolicyProvider(true);
    var4.firePropertyChange("a", (byte)10, (byte)0);
    java.awt.Insets var12 = var4.insets();
    var4.setAlignmentY(100.0f);
    var1.setSelectedItem((java.lang.Object)100.0f);
    net.sourceforge.schemaspy.util.LineWriter var19 = new net.sourceforge.schemaspy.util.LineWriter("Unknown", 100, "ISO-8859-1");
    var19.flush();
    var19.flush();
    var1.setSelectedItem((java.lang.Object)var19);
    net.sourceforge.schemaspy.ui.DbConfigPanel var23 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var23.requestFocus();
    var23.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var27 = var23.insets();
    var23.requestFocus();
    boolean var29 = var23.isVisible();
    java.awt.Graphics var30 = var23.getGraphics();
    java.awt.Dimension var31 = var23.minimumSize();
    var1.setSelectedItem((java.lang.Object)var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test482() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test482");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var1 = var0.getTableExclusions();
    java.lang.String var2 = var0.getConnectionPropertiesFile();
    java.lang.String var3 = var0.getHost();
    java.lang.String var4 = var0.getCss();
    java.util.regex.Pattern var5 = var0.getTableExclusions();
    java.lang.String var6 = var0.getCharset();
    java.lang.Integer var7 = var0.getPort();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "schemaSpy.css"+ "'", var4.equals("schemaSpy.css"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ISO-8859-1"+ "'", var6.equals("ISO-8859-1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test483() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test483");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    java.awt.event.HierarchyBoundsListener[] var5 = var0.getHierarchyBoundsListeners();
    net.sourceforge.schemaspy.ui.DbConfigPanel var6 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var6.requestFocus();
    var6.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var10 = var6.insets();
    var6.setAlignmentX(1.0f);
    var6.firePropertyChange("hi!", 10, 2);
    var6.paintImmediately(100, 10, 2, 0);
    java.lang.Object var22 = var0.getClientProperty((java.lang.Object)100);
    net.sourceforge.schemaspy.ui.DbConfigPanel var23 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var23.requestFocus();
    var23.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var27 = var23.insets();
    var23.setAlignmentX(1.0f);
    var23.doLayout();
    boolean var31 = var23.isCursorSet();
    var23.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var36 = var23.getLocation();
    var0.setLocation(var36);
    net.sourceforge.schemaspy.ui.DbConfigPanel var38 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var38.requestFocus();
    var38.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var42 = var38.insets();
    float var43 = var38.getAlignmentX();
    var38.setBounds(0, 1, 10, 100);
    java.awt.Rectangle var49 = var38.getBounds();
    java.awt.Rectangle var50 = var0.getBounds(var49);
    boolean var51 = var0.isPreferredSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test484() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test484");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    int var1 = var0.getY();
    var0.resetKeyboardActions();
    var0.setVerifyInputWhenFocusTarget(false);
    boolean var5 = var0.isFocusTraversalPolicyProvider();
    boolean var6 = var0.hasFocus();
    java.lang.String var7 = var0.getToolTipText();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test485() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test485");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.util.List var24 = var0.getIconImages();
    boolean var25 = var0.isDisplayable();
    java.awt.Dimension var26 = var0.preferredSize();
    boolean var27 = var0.hasFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test486() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test486");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    java.awt.event.HierarchyBoundsListener[] var5 = var0.getHierarchyBoundsListeners();
    net.sourceforge.schemaspy.ui.DbConfigPanel var6 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var6.requestFocus();
    var6.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var10 = var6.insets();
    var6.setAlignmentX(1.0f);
    var6.firePropertyChange("hi!", 10, 2);
    var6.paintImmediately(100, 10, 2, 0);
    java.lang.Object var22 = var0.getClientProperty((java.lang.Object)100);
    net.sourceforge.schemaspy.ui.DbConfigPanel var23 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var23.requestFocus();
    var23.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var27 = var23.insets();
    var23.setAlignmentX(1.0f);
    var23.doLayout();
    boolean var31 = var23.isCursorSet();
    var23.firePropertyChange("ISO-8859-1", '4', 'a');
    java.awt.Point var36 = var23.getLocation();
    var0.setLocation(var36);
    var0.nextFocus();
    javax.swing.JPopupMenu var39 = var0.getComponentPopupMenu();
    var0.setAlignmentY(0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);

  }

  public void test487() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test487");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.reshape(1, 1, 1, 100);
    net.sourceforge.schemaspy.ui.DbConfigPanel var10 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var10.requestFocus();
    var10.setFocusTraversalPolicyProvider(true);
    java.awt.Point var15 = var10.getMousePosition(true);
    java.awt.Component var16 = var10.getNextFocusableComponent();
    java.awt.Dimension var17 = var10.getMinimumSize();
    java.awt.Dimension var18 = var0.getSize(var17);
    var0.enable(false);
    java.awt.Component var23 = var0.getComponentAt((-3), 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test488() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test488");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    boolean var7 = var0.isResizable();
    int var8 = var0.getDefaultCloseOperation();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1);

  }

  public void test489() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test489");


    net.sourceforge.schemaspy.Config var0 = new net.sourceforge.schemaspy.Config();
    var0.setDb("a");
    java.lang.String var3 = var0.getServer();
    boolean var4 = var0.isDbHelpRequired();
    java.lang.String var5 = var0.getFont();
    boolean var6 = var0.isLogoEnabled();
    java.util.Properties var7 = var0.getConnectionProperties();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Helvetica"+ "'", var5.equals("Helvetica"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test490() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test490");


    net.sourceforge.schemaspy.model.Routine var9 = new net.sourceforge.schemaspy.model.Routine("", "hi!", "a", "", "", false, "", "hi!", "");
    java.lang.String var10 = var9.getDefinition();
    net.sourceforge.schemaspy.model.Routine var20 = new net.sourceforge.schemaspy.model.Routine("", "", "a", "a", "a", true, "hi!", "hi!", "a");
    java.lang.String var21 = var20.getDataAccess();
    java.lang.String var22 = var20.getDefinitionLanguage();
    int var23 = var9.compareTo(var20);
    net.sourceforge.schemaspy.model.RoutineParameter var27 = new net.sourceforge.schemaspy.model.RoutineParameter("ISO-8859-1s", "hi!", "");
    var20.addParameter(var27);
    java.lang.String var29 = var27.getType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + ""+ "'", var10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "a"+ "'", var22.equals("a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi!"+ "'", var29.equals("hi!"));

  }

  public void test491() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test491");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var7 = var0.getModalExclusionType();
    net.sourceforge.schemaspy.ui.DbConfigPanel var8 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var8.requestFocus();
    var8.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var12 = var8.insets();
    var8.setAlignmentX(1.0f);
    boolean var15 = var8.hasFocus();
    boolean var16 = var8.getFocusTraversalKeysEnabled();
    boolean var17 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var8);
    net.sourceforge.schemaspy.ui.DbConfigPanel var18 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var19 = var18.isManagingFocus();
    java.awt.Rectangle var20 = var18.getVisibleRect();
    java.awt.Rectangle var21 = var8.getBounds(var20);
    java.awt.Dimension var22 = var8.getPreferredSize();
    var0.setSize(var22);
    java.awt.im.InputContext var24 = var0.getInputContext();
    java.lang.String var25 = var0.getWarningString();
    int var26 = var0.getState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);

  }

  public void test492() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test492");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    boolean var7 = var0.hasFocus();
    boolean var8 = var0.getFocusTraversalKeysEnabled();
    boolean var9 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var0);
    var0.firePropertyChange("hi!", 'a', 'a');
    java.lang.String var14 = var0.getUIClassID();
    var0.repaint();
    java.awt.Dimension var16 = var0.preferredSize();
    var0.revalidate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test493() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test493");


    net.sourceforge.schemaspy.ui.DbConfigTableModel var0 = new net.sourceforge.schemaspy.ui.DbConfigTableModel();
    var0.fireTableRowsInserted(10, (-3));
    var0.fireTableRowsDeleted((-1), 0);
    int var7 = var0.getColumnCount();
    javax.swing.event.TableModelListener[] var8 = var0.getTableModelListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test494() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test494");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.doLayout();
    int var8 = var0.getWidth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);

  }

  public void test495() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test495");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    boolean var7 = var0.hasFocus();
    boolean var8 = var0.getFocusTraversalKeysEnabled();
    boolean var9 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var0);
    var0.firePropertyChange("hi!", 'a', 'a');
    java.lang.String var14 = var0.getUIClassID();
    var0.repaint();
    java.awt.Dimension var16 = var0.preferredSize();
    var0.firePropertyChange("a", 'a', '4');
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var23 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.Set var24 = var23.entrySet();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var26 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    java.util.List var27 = net.sourceforge.schemaspy.DbAnalyzer.getRailsConstraints((java.util.Map)var26);
    net.sourceforge.schemaspy.Config var28 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var29 = var28.getTableExclusions();
    boolean var30 = var28.isHtmlGenerationEnabled();
    net.sourceforge.schemaspy.util.CaseInsensitiveMap var32 = new net.sourceforge.schemaspy.util.CaseInsensitiveMap(1);
    var32.clear();
    var28.setDbSpecificOptions((java.util.Map)var32);
    java.lang.String var35 = var32.toString();
    var26.putAll((java.util.Map)var32);
    var23.putAll((java.util.Map)var32);
    java.util.Set var38 = var23.entrySet();
    java.util.Set var39 = var23.keySet();
    java.util.List var40 = net.sourceforge.schemaspy.DbAnalyzer.getMustBeUniqueNullableColumns((java.util.Collection)var39);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setFocusTraversalKeys((-1), var39);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "{}"+ "'", var35.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test496() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test496");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    net.sourceforge.schemaspy.ui.DbConfigPanel var6 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var6.requestFocus();
    var6.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var10 = var6.insets();
    var6.setAlignmentX(1.0f);
    boolean var13 = var6.hasFocus();
    boolean var14 = var6.getFocusTraversalKeysEnabled();
    boolean var15 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var6);
    net.sourceforge.schemaspy.ui.DbConfigPanel var16 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var17 = var16.isManagingFocus();
    java.awt.Rectangle var18 = var16.getVisibleRect();
    java.awt.Rectangle var19 = var6.getBounds(var18);
    java.awt.Dimension var20 = var6.getPreferredSize();
    var0.setMinimumSize(var20);
    var0.toBack();
    net.sourceforge.schemaspy.ui.DbConfigPanel var23 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var23.requestFocus();
    var23.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var27 = var23.insets();
    float var28 = var23.getAlignmentX();
    boolean var31 = var23.contains(1, (-1));
    var23.setOpaque(false);
    boolean var34 = var23.getInheritsPopupMenu();
    var0.setGlassPane((java.awt.Component)var23);
    net.sourceforge.schemaspy.ui.MainFrame var36 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var37 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var37.requestFocus();
    var37.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var41 = var37.insets();
    var37.setAlignmentX(1.0f);
    java.awt.Color var44 = var37.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var45 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var45.requestFocus();
    var45.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var49 = var45.insets();
    float var50 = var45.getAlignmentX();
    var45.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var56 = var45.getMouseListeners();
    java.awt.Rectangle var57 = var45.bounds();
    var37.setBounds(var57);
    var36.setMaximizedBounds(var57);
    net.sourceforge.schemaspy.ui.DbConfigPanel var60 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var60.requestFocus();
    var60.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var64 = var60.insets();
    var60.setAlignmentX(1.0f);
    boolean var67 = var60.hasFocus();
    boolean var68 = var60.getFocusTraversalKeysEnabled();
    boolean var69 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var60);
    var60.firePropertyChange("hi!", 'a', 'a');
    net.sourceforge.schemaspy.ui.DbConfigPanel var74 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var75 = var74.isManagingFocus();
    int var76 = var74.getWidth();
    java.awt.Insets var77 = var74.insets();
    javax.accessibility.AccessibleContext var78 = var74.getAccessibleContext();
    boolean var81 = var74.inside(100, (-3));
    java.awt.Rectangle var82 = var74.getVisibleRect();
    var60.setBounds(var82);
    var36.setMaximizedBounds(var82);
    var0.setBounds(var82);
    java.awt.event.WindowListener[] var86 = var0.getWindowListeners();
    boolean var87 = var0.isFocusCycleRoot();
    var0.setTitle("net.sourceforge.schemaspy.ui.DbConfigPanel[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    boolean var90 = var0.isFocused();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);

  }

  public void test497() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test497");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var4 = var0.insets();
    var0.setAlignmentX(1.0f);
    var0.firePropertyChange("hi!", 10, 2);
    int var11 = var0.getComponentCount();
    java.lang.Object var12 = var0.getTreeLock();
    java.awt.Toolkit var13 = var0.getToolkit();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test498() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test498");


    net.sourceforge.schemaspy.ui.DbConfigPanel var0 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var0.requestFocus();
    var0.setFocusTraversalPolicyProvider(true);
    javax.swing.event.AncestorListener[] var4 = var0.getAncestorListeners();
    var0.paintImmediately(1, 0, 0, (-1));
    java.awt.Dimension var10 = var0.size();
    float var11 = var0.getAlignmentY();
    var0.paintImmediately(100, 3, (-3), 10);
    var0.firePropertyChange("hi!s", 1L, 10L);
    net.sourceforge.schemaspy.ui.DbConfigPanel var21 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var22 = var21.isManagingFocus();
    var21.firePropertyChange("dot version 2.2.1 or versions greater than 2.4", 1.0d, (-1.0d));
    net.sourceforge.schemaspy.ui.DbConfigPanel var27 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var27.requestFocus();
    java.beans.PropertyChangeListener[] var29 = var27.getPropertyChangeListeners();
    var27.paintImmediately(0, (-1), (-1), 0);
    java.awt.Font var35 = var27.getFont();
    java.awt.FontMetrics var36 = var21.getFontMetrics(var35);
    java.awt.FontMetrics var37 = var0.getFontMetrics(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test499() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test499");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.ui.DbConfigPanel var1 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var1.requestFocus();
    var1.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var5 = var1.insets();
    var1.setAlignmentX(1.0f);
    java.awt.Color var8 = var1.getForeground();
    net.sourceforge.schemaspy.ui.DbConfigPanel var9 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var9.requestFocus();
    var9.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var13 = var9.insets();
    float var14 = var9.getAlignmentX();
    var9.setBounds(0, 1, 10, 100);
    java.awt.event.MouseListener[] var20 = var9.getMouseListeners();
    java.awt.Rectangle var21 = var9.bounds();
    var1.setBounds(var21);
    var0.setMaximizedBounds(var21);
    java.util.List var24 = var0.getIconImages();
    java.awt.Rectangle var25 = var0.getMaximizedBounds();
    java.awt.Dimension var26 = var0.minimumSize();
    var0.setCursor(5);
    java.lang.String var29 = var0.getWarningString();
    boolean var30 = var0.isResizable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);

  }

  public void test500() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test500");


    net.sourceforge.schemaspy.ui.MainFrame var0 = new net.sourceforge.schemaspy.ui.MainFrame();
    net.sourceforge.schemaspy.Config var1 = new net.sourceforge.schemaspy.Config();
    java.util.regex.Pattern var2 = var1.getTableExclusions();
    boolean var3 = var1.isEvaluateAllEnabled();
    java.util.List var4 = var1.getColumnDetails();
    var0.setIconImages(var4);
    boolean var6 = var0.isAlwaysOnTop();
    java.awt.Dialog.ModalExclusionType var7 = var0.getModalExclusionType();
    net.sourceforge.schemaspy.ui.DbConfigPanel var8 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    var8.requestFocus();
    var8.setFocusTraversalPolicyProvider(true);
    java.awt.Insets var12 = var8.insets();
    var8.setAlignmentX(1.0f);
    boolean var15 = var8.hasFocus();
    boolean var16 = var8.getFocusTraversalKeysEnabled();
    boolean var17 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var8);
    net.sourceforge.schemaspy.ui.DbConfigPanel var18 = new net.sourceforge.schemaspy.ui.DbConfigPanel();
    boolean var19 = var18.isManagingFocus();
    java.awt.Rectangle var20 = var18.getVisibleRect();
    java.awt.Rectangle var21 = var8.getBounds(var20);
    java.awt.Dimension var22 = var8.getPreferredSize();
    var0.setSize(var22);
    java.awt.im.InputContext var24 = var0.getInputContext();
    float var25 = var0.getOpacity();
    var0.revalidate();
    java.util.Locale var27 = var0.getLocale();
    javax.swing.JComponent.setDefaultLocale(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

}
