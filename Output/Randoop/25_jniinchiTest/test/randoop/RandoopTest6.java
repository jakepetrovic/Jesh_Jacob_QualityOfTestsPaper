package randoop;

import junit.framework.*;

public class RandoopTest6 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test1");


    net.sf.jniinchi.INCHI_KEY var1 = net.sf.jniinchi.INCHI_KEY.getValue(0);
    net.sf.jniinchi.JniInchiOutputKey var3 = new net.sf.jniinchi.JniInchiOutputKey(var1, "InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiOutputKey var5 = new net.sf.jniinchi.JniInchiOutputKey(var1, "hi!");
    net.sf.jniinchi.INCHI_KEY var6 = var5.getReturnStatus();
    int var7 = var6.getIndx();
    net.sf.jniinchi.JniInchiOutputKey var9 = new net.sf.jniinchi.JniInchiOutputKey(var6, "EOF");
    java.lang.String var10 = var9.getKey();
    java.lang.String var11 = var9.getKey();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "EOF"+ "'", var10.equals("EOF"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "EOF"+ "'", var11.equals("EOF"));

  }

  public void test2() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test2");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    net.sf.jniinchi.JniInchiBond[] var10 = new net.sf.jniinchi.JniInchiBond[] { };
    var9.addBonds(var10);
    net.sf.jniinchi.JniInchiAtom var16 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var17 = var16.getCharge();
    var16.setImplicitTritium(10);
    var16.setImplicitTritium(1);
    net.sf.jniinchi.INCHI_RADICAL var22 = var16.getRadical();
    net.sf.jniinchi.INCHI_RADICAL var23 = var16.getRadical();
    var16.setImplicitH(0);
    double var26 = var16.getZ();
    var16.setImplicitTritium(4);
    var16.setImplicitDeuterium(10001);
    net.sf.jniinchi.JniInchiAtom var31 = var9.addAtom(var16);
    net.sf.jniinchi.JniInchiAtom var36 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var37 = var36.getCharge();
    var36.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_RADICAL var40 = var36.getRadical();
    var16.setRadical(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test3() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test3");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiInput var1 = new net.sf.jniinchi.JniInchiInput("InChI Bond: InChI_Output: WARNING///hi!/hi!-InChI_Output: WARNING///hi!/hi! // Type: NONE // Stereo: NONE");
      fail("Expected exception of type net.sf.jniinchi.JniInchiException");
    } catch (net.sf.jniinchi.JniInchiException e) {
      // Expected exception.
    }

  }

  public void test4() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test4");


    net.sf.jniinchi.JniInchiInput var0 = new net.sf.jniinchi.JniInchiInput();
    net.sf.jniinchi.JniInchiOutputStructure var8 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var9 = var8.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var10 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var8);
    var0.setStructure((net.sf.jniinchi.JniInchiStructure)var8);
    java.lang.String var12 = var0.getOptions();
    java.lang.String var13 = var0.getOptions();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiBond var15 = var0.getBond(10010);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + ""+ "'", var13.equals(""));

  }

  public void test5() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test5");


    net.sf.jniinchi.INCHI_KEY var1 = net.sf.jniinchi.INCHI_KEY.getValue(0);
    net.sf.jniinchi.JniInchiOutputKey var3 = new net.sf.jniinchi.JniInchiOutputKey(var1, "InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiOutputKey var5 = new net.sf.jniinchi.JniInchiOutputKey(var1, "hi!");
    net.sf.jniinchi.INCHI_KEY var6 = var5.getReturnStatus();
    java.lang.String var7 = var5.getKey();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));

  }

  public void test6() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test6");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitTritium(10);
    double var8 = var4.getX();
    var4.setCharge(1);
    var4.setImplicitDeuterium(100);
    int var13 = var4.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var18 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var19 = var18.getCharge();
    var18.setImplicitTritium(10);
    double var22 = var18.getX();
    var18.setCharge(1);
    var18.setImplicitDeuterium(100);
    int var27 = var18.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var29 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var30 = var29.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var38 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var39 = var38.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var40 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var38);
    net.sf.jniinchi.JniInchiAtom[] var41 = new net.sf.jniinchi.JniInchiAtom[] { };
    var40.addAtoms(var41);
    boolean var43 = var29.equals((java.lang.Object)var41);
    net.sf.jniinchi.JniInchiBond var44 = new net.sf.jniinchi.JniInchiBond(var4, var18, var29);
    net.sf.jniinchi.JniInchiAtom var46 = new net.sf.jniinchi.JniInchiAtom("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.INCHI_BOND_TYPE var48 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var49 = var48.ordinal();
    net.sf.jniinchi.INCHI_BOND_STEREO var51 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var52 = new net.sf.jniinchi.JniInchiBond(var18, var46, var48, var51);
    java.lang.Class var53 = var51.getDeclaringClass();
    net.sf.jniinchi.JniInchiOutput var59 = new net.sf.jniinchi.JniInchiOutput(1, "SINGLE_2UP", "OK", "InChI_Output: WARNING///hi!/hi!", "InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP");
    boolean var60 = var51.equals((java.lang.Object)1);
    java.lang.String var61 = var51.toString();
    java.lang.Class var62 = var51.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "SINGLE_1UP"+ "'", var61.equals("SINGLE_1UP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test7() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test7");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput(1, "SINGLE_2UP", "OK", "InChI_Output: WARNING///hi!/hi!", "InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP");
    net.sf.jniinchi.INCHI_RET var6 = var5.getReturnStatus();
    java.lang.String var7 = var5.getInchi();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "SINGLE_2UP"+ "'", var7.equals("SINGLE_2UP"));

  }

  public void test8() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test8");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput(3, "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:100 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", "InChI Stereo0D: hi! [InChI_Output: WARNING///hi!/hi!,NONE,hi!,hi!] Type::TETRAHEDRAL // Parity:ODD", "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:1 D:0 T:-1 // Radical: NONE", "InChI Atom: hi! [1.0,10.0,100.0] Charge:1 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:10 // Radical: NONE");

  }

  public void test9() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test9");


    net.sf.jniinchi.JniInchiException var1 = new net.sf.jniinchi.JniInchiException("InChI_Output: WARNING///hi!/hi!");
    java.lang.String var2 = var1.toString();
    net.sf.jniinchi.JniInchiException var4 = new net.sf.jniinchi.JniInchiException("net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");
    var1.addSuppressed((java.lang.Throwable)var4);
    net.sf.jniinchi.LoadNativeLibraryException var6 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var2.equals("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));

  }

  public void test10() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test10");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var12 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var13 = var12.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var15 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var16 = var15.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var18 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var19 = new net.sf.jniinchi.JniInchiBond(var4, var12, var15, var18);
    java.lang.String var20 = var4.getElementType();
    net.sf.jniinchi.JniInchiAtom var25 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var26 = var25.getCharge();
    var25.setImplicitTritium(10);
    var25.setImplicitTritium(1);
    net.sf.jniinchi.INCHI_RADICAL var31 = var25.getRadical();
    double var32 = var25.getX();
    var25.setImplicitDeuterium(0);
    var25.debug();
    net.sf.jniinchi.INCHI_RADICAL var36 = var25.getRadical();
    var4.setRadical(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test11() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test11");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var12 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var13 = var12.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var15 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var16 = var15.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var18 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var19 = new net.sf.jniinchi.JniInchiBond(var4, var12, var15, var18);
    net.sf.jniinchi.INCHI_RADICAL var20 = var4.getRadical();
    int var21 = var20.getIndx();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);

  }

  public void test12() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test12");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    int var10 = var7.getNumStereo0D();
    java.lang.String var11 = var7.getLog();
    int var12 = var7.getNumStereo0D();
    net.sf.jniinchi.JniInchiOutput var18 = new net.sf.jniinchi.JniInchiOutput((-1), "hi!", "", "", "");
    net.sf.jniinchi.INCHI_RET var19 = var18.getReturnStatus();
    int var20 = var19.getIndx();
    net.sf.jniinchi.JniInchiOutput var25 = new net.sf.jniinchi.JniInchiOutput(var19, "NONE", "InChI_Output: EOF/SINGLE_1UP/net.sf.jniinchi.LoadNativeLibraryException: /hi!/net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", "InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD", "InChI_Output: EOF/SINGLE_1UP/net.sf.jniinchi.LoadNativeLibraryException: /hi!/net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiOutputStructure var26 = new net.sf.jniinchi.JniInchiOutputStructure(var19);
    var7.setStructure((net.sf.jniinchi.JniInchiStructure)var26);
    net.sf.jniinchi.JniInchiInput var28 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    int var29 = var7.getNumBonds();
    java.lang.String var30 = var7.getLog();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "hi!"+ "'", var30.equals("hi!"));

  }

  public void test13() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test13");


    net.sf.jniinchi.JniInchiException var1 = new net.sf.jniinchi.JniInchiException("InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:10001 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE");
    java.lang.Throwable[] var2 = var1.getSuppressed();
    net.sf.jniinchi.JniInchiException var3 = new net.sf.jniinchi.JniInchiException((java.lang.Throwable)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test14() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test14");


    net.sf.jniinchi.JniInchiInput var0 = new net.sf.jniinchi.JniInchiInput();
    int var1 = var0.getNumStereo0D();
    net.sf.jniinchi.JniInchiOutputStructure var9 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var10 = var9.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var11 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var9);
    java.lang.String var12 = var9.getLog();
    net.sf.jniinchi.JniInchiAtom var17 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var17.setImplicitProtium(1);
    int var20 = var17.getImplicitDeuterium();
    int var21 = var17.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var23 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var28 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var29 = var28.getCharge();
    var28.setImplicitTritium(10);
    double var32 = var28.getX();
    var28.setCharge(1);
    int var35 = var28.getIsotopicMass();
    int var36 = var28.getCharge();
    net.sf.jniinchi.JniInchiAtom var41 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var42 = var41.getCharge();
    var41.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var46 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var47 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var17, var23, var28, var41, var46);
    net.sf.jniinchi.JniInchiStereo0D var48 = var9.addStereo0D(var47);
    net.sf.jniinchi.JniInchiStereo0D var49 = var0.addStereo0D(var48);
    net.sf.jniinchi.INCHI_STEREOTYPE var50 = var49.getStereoType();
    int var51 = var50.getIndx();
    int var52 = var50.getIndx();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);

  }

  public void test15() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test15");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_STATUS var1 = net.sf.jniinchi.INCHI_STATUS.valueOf("InChI_Output: null/InChI_Output: null/SINGLE_1UP/InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP/InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE/InChI_Output: null/InChI_Output: WARNING///hi!/hi!/InChI_Output: WARNING///hi!/hi!//hi!/InChI Atom: InChI_Output: EOF/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/SINGLE_1UP/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/NONE [1.0,-1.0,1.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/InChI Atom: hi! [10.0,10.0,100.0] Charge:0 // Iso Mass:10010 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test16() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test16");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    java.lang.String var10 = var7.getLog();
    int var11 = var7.getNumStereo0D();
    net.sf.jniinchi.INCHI_RET var12 = var7.getReturnStatus();
    net.sf.jniinchi.JniInchiOutput var18 = new net.sf.jniinchi.JniInchiOutput((-1), "hi!", "", "", "");
    net.sf.jniinchi.INCHI_RET var19 = var18.getReturnStatus();
    net.sf.jniinchi.JniInchiOutputStructure var20 = new net.sf.jniinchi.JniInchiOutputStructure(var19);
    net.sf.jniinchi.JniInchiOutputStructure var21 = new net.sf.jniinchi.JniInchiOutputStructure(var19);
    net.sf.jniinchi.INCHI_RET var22 = var21.getReturnStatus();
    long[][] var23 = var21.getWarningFlags();
    int var24 = var21.getNumBonds();
    net.sf.jniinchi.JniInchiOutputStructure var32 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var33 = var32.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var34 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var32);
    net.sf.jniinchi.JniInchiBond[] var35 = new net.sf.jniinchi.JniInchiBond[] { };
    var34.addBonds(var35);
    var21.addBonds(var35);
    var7.addBonds(var35);
    net.sf.jniinchi.JniInchiOutputStructure var46 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var47 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var46);
    net.sf.jniinchi.JniInchiAtom var52 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var53 = var52.getCharge();
    var52.setImplicitTritium(10);
    double var56 = var52.getX();
    var52.setCharge(1);
    var52.setImplicitDeuterium(100);
    int var61 = var52.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var66 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var67 = var66.getCharge();
    var66.setImplicitTritium(10);
    double var70 = var66.getX();
    var66.setCharge(1);
    var66.setImplicitDeuterium(100);
    int var75 = var66.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var77 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var78 = var77.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var86 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var87 = var86.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var88 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var86);
    net.sf.jniinchi.JniInchiAtom[] var89 = new net.sf.jniinchi.JniInchiAtom[] { };
    var88.addAtoms(var89);
    boolean var91 = var77.equals((java.lang.Object)var89);
    net.sf.jniinchi.JniInchiBond var92 = new net.sf.jniinchi.JniInchiBond(var52, var66, var77);
    net.sf.jniinchi.JniInchiBond var93 = var46.addBond(var92);
    var92.debug();
    net.sf.jniinchi.INCHI_BOND_TYPE var95 = var92.getBondType();
    net.sf.jniinchi.JniInchiBond var96 = var7.addBond(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test17() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test17");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    long[][] var10 = var7.getWarningFlags();
    net.sf.jniinchi.JniInchiAtom var15 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var16 = var15.getCharge();
    var15.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var23 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var24 = var23.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var26 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var27 = var26.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var29 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var30 = new net.sf.jniinchi.JniInchiBond(var15, var23, var26, var29);
    net.sf.jniinchi.JniInchiBond var31 = var7.addBond(var30);
    var31.debug();
    java.lang.String var33 = var31.getDebugString();
    net.sf.jniinchi.JniInchiAtom var34 = var31.getOriginAtom();
    net.sf.jniinchi.JniInchiAtom var35 = var31.getOriginAtom();
    int var36 = var35.getImplicitH();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP"+ "'", var33.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));

  }

  public void test18() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test18");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var8 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    net.sf.jniinchi.JniInchiAtom var13 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var13.setIsotopicMassShift(1);
    int var16 = var13.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var17 = var7.addAtom(var13);
    int var18 = var13.getCharge();
    net.sf.jniinchi.JniInchiAtom var23 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var24 = var23.getCharge();
    var23.setImplicitTritium(10);
    double var27 = var23.getX();
    int var28 = var23.getImplicitH();
    var23.setIsotopicMassShift(0);
    double var31 = var23.getZ();
    int var32 = var23.getImplicitDeuterium();
    net.sf.jniinchi.JniInchiAtom var37 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    var37.setImplicitDeuterium((-1));
    net.sf.jniinchi.JniInchiAtom var44 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var45 = var44.getCharge();
    var44.setImplicitTritium(10);
    double var48 = var44.getX();
    int var49 = var44.getImplicitH();
    java.lang.String var50 = var44.getElementType();
    int var51 = var44.getImplicitProtium();
    var44.setIsotopicMass((-1));
    net.sf.jniinchi.INCHI_BOND_TYPE var55 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var56 = var55.getIndx();
    int var57 = var55.ordinal();
    net.sf.jniinchi.JniInchiBond var58 = new net.sf.jniinchi.JniInchiBond(var37, var44, var55);
    int var59 = var55.getIndx();
    int var60 = var55.getIndx();
    net.sf.jniinchi.JniInchiBond var61 = new net.sf.jniinchi.JniInchiBond(var13, var23, var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!"+ "'", var50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);

  }

  public void test19() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test19");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    int var6 = var4.getIsotopicMass();
    int var7 = var4.getImplicitH();
    int var8 = var4.getImplicitH();
    java.lang.String var9 = var4.getDebugString();
    var4.debug();
    var4.setIsotopicMassShift(6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE"+ "'", var9.equals("InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE"));

  }

  public void test20() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test20");


    net.sf.jniinchi.INCHI_RET var1 = net.sf.jniinchi.INCHI_RET.getValue(3);
    int var2 = var1.getIndx();
    net.sf.jniinchi.JniInchiOutput var7 = new net.sf.jniinchi.JniInchiOutput(var1, "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE", "InChI Atom: InChI_Output: WARNING///hi!/hi! [100.0,10.0,1.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", "DOUBLET", "InChI_Output: null/SINGLE_1UP/InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP/InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE/InChI_Output: null/InChI_Output: WARNING///hi!/hi!/InChI_Output: WARNING///hi!/hi!//hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 3);

  }

  public void test21() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test21");


    net.sf.jniinchi.JniInchiOutputStructure var8 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var9 = var8.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var10 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var8);
    net.sf.jniinchi.JniInchiBond[] var11 = new net.sf.jniinchi.JniInchiBond[] { };
    var10.addBonds(var11);
    net.sf.jniinchi.JniInchiAtom var17 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var18 = var17.getCharge();
    var17.setImplicitTritium(10);
    double var21 = var17.getX();
    var17.setCharge(1);
    net.sf.jniinchi.JniInchiAtom var24 = var10.addAtom(var17);
    net.sf.jniinchi.JniInchiInputData var27 = new net.sf.jniinchi.JniInchiInputData(1, var10, 100, "InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP");
    net.sf.jniinchi.INCHI_RET var28 = var27.getReturnValue();
    net.sf.jniinchi.JniInchiInput var29 = var27.getInput();
    net.sf.jniinchi.JniInchiInput var30 = var27.getInput();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiOutput var31 = net.sf.jniinchi.JniInchiWrapper.getInchi(var30);
      fail("Expected exception of type net.sf.jniinchi.LoadNativeLibraryException");
    } catch (net.sf.jniinchi.LoadNativeLibraryException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test22() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test22");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput(1, "net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", "InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE", "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE", "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE");
    net.sf.jniinchi.INCHI_RET var6 = var5.getReturnStatus();
    net.sf.jniinchi.INCHI_RET var7 = var5.getReturnStatus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test23() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test23");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(100.0d, 100.0d, 100.0d, "hi!");
    java.lang.String var5 = var4.getDebugString();
    int var6 = var4.getIsotopicMass();
    double var7 = var4.getY();
    double var8 = var4.getZ();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "InChI Atom: hi! [100.0,100.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE"+ "'", var5.equals("InChI Atom: hi! [100.0,100.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 100.0d);

  }

  public void test24() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test24");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiInputInchi var2 = new net.sf.jniinchi.JniInchiInputInchi("DOUBLEBOND", "net.sf.jniinchi.LoadNativeLibraryException");
      fail("Expected exception of type net.sf.jniinchi.JniInchiException");
    } catch (net.sf.jniinchi.JniInchiException e) {
      // Expected exception.
    }

  }

  public void test25() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test25");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(0.0d, 0.0d, 100.0d, "INVALID_PREFIX");

  }

  public void test26() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test26");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(10, "InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE", "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", 100L, 1L, (-1L), 100L);
    net.sf.jniinchi.JniInchiInput var8 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    net.sf.jniinchi.JniInchiOutputStructure var16 = new net.sf.jniinchi.JniInchiOutputStructure(10, "InChI_Output: null/InChI_Output: WARNING///hi!/hi!/InChI_Output: WARNING///hi!/hi!//hi!", "InChI_Output: WARNING/SINGLE_2UP/OK/InChI_Output: WARNING///hi!/hi!/InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP", (-1L), (-1L), 100L, (-1L));
    var7.setStructure((net.sf.jniinchi.JniInchiStructure)var16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiStereo0D var19 = var7.getStereo0D(10010);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test27() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test27");


    net.sf.jniinchi.INCHI_RADICAL var1 = net.sf.jniinchi.INCHI_RADICAL.getValue(0);
    java.lang.Class var2 = var1.getDeclaringClass();
    java.lang.Enum var4 = java.lang.Enum.<java.lang.Enum>valueOf(var2, "NONE");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var6 = java.lang.Enum.<java.lang.Enum>valueOf(var2, "InChI_Output: OKAY/InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD/OK/InChI Stereo0D: - [hi!,hi!,NONE,InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE] Type::DOUBLEBOND // Parity:ODD/InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test28() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test28");


    net.sf.jniinchi.INCHI_KEY var1 = net.sf.jniinchi.INCHI_KEY.getValue(0);
    net.sf.jniinchi.JniInchiOutputKey var3 = new net.sf.jniinchi.JniInchiOutputKey(var1, "InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiOutputKey var5 = new net.sf.jniinchi.JniInchiOutputKey(var1, "hi!");
    net.sf.jniinchi.INCHI_KEY var6 = var5.getReturnStatus();
    int var7 = var6.getIndx();
    java.lang.Class var8 = var6.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var10 = java.lang.Enum.<java.lang.Enum>valueOf(var8, "net.sf.jniinchi.LoadNativeLibraryException: InChI Atom: hi! [1.0,10.0,100.0] Charge:10 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:10 // Radical: NONE");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test29() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test29");


    net.sf.jniinchi.JniInchiOutputKey var2 = new net.sf.jniinchi.JniInchiOutputKey(1, "net.sf.jniinchi.JniInchiException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");

  }

  public void test30() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test30");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(0, "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", "", (-1L), 10L, 10L, 0L);
    java.lang.String var8 = var7.getLog();
    net.sf.jniinchi.JniInchiOutputStructure var16 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var17 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var16);
    net.sf.jniinchi.JniInchiInput var18 = new net.sf.jniinchi.JniInchiInput();
    var16.setStructure((net.sf.jniinchi.JniInchiStructure)var18);
    net.sf.jniinchi.JniInchiOutputStructure var27 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var28 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var27);
    int var29 = var28.getNumBonds();
    java.lang.String var30 = var28.getOptions();
    net.sf.jniinchi.JniInchiAtom var35 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var36 = var35.getCharge();
    var35.setImplicitTritium(10);
    double var39 = var35.getX();
    var35.setCharge(1);
    var35.setImplicitDeuterium(100);
    int var44 = var35.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var49 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var50 = var49.getCharge();
    var49.setImplicitTritium(10);
    double var53 = var49.getX();
    var49.setCharge(1);
    var49.setImplicitDeuterium(100);
    int var58 = var49.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var60 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var61 = var60.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var69 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var70 = var69.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var71 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var69);
    net.sf.jniinchi.JniInchiAtom[] var72 = new net.sf.jniinchi.JniInchiAtom[] { };
    var71.addAtoms(var72);
    boolean var74 = var60.equals((java.lang.Object)var72);
    net.sf.jniinchi.JniInchiBond var75 = new net.sf.jniinchi.JniInchiBond(var35, var49, var60);
    java.lang.String var76 = var75.getDebugString();
    net.sf.jniinchi.JniInchiBond var77 = var28.addBond(var75);
    net.sf.jniinchi.JniInchiBond var78 = var18.addBond(var75);
    net.sf.jniinchi.JniInchiBond var79 = var7.addBond(var75);
    net.sf.jniinchi.JniInchiAtom var80 = var75.getTargetAtom();
    net.sf.jniinchi.INCHI_BOND_TYPE var81 = var75.getBondType();
    net.sf.jniinchi.INCHI_BOND_TYPE var82 = var75.getBondType();
    java.lang.String var83 = var75.getDebugString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + ""+ "'", var30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var76.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var83.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));

  }

  public void test31() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test31");


    net.sf.jniinchi.JniInchiOutputStructure var8 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var8);
    java.lang.String var10 = var9.getOptions();
    net.sf.jniinchi.JniInchiInputData var13 = new net.sf.jniinchi.JniInchiInputData(0, var9, 0, "net.sf.jniinchi.LoadNativeLibraryException");
    java.lang.String var14 = var13.getErrorMessage();
    net.sf.jniinchi.JniInchiInput var15 = var13.getInput();
    net.sf.jniinchi.INCHI_RET var16 = var13.getReturnValue();
    net.sf.jniinchi.JniInchiOutput var21 = new net.sf.jniinchi.JniInchiOutput(var16, "net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", "InChI Atom: hi! [1.0,10.0,100.0] Charge:10 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:10 // Radical: NONE", "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:100 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", "EOF");
    net.sf.jniinchi.JniInchiOutput var26 = new net.sf.jniinchi.JniInchiOutput(var16, "InChI_Output: EOF/InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP/InChI_Output: EOF/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/SINGLE_1UP/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/NONE/InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE/InChI_Output: EOF/hi!///", "InChI Atom: hi! [0.0,0.0,0.0] Charge:0 // Iso Mass:10000 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", "net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", "InChI_Output: null/SINGLE_1UP/InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP/InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE/InChI_Output: null/InChI_Output: WARNING///hi!/hi!/InChI_Output: WARNING///hi!/hi!//hi!");
    net.sf.jniinchi.JniInchiOutputStructure var27 = new net.sf.jniinchi.JniInchiOutputStructure(var16);
    java.lang.String var28 = var16.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + ""+ "'", var10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "net.sf.jniinchi.LoadNativeLibraryException"+ "'", var14.equals("net.sf.jniinchi.LoadNativeLibraryException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "OKAY"+ "'", var28.equals("OKAY"));

  }

  public void test32() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test32");


    net.sf.jniinchi.JniInchiAtom var1 = new net.sf.jniinchi.JniInchiAtom("InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE");
    var1.setCharge(0);
    var1.setIsotopicMassShift(0);
    var1.setCharge(10001);
    double var8 = var1.getZ();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.0d);

  }

  public void test33() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test33");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    long[][] var10 = var7.getWarningFlags();
    net.sf.jniinchi.JniInchiAtom var15 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var16 = var15.getCharge();
    var15.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var23 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var24 = var23.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var26 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var27 = var26.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var29 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var30 = new net.sf.jniinchi.JniInchiBond(var15, var23, var26, var29);
    net.sf.jniinchi.JniInchiBond var31 = var7.addBond(var30);
    java.lang.String var32 = var7.getLog();
    int var33 = var7.getNumBonds();
    long[][] var34 = var7.getWarningFlags();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "hi!"+ "'", var32.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test34() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test34");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput((-1), "SINGLE_1UP", "net.sf.jniinchi.LoadNativeLibraryException: ", "hi!", "net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");
    java.lang.String var6 = var5.toString();
    java.lang.String var7 = var5.getLog();
    java.lang.String var8 = var5.toString();
    net.sf.jniinchi.INCHI_RET var9 = var5.getReturnStatus();
    int var10 = var9.getIndx();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "InChI_Output: EOF/SINGLE_1UP/net.sf.jniinchi.LoadNativeLibraryException: /hi!/net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var6.equals("InChI_Output: EOF/SINGLE_1UP/net.sf.jniinchi.LoadNativeLibraryException: /hi!/net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var7.equals("net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "InChI_Output: EOF/SINGLE_1UP/net.sf.jniinchi.LoadNativeLibraryException: /hi!/net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var8.equals("InChI_Output: EOF/SINGLE_1UP/net.sf.jniinchi.LoadNativeLibraryException: /hi!/net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));

  }

  public void test35() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test35");


    net.sf.jniinchi.INCHI_STEREOTYPE var1 = net.sf.jniinchi.INCHI_STEREOTYPE.getValue(9999);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test36() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test36");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput(6, "InChI_Output: EOF/hi!///", "net.sf.jniinchi.JniInchiException: InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE", "InChI Atom: hi! [1.0,10.0,100.0] Charge:1 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:10 // Radical: NONE", "InChI_Output: WARNING/SINGLE_2UP/OK/InChI_Output: WARNING///hi!/hi!/InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP");

  }

  public void test37() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test37");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(100.0d, 100.0d, 100.0d, "hi!");
    int var5 = var4.getImplicitTritium();
    var4.setImplicitDeuterium(0);
    double var8 = var4.getZ();
    int var9 = var4.getImplicitH();
    java.lang.String var10 = var4.getElementType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));

  }

  public void test38() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test38");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(0, "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", "", (-1L), 10L, 10L, 0L);
    java.lang.String var8 = var7.getLog();
    int var9 = var7.getNumBonds();
    net.sf.jniinchi.INCHI_RET var10 = var7.getReturnStatus();
    net.sf.jniinchi.JniInchiOutput var15 = new net.sf.jniinchi.JniInchiOutput(var10, "InChI_Output: OKAY/InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD/OK/InChI Stereo0D: - [hi!,hi!,NONE,InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE] Type::DOUBLEBOND // Parity:ODD/InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD", "InChI Atom: InChI_Output: EOF/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/SINGLE_1UP/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/NONE [1.0,-1.0,1.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:1 // Radical: NONE", "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:100 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test39() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test39");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(0, "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", "", (-1L), 10L, 10L, 0L);
    java.lang.String var8 = var7.getLog();
    net.sf.jniinchi.INCHI_RET var9 = var7.getReturnStatus();
    java.lang.Class var10 = var9.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var12 = java.lang.Enum.<java.lang.Enum>valueOf(var10, "InChI Atom: hi! [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test40() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test40");


    net.sf.jniinchi.INCHI_RET var1 = net.sf.jniinchi.INCHI_RET.getValue(3);
    net.sf.jniinchi.JniInchiOutput var6 = new net.sf.jniinchi.JniInchiOutput(var1, "InChI_Output: EOF/InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP/InChI_Output: EOF/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/SINGLE_1UP/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/NONE/InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE/InChI_Output: EOF/hi!///", "InChI_Output: EOF/InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP/InChI_Output: EOF/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/SINGLE_1UP/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/NONE/InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE/InChI_Output: EOF/hi!///", "net.sf.jniinchi.JniInchiException: InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP", "InChI Atom: InChI_Output: WARNING///hi!/hi! [100.0,10.0,1.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE");
    java.lang.String var7 = var6.getInchi();
    java.lang.String var8 = var6.getInchi();
    java.lang.String var9 = var6.getInchi();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "InChI_Output: EOF/InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP/InChI_Output: EOF/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/SINGLE_1UP/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/NONE/InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE/InChI_Output: EOF/hi!///"+ "'", var7.equals("InChI_Output: EOF/InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP/InChI_Output: EOF/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/SINGLE_1UP/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/NONE/InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE/InChI_Output: EOF/hi!///"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "InChI_Output: EOF/InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP/InChI_Output: EOF/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/SINGLE_1UP/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/NONE/InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE/InChI_Output: EOF/hi!///"+ "'", var8.equals("InChI_Output: EOF/InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP/InChI_Output: EOF/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/SINGLE_1UP/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/NONE/InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE/InChI_Output: EOF/hi!///"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "InChI_Output: EOF/InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP/InChI_Output: EOF/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/SINGLE_1UP/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/NONE/InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE/InChI_Output: EOF/hi!///"+ "'", var9.equals("InChI_Output: EOF/InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP/InChI_Output: EOF/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/SINGLE_1UP/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/NONE/InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE/InChI_Output: EOF/hi!///"));

  }

  public void test41() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test41");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom((-1.0d), (-1.0d), 100.0d, "InChI Atom: InChI_Output: WARNING///hi!/hi! [100.0,10.0,1.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE");
    var4.setImplicitH(1);

  }

  public void test42() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test42");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var12 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var13 = var12.getCharge();
    int var14 = var12.getIsotopicMass();
    int var15 = var12.getImplicitH();
    net.sf.jniinchi.INCHI_BOND_TYPE var17 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var18 = var17.getIndx();
    int var19 = var17.ordinal();
    java.lang.Class var20 = var17.getDeclaringClass();
    java.lang.Class var21 = var17.getDeclaringClass();
    java.lang.String var22 = var17.toString();
    int var23 = var17.ordinal();
    net.sf.jniinchi.JniInchiAtom var28 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var29 = var28.getCharge();
    var28.setImplicitTritium(10);
    double var32 = var28.getX();
    var28.setCharge(1);
    var28.setImplicitDeuterium(100);
    int var37 = var28.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var42 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var43 = var42.getCharge();
    var42.setImplicitTritium(10);
    double var46 = var42.getX();
    var42.setCharge(1);
    var42.setImplicitDeuterium(100);
    int var51 = var42.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var53 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var54 = var53.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var62 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var63 = var62.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var64 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var62);
    net.sf.jniinchi.JniInchiAtom[] var65 = new net.sf.jniinchi.JniInchiAtom[] { };
    var64.addAtoms(var65);
    boolean var67 = var53.equals((java.lang.Object)var65);
    net.sf.jniinchi.JniInchiBond var68 = new net.sf.jniinchi.JniInchiBond(var28, var42, var53);
    net.sf.jniinchi.JniInchiAtom var70 = new net.sf.jniinchi.JniInchiAtom("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.INCHI_BOND_TYPE var72 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var73 = var72.ordinal();
    net.sf.jniinchi.INCHI_BOND_STEREO var75 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var76 = new net.sf.jniinchi.JniInchiBond(var42, var70, var72, var75);
    java.lang.Class var77 = var75.getDeclaringClass();
    int var78 = var75.getIndx();
    net.sf.jniinchi.JniInchiBond var79 = new net.sf.jniinchi.JniInchiBond(var4, var12, var17, var75);
    java.lang.String var80 = var75.name();
    java.lang.String var81 = var75.toString();
    net.sf.jniinchi.JniInchiOutput var87 = new net.sf.jniinchi.JniInchiOutput(1, "SINGLE_2UP", "OK", "InChI_Output: WARNING///hi!/hi!", "InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP");
    net.sf.jniinchi.INCHI_RET var88 = var87.getReturnStatus();
    boolean var89 = var75.equals((java.lang.Object)var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "NONE"+ "'", var22.equals("NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "SINGLE_1UP"+ "'", var80.equals("SINGLE_1UP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "SINGLE_1UP"+ "'", var81.equals("SINGLE_1UP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);

  }

  public void test43() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test43");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    int var10 = var7.getNumStereo0D();
    java.lang.String var11 = var7.getLog();
    int var12 = var7.getNumStereo0D();
    net.sf.jniinchi.JniInchiAtom var17 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var17.setIsotopicMassShift(1);
    int var20 = var17.getImplicitProtium();
    net.sf.jniinchi.JniInchiOutputStructure var29 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var30 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var29);
    java.lang.String var31 = var30.getOptions();
    net.sf.jniinchi.JniInchiInputData var34 = new net.sf.jniinchi.JniInchiInputData(0, var30, 0, "net.sf.jniinchi.LoadNativeLibraryException");
    java.lang.String var35 = var34.getErrorMessage();
    net.sf.jniinchi.JniInchiInput var36 = var34.getInput();
    net.sf.jniinchi.JniInchiAtom var41 = new net.sf.jniinchi.JniInchiAtom(100.0d, 100.0d, 100.0d, "hi!");
    net.sf.jniinchi.JniInchiAtom var42 = var36.addAtom(var41);
    net.sf.jniinchi.INCHI_BOND_TYPE var44 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var45 = var44.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var53 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var54 = var53.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var55 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var53);
    net.sf.jniinchi.JniInchiAtom[] var56 = new net.sf.jniinchi.JniInchiAtom[] { };
    var55.addAtoms(var56);
    boolean var58 = var44.equals((java.lang.Object)var56);
    net.sf.jniinchi.JniInchiBond var59 = new net.sf.jniinchi.JniInchiBond(var17, var42, var44);
    net.sf.jniinchi.JniInchiBond[] var60 = new net.sf.jniinchi.JniInchiBond[] { var59};
    var7.addBonds(var60);
    int var62 = var7.getNumAtoms();
    int var63 = var7.getNumBonds();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + ""+ "'", var31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "net.sf.jniinchi.LoadNativeLibraryException"+ "'", var35.equals("net.sf.jniinchi.LoadNativeLibraryException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1);

  }

  public void test44() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test44");


    net.sf.jniinchi.JniInchiOutputStructure var8 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var9 = var8.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var10 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var8);
    net.sf.jniinchi.JniInchiBond[] var11 = new net.sf.jniinchi.JniInchiBond[] { };
    var10.addBonds(var11);
    net.sf.jniinchi.JniInchiAtom var17 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var18 = var17.getCharge();
    var17.setImplicitTritium(10);
    double var21 = var17.getX();
    var17.setCharge(1);
    net.sf.jniinchi.JniInchiAtom var24 = var10.addAtom(var17);
    net.sf.jniinchi.JniInchiInputData var27 = new net.sf.jniinchi.JniInchiInputData(1, var10, 100, "InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP");
    net.sf.jniinchi.JniInchiInput var28 = var27.getInput();
    net.sf.jniinchi.JniInchiInput var29 = var27.getInput();
    net.sf.jniinchi.JniInchiInput var30 = var27.getInput();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test45() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test45");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput((-1), "hi!", "", "", "");
    java.lang.String var6 = var5.getAuxInfo();
    net.sf.jniinchi.INCHI_RET var7 = var5.getReturnStatus();
    net.sf.jniinchi.JniInchiOutput var12 = new net.sf.jniinchi.JniInchiOutput(var7, "OK", "", "InChI_Output: WARNING///hi!/hi!", "hi!");
    net.sf.jniinchi.JniInchiOutputStructure var13 = new net.sf.jniinchi.JniInchiOutputStructure(var7);
    net.sf.jniinchi.JniInchiAtom var15 = new net.sf.jniinchi.JniInchiAtom("hi!");
    int var16 = var15.getImplicitProtium();
    int var17 = var15.getImplicitTritium();
    int var18 = var15.getImplicitTritium();
    net.sf.jniinchi.INCHI_RADICAL var19 = var15.getRadical();
    net.sf.jniinchi.JniInchiAtom var20 = var13.addAtom(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test46() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test46");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_STATUS var2 = net.sf.jniinchi.JniInchiWrapper.checkInchi("net.sf.jniinchi.JniInchiException: net.sf.jniinchi.JniInchiException: InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP", true);
      fail("Expected exception of type net.sf.jniinchi.LoadNativeLibraryException");
    } catch (net.sf.jniinchi.LoadNativeLibraryException e) {
      // Expected exception.
    }

  }

  public void test47() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test47");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput(1, "", "", "hi!", "hi!");
    java.lang.String var6 = var5.getInchi();
    java.lang.String var7 = var5.toString();
    net.sf.jniinchi.INCHI_RET var8 = var5.getReturnStatus();
    java.lang.String var9 = var5.getLog();
    java.lang.String var10 = var5.getAuxInfo();
    java.lang.String var11 = var5.getInchi();
    java.lang.String var12 = var5.getInchi();
    java.lang.String var13 = var5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "InChI_Output: WARNING///hi!/hi!"+ "'", var7.equals("InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + ""+ "'", var10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "InChI_Output: WARNING///hi!/hi!"+ "'", var13.equals("InChI_Output: WARNING///hi!/hi!"));

  }

  public void test48() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test48");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_BOND_TYPE var1 = net.sf.jniinchi.INCHI_BOND_TYPE.valueOf("InChI Atom: hi! [1.0,10.0,100.0] Charge:1 // Iso Mass:10001 // Implicit H:-1 P:0 D:100 T:10 // Radical: NONE");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test49() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test49");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitTritium(10);
    double var8 = var4.getX();
    java.lang.String var9 = var4.getElementType();
    var4.setCharge(10);
    net.sf.jniinchi.JniInchiOutputStructure var19 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var20 = var19.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var21 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var19);
    net.sf.jniinchi.JniInchiBond[] var22 = new net.sf.jniinchi.JniInchiBond[] { };
    var21.addBonds(var22);
    net.sf.jniinchi.JniInchiAtom var28 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var29 = var28.getCharge();
    var28.setImplicitTritium(10);
    double var32 = var28.getX();
    var28.setCharge(1);
    net.sf.jniinchi.JniInchiAtom var35 = var21.addAtom(var28);
    net.sf.jniinchi.INCHI_BOND_TYPE var37 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var38 = var37.ordinal();
    net.sf.jniinchi.JniInchiAtom var43 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var44 = var43.getCharge();
    var43.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var51 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var52 = var51.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var54 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var55 = var54.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var57 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var58 = new net.sf.jniinchi.JniInchiBond(var43, var51, var54, var57);
    net.sf.jniinchi.INCHI_BOND_STEREO var59 = var58.getBondStereo();
    net.sf.jniinchi.JniInchiBond var60 = new net.sf.jniinchi.JniInchiBond(var4, var28, var37, var59);
    java.lang.String var61 = var60.getDebugString();
    net.sf.jniinchi.INCHI_BOND_TYPE var62 = var60.getBondType();
    net.sf.jniinchi.INCHI_BOND_STEREO var64 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(4);
    var60.setStereoDefinition(var64);
    int var66 = var64.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP"+ "'", var61.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 2);

  }

  public void test50() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test50");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiOutputKey var1 = net.sf.jniinchi.JniInchiWrapper.getInchiKey("InChI Atom: hi! [1.0,10.0,100.0] Charge:1 // Iso Mass:10001 // Implicit H:-1 P:0 D:100 T:10 // Radical: NONE");
      fail("Expected exception of type net.sf.jniinchi.LoadNativeLibraryException");
    } catch (net.sf.jniinchi.LoadNativeLibraryException e) {
      // Expected exception.
    }

  }

  public void test51() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test51");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_KEY_STATUS var1 = net.sf.jniinchi.JniInchiWrapper.checkInchiKey("InChI Atom: InChI_Output: WARNING///hi!/hi! [100.0,10.0,1.0] Charge:0 // Iso Mass:10001 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE");
      fail("Expected exception of type net.sf.jniinchi.LoadNativeLibraryException");
    } catch (net.sf.jniinchi.LoadNativeLibraryException e) {
      // Expected exception.
    }

  }

  public void test52() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test52");


    net.sf.jniinchi.LoadNativeLibraryException var1 = new net.sf.jniinchi.LoadNativeLibraryException("InChI Atom: hi! [1.0,10.0,100.0] Charge:1 // Iso Mass:0 // Implicit H:-1 P:10 D:0 T:10 // Radical: NONE");

  }

  public void test53() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test53");


    net.sf.jniinchi.JniInchiException var1 = new net.sf.jniinchi.JniInchiException("InChI_Output: WARNING///hi!/hi!");
    java.lang.String var2 = var1.toString();
    net.sf.jniinchi.LoadNativeLibraryException var3 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var1);
    java.lang.String var4 = var3.toString();
    java.lang.String var5 = var3.toString();
    net.sf.jniinchi.LoadNativeLibraryException var6 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var3);
    net.sf.jniinchi.JniInchiException var7 = new net.sf.jniinchi.JniInchiException((java.lang.Throwable)var3);
    net.sf.jniinchi.LoadNativeLibraryException var8 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var2.equals("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var4.equals("net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var5.equals("net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));

  }

  public void test54() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test54");


    net.sf.jniinchi.JniInchiAtom var1 = new net.sf.jniinchi.JniInchiAtom("InChI Atom: hi! [10.0,10.0,100.0] Charge:0 // Iso Mass:10010 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE");
    double var2 = var1.getZ();
    var1.setCharge(10001);
    int var5 = var1.getImplicitProtium();
    int var6 = var1.getImplicitH();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1));

  }

  public void test55() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test55");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(0.0d, 1.0d, 0.0d, "");
    int var5 = var4.getImplicitProtium();
    java.lang.String var6 = var4.getDebugString();
    net.sf.jniinchi.JniInchiAtom var11 = new net.sf.jniinchi.JniInchiAtom(100.0d, 100.0d, 100.0d, "hi!");
    int var12 = var11.getImplicitTritium();
    var11.setImplicitProtium((-1));
    var11.debug();
    net.sf.jniinchi.INCHI_RADICAL var16 = var11.getRadical();
    var4.setRadical(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "InChI Atom:  [0.0,1.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE"+ "'", var6.equals("InChI Atom:  [0.0,1.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test56() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test56");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    long[][] var8 = var7.getWarningFlags();
    long[][] var9 = var7.getWarningFlags();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiBond var11 = var7.getBond(10010);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test57() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test57");


    net.sf.jniinchi.INCHI_STATUS var1 = net.sf.jniinchi.INCHI_STATUS.getValue(2);
    int var2 = var1.getIndx();
    java.lang.String var3 = var1.toString();
    int var4 = var1.getIndx();
    int var5 = var1.getIndx();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "INVALID_VERSION"+ "'", var3.equals("INVALID_VERSION"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 2);

  }

  public void test58() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test58");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitTritium(10);
    var4.setImplicitTritium(1);
    net.sf.jniinchi.INCHI_RADICAL var10 = var4.getRadical();
    net.sf.jniinchi.INCHI_RADICAL var11 = var4.getRadical();
    var4.setImplicitDeuterium(0);
    int var14 = var4.getImplicitTritium();
    net.sf.jniinchi.JniInchiAtom var19 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var19.setImplicitProtium(1);
    double var22 = var19.getY();
    net.sf.jniinchi.INCHI_RADICAL var23 = var19.getRadical();
    var4.setRadical(var23);
    net.sf.jniinchi.JniInchiAtom var29 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var30 = var29.getCharge();
    var29.setImplicitTritium(10);
    double var33 = var29.getX();
    var29.setCharge(1);
    int var36 = var29.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var41 = new net.sf.jniinchi.JniInchiAtom((-1.0d), 1.0d, 0.0d, "InChI_Output: WARNING///hi!/hi!");
    java.lang.String var42 = var41.getElementType();
    net.sf.jniinchi.INCHI_RADICAL var43 = var41.getRadical();
    net.sf.jniinchi.JniInchiAtom var48 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    var48.setImplicitDeuterium(10);
    net.sf.jniinchi.JniInchiAtom var55 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var55.setImplicitProtium(1);
    int var58 = var55.getImplicitDeuterium();
    int var59 = var55.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var61 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var66 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var67 = var66.getCharge();
    var66.setImplicitTritium(10);
    double var70 = var66.getX();
    var66.setCharge(1);
    int var73 = var66.getIsotopicMass();
    int var74 = var66.getCharge();
    net.sf.jniinchi.JniInchiAtom var79 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var80 = var79.getCharge();
    var79.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var84 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var85 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var55, var61, var66, var79, var84);
    net.sf.jniinchi.INCHI_PARITY var87 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    var85.setDisconnectedParity(var87);
    net.sf.jniinchi.INCHI_PARITY var89 = var85.getParity();
    java.lang.String var90 = var89.toString();
    net.sf.jniinchi.JniInchiStereo0D var91 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var4, var29, var41, var48, var89);
    net.sf.jniinchi.INCHI_PARITY var92 = var91.getParity();
    var91.debug();
    net.sf.jniinchi.JniInchiAtom var94 = var91.getCentralAtom();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiAtom var96 = var91.getNeighbor(10);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "InChI_Output: WARNING///hi!/hi!"+ "'", var42.equals("InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "ODD"+ "'", var90.equals("ODD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);

  }

  public void test59() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test59");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var8 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    int var9 = var8.getNumBonds();
    net.sf.jniinchi.JniInchiInput var10 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var8);
    int var11 = var8.getNumBonds();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);

  }

  public void test60() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test60");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    net.sf.jniinchi.JniInchiBond[] var10 = new net.sf.jniinchi.JniInchiBond[] { };
    var9.addBonds(var10);
    net.sf.jniinchi.JniInchiAtom var16 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var17 = var16.getCharge();
    var16.setImplicitTritium(10);
    double var20 = var16.getX();
    var16.setCharge(1);
    net.sf.jniinchi.JniInchiAtom var23 = var9.addAtom(var16);
    int var24 = var9.getNumBonds();
    net.sf.jniinchi.JniInchiOutputStructure var32 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var33 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var32);
    net.sf.jniinchi.JniInchiInput var34 = new net.sf.jniinchi.JniInchiInput();
    var32.setStructure((net.sf.jniinchi.JniInchiStructure)var34);
    java.lang.String var36 = var34.getOptions();
    java.lang.String var37 = var34.getOptions();
    net.sf.jniinchi.JniInchiOutputStructure var45 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var46 = var45.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var47 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var45);
    java.lang.String var48 = var47.getOptions();
    net.sf.jniinchi.JniInchiInput var49 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var47);
    net.sf.jniinchi.JniInchiOutputStructure var57 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var58 = var57.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var59 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var57);
    long[][] var60 = var57.getWarningFlags();
    net.sf.jniinchi.JniInchiAtom var65 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var66 = var65.getCharge();
    var65.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var73 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var74 = var73.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var76 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var77 = var76.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var79 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var80 = new net.sf.jniinchi.JniInchiBond(var65, var73, var76, var79);
    net.sf.jniinchi.JniInchiBond var81 = var57.addBond(var80);
    net.sf.jniinchi.JniInchiBond[] var82 = new net.sf.jniinchi.JniInchiBond[] { var81};
    var47.addBonds(var82);
    var34.addBonds(var82);
    var9.addBonds(var82);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiInput var87 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var9, "net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.LoadNativeLibraryException: OK");
      fail("Expected exception of type net.sf.jniinchi.JniInchiException");
    } catch (net.sf.jniinchi.JniInchiException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + ""+ "'", var36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + ""+ "'", var37.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + ""+ "'", var48.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test61() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test61");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitTritium(10);
    double var8 = var4.getX();
    java.lang.String var9 = var4.getElementType();
    var4.setCharge(10);
    net.sf.jniinchi.JniInchiOutputStructure var19 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var20 = var19.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var21 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var19);
    net.sf.jniinchi.JniInchiBond[] var22 = new net.sf.jniinchi.JniInchiBond[] { };
    var21.addBonds(var22);
    net.sf.jniinchi.JniInchiAtom var28 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var29 = var28.getCharge();
    var28.setImplicitTritium(10);
    double var32 = var28.getX();
    var28.setCharge(1);
    net.sf.jniinchi.JniInchiAtom var35 = var21.addAtom(var28);
    net.sf.jniinchi.INCHI_BOND_TYPE var37 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var38 = var37.ordinal();
    net.sf.jniinchi.JniInchiAtom var43 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var44 = var43.getCharge();
    var43.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var51 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var52 = var51.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var54 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var55 = var54.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var57 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var58 = new net.sf.jniinchi.JniInchiBond(var43, var51, var54, var57);
    net.sf.jniinchi.INCHI_BOND_STEREO var59 = var58.getBondStereo();
    net.sf.jniinchi.JniInchiBond var60 = new net.sf.jniinchi.JniInchiBond(var4, var28, var37, var59);
    net.sf.jniinchi.INCHI_BOND_TYPE var61 = var60.getBondType();
    java.lang.String var62 = var60.getDebugString();
    net.sf.jniinchi.INCHI_BOND_STEREO var63 = var60.getBondStereo();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP"+ "'", var62.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test62() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test62");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    net.sf.jniinchi.JniInchiBond[] var10 = new net.sf.jniinchi.JniInchiBond[] { };
    var9.addBonds(var10);
    net.sf.jniinchi.JniInchiAtom var16 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var17 = var16.getCharge();
    var16.setImplicitTritium(10);
    double var20 = var16.getX();
    var16.setCharge(1);
    net.sf.jniinchi.JniInchiAtom var23 = var9.addAtom(var16);
    var16.setIsotopicMass(10001);
    net.sf.jniinchi.INCHI_RADICAL var26 = var16.getRadical();
    int var27 = var26.getIndx();
    net.sf.jniinchi.JniInchiAtom var32 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var33 = var32.getCharge();
    var32.setImplicitTritium(10);
    double var36 = var32.getX();
    int var37 = var32.getImplicitH();
    java.lang.String var38 = var32.getElementType();
    int var39 = var32.getImplicitProtium();
    var32.setImplicitDeuterium(10);
    var32.setIsotopicMassShift(9999);
    boolean var44 = var26.equals((java.lang.Object)var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "hi!"+ "'", var38.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test63() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test63");


    net.sf.jniinchi.JniInchiOutputStructure var8 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var9 = var8.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var10 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var8);
    int var11 = var8.getNumStereo0D();
    java.lang.String var12 = var8.getLog();
    int var13 = var8.getNumStereo0D();
    net.sf.jniinchi.JniInchiOutput var19 = new net.sf.jniinchi.JniInchiOutput((-1), "hi!", "", "", "");
    net.sf.jniinchi.INCHI_RET var20 = var19.getReturnStatus();
    int var21 = var20.getIndx();
    net.sf.jniinchi.JniInchiOutput var26 = new net.sf.jniinchi.JniInchiOutput(var20, "NONE", "InChI_Output: EOF/SINGLE_1UP/net.sf.jniinchi.LoadNativeLibraryException: /hi!/net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", "InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD", "InChI_Output: EOF/SINGLE_1UP/net.sf.jniinchi.LoadNativeLibraryException: /hi!/net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiOutputStructure var27 = new net.sf.jniinchi.JniInchiOutputStructure(var20);
    var8.setStructure((net.sf.jniinchi.JniInchiStructure)var27);
    net.sf.jniinchi.JniInchiInput var29 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var8);
    net.sf.jniinchi.JniInchiInput var30 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var29);
    java.lang.String var31 = var29.getOptions();
    net.sf.jniinchi.JniInchiInputData var34 = new net.sf.jniinchi.JniInchiInputData(4, var29, 10000, "InChI Atom: hi! [0.0,0.0,0.0] Charge:0 // Iso Mass:10000 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE");
    java.lang.String var35 = var29.getOptions();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiInput var37 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var29, "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:1 D:0 T:0 // Radical: NONE");
      fail("Expected exception of type net.sf.jniinchi.JniInchiException");
    } catch (net.sf.jniinchi.JniInchiException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + ""+ "'", var31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + ""+ "'", var35.equals(""));

  }

  public void test64() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test64");


    net.sf.jniinchi.JniInchiOutputKey var2 = new net.sf.jniinchi.JniInchiOutputKey(0, "NONE");
    net.sf.jniinchi.INCHI_KEY var3 = var2.getReturnStatus();
    net.sf.jniinchi.JniInchiOutputKey var5 = new net.sf.jniinchi.JniInchiOutputKey(var3, "InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD");
    net.sf.jniinchi.INCHI_KEY var6 = var5.getReturnStatus();
    net.sf.jniinchi.INCHI_KEY var7 = var5.getReturnStatus();
    int var8 = var7.getIndx();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);

  }

  public void test65() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test65");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_OPTION var1 = net.sf.jniinchi.INCHI_OPTION.valueOf("InChI_Output: null/InChI Atom: hi! [10.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE/InChI_Output: EOF/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/SINGLE_1UP/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/NONE/NONE/net.sf.jniinchi.JniInchiException");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test66() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test66");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE", "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", 10L, (-1L), (-1L), 1L);
    int var8 = var7.getNumAtoms();
    int var9 = var7.getNumStereo0D();
    net.sf.jniinchi.JniInchiAtom var14 = new net.sf.jniinchi.JniInchiAtom(10.0d, 10.0d, 100.0d, "hi!");
    net.sf.jniinchi.JniInchiAtom var15 = var7.addAtom(var14);
    net.sf.jniinchi.JniInchiAtom var20 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var21 = var20.getCharge();
    var20.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var28 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var29 = var28.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var31 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var32 = var31.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var34 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var35 = new net.sf.jniinchi.JniInchiBond(var20, var28, var31, var34);
    net.sf.jniinchi.INCHI_BOND_STEREO var36 = var35.getBondStereo();
    net.sf.jniinchi.JniInchiAtom var37 = var35.getTargetAtom();
    net.sf.jniinchi.INCHI_BOND_STEREO var39 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    var35.setStereoDefinition(var39);
    net.sf.jniinchi.JniInchiBond var41 = var7.addBond(var35);
    int var42 = var7.getNumBonds();
    net.sf.jniinchi.JniInchiAtom var47 = new net.sf.jniinchi.JniInchiAtom(10.0d, 10.0d, 100.0d, "hi!");
    var47.setImplicitH(10);
    net.sf.jniinchi.JniInchiAtom var50 = var7.addAtom(var47);
    var50.setIsotopicMass(9999);
    java.lang.String var53 = var50.getElementType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "hi!"+ "'", var53.equals("hi!"));

  }

  public void test67() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test67");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var8 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput();
    var7.setStructure((net.sf.jniinchi.JniInchiStructure)var9);
    int var11 = var7.getNumBonds();
    net.sf.jniinchi.JniInchiOutputStructure var19 = new net.sf.jniinchi.JniInchiOutputStructure(0, "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", "", (-1L), 10L, 10L, 0L);
    java.lang.String var20 = var19.getLog();
    net.sf.jniinchi.JniInchiOutputStructure var28 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var29 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var28);
    net.sf.jniinchi.JniInchiInput var30 = new net.sf.jniinchi.JniInchiInput();
    var28.setStructure((net.sf.jniinchi.JniInchiStructure)var30);
    net.sf.jniinchi.JniInchiOutputStructure var39 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var40 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var39);
    int var41 = var40.getNumBonds();
    java.lang.String var42 = var40.getOptions();
    net.sf.jniinchi.JniInchiAtom var47 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var48 = var47.getCharge();
    var47.setImplicitTritium(10);
    double var51 = var47.getX();
    var47.setCharge(1);
    var47.setImplicitDeuterium(100);
    int var56 = var47.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var61 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var62 = var61.getCharge();
    var61.setImplicitTritium(10);
    double var65 = var61.getX();
    var61.setCharge(1);
    var61.setImplicitDeuterium(100);
    int var70 = var61.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var72 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var73 = var72.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var81 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var82 = var81.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var83 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var81);
    net.sf.jniinchi.JniInchiAtom[] var84 = new net.sf.jniinchi.JniInchiAtom[] { };
    var83.addAtoms(var84);
    boolean var86 = var72.equals((java.lang.Object)var84);
    net.sf.jniinchi.JniInchiBond var87 = new net.sf.jniinchi.JniInchiBond(var47, var61, var72);
    java.lang.String var88 = var87.getDebugString();
    net.sf.jniinchi.JniInchiBond var89 = var40.addBond(var87);
    net.sf.jniinchi.JniInchiBond var90 = var30.addBond(var87);
    net.sf.jniinchi.JniInchiBond var91 = var19.addBond(var87);
    net.sf.jniinchi.JniInchiAtom var92 = var87.getTargetAtom();
    net.sf.jniinchi.JniInchiAtom var93 = var7.addAtom(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + ""+ "'", var20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + ""+ "'", var42.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var88.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);

  }

  public void test68() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test68");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_RADICAL var1 = net.sf.jniinchi.INCHI_RADICAL.valueOf("VALID_STANDARD");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test69() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test69");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiOutputKey var1 = net.sf.jniinchi.JniInchiWrapper.getInchiKey("net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.LoadNativeLibraryException: ");
      fail("Expected exception of type net.sf.jniinchi.LoadNativeLibraryException");
    } catch (net.sf.jniinchi.LoadNativeLibraryException e) {
      // Expected exception.
    }

  }

  public void test70() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test70");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 100.0d, (-1.0d), "net.sf.jniinchi.LoadNativeLibraryException: ");

  }

  public void test71() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test71");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    int var10 = var7.getNumStereo0D();
    java.lang.String var11 = var7.getLog();
    int var12 = var7.getNumBonds();
    net.sf.jniinchi.JniInchiInput var13 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);

  }

  public void test72() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test72");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitTritium(10);
    double var8 = var4.getX();
    var4.setCharge(1);
    var4.setImplicitDeuterium(100);
    int var13 = var4.getImplicitProtium();
    int var14 = var4.getIsotopicMass();
    net.sf.jniinchi.JniInchiAtom var19 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var20 = var19.getCharge();
    var19.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var27 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var28 = var27.getCharge();
    var27.setImplicitTritium(10);
    double var31 = var27.getX();
    var27.setCharge(1);
    var27.setImplicitDeuterium(100);
    int var36 = var27.getImplicitProtium();
    var27.setImplicitTritium(0);
    var27.setImplicitProtium(10);
    net.sf.jniinchi.JniInchiAtom var45 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var46 = var45.getCharge();
    var45.setImplicitTritium(10);
    double var49 = var45.getX();
    java.lang.String var50 = var45.getElementType();
    var45.setCharge(10);
    net.sf.jniinchi.JniInchiAtom var57 = new net.sf.jniinchi.JniInchiAtom(100.0d, 100.0d, 100.0d, "hi!");
    java.lang.String var58 = var57.getDebugString();
    net.sf.jniinchi.INCHI_PARITY var60 = net.sf.jniinchi.INCHI_PARITY.getValue(3);
    int var61 = var60.getIndx();
    net.sf.jniinchi.JniInchiStereo0D var62 = net.sf.jniinchi.JniInchiStereo0D.createNewTetrahedralStereo0D(var4, var19, var27, var45, var57, var60);
    java.lang.String var63 = var4.getDebugString();
    double var64 = var4.getX();
    var4.setImplicitProtium(1);
    var4.setCharge(10100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!"+ "'", var50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "InChI Atom: hi! [100.0,100.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE"+ "'", var58.equals("InChI Atom: hi! [100.0,100.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "InChI Atom: hi! [1.0,10.0,100.0] Charge:1 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:10 // Radical: NONE"+ "'", var63.equals("InChI Atom: hi! [1.0,10.0,100.0] Charge:1 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:10 // Radical: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1.0d);

  }

  public void test73() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test73");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_STATUS var2 = net.sf.jniinchi.JniInchiWrapper.checkInchi("InChI_Output: EOF/OK/InChI Atom: hi! [1.0,10.0,100.0] Charge:10 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:10 // Radical: NONE/InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:1 D:0 T:0 // Radical: NONE/InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:10001 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE", false);
      fail("Expected exception of type net.sf.jniinchi.LoadNativeLibraryException");
    } catch (net.sf.jniinchi.LoadNativeLibraryException e) {
      // Expected exception.
    }

  }

  public void test74() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test74");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(100.0d, 100.0d, 100.0d, "hi!");
    java.lang.String var5 = var4.getDebugString();
    java.lang.String var6 = var4.getDebugString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "InChI Atom: hi! [100.0,100.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE"+ "'", var5.equals("InChI Atom: hi! [100.0,100.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "InChI Atom: hi! [100.0,100.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE"+ "'", var6.equals("InChI Atom: hi! [100.0,100.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE"));

  }

  public void test75() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test75");


    net.sf.jniinchi.JniInchiOutputStructure var8 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var9 = var8.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var10 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var8);
    net.sf.jniinchi.JniInchiBond[] var11 = new net.sf.jniinchi.JniInchiBond[] { };
    var10.addBonds(var11);
    net.sf.jniinchi.JniInchiAtom var17 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var18 = var17.getCharge();
    var17.setImplicitTritium(10);
    double var21 = var17.getX();
    var17.setCharge(1);
    net.sf.jniinchi.JniInchiAtom var24 = var10.addAtom(var17);
    net.sf.jniinchi.JniInchiInputData var27 = new net.sf.jniinchi.JniInchiInputData(1, var10, 100, "InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP");
    net.sf.jniinchi.JniInchiInput var28 = var27.getInput();
    net.sf.jniinchi.INCHI_RET var29 = var27.getReturnValue();
    net.sf.jniinchi.INCHI_RET var30 = var27.getReturnValue();
    net.sf.jniinchi.JniInchiInput var31 = var27.getInput();
    net.sf.jniinchi.JniInchiInput var32 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var31);
    net.sf.jniinchi.JniInchiOutputStructure var41 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var42 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var41);
    java.lang.String var43 = var42.getOptions();
    net.sf.jniinchi.JniInchiInputData var46 = new net.sf.jniinchi.JniInchiInputData(0, var42, 0, "net.sf.jniinchi.LoadNativeLibraryException");
    java.lang.String var47 = var46.getErrorMessage();
    net.sf.jniinchi.JniInchiInput var48 = var46.getInput();
    net.sf.jniinchi.JniInchiOutputStructure var56 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var57 = var56.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var58 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var56);
    java.lang.String var59 = var56.getLog();
    net.sf.jniinchi.JniInchiOutputStructure var67 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var68 = var67.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var69 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var67);
    net.sf.jniinchi.JniInchiAtom[] var70 = new net.sf.jniinchi.JniInchiAtom[] { };
    var69.addAtoms(var70);
    var56.addAtoms(var70);
    var48.addAtoms(var70);
    var32.addAtoms(var70);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiOutput var75 = net.sf.jniinchi.JniInchiWrapper.getStdInchi(var32);
      fail("Expected exception of type net.sf.jniinchi.LoadNativeLibraryException");
    } catch (net.sf.jniinchi.LoadNativeLibraryException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + ""+ "'", var43.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "net.sf.jniinchi.LoadNativeLibraryException"+ "'", var47.equals("net.sf.jniinchi.LoadNativeLibraryException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "hi!"+ "'", var59.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test76() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test76");


    net.sf.jniinchi.JniInchiInput var0 = new net.sf.jniinchi.JniInchiInput();
    net.sf.jniinchi.JniInchiOutputStructure var8 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var9 = var8.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var10 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var8);
    var0.setStructure((net.sf.jniinchi.JniInchiStructure)var8);
    net.sf.jniinchi.JniInchiAtom var16 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var16.setImplicitProtium(1);
    int var19 = var16.getImplicitDeuterium();
    int var20 = var16.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var22 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var27 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var28 = var27.getCharge();
    var27.setImplicitTritium(10);
    double var31 = var27.getX();
    var27.setCharge(1);
    int var34 = var27.getIsotopicMass();
    int var35 = var27.getCharge();
    net.sf.jniinchi.JniInchiAtom var40 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var41 = var40.getCharge();
    var40.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var45 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var46 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var16, var22, var27, var40, var45);
    net.sf.jniinchi.INCHI_PARITY var48 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    var46.setDisconnectedParity(var48);
    net.sf.jniinchi.INCHI_PARITY var50 = var46.getParity();
    net.sf.jniinchi.INCHI_PARITY var51 = var46.getDisconnectedParity();
    java.lang.String var52 = var46.getDebugString();
    net.sf.jniinchi.JniInchiStereo0D var53 = var8.addStereo0D(var46);
    net.sf.jniinchi.INCHI_PARITY var54 = var53.getParity();
    net.sf.jniinchi.JniInchiAtom var55 = var53.getCentralAtom();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD"+ "'", var52.equals("InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);

  }

  public void test77() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test77");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput(1, "", "", "hi!", "hi!");
    java.lang.String var6 = var5.getAuxInfo();
    java.lang.String var7 = var5.getLog();
    java.lang.String var8 = var5.toString();
    java.lang.String var9 = var5.getLog();
    net.sf.jniinchi.INCHI_RET var10 = var5.getReturnStatus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "InChI_Output: WARNING///hi!/hi!"+ "'", var8.equals("InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test78() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test78");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE", "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", 10L, (-1L), (-1L), 1L);
    int var8 = var7.getNumAtoms();
    int var9 = var7.getNumStereo0D();
    net.sf.jniinchi.JniInchiAtom var14 = new net.sf.jniinchi.JniInchiAtom(10.0d, 10.0d, 100.0d, "hi!");
    net.sf.jniinchi.JniInchiAtom var15 = var7.addAtom(var14);
    net.sf.jniinchi.JniInchiAtom var20 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var21 = var20.getCharge();
    var20.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var28 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var29 = var28.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var31 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var32 = var31.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var34 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var35 = new net.sf.jniinchi.JniInchiBond(var20, var28, var31, var34);
    net.sf.jniinchi.INCHI_BOND_STEREO var36 = var35.getBondStereo();
    net.sf.jniinchi.JniInchiAtom var37 = var35.getTargetAtom();
    net.sf.jniinchi.INCHI_BOND_STEREO var39 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    var35.setStereoDefinition(var39);
    net.sf.jniinchi.JniInchiBond var41 = var7.addBond(var35);
    int var42 = var7.getNumBonds();
    net.sf.jniinchi.JniInchiAtom var47 = new net.sf.jniinchi.JniInchiAtom(10.0d, 10.0d, 100.0d, "hi!");
    var47.setImplicitH(10);
    net.sf.jniinchi.JniInchiAtom var50 = var7.addAtom(var47);
    var50.setImplicitDeuterium(3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test79() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test79");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitTritium(10);
    double var8 = var4.getX();
    var4.setCharge(1);
    var4.setImplicitDeuterium(100);
    int var13 = var4.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var18 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var19 = var18.getCharge();
    var18.setImplicitTritium(10);
    double var22 = var18.getX();
    var18.setCharge(1);
    var18.setImplicitDeuterium(100);
    int var27 = var18.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var29 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var30 = var29.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var38 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var39 = var38.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var40 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var38);
    net.sf.jniinchi.JniInchiAtom[] var41 = new net.sf.jniinchi.JniInchiAtom[] { };
    var40.addAtoms(var41);
    boolean var43 = var29.equals((java.lang.Object)var41);
    net.sf.jniinchi.JniInchiBond var44 = new net.sf.jniinchi.JniInchiBond(var4, var18, var29);
    java.lang.String var45 = var44.getDebugString();
    net.sf.jniinchi.JniInchiAtom var50 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var51 = var50.getCharge();
    var50.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var58 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var59 = var58.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var61 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var62 = var61.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var64 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var65 = new net.sf.jniinchi.JniInchiBond(var50, var58, var61, var64);
    net.sf.jniinchi.INCHI_BOND_STEREO var66 = var65.getBondStereo();
    var44.setStereoDefinition(var66);
    var44.debug();
    net.sf.jniinchi.INCHI_BOND_TYPE var69 = var44.getBondType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var45.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test80() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test80");


    net.sf.jniinchi.JniInchiAtom var1 = new net.sf.jniinchi.JniInchiAtom("InChI_Output: OKAY/InChI_Output: EOF/SINGLE_1UP/net.sf.jniinchi.LoadNativeLibraryException: /hi!/net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/net.sf.jniinchi.LoadNativeLibraryException/VALID_STANDARD/InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE");

  }

  public void test81() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test81");


    net.sf.jniinchi.INCHI_RET var1 = net.sf.jniinchi.INCHI_RET.getValue(3);
    int var2 = var1.getIndx();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Class var4 = var1.getDeclaringClass();
    net.sf.jniinchi.JniInchiOutputStructure var5 = new net.sf.jniinchi.JniInchiOutputStructure(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test82() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test82");


    net.sf.jniinchi.LoadNativeLibraryException var1 = new net.sf.jniinchi.LoadNativeLibraryException("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiException var2 = new net.sf.jniinchi.JniInchiException((java.lang.Throwable)var1);
    net.sf.jniinchi.JniInchiException var3 = new net.sf.jniinchi.JniInchiException((java.lang.Throwable)var1);
    net.sf.jniinchi.JniInchiException var4 = new net.sf.jniinchi.JniInchiException((java.lang.Throwable)var3);

  }

  public void test83() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test83");


    net.sf.jniinchi.JniInchiOutputKey var2 = new net.sf.jniinchi.JniInchiOutputKey(0, "NONE");
    net.sf.jniinchi.INCHI_KEY var3 = var2.getReturnStatus();
    java.lang.String var4 = var2.getKey();
    net.sf.jniinchi.INCHI_KEY var5 = var2.getReturnStatus();
    net.sf.jniinchi.JniInchiOutputKey var7 = new net.sf.jniinchi.JniInchiOutputKey(var5, "InChI_Output: null/InChI_Output: WARNING///hi!/hi!/InChI_Output: WARNING///hi!/hi!//hi!");
    net.sf.jniinchi.INCHI_KEY var8 = var7.getReturnStatus();
    net.sf.jniinchi.INCHI_KEY var9 = var7.getReturnStatus();
    java.lang.String var10 = var9.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "NONE"+ "'", var4.equals("NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "OK"+ "'", var10.equals("OK"));

  }

  public void test84() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test84");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitTritium(10);
    double var8 = var4.getX();
    java.lang.String var9 = var4.getElementType();
    var4.setCharge(10);
    net.sf.jniinchi.JniInchiOutputStructure var19 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var20 = var19.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var21 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var19);
    net.sf.jniinchi.JniInchiBond[] var22 = new net.sf.jniinchi.JniInchiBond[] { };
    var21.addBonds(var22);
    net.sf.jniinchi.JniInchiAtom var28 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var29 = var28.getCharge();
    var28.setImplicitTritium(10);
    double var32 = var28.getX();
    var28.setCharge(1);
    net.sf.jniinchi.JniInchiAtom var35 = var21.addAtom(var28);
    net.sf.jniinchi.INCHI_BOND_TYPE var37 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var38 = var37.ordinal();
    net.sf.jniinchi.JniInchiAtom var43 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var44 = var43.getCharge();
    var43.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var51 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var52 = var51.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var54 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var55 = var54.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var57 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var58 = new net.sf.jniinchi.JniInchiBond(var43, var51, var54, var57);
    net.sf.jniinchi.INCHI_BOND_STEREO var59 = var58.getBondStereo();
    net.sf.jniinchi.JniInchiBond var60 = new net.sf.jniinchi.JniInchiBond(var4, var28, var37, var59);
    net.sf.jniinchi.JniInchiAtom var61 = var60.getTargetAtom();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test85() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test85");


    net.sf.jniinchi.INCHI_PARITY var1 = net.sf.jniinchi.INCHI_PARITY.getValue(3);
    int var2 = var1.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 3);

  }

  public void test86() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test86");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE", "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", 10L, (-1L), (-1L), 1L);
    int var8 = var7.getNumAtoms();
    int var9 = var7.getNumStereo0D();
    net.sf.jniinchi.JniInchiAtom var11 = new net.sf.jniinchi.JniInchiAtom("hi!");
    int var12 = var11.getImplicitProtium();
    var11.debug();
    net.sf.jniinchi.JniInchiAtom var14 = var7.addAtom(var11);
    int var15 = var7.getNumStereo0D();
    java.lang.String var16 = var7.getLog();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var16.equals("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));

  }

  public void test87() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test87");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    java.lang.String var10 = var7.getLog();
    net.sf.jniinchi.JniInchiAtom var15 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var15.setImplicitProtium(1);
    int var18 = var15.getImplicitDeuterium();
    int var19 = var15.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var21 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var26 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var27 = var26.getCharge();
    var26.setImplicitTritium(10);
    double var30 = var26.getX();
    var26.setCharge(1);
    int var33 = var26.getIsotopicMass();
    int var34 = var26.getCharge();
    net.sf.jniinchi.JniInchiAtom var39 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var40 = var39.getCharge();
    var39.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var44 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var45 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var15, var21, var26, var39, var44);
    net.sf.jniinchi.JniInchiStereo0D var46 = var7.addStereo0D(var45);
    net.sf.jniinchi.INCHI_PARITY var47 = var45.getDisconnectedParity();
    net.sf.jniinchi.JniInchiAtom var49 = var45.getNeighbor(0);
    java.lang.String var50 = var45.getDebugString();
    net.sf.jniinchi.JniInchiAtom[] var51 = var45.getNeighbors();
    net.sf.jniinchi.INCHI_PARITY var52 = var45.getParity();
    net.sf.jniinchi.INCHI_STEREOTYPE var53 = var45.getStereoType();
    net.sf.jniinchi.INCHI_PARITY var54 = var45.getParity();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD"+ "'", var50.equals("InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test88() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test88");


    net.sf.jniinchi.JniInchiException var1 = new net.sf.jniinchi.JniInchiException("InChI_Output: WARNING///hi!/hi!");
    java.lang.String var2 = var1.toString();
    net.sf.jniinchi.LoadNativeLibraryException var3 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var1);
    java.lang.String var4 = var3.toString();
    java.lang.String var5 = var3.toString();
    net.sf.jniinchi.LoadNativeLibraryException var6 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var3);
    net.sf.jniinchi.LoadNativeLibraryException var7 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var6);
    net.sf.jniinchi.LoadNativeLibraryException var8 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var7);
    net.sf.jniinchi.LoadNativeLibraryException var9 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var7);
    net.sf.jniinchi.LoadNativeLibraryException var10 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var7);
    net.sf.jniinchi.LoadNativeLibraryException var11 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var10);
    java.lang.Throwable[] var12 = var10.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var2.equals("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var4.equals("net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var5.equals("net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test89() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test89");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(0, "InChI_Output: WARNING///hi!/hi!", "net.sf.jniinchi.JniInchiException: InChI_Output: EOF/InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP/InChI_Output: EOF/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/SINGLE_1UP/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/NONE/InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE/InChI_Output: EOF/hi!///", 1L, (-1L), 0L, 1L);

  }

  public void test90() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test90");


    net.sf.jniinchi.JniInchiOutputStructure var8 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var8);
    java.lang.String var10 = var9.getOptions();
    net.sf.jniinchi.JniInchiInputData var13 = new net.sf.jniinchi.JniInchiInputData(0, var9, 0, "net.sf.jniinchi.LoadNativeLibraryException");
    net.sf.jniinchi.JniInchiOutputStructure var21 = new net.sf.jniinchi.JniInchiOutputStructure(100, "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE", "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", 10L, (-1L), (-1L), 1L);
    int var22 = var21.getNumAtoms();
    var9.setStructure((net.sf.jniinchi.JniInchiStructure)var21);
    net.sf.jniinchi.JniInchiOutputStructure var31 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var32 = var31.getNumAtoms();
    net.sf.jniinchi.JniInchiStructure var33 = new net.sf.jniinchi.JniInchiStructure();
    net.sf.jniinchi.JniInchiOutputStructure var41 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var42 = var41.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var43 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var41);
    net.sf.jniinchi.JniInchiAtom[] var44 = new net.sf.jniinchi.JniInchiAtom[] { };
    var43.addAtoms(var44);
    var33.addAtoms(var44);
    var31.setStructure(var33);
    net.sf.jniinchi.JniInchiInput var48 = new net.sf.jniinchi.JniInchiInput(var33);
    int var49 = var33.getNumAtoms();
    net.sf.jniinchi.JniInchiOutputStructure var57 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var58 = var57.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var59 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var57);
    net.sf.jniinchi.JniInchiBond[] var60 = new net.sf.jniinchi.JniInchiBond[] { };
    var59.addBonds(var60);
    var33.addBonds(var60);
    var21.addBonds(var60);
    int var64 = var21.getNumStereo0D();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + ""+ "'", var10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);

  }

  public void test91() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test91");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitTritium(10);
    double var8 = var4.getX();
    var4.setCharge(1);
    var4.setImplicitDeuterium(100);
    int var13 = var4.getImplicitProtium();
    int var14 = var4.getImplicitDeuterium();
    var4.setImplicitDeuterium((-1));
    var4.setImplicitProtium(10100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 100);

  }

  public void test92() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test92");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_BOND_TYPE var1 = net.sf.jniinchi.INCHI_BOND_TYPE.valueOf("InChI Atom: InChI_Output: WARNING///hi!/hi! [100.0,10.0,1.0] Charge:0 // Iso Mass:10001 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test93() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test93");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitTritium(10);
    var4.setImplicitTritium(1);
    net.sf.jniinchi.INCHI_RADICAL var10 = var4.getRadical();
    net.sf.jniinchi.INCHI_RADICAL var11 = var4.getRadical();
    var4.setImplicitDeuterium(0);
    int var14 = var4.getImplicitTritium();
    net.sf.jniinchi.JniInchiAtom var19 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var19.setImplicitProtium(1);
    double var22 = var19.getY();
    net.sf.jniinchi.INCHI_RADICAL var23 = var19.getRadical();
    var4.setRadical(var23);
    net.sf.jniinchi.JniInchiAtom var29 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var30 = var29.getCharge();
    var29.setImplicitTritium(10);
    double var33 = var29.getX();
    var29.setCharge(1);
    int var36 = var29.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var41 = new net.sf.jniinchi.JniInchiAtom((-1.0d), 1.0d, 0.0d, "InChI_Output: WARNING///hi!/hi!");
    java.lang.String var42 = var41.getElementType();
    net.sf.jniinchi.INCHI_RADICAL var43 = var41.getRadical();
    net.sf.jniinchi.JniInchiAtom var48 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    var48.setImplicitDeuterium(10);
    net.sf.jniinchi.JniInchiAtom var55 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var55.setImplicitProtium(1);
    int var58 = var55.getImplicitDeuterium();
    int var59 = var55.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var61 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var66 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var67 = var66.getCharge();
    var66.setImplicitTritium(10);
    double var70 = var66.getX();
    var66.setCharge(1);
    int var73 = var66.getIsotopicMass();
    int var74 = var66.getCharge();
    net.sf.jniinchi.JniInchiAtom var79 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var80 = var79.getCharge();
    var79.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var84 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var85 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var55, var61, var66, var79, var84);
    net.sf.jniinchi.INCHI_PARITY var87 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    var85.setDisconnectedParity(var87);
    net.sf.jniinchi.INCHI_PARITY var89 = var85.getParity();
    java.lang.String var90 = var89.toString();
    net.sf.jniinchi.JniInchiStereo0D var91 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var4, var29, var41, var48, var89);
    net.sf.jniinchi.INCHI_PARITY var92 = var91.getParity();
    net.sf.jniinchi.JniInchiAtom[] var93 = var91.getNeighbors();
    var91.debug();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "InChI_Output: WARNING///hi!/hi!"+ "'", var42.equals("InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "ODD"+ "'", var90.equals("ODD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);

  }

  public void test94() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test94");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiInput var1 = new net.sf.jniinchi.JniInchiInput("InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:10 T:1 // Radical: NONE");
      fail("Expected exception of type net.sf.jniinchi.JniInchiException");
    } catch (net.sf.jniinchi.JniInchiException e) {
      // Expected exception.
    }

  }

  public void test95() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test95");


    net.sf.jniinchi.JniInchiException var1 = new net.sf.jniinchi.JniInchiException("InChI Stereo0D:  [InChI_Output: WARNING///hi!/hi!,hi!,InChI_Output: WARNING///hi!/hi!,hi!] Type::NONE // Parity:NONE");

  }

  public void test96() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test96");


    net.sf.jniinchi.JniInchiOutputStructure var8 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var8);
    java.lang.String var10 = var9.getOptions();
    net.sf.jniinchi.JniInchiInputData var13 = new net.sf.jniinchi.JniInchiInputData(0, var9, 0, "net.sf.jniinchi.LoadNativeLibraryException");
    java.lang.String var14 = var13.getErrorMessage();
    net.sf.jniinchi.INCHI_RET var15 = var13.getReturnValue();
    net.sf.jniinchi.INCHI_RET var16 = var13.getReturnValue();
    net.sf.jniinchi.INCHI_RET var17 = var13.getReturnValue();
    net.sf.jniinchi.INCHI_RET var18 = var13.getReturnValue();
    java.lang.String var19 = var18.toString();
    net.sf.jniinchi.JniInchiOutputStructure var20 = new net.sf.jniinchi.JniInchiOutputStructure(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + ""+ "'", var10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "net.sf.jniinchi.LoadNativeLibraryException"+ "'", var14.equals("net.sf.jniinchi.LoadNativeLibraryException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "OKAY"+ "'", var19.equals("OKAY"));

  }

  public void test97() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test97");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    long[][] var10 = var7.getWarningFlags();
    int var11 = var7.getNumAtoms();
    long[][] var12 = var7.getWarningFlags();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test98() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test98");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var4.setImplicitProtium(1);
    int var7 = var4.getImplicitDeuterium();
    int var8 = var4.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var10 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var15 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var16 = var15.getCharge();
    var15.setImplicitTritium(10);
    double var19 = var15.getX();
    var15.setCharge(1);
    int var22 = var15.getIsotopicMass();
    int var23 = var15.getCharge();
    net.sf.jniinchi.JniInchiAtom var28 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var29 = var28.getCharge();
    var28.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var33 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var34 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var4, var10, var15, var28, var33);
    net.sf.jniinchi.INCHI_PARITY var36 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    var34.setDisconnectedParity(var36);
    net.sf.jniinchi.INCHI_PARITY var38 = var34.getParity();
    net.sf.jniinchi.JniInchiAtom[] var39 = var34.getNeighbors();
    net.sf.jniinchi.JniInchiAtom var40 = var34.getCentralAtom();
    net.sf.jniinchi.INCHI_PARITY var41 = var34.getParity();
    net.sf.jniinchi.JniInchiAtom var43 = var34.getNeighbor(1);
    net.sf.jniinchi.INCHI_RADICAL var44 = var43.getRadical();
    int var45 = var44.ordinal();
    int var46 = var44.getIndx();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);

  }

  public void test99() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test99");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput(100, "InChI_Output: WARNING/SINGLE_2UP/OK/InChI_Output: WARNING///hi!/hi!/InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP", "InChI Atom: hi! [10.0,10.0,100.0] Charge:0 // Iso Mass:10010 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", "InChI Atom: hi! [10.0,10.0,100.0] Charge:0 // Iso Mass:10010 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", "InChI_Output: WARNING/SINGLE_2UP/OK/InChI_Output: WARNING///hi!/hi!/InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP");
    java.lang.String var6 = var5.getInchi();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "InChI_Output: WARNING/SINGLE_2UP/OK/InChI_Output: WARNING///hi!/hi!/InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP"+ "'", var6.equals("InChI_Output: WARNING/SINGLE_2UP/OK/InChI_Output: WARNING///hi!/hi!/InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP"));

  }

  public void test100() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test100");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_BOND_TYPE var1 = net.sf.jniinchi.INCHI_BOND_TYPE.valueOf("net.sf.jniinchi.JniInchiException: InChI_Output: EOF/InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP/InChI_Output: EOF/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/SINGLE_1UP/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/NONE/InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE/InChI_Output: EOF/hi!///");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test101() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test101");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    java.lang.String var10 = var7.getLog();
    net.sf.jniinchi.JniInchiAtom var15 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var15.setImplicitProtium(1);
    int var18 = var15.getImplicitDeuterium();
    int var19 = var15.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var21 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var26 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var27 = var26.getCharge();
    var26.setImplicitTritium(10);
    double var30 = var26.getX();
    var26.setCharge(1);
    int var33 = var26.getIsotopicMass();
    int var34 = var26.getCharge();
    net.sf.jniinchi.JniInchiAtom var39 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var40 = var39.getCharge();
    var39.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var44 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var45 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var15, var21, var26, var39, var44);
    net.sf.jniinchi.JniInchiStereo0D var46 = var7.addStereo0D(var45);
    net.sf.jniinchi.INCHI_PARITY var47 = var45.getDisconnectedParity();
    net.sf.jniinchi.JniInchiAtom var49 = var45.getNeighbor(0);
    net.sf.jniinchi.INCHI_PARITY var50 = var45.getParity();
    net.sf.jniinchi.INCHI_PARITY var51 = var45.getParity();
    net.sf.jniinchi.INCHI_PARITY var52 = var45.getDisconnectedParity();
    net.sf.jniinchi.JniInchiAtom[] var53 = var45.getNeighbors();
    net.sf.jniinchi.INCHI_PARITY var54 = var45.getDisconnectedParity();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiAtom var56 = var45.getNeighbor(100);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test102() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test102");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_STEREOTYPE var1 = net.sf.jniinchi.INCHI_STEREOTYPE.valueOf("net.sf.jniinchi.JniInchiException: InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test103() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test103");


    net.sf.jniinchi.INCHI_RET var1 = net.sf.jniinchi.INCHI_RET.getValue(3);
    int var2 = var1.getIndx();
    java.lang.Class var3 = var1.getDeclaringClass();
    java.lang.Class var4 = var1.getDeclaringClass();
    java.lang.String var5 = var1.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "FATAL"+ "'", var5.equals("FATAL"));

  }

  public void test104() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test104");


    net.sf.jniinchi.INCHI_KEY var1 = net.sf.jniinchi.INCHI_KEY.getValue(0);
    net.sf.jniinchi.JniInchiOutputKey var3 = new net.sf.jniinchi.JniInchiOutputKey(var1, "InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiOutputKey var5 = new net.sf.jniinchi.JniInchiOutputKey(var1, "hi!");
    net.sf.jniinchi.INCHI_KEY var6 = var5.getReturnStatus();
    net.sf.jniinchi.JniInchiOutputKey var8 = new net.sf.jniinchi.JniInchiOutputKey(var6, "OK");
    net.sf.jniinchi.INCHI_KEY var9 = var8.getReturnStatus();
    java.lang.Class var10 = var9.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var12 = java.lang.Enum.<java.lang.Enum>valueOf(var10, "InChI Atom: hi! [1.0,10.0,100.0] Charge:1 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:-1 // Radical: NONE");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test105() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test105");


    net.sf.jniinchi.INCHI_STEREOTYPE var1 = net.sf.jniinchi.INCHI_STEREOTYPE.getValue(2);
    int var2 = var1.getIndx();
    int var3 = var1.getIndx();
    int var4 = var1.getIndx();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2);

  }

  public void test106() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test106");


    net.sf.jniinchi.LoadNativeLibraryException var1 = new net.sf.jniinchi.LoadNativeLibraryException("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiException var3 = new net.sf.jniinchi.JniInchiException("InChI_Output: WARNING///hi!/hi!");
    var1.addSuppressed((java.lang.Throwable)var3);
    net.sf.jniinchi.JniInchiException var5 = new net.sf.jniinchi.JniInchiException((java.lang.Throwable)var1);
    net.sf.jniinchi.LoadNativeLibraryException var6 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var1);

  }

  public void test107() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test107");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(0.0d, 1.0d, 1.0d, "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE");
    java.lang.String var5 = var4.getElementType();
    var4.debug();
    var4.setImplicitDeuterium(9999);
    int var9 = var4.getCharge();
    var4.debug();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE"+ "'", var5.equals("InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);

  }

  public void test108() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test108");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    java.lang.String var10 = var7.getLog();
    net.sf.jniinchi.JniInchiAtom var15 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var15.setImplicitProtium(1);
    int var18 = var15.getImplicitDeuterium();
    int var19 = var15.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var21 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var26 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var27 = var26.getCharge();
    var26.setImplicitTritium(10);
    double var30 = var26.getX();
    var26.setCharge(1);
    int var33 = var26.getIsotopicMass();
    int var34 = var26.getCharge();
    net.sf.jniinchi.JniInchiAtom var39 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var40 = var39.getCharge();
    var39.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var44 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var45 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var15, var21, var26, var39, var44);
    net.sf.jniinchi.JniInchiStereo0D var46 = var7.addStereo0D(var45);
    net.sf.jniinchi.INCHI_PARITY var47 = var45.getDisconnectedParity();
    net.sf.jniinchi.JniInchiAtom var49 = var45.getNeighbor(0);
    java.lang.String var50 = var45.getDebugString();
    net.sf.jniinchi.INCHI_STEREOTYPE var51 = var45.getStereoType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD"+ "'", var50.equals("InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test109() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test109");


    net.sf.jniinchi.JniInchiException var1 = new net.sf.jniinchi.JniInchiException("InChI_Output: WARNING///hi!/hi!");
    java.lang.String var2 = var1.toString();
    net.sf.jniinchi.LoadNativeLibraryException var3 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var1);
    java.lang.String var4 = var3.toString();
    java.lang.String var5 = var3.toString();
    net.sf.jniinchi.LoadNativeLibraryException var6 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var3);
    net.sf.jniinchi.LoadNativeLibraryException var7 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var6);
    net.sf.jniinchi.LoadNativeLibraryException var8 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var7);
    net.sf.jniinchi.LoadNativeLibraryException var9 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var7);
    net.sf.jniinchi.LoadNativeLibraryException var10 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var7);
    net.sf.jniinchi.LoadNativeLibraryException var11 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var7);
    net.sf.jniinchi.JniInchiException var12 = new net.sf.jniinchi.JniInchiException((java.lang.Throwable)var7);
    net.sf.jniinchi.JniInchiException var13 = new net.sf.jniinchi.JniInchiException((java.lang.Throwable)var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var2.equals("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var4.equals("net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var5.equals("net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));

  }

  public void test110() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test110");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(10.0d, 10.0d, 100.0d, "hi!");
    var4.setIsotopicMassShift(10);
    double var7 = var4.getZ();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 100.0d);

  }

  public void test111() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test111");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput(10, "InChI Atom: hi! [1.0,10.0,100.0] Charge:10 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:10 // Radical: NONE", "InChI_Output: null/SINGLE_1UP/InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP/InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE/InChI_Output: null/InChI_Output: WARNING///hi!/hi!/InChI_Output: WARNING///hi!/hi!//hi!", "InChI_Output: null/InChI_Output: WARNING///hi!/hi!/InChI_Output: WARNING///hi!/hi!//hi!", "InChI Atom: hi! [1.0,10.0,100.0] Charge:1 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:-1 // Radical: NONE");

  }

  public void test112() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test112");


    net.sf.jniinchi.JniInchiOutputStructure var8 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var9 = var8.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var10 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var8);
    java.lang.String var11 = var10.getOptions();
    net.sf.jniinchi.JniInchiInput var12 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var10);
    net.sf.jniinchi.INCHI_KEY var14 = net.sf.jniinchi.INCHI_KEY.getValue(0);
    net.sf.jniinchi.JniInchiOutputKey var16 = new net.sf.jniinchi.JniInchiOutputKey(var14, "InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiAtom var21 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var22 = var21.getCharge();
    var21.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var29 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var30 = var29.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var32 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var33 = var32.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var35 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var36 = new net.sf.jniinchi.JniInchiBond(var21, var29, var32, var35);
    boolean var37 = var14.equals((java.lang.Object)var36);
    net.sf.jniinchi.JniInchiAtom var38 = var36.getOriginAtom();
    net.sf.jniinchi.JniInchiBond var39 = var10.addBond(var36);
    net.sf.jniinchi.JniInchiInputData var42 = new net.sf.jniinchi.JniInchiInputData(100, var10, (-1), "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE");
    net.sf.jniinchi.INCHI_RET var43 = var42.getReturnValue();
    java.lang.String var44 = var42.getErrorMessage();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var44.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));

  }

  public void test113() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test113");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.INCHI_KEY var9 = net.sf.jniinchi.INCHI_KEY.getValue(0);
    net.sf.jniinchi.JniInchiOutputKey var11 = new net.sf.jniinchi.JniInchiOutputKey(var9, "InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiAtom var16 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var17 = var16.getCharge();
    var16.setImplicitTritium(10);
    double var20 = var16.getX();
    var16.setCharge(1);
    var16.setImplicitDeuterium(100);
    int var25 = var16.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var30 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var31 = var30.getCharge();
    var30.setImplicitTritium(10);
    double var34 = var30.getX();
    var30.setCharge(1);
    var30.setImplicitDeuterium(100);
    int var39 = var30.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var41 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var42 = var41.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var50 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var51 = var50.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var52 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var50);
    net.sf.jniinchi.JniInchiAtom[] var53 = new net.sf.jniinchi.JniInchiAtom[] { };
    var52.addAtoms(var53);
    boolean var55 = var41.equals((java.lang.Object)var53);
    net.sf.jniinchi.JniInchiBond var56 = new net.sf.jniinchi.JniInchiBond(var16, var30, var41);
    java.lang.String var57 = var56.getDebugString();
    boolean var58 = var9.equals((java.lang.Object)var56);
    net.sf.jniinchi.INCHI_BOND_TYPE var59 = var56.getBondType();
    net.sf.jniinchi.JniInchiAtom var60 = var56.getTargetAtom();
    net.sf.jniinchi.JniInchiAtom var61 = var56.getOriginAtom();
    net.sf.jniinchi.INCHI_RADICAL var62 = var61.getRadical();
    net.sf.jniinchi.JniInchiAtom var63 = var7.addAtom(var61);
    var63.setCharge(10);
    net.sf.jniinchi.INCHI_RADICAL var66 = var63.getRadical();
    java.lang.String var67 = var63.getElementType();
    int var68 = var63.getImplicitProtium();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var57.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "hi!"+ "'", var67.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);

  }

  public void test114() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test114");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput((-1), "hi!", "", "", "");
    net.sf.jniinchi.INCHI_RET var6 = var5.getReturnStatus();
    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(var6);
    net.sf.jniinchi.JniInchiOutputStructure var8 = new net.sf.jniinchi.JniInchiOutputStructure(var6);
    int var9 = var6.getIndx();
    net.sf.jniinchi.JniInchiOutput var14 = new net.sf.jniinchi.JniInchiOutput(var6, "InChI_Output: EOF/hi!///", "SINGLE_2UP", "InChI_Output: EOF/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/InChI Atom: hi! [1.0,10.0,100.0] Charge:1 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:10 // Radical: NONE/hi!/", "net.sf.jniinchi.LoadNativeLibraryException: ");
    java.lang.String var15 = var14.getLog();
    net.sf.jniinchi.INCHI_RET var16 = var14.getReturnStatus();
    net.sf.jniinchi.JniInchiOutput var21 = new net.sf.jniinchi.JniInchiOutput(var16, "hi!", "net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", "InChI_Output: EOF/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/InChI Atom: hi! [1.0,10.0,100.0] Charge:1 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:10 // Radical: NONE/hi!/", "InChI Atom: hi! [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "net.sf.jniinchi.LoadNativeLibraryException: "+ "'", var15.equals("net.sf.jniinchi.LoadNativeLibraryException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test115() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test115");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    var4.setImplicitDeuterium(10);
    int var7 = var4.getCharge();
    int var8 = var4.getImplicitProtium();
    double var9 = var4.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1.0d);

  }

  public void test116() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test116");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    int var6 = var4.getIsotopicMass();
    double var7 = var4.getZ();
    double var8 = var4.getY();
    int var9 = var4.getImplicitH();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));

  }

  public void test117() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test117");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.INCHI_KEY var10 = net.sf.jniinchi.INCHI_KEY.getValue(0);
    net.sf.jniinchi.JniInchiOutputKey var12 = new net.sf.jniinchi.JniInchiOutputKey(var10, "InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiAtom var17 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var18 = var17.getCharge();
    var17.setImplicitTritium(10);
    double var21 = var17.getX();
    var17.setCharge(1);
    var17.setImplicitDeuterium(100);
    int var26 = var17.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var31 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var32 = var31.getCharge();
    var31.setImplicitTritium(10);
    double var35 = var31.getX();
    var31.setCharge(1);
    var31.setImplicitDeuterium(100);
    int var40 = var31.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var42 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var43 = var42.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var51 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var52 = var51.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var53 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var51);
    net.sf.jniinchi.JniInchiAtom[] var54 = new net.sf.jniinchi.JniInchiAtom[] { };
    var53.addAtoms(var54);
    boolean var56 = var42.equals((java.lang.Object)var54);
    net.sf.jniinchi.JniInchiBond var57 = new net.sf.jniinchi.JniInchiBond(var17, var31, var42);
    java.lang.String var58 = var57.getDebugString();
    boolean var59 = var10.equals((java.lang.Object)var57);
    net.sf.jniinchi.INCHI_BOND_TYPE var60 = var57.getBondType();
    net.sf.jniinchi.JniInchiAtom var61 = var57.getOriginAtom();
    net.sf.jniinchi.JniInchiBond var62 = var7.addBond(var57);
    net.sf.jniinchi.INCHI_BOND_TYPE var63 = var62.getBondType();
    var62.debug();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var58.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test118() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test118");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var8 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput();
    var7.setStructure((net.sf.jniinchi.JniInchiStructure)var9);
    java.lang.String var11 = var9.getOptions();
    java.lang.String var12 = var9.getOptions();
    int var13 = var9.getNumStereo0D();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);

  }

  public void test119() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test119");


    net.sf.jniinchi.JniInchiInputInchi var1 = new net.sf.jniinchi.JniInchiInputInchi("net.sf.jniinchi.LoadNativeLibraryException: OK");
    java.lang.String var2 = var1.getOptions();
    java.lang.String var3 = var1.getInchi();
    java.lang.String var4 = var1.getOptions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "net.sf.jniinchi.LoadNativeLibraryException: OK"+ "'", var3.equals("net.sf.jniinchi.LoadNativeLibraryException: OK"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));

  }

  public void test120() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test120");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput((-1), "hi!", "", "", "");
    java.lang.String var6 = var5.getAuxInfo();
    net.sf.jniinchi.INCHI_RET var7 = var5.getReturnStatus();
    net.sf.jniinchi.JniInchiOutput var12 = new net.sf.jniinchi.JniInchiOutput(var7, "OK", "", "InChI_Output: WARNING///hi!/hi!", "hi!");
    net.sf.jniinchi.JniInchiOutputStructure var13 = new net.sf.jniinchi.JniInchiOutputStructure(var7);
    long[][] var14 = var13.getWarningFlags();
    long[][] var15 = var13.getWarningFlags();
    java.lang.String var16 = var13.getLog();
    net.sf.jniinchi.JniInchiInput var17 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var13);
    net.sf.jniinchi.JniInchiInput var18 = new net.sf.jniinchi.JniInchiInput();
    net.sf.jniinchi.JniInchiOutputStructure var26 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var27 = var26.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var28 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var26);
    var18.setStructure((net.sf.jniinchi.JniInchiStructure)var26);
    net.sf.jniinchi.JniInchiAtom var34 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var34.setImplicitProtium(1);
    int var37 = var34.getImplicitDeuterium();
    int var38 = var34.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var40 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var45 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var46 = var45.getCharge();
    var45.setImplicitTritium(10);
    double var49 = var45.getX();
    var45.setCharge(1);
    int var52 = var45.getIsotopicMass();
    int var53 = var45.getCharge();
    net.sf.jniinchi.JniInchiAtom var58 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var59 = var58.getCharge();
    var58.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var63 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var64 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var34, var40, var45, var58, var63);
    net.sf.jniinchi.INCHI_PARITY var66 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    var64.setDisconnectedParity(var66);
    net.sf.jniinchi.INCHI_PARITY var68 = var64.getParity();
    net.sf.jniinchi.INCHI_PARITY var69 = var64.getDisconnectedParity();
    java.lang.String var70 = var64.getDebugString();
    net.sf.jniinchi.JniInchiStereo0D var71 = var26.addStereo0D(var64);
    net.sf.jniinchi.JniInchiAtom[] var72 = var64.getNeighbors();
    net.sf.jniinchi.INCHI_PARITY var73 = var64.getDisconnectedParity();
    net.sf.jniinchi.JniInchiStereo0D var74 = var13.addStereo0D(var64);
    var74.debug();
    java.lang.String var76 = var74.getDebugString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD"+ "'", var70.equals("InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD"+ "'", var76.equals("InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD"));

  }

  public void test121() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test121");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput(10, "OK", "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", "", "InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE");
    java.lang.String var6 = var5.getLog();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE"+ "'", var6.equals("InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE"));

  }

  public void test122() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test122");


    net.sf.jniinchi.JniInchiOutputStructure var8 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var9 = var8.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var10 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var8);
    java.lang.String var11 = var10.getOptions();
    net.sf.jniinchi.JniInchiInput var12 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var10);
    net.sf.jniinchi.JniInchiAtom var17 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var18 = var17.getCharge();
    var17.setImplicitTritium(10);
    double var21 = var17.getX();
    var17.setCharge(1);
    var17.setImplicitDeuterium(100);
    int var26 = var17.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var31 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var32 = var31.getCharge();
    var31.setImplicitTritium(10);
    double var35 = var31.getX();
    var31.setCharge(1);
    var31.setImplicitDeuterium(100);
    int var40 = var31.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var42 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var43 = var42.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var51 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var52 = var51.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var53 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var51);
    net.sf.jniinchi.JniInchiAtom[] var54 = new net.sf.jniinchi.JniInchiAtom[] { };
    var53.addAtoms(var54);
    boolean var56 = var42.equals((java.lang.Object)var54);
    net.sf.jniinchi.JniInchiBond var57 = new net.sf.jniinchi.JniInchiBond(var17, var31, var42);
    java.lang.String var58 = var57.getDebugString();
    net.sf.jniinchi.JniInchiAtom var63 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var64 = var63.getCharge();
    var63.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var71 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var72 = var71.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var74 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var75 = var74.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var77 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var78 = new net.sf.jniinchi.JniInchiBond(var63, var71, var74, var77);
    net.sf.jniinchi.INCHI_BOND_STEREO var79 = var78.getBondStereo();
    var57.setStereoDefinition(var79);
    net.sf.jniinchi.JniInchiBond[] var81 = new net.sf.jniinchi.JniInchiBond[] { var57};
    var10.addBonds(var81);
    net.sf.jniinchi.JniInchiInputData var85 = new net.sf.jniinchi.JniInchiInputData(1, var10, 10, "hi!");
    net.sf.jniinchi.INCHI_RET var86 = var85.getReturnValue();
    net.sf.jniinchi.JniInchiInput var87 = var85.getInput();
    java.lang.String var88 = var85.getErrorMessage();
    java.lang.String var89 = var85.getErrorMessage();
    java.lang.String var90 = var85.getErrorMessage();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var58.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "hi!"+ "'", var88.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "hi!"+ "'", var89.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "hi!"+ "'", var90.equals("hi!"));

  }

  public void test123() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test123");


    net.sf.jniinchi.JniInchiOutputStructure var8 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var9 = var8.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var10 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var8);
    net.sf.jniinchi.JniInchiBond[] var11 = new net.sf.jniinchi.JniInchiBond[] { };
    var10.addBonds(var11);
    net.sf.jniinchi.JniInchiAtom var17 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var18 = var17.getCharge();
    var17.setImplicitTritium(10);
    double var21 = var17.getX();
    var17.setCharge(1);
    net.sf.jniinchi.JniInchiAtom var24 = var10.addAtom(var17);
    net.sf.jniinchi.JniInchiInputData var27 = new net.sf.jniinchi.JniInchiInputData(1, var10, 100, "InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP");
    net.sf.jniinchi.INCHI_RET var28 = var27.getReturnValue();
    java.lang.String var29 = var27.getErrorMessage();
    net.sf.jniinchi.INCHI_RET var30 = var27.getReturnValue();
    java.lang.String var31 = var27.getErrorMessage();
    net.sf.jniinchi.INCHI_RET var32 = var27.getReturnValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP"+ "'", var29.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP"+ "'", var31.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test124() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test124");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput((-1), "hi!", "", "", "");
    net.sf.jniinchi.INCHI_RET var6 = var5.getReturnStatus();
    int var7 = var6.getIndx();
    net.sf.jniinchi.JniInchiOutput var12 = new net.sf.jniinchi.JniInchiOutput(var6, "NONE", "InChI_Output: EOF/SINGLE_1UP/net.sf.jniinchi.LoadNativeLibraryException: /hi!/net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", "InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD", "InChI_Output: EOF/SINGLE_1UP/net.sf.jniinchi.LoadNativeLibraryException: /hi!/net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiOutputStructure var13 = new net.sf.jniinchi.JniInchiOutputStructure(var6);
    net.sf.jniinchi.JniInchiOutputStructure var14 = new net.sf.jniinchi.JniInchiOutputStructure(var6);
    net.sf.jniinchi.JniInchiOutput var19 = new net.sf.jniinchi.JniInchiOutput(var6, "OKAY", "net.sf.jniinchi.LoadNativeLibraryException: InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD", "InChI Atom: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi! [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", "net.sf.jniinchi.JniInchiException: InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP");
    net.sf.jniinchi.JniInchiOutputStructure var20 = new net.sf.jniinchi.JniInchiOutputStructure(var6);
    net.sf.jniinchi.JniInchiOutput var25 = new net.sf.jniinchi.JniInchiOutput(var6, "InChI Atom: hi! [100.0,100.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:1 T:0 // Radical: NONE", "net.sf.jniinchi.LoadNativeLibraryException: InChI Atom: hi! [1.0,10.0,100.0] Charge:10 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:10 // Radical: NONE", "InChI Atom: hi! [10.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", "net.sf.jniinchi.JniInchiException: net.sf.jniinchi.JniInchiException: OK");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1));

  }

  public void test125() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test125");


    net.sf.jniinchi.INCHI_KEY var1 = net.sf.jniinchi.INCHI_KEY.getValue(0);
    net.sf.jniinchi.JniInchiOutputKey var3 = new net.sf.jniinchi.JniInchiOutputKey(var1, "InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiAtom var8 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var9 = var8.getCharge();
    var8.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var16 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var17 = var16.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var19 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var20 = var19.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var22 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var23 = new net.sf.jniinchi.JniInchiBond(var8, var16, var19, var22);
    boolean var24 = var1.equals((java.lang.Object)var23);
    int var25 = var1.getIndx();
    net.sf.jniinchi.JniInchiOutputKey var27 = new net.sf.jniinchi.JniInchiOutputKey(var1, "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.INCHI_KEY var28 = var27.getReturnStatus();
    net.sf.jniinchi.JniInchiOutputKey var30 = new net.sf.jniinchi.JniInchiOutputKey(var28, "net.sf.jniinchi.JniInchiException: InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:10001 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE");
    net.sf.jniinchi.INCHI_KEY var31 = var30.getReturnStatus();
    net.sf.jniinchi.INCHI_KEY var32 = var30.getReturnStatus();
    java.lang.Class var33 = var32.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var35 = java.lang.Enum.<java.lang.Enum>valueOf(var33, "InChI Atom: hi! [1.0,10.0,100.0] Charge:1 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:-1 // Radical: NONE");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test126() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test126");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var4.setImplicitProtium(1);
    int var7 = var4.getImplicitDeuterium();
    int var8 = var4.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var10 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var15 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var16 = var15.getCharge();
    var15.setImplicitTritium(10);
    double var19 = var15.getX();
    var15.setCharge(1);
    int var22 = var15.getIsotopicMass();
    int var23 = var15.getCharge();
    net.sf.jniinchi.JniInchiAtom var28 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var29 = var28.getCharge();
    var28.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var33 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var34 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var4, var10, var15, var28, var33);
    net.sf.jniinchi.INCHI_PARITY var36 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    var34.setDisconnectedParity(var36);
    net.sf.jniinchi.INCHI_PARITY var38 = var34.getParity();
    net.sf.jniinchi.JniInchiAtom[] var39 = var34.getNeighbors();
    net.sf.jniinchi.JniInchiAtom var40 = var34.getCentralAtom();
    net.sf.jniinchi.INCHI_PARITY var41 = var34.getParity();
    net.sf.jniinchi.INCHI_STEREOTYPE var42 = var34.getStereoType();
    net.sf.jniinchi.JniInchiAtom var43 = var34.getCentralAtom();
    java.lang.String var44 = var34.getDebugString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD"+ "'", var44.equals("InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD"));

  }

  public void test127() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test127");


    net.sf.jniinchi.JniInchiAtom var1 = new net.sf.jniinchi.JniInchiAtom("hi!");
    var1.setCharge(0);
    net.sf.jniinchi.JniInchiAtom var8 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var8.setImplicitProtium(1);
    int var11 = var8.getImplicitDeuterium();
    int var12 = var8.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var14 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var19 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var20 = var19.getCharge();
    var19.setImplicitTritium(10);
    double var23 = var19.getX();
    var19.setCharge(1);
    int var26 = var19.getIsotopicMass();
    int var27 = var19.getCharge();
    net.sf.jniinchi.JniInchiAtom var32 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var33 = var32.getCharge();
    var32.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var37 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var38 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var8, var14, var19, var32, var37);
    net.sf.jniinchi.JniInchiAtom var43 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var44 = var43.getCharge();
    var43.setImplicitTritium(10);
    double var47 = var43.getX();
    var43.setCharge(1);
    var43.setImplicitDeuterium(100);
    int var52 = var43.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var57 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var58 = var57.getCharge();
    var57.setImplicitTritium(10);
    double var61 = var57.getX();
    var57.setCharge(1);
    var57.setImplicitDeuterium(100);
    int var66 = var57.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var68 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var69 = var68.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var77 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var78 = var77.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var79 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var77);
    net.sf.jniinchi.JniInchiAtom[] var80 = new net.sf.jniinchi.JniInchiAtom[] { };
    var79.addAtoms(var80);
    boolean var82 = var68.equals((java.lang.Object)var80);
    net.sf.jniinchi.JniInchiBond var83 = new net.sf.jniinchi.JniInchiBond(var43, var57, var68);
    net.sf.jniinchi.INCHI_BOND_TYPE var84 = var83.getBondType();
    net.sf.jniinchi.JniInchiBond var85 = new net.sf.jniinchi.JniInchiBond(var1, var32, var84);
    int var86 = var1.getImplicitTritium();
    var1.setImplicitDeuterium(2);
    double var89 = var1.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0.0d);

  }

  public void test128() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test128");


    net.sf.jniinchi.INCHI_RET var1 = net.sf.jniinchi.INCHI_RET.getValue(3);
    net.sf.jniinchi.JniInchiOutput var6 = new net.sf.jniinchi.JniInchiOutput(var1, "InChI Atom: hi! [1.0,10.0,100.0] Charge:1 // Iso Mass:0 // Implicit H:-1 P:10 D:0 T:10 // Radical: NONE", "net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", "InChI_Output: null/InChI_Output: WARNING///hi!/hi!/InChI_Output: WARNING///hi!/hi!//hi!", "InChI_Output: null/InChI_Output: null/SINGLE_1UP/InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP/InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE/InChI_Output: null/InChI_Output: WARNING///hi!/hi!/InChI_Output: WARNING///hi!/hi!//hi!/InChI Atom: InChI_Output: EOF/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/SINGLE_1UP/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/NONE [1.0,-1.0,1.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/InChI Atom: hi! [10.0,10.0,100.0] Charge:0 // Iso Mass:10010 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE");
    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiBond var9 = var7.getBond(10001);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test129() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test129");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE", "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", 10L, (-1L), (-1L), 1L);
    int var8 = var7.getNumAtoms();
    int var9 = var7.getNumStereo0D();
    net.sf.jniinchi.JniInchiAtom var14 = new net.sf.jniinchi.JniInchiAtom(10.0d, 10.0d, 100.0d, "hi!");
    net.sf.jniinchi.JniInchiAtom var15 = var7.addAtom(var14);
    net.sf.jniinchi.JniInchiAtom var20 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var21 = var20.getCharge();
    var20.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var28 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var29 = var28.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var31 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var32 = var31.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var34 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var35 = new net.sf.jniinchi.JniInchiBond(var20, var28, var31, var34);
    net.sf.jniinchi.INCHI_BOND_STEREO var36 = var35.getBondStereo();
    net.sf.jniinchi.JniInchiAtom var37 = var35.getTargetAtom();
    net.sf.jniinchi.INCHI_BOND_STEREO var39 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    var35.setStereoDefinition(var39);
    net.sf.jniinchi.JniInchiBond var41 = var7.addBond(var35);
    int var42 = var7.getNumBonds();
    net.sf.jniinchi.JniInchiAtom var47 = new net.sf.jniinchi.JniInchiAtom(10.0d, 10.0d, 100.0d, "hi!");
    var47.setImplicitH(10);
    net.sf.jniinchi.JniInchiAtom var50 = var7.addAtom(var47);
    var50.debug();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test130() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test130");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitTritium(10);
    double var8 = var4.getX();
    var4.setCharge(1);
    var4.setImplicitDeuterium(100);
    int var13 = var4.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var18 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var19 = var18.getCharge();
    var18.setImplicitTritium(10);
    double var22 = var18.getX();
    var18.setCharge(1);
    var18.setImplicitDeuterium(100);
    int var27 = var18.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var29 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var30 = var29.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var38 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var39 = var38.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var40 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var38);
    net.sf.jniinchi.JniInchiAtom[] var41 = new net.sf.jniinchi.JniInchiAtom[] { };
    var40.addAtoms(var41);
    boolean var43 = var29.equals((java.lang.Object)var41);
    net.sf.jniinchi.JniInchiBond var44 = new net.sf.jniinchi.JniInchiBond(var4, var18, var29);
    net.sf.jniinchi.INCHI_RADICAL var46 = net.sf.jniinchi.INCHI_RADICAL.getValue(0);
    java.lang.Class var47 = var46.getDeclaringClass();
    var18.setRadical(var46);
    java.lang.String var49 = var46.name();
    int var50 = var46.getIndx();
    int var51 = var46.getIndx();
    int var52 = var46.getIndx();
    int var53 = var46.getIndx();
    net.sf.jniinchi.INCHI_BOND_STEREO var55 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue((-1));
    int var56 = var55.getIndx();
    java.lang.String var57 = var55.toString();
    int var58 = var55.getIndx();
    java.lang.String var59 = var55.name();
    boolean var60 = var46.equals((java.lang.Object)var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "NONE"+ "'", var49.equals("NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "SINGLE_2UP"+ "'", var57.equals("SINGLE_2UP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "SINGLE_2UP"+ "'", var59.equals("SINGLE_2UP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);

  }

  public void test131() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test131");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(0.0d, 1.0d, 0.0d, "");
    var4.setIsotopicMassShift(10);
    int var7 = var4.getImplicitTritium();
    java.lang.String var8 = var4.getElementType();
    var4.debug();
    net.sf.jniinchi.INCHI_RADICAL var10 = var4.getRadical();
    double var11 = var4.getZ();
    net.sf.jniinchi.INCHI_RADICAL var12 = var4.getRadical();
    double var13 = var4.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.0d);

  }

  public void test132() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test132");


    net.sf.jniinchi.JniInchiAtom var1 = new net.sf.jniinchi.JniInchiAtom("hi!");
    var1.setCharge(0);
    net.sf.jniinchi.JniInchiOutputStructure var11 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var12 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var11);
    net.sf.jniinchi.JniInchiAtom var17 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var18 = var17.getCharge();
    var17.setImplicitTritium(10);
    double var21 = var17.getX();
    var17.setCharge(1);
    var17.setImplicitDeuterium(100);
    int var26 = var17.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var31 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var32 = var31.getCharge();
    var31.setImplicitTritium(10);
    double var35 = var31.getX();
    var31.setCharge(1);
    var31.setImplicitDeuterium(100);
    int var40 = var31.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var42 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var43 = var42.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var51 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var52 = var51.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var53 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var51);
    net.sf.jniinchi.JniInchiAtom[] var54 = new net.sf.jniinchi.JniInchiAtom[] { };
    var53.addAtoms(var54);
    boolean var56 = var42.equals((java.lang.Object)var54);
    net.sf.jniinchi.JniInchiBond var57 = new net.sf.jniinchi.JniInchiBond(var17, var31, var42);
    net.sf.jniinchi.JniInchiBond var58 = var11.addBond(var57);
    var57.debug();
    net.sf.jniinchi.JniInchiAtom var60 = var57.getOriginAtom();
    net.sf.jniinchi.INCHI_BOND_TYPE var62 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var63 = var62.ordinal();
    java.lang.String var64 = var62.name();
    net.sf.jniinchi.JniInchiBond var65 = new net.sf.jniinchi.JniInchiBond(var1, var60, var62);
    var60.setIsotopicMassShift(3);
    int var68 = var60.getImplicitDeuterium();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "NONE"+ "'", var64.equals("NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 100);

  }

  public void test133() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test133");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    net.sf.jniinchi.JniInchiBond[] var10 = new net.sf.jniinchi.JniInchiBond[] { };
    var9.addBonds(var10);
    net.sf.jniinchi.JniInchiAtom var16 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var17 = var16.getCharge();
    var16.setImplicitTritium(10);
    double var20 = var16.getX();
    var16.setCharge(1);
    net.sf.jniinchi.JniInchiAtom var23 = var9.addAtom(var16);
    int var24 = var9.getNumBonds();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiOutput var25 = net.sf.jniinchi.JniInchiWrapper.getStdInchi(var9);
      fail("Expected exception of type net.sf.jniinchi.LoadNativeLibraryException");
    } catch (net.sf.jniinchi.LoadNativeLibraryException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);

  }

  public void test134() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test134");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE", "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", 10L, (-1L), (-1L), 1L);
    int var8 = var7.getNumAtoms();
    int var9 = var7.getNumStereo0D();
    net.sf.jniinchi.JniInchiAtom var14 = new net.sf.jniinchi.JniInchiAtom(10.0d, 10.0d, 100.0d, "hi!");
    net.sf.jniinchi.JniInchiAtom var15 = var7.addAtom(var14);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiInput var17 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7, "DOUBLET");
      fail("Expected exception of type net.sf.jniinchi.JniInchiException");
    } catch (net.sf.jniinchi.JniInchiException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test135() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test135");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    java.lang.String var10 = var7.getLog();
    net.sf.jniinchi.JniInchiAtom var15 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var15.setImplicitProtium(1);
    int var18 = var15.getImplicitDeuterium();
    int var19 = var15.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var21 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var26 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var27 = var26.getCharge();
    var26.setImplicitTritium(10);
    double var30 = var26.getX();
    var26.setCharge(1);
    int var33 = var26.getIsotopicMass();
    int var34 = var26.getCharge();
    net.sf.jniinchi.JniInchiAtom var39 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var40 = var39.getCharge();
    var39.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var44 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var45 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var15, var21, var26, var39, var44);
    net.sf.jniinchi.JniInchiStereo0D var46 = var7.addStereo0D(var45);
    net.sf.jniinchi.JniInchiAtom var51 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var52 = var51.getCharge();
    var51.setImplicitTritium(10);
    var51.setImplicitTritium(1);
    net.sf.jniinchi.INCHI_RADICAL var57 = var51.getRadical();
    var51.setIsotopicMassShift(1);
    int var60 = var51.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var61 = var7.addAtom(var51);
    int var62 = var7.getNumBonds();
    long[][] var63 = var7.getWarningFlags();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test136() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test136");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitTritium(10);
    double var8 = var4.getX();
    var4.setCharge(1);
    double var11 = var4.getZ();
    var4.setImplicitTritium((-1));
    net.sf.jniinchi.JniInchiAtom var18 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var19 = var18.getCharge();
    var18.setImplicitTritium(10);
    double var22 = var18.getX();
    java.lang.String var23 = var18.getElementType();
    var18.setCharge(10);
    net.sf.jniinchi.JniInchiAtom var30 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var31 = var30.getCharge();
    var30.setImplicitTritium(10);
    double var34 = var30.getX();
    var30.setCharge(1);
    var30.setImplicitDeuterium(100);
    int var39 = var30.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var44 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var45 = var44.getCharge();
    var44.setImplicitTritium(10);
    double var48 = var44.getX();
    var44.setCharge(1);
    var44.setImplicitDeuterium(100);
    int var53 = var44.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var55 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var56 = var55.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var64 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var65 = var64.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var66 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var64);
    net.sf.jniinchi.JniInchiAtom[] var67 = new net.sf.jniinchi.JniInchiAtom[] { };
    var66.addAtoms(var67);
    boolean var69 = var55.equals((java.lang.Object)var67);
    net.sf.jniinchi.JniInchiBond var70 = new net.sf.jniinchi.JniInchiBond(var30, var44, var55);
    net.sf.jniinchi.JniInchiAtom var72 = new net.sf.jniinchi.JniInchiAtom("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.INCHI_BOND_TYPE var74 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var75 = var74.ordinal();
    net.sf.jniinchi.INCHI_BOND_STEREO var77 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var78 = new net.sf.jniinchi.JniInchiBond(var44, var72, var74, var77);
    java.lang.String var79 = var74.toString();
    net.sf.jniinchi.JniInchiBond var80 = new net.sf.jniinchi.JniInchiBond(var4, var18, var74);
    int var81 = var18.getImplicitTritium();
    net.sf.jniinchi.INCHI_RADICAL var82 = var18.getRadical();
    var18.setImplicitProtium(2);
    var18.setIsotopicMass((-1));
    var18.setImplicitDeuterium(2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "NONE"+ "'", var79.equals("NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test137() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test137");


    net.sf.jniinchi.JniInchiStructure var0 = net.sf.jniinchi.Main.getTestMolecule();
    net.sf.jniinchi.JniInchiAtom var5 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var5.setImplicitProtium(1);
    int var8 = var5.getImplicitDeuterium();
    int var9 = var5.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var11 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var16 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var17 = var16.getCharge();
    var16.setImplicitTritium(10);
    double var20 = var16.getX();
    var16.setCharge(1);
    int var23 = var16.getIsotopicMass();
    int var24 = var16.getCharge();
    net.sf.jniinchi.JniInchiAtom var29 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var30 = var29.getCharge();
    var29.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var34 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var35 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var5, var11, var16, var29, var34);
    net.sf.jniinchi.INCHI_PARITY var37 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    var35.setDisconnectedParity(var37);
    net.sf.jniinchi.JniInchiStereo0D var39 = var0.addStereo0D(var35);
    net.sf.jniinchi.INCHI_PARITY var40 = var35.getDisconnectedParity();
    net.sf.jniinchi.INCHI_PARITY var41 = var35.getDisconnectedParity();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test138() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test138");


    net.sf.jniinchi.JniInchiInputInchi var1 = new net.sf.jniinchi.JniInchiInputInchi("InChI Atom: hi! [1.0,10.0,100.0] Charge:1 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:10 // Radical: NONE");
    java.lang.String var2 = var1.getInchi();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiOutputStructure var3 = net.sf.jniinchi.JniInchiWrapper.getStructureFromInchi(var1);
      fail("Expected exception of type net.sf.jniinchi.LoadNativeLibraryException");
    } catch (net.sf.jniinchi.LoadNativeLibraryException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "InChI Atom: hi! [1.0,10.0,100.0] Charge:1 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:10 // Radical: NONE"+ "'", var2.equals("InChI Atom: hi! [1.0,10.0,100.0] Charge:1 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:10 // Radical: NONE"));

  }

  public void test139() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test139");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput((-1), "hi!", "", "", "");
    java.lang.String var6 = var5.getAuxInfo();
    net.sf.jniinchi.INCHI_RET var7 = var5.getReturnStatus();
    net.sf.jniinchi.JniInchiOutput var12 = new net.sf.jniinchi.JniInchiOutput(var7, "OK", "", "InChI_Output: WARNING///hi!/hi!", "hi!");
    net.sf.jniinchi.JniInchiOutputStructure var13 = new net.sf.jniinchi.JniInchiOutputStructure(var7);
    long[][] var14 = var13.getWarningFlags();
    long[][] var15 = var13.getWarningFlags();
    int var16 = var13.getNumBonds();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);

  }

  public void test140() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test140");


    net.sf.jniinchi.JniInchiException var1 = new net.sf.jniinchi.JniInchiException("InChI_Output: EOF/InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP/InChI_Output: EOF/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/SINGLE_1UP/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/NONE/InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE/InChI_Output: EOF/hi!///");
    net.sf.jniinchi.JniInchiException var3 = new net.sf.jniinchi.JniInchiException("InChI_Output: WARNING///hi!/hi!");
    java.lang.String var4 = var3.toString();
    net.sf.jniinchi.LoadNativeLibraryException var5 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var3);
    java.lang.String var6 = var5.toString();
    java.lang.String var7 = var5.toString();
    net.sf.jniinchi.LoadNativeLibraryException var8 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var5);
    java.lang.String var9 = var8.toString();
    net.sf.jniinchi.JniInchiException var10 = new net.sf.jniinchi.JniInchiException((java.lang.Throwable)var8);
    net.sf.jniinchi.JniInchiException var11 = new net.sf.jniinchi.JniInchiException((java.lang.Throwable)var10);
    var1.addSuppressed((java.lang.Throwable)var10);
    java.lang.Throwable[] var13 = var10.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var4.equals("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var6.equals("net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var7.equals("net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var9.equals("net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test141() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test141");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    net.sf.jniinchi.JniInchiBond[] var10 = new net.sf.jniinchi.JniInchiBond[] { };
    var9.addBonds(var10);
    java.lang.String var12 = var9.getOptions();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiAtom var14 = var9.getAtom(10);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));

  }

  public void test142() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test142");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.INCHI_KEY var10 = net.sf.jniinchi.INCHI_KEY.getValue(0);
    net.sf.jniinchi.JniInchiOutputKey var12 = new net.sf.jniinchi.JniInchiOutputKey(var10, "InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiAtom var17 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var18 = var17.getCharge();
    var17.setImplicitTritium(10);
    double var21 = var17.getX();
    var17.setCharge(1);
    var17.setImplicitDeuterium(100);
    int var26 = var17.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var31 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var32 = var31.getCharge();
    var31.setImplicitTritium(10);
    double var35 = var31.getX();
    var31.setCharge(1);
    var31.setImplicitDeuterium(100);
    int var40 = var31.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var42 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var43 = var42.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var51 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var52 = var51.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var53 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var51);
    net.sf.jniinchi.JniInchiAtom[] var54 = new net.sf.jniinchi.JniInchiAtom[] { };
    var53.addAtoms(var54);
    boolean var56 = var42.equals((java.lang.Object)var54);
    net.sf.jniinchi.JniInchiBond var57 = new net.sf.jniinchi.JniInchiBond(var17, var31, var42);
    java.lang.String var58 = var57.getDebugString();
    boolean var59 = var10.equals((java.lang.Object)var57);
    net.sf.jniinchi.INCHI_BOND_TYPE var60 = var57.getBondType();
    net.sf.jniinchi.JniInchiAtom var61 = var57.getOriginAtom();
    net.sf.jniinchi.JniInchiBond var62 = var7.addBond(var57);
    java.lang.String var63 = var62.getDebugString();
    net.sf.jniinchi.JniInchiAtom var64 = var62.getTargetAtom();
    java.lang.String var65 = var64.getElementType();
    var64.setIsotopicMass(6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var58.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var63.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "hi!"+ "'", var65.equals("hi!"));

  }

  public void test143() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test143");


    net.sf.jniinchi.JniInchiOutputStructure var8 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var9 = var8.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var10 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var8);
    java.lang.String var11 = var10.getOptions();
    net.sf.jniinchi.JniInchiInput var12 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var10);
    net.sf.jniinchi.JniInchiAtom var17 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var18 = var17.getCharge();
    var17.setImplicitTritium(10);
    double var21 = var17.getX();
    var17.setCharge(1);
    var17.setImplicitDeuterium(100);
    int var26 = var17.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var31 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var32 = var31.getCharge();
    var31.setImplicitTritium(10);
    double var35 = var31.getX();
    var31.setCharge(1);
    var31.setImplicitDeuterium(100);
    int var40 = var31.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var42 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var43 = var42.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var51 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var52 = var51.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var53 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var51);
    net.sf.jniinchi.JniInchiAtom[] var54 = new net.sf.jniinchi.JniInchiAtom[] { };
    var53.addAtoms(var54);
    boolean var56 = var42.equals((java.lang.Object)var54);
    net.sf.jniinchi.JniInchiBond var57 = new net.sf.jniinchi.JniInchiBond(var17, var31, var42);
    java.lang.String var58 = var57.getDebugString();
    net.sf.jniinchi.JniInchiAtom var63 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var64 = var63.getCharge();
    var63.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var71 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var72 = var71.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var74 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var75 = var74.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var77 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var78 = new net.sf.jniinchi.JniInchiBond(var63, var71, var74, var77);
    net.sf.jniinchi.INCHI_BOND_STEREO var79 = var78.getBondStereo();
    var57.setStereoDefinition(var79);
    net.sf.jniinchi.JniInchiBond[] var81 = new net.sf.jniinchi.JniInchiBond[] { var57};
    var10.addBonds(var81);
    net.sf.jniinchi.JniInchiInputData var85 = new net.sf.jniinchi.JniInchiInputData(1, var10, 10, "hi!");
    net.sf.jniinchi.JniInchiAtom var90 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var90.setIsotopicMassShift(1);
    int var93 = var90.getImplicitTritium();
    net.sf.jniinchi.JniInchiAtom var94 = var10.addAtom(var90);
    java.lang.String var95 = var10.getOptions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var58.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var95 + "' != '" + ""+ "'", var95.equals(""));

  }

  public void test144() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test144");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_STEREOTYPE var1 = net.sf.jniinchi.INCHI_STEREOTYPE.valueOf("net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test145() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test145");


    net.sf.jniinchi.JniInchiInputInchi var1 = new net.sf.jniinchi.JniInchiInputInchi("InChI Atom: hi! [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE");
    java.lang.String var2 = var1.getInchi();
    java.lang.String var3 = var1.getOptions();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiOutputStructure var4 = net.sf.jniinchi.JniInchiWrapper.getStructureFromInchi(var1);
      fail("Expected exception of type net.sf.jniinchi.LoadNativeLibraryException");
    } catch (net.sf.jniinchi.LoadNativeLibraryException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "InChI Atom: hi! [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE"+ "'", var2.equals("InChI Atom: hi! [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));

  }

  public void test146() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test146");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    java.lang.String var10 = var7.getLog();
    net.sf.jniinchi.JniInchiAtom var15 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var15.setImplicitProtium(1);
    int var18 = var15.getImplicitDeuterium();
    int var19 = var15.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var21 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var26 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var27 = var26.getCharge();
    var26.setImplicitTritium(10);
    double var30 = var26.getX();
    var26.setCharge(1);
    int var33 = var26.getIsotopicMass();
    int var34 = var26.getCharge();
    net.sf.jniinchi.JniInchiAtom var39 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var40 = var39.getCharge();
    var39.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var44 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var45 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var15, var21, var26, var39, var44);
    net.sf.jniinchi.JniInchiStereo0D var46 = var7.addStereo0D(var45);
    net.sf.jniinchi.INCHI_PARITY var47 = var45.getDisconnectedParity();
    net.sf.jniinchi.JniInchiAtom var49 = var45.getNeighbor(0);
    net.sf.jniinchi.INCHI_PARITY var50 = var45.getParity();
    net.sf.jniinchi.INCHI_STEREOTYPE var51 = var45.getStereoType();
    java.lang.String var52 = var45.getDebugString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD"+ "'", var52.equals("InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD"));

  }

  public void test147() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test147");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.JniInchiStructure var9 = new net.sf.jniinchi.JniInchiStructure();
    net.sf.jniinchi.JniInchiOutputStructure var17 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var18 = var17.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var19 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var17);
    net.sf.jniinchi.JniInchiAtom[] var20 = new net.sf.jniinchi.JniInchiAtom[] { };
    var19.addAtoms(var20);
    var9.addAtoms(var20);
    var7.setStructure(var9);
    net.sf.jniinchi.JniInchiInput var24 = new net.sf.jniinchi.JniInchiInput(var9);
    int var25 = var9.getNumAtoms();
    net.sf.jniinchi.JniInchiAtom var30 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var30.setImplicitProtium(1);
    int var33 = var30.getImplicitDeuterium();
    int var34 = var30.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var36 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var41 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var42 = var41.getCharge();
    var41.setImplicitTritium(10);
    double var45 = var41.getX();
    var41.setCharge(1);
    int var48 = var41.getIsotopicMass();
    int var49 = var41.getCharge();
    net.sf.jniinchi.JniInchiAtom var54 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var55 = var54.getCharge();
    var54.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var59 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var60 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var30, var36, var41, var54, var59);
    net.sf.jniinchi.INCHI_PARITY var62 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    var60.setDisconnectedParity(var62);
    net.sf.jniinchi.INCHI_PARITY var64 = var60.getParity();
    net.sf.jniinchi.JniInchiAtom[] var65 = var60.getNeighbors();
    net.sf.jniinchi.INCHI_PARITY var66 = var60.getDisconnectedParity();
    net.sf.jniinchi.INCHI_PARITY var67 = var60.getParity();
    net.sf.jniinchi.JniInchiStereo0D var68 = var9.addStereo0D(var60);
    net.sf.jniinchi.JniInchiAtom[] var69 = var68.getNeighbors();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test148() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test148");


    net.sf.jniinchi.INCHI_OPTION var1 = net.sf.jniinchi.INCHI_OPTION.valueOfIgnoreCase("InChI_Output: EOF/InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP/InChI_Output: EOF/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/SINGLE_1UP/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/NONE/InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE/InChI_Output: EOF/hi!///");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test149() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test149");


    net.sf.jniinchi.JniInchiAtom var1 = new net.sf.jniinchi.JniInchiAtom("hi!");
    int var2 = var1.getImplicitProtium();
    int var3 = var1.getImplicitTritium();
    int var4 = var1.getImplicitTritium();
    net.sf.jniinchi.JniInchiAtom var9 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var10 = var9.getCharge();
    var9.setImplicitProtium(1);
    var9.setImplicitDeuterium(10001);
    double var15 = var9.getZ();
    net.sf.jniinchi.JniInchiAtom var20 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var21 = var20.getCharge();
    var20.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var28 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var29 = var28.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var31 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var32 = var31.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var34 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var35 = new net.sf.jniinchi.JniInchiBond(var20, var28, var31, var34);
    net.sf.jniinchi.JniInchiBond var36 = new net.sf.jniinchi.JniInchiBond(var1, var9, var31);
    double var37 = var1.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.0d);

  }

  public void test150() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test150");


    net.sf.jniinchi.INCHI_KEY var1 = net.sf.jniinchi.INCHI_KEY.getValue(0);
    net.sf.jniinchi.JniInchiOutputKey var3 = new net.sf.jniinchi.JniInchiOutputKey(var1, "InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiAtom var8 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var9 = var8.getCharge();
    var8.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var16 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var17 = var16.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var19 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var20 = var19.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var22 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var23 = new net.sf.jniinchi.JniInchiBond(var8, var16, var19, var22);
    boolean var24 = var1.equals((java.lang.Object)var23);
    int var25 = var1.getIndx();
    net.sf.jniinchi.JniInchiOutputKey var27 = new net.sf.jniinchi.JniInchiOutputKey(var1, "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.INCHI_KEY var28 = var27.getReturnStatus();
    net.sf.jniinchi.JniInchiOutputKey var30 = new net.sf.jniinchi.JniInchiOutputKey(var28, "net.sf.jniinchi.JniInchiException: InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:10001 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE");
    int var31 = var28.getIndx();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);

  }

  public void test151() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test151");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    long[][] var10 = var7.getWarningFlags();
    int var11 = var7.getNumAtoms();
    net.sf.jniinchi.JniInchiAtom var16 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var17 = var16.getCharge();
    var16.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var24 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var25 = var24.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var27 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var28 = var27.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var30 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var31 = new net.sf.jniinchi.JniInchiBond(var16, var24, var27, var30);
    net.sf.jniinchi.INCHI_BOND_STEREO var32 = var31.getBondStereo();
    net.sf.jniinchi.JniInchiAtom var33 = var31.getTargetAtom();
    net.sf.jniinchi.INCHI_BOND_STEREO var34 = var31.getBondStereo();
    net.sf.jniinchi.JniInchiBond var35 = var7.addBond(var31);
    net.sf.jniinchi.INCHI_BOND_STEREO var36 = var35.getBondStereo();
    int var37 = var36.getIndx();
    int var38 = var36.getIndx();
    java.lang.String var39 = var36.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "SINGLE_1UP"+ "'", var39.equals("SINGLE_1UP"));

  }

  public void test152() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test152");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var8 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    int var9 = var8.getNumBonds();
    net.sf.jniinchi.JniInchiInput var10 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiStereo0D var12 = var10.getStereo0D(6);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);

  }

  public void test153() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test153");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    java.lang.String var10 = var9.getOptions();
    net.sf.jniinchi.JniInchiInput var11 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var9);
    net.sf.jniinchi.JniInchiAtom var16 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var17 = var16.getCharge();
    var16.setImplicitTritium(10);
    double var20 = var16.getX();
    var16.setCharge(1);
    var16.setImplicitDeuterium(100);
    int var25 = var16.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var30 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var31 = var30.getCharge();
    var30.setImplicitTritium(10);
    double var34 = var30.getX();
    var30.setCharge(1);
    var30.setImplicitDeuterium(100);
    int var39 = var30.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var41 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var42 = var41.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var50 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var51 = var50.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var52 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var50);
    net.sf.jniinchi.JniInchiAtom[] var53 = new net.sf.jniinchi.JniInchiAtom[] { };
    var52.addAtoms(var53);
    boolean var55 = var41.equals((java.lang.Object)var53);
    net.sf.jniinchi.JniInchiBond var56 = new net.sf.jniinchi.JniInchiBond(var16, var30, var41);
    java.lang.String var57 = var56.getDebugString();
    net.sf.jniinchi.JniInchiAtom var62 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var63 = var62.getCharge();
    var62.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var70 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var71 = var70.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var73 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var74 = var73.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var76 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var77 = new net.sf.jniinchi.JniInchiBond(var62, var70, var73, var76);
    net.sf.jniinchi.INCHI_BOND_STEREO var78 = var77.getBondStereo();
    var56.setStereoDefinition(var78);
    net.sf.jniinchi.JniInchiBond[] var80 = new net.sf.jniinchi.JniInchiBond[] { var56};
    var9.addBonds(var80);
    net.sf.jniinchi.JniInchiInput var82 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var9);
    int var83 = var9.getNumAtoms();
    java.lang.String var84 = var9.getOptions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + ""+ "'", var10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var57.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + ""+ "'", var84.equals(""));

  }

  public void test154() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test154");


    net.sf.jniinchi.INCHI_KEY var1 = net.sf.jniinchi.INCHI_KEY.getValue(0);
    net.sf.jniinchi.JniInchiOutputKey var3 = new net.sf.jniinchi.JniInchiOutputKey(var1, "InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiAtom var8 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var9 = var8.getCharge();
    var8.setImplicitTritium(10);
    double var12 = var8.getX();
    var8.setCharge(1);
    var8.setImplicitDeuterium(100);
    int var17 = var8.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var22 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var23 = var22.getCharge();
    var22.setImplicitTritium(10);
    double var26 = var22.getX();
    var22.setCharge(1);
    var22.setImplicitDeuterium(100);
    int var31 = var22.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var33 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var34 = var33.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var42 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var43 = var42.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var44 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var42);
    net.sf.jniinchi.JniInchiAtom[] var45 = new net.sf.jniinchi.JniInchiAtom[] { };
    var44.addAtoms(var45);
    boolean var47 = var33.equals((java.lang.Object)var45);
    net.sf.jniinchi.JniInchiBond var48 = new net.sf.jniinchi.JniInchiBond(var8, var22, var33);
    java.lang.String var49 = var48.getDebugString();
    boolean var50 = var1.equals((java.lang.Object)var48);
    net.sf.jniinchi.INCHI_BOND_TYPE var51 = var48.getBondType();
    net.sf.jniinchi.JniInchiAtom var52 = var48.getTargetAtom();
    java.lang.String var53 = var48.getDebugString();
    net.sf.jniinchi.INCHI_BOND_STEREO var55 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    var48.setStereoDefinition(var55);
    net.sf.jniinchi.JniInchiAtom var57 = var48.getOriginAtom();
    var57.setImplicitDeuterium(10000);
    int var60 = var57.getImplicitProtium();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var49.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var53.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);

  }

  public void test155() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test155");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    java.lang.String var10 = var7.getLog();
    net.sf.jniinchi.JniInchiAtom var15 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var15.setImplicitProtium(1);
    int var18 = var15.getImplicitDeuterium();
    int var19 = var15.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var21 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var26 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var27 = var26.getCharge();
    var26.setImplicitTritium(10);
    double var30 = var26.getX();
    var26.setCharge(1);
    int var33 = var26.getIsotopicMass();
    int var34 = var26.getCharge();
    net.sf.jniinchi.JniInchiAtom var39 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var40 = var39.getCharge();
    var39.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var44 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var45 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var15, var21, var26, var39, var44);
    net.sf.jniinchi.JniInchiStereo0D var46 = var7.addStereo0D(var45);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiStereo0D var48 = var7.getStereo0D(10000);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test156() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test156");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE", "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", 10L, (-1L), (-1L), 1L);
    net.sf.jniinchi.JniInchiAtom var12 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var12.setImplicitProtium(1);
    int var15 = var12.getImplicitDeuterium();
    int var16 = var12.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var18 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var23 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var24 = var23.getCharge();
    var23.setImplicitTritium(10);
    double var27 = var23.getX();
    var23.setCharge(1);
    int var30 = var23.getIsotopicMass();
    int var31 = var23.getCharge();
    net.sf.jniinchi.JniInchiAtom var36 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var37 = var36.getCharge();
    var36.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var41 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var42 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var12, var18, var23, var36, var41);
    net.sf.jniinchi.JniInchiAtom[] var43 = var42.getNeighbors();
    var7.addAtoms(var43);
    long[][] var45 = var7.getWarningFlags();
    java.lang.String var46 = var7.getLog();
    long[][] var47 = var7.getWarningFlags();
    java.lang.String var48 = var7.getLog();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var46.equals("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var48.equals("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));

  }

  public void test157() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test157");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var12 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var13 = var12.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var15 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var16 = var15.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var18 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var19 = new net.sf.jniinchi.JniInchiBond(var4, var12, var15, var18);
    net.sf.jniinchi.INCHI_BOND_STEREO var20 = var19.getBondStereo();
    net.sf.jniinchi.JniInchiAtom var21 = var19.getTargetAtom();
    net.sf.jniinchi.INCHI_BOND_STEREO var22 = var19.getBondStereo();
    int var23 = var22.getIndx();
    int var24 = var22.getIndx();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);

  }

  public void test158() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test158");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    java.lang.String var10 = var7.getLog();
    net.sf.jniinchi.JniInchiAtom var15 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var15.setImplicitProtium(1);
    int var18 = var15.getImplicitDeuterium();
    int var19 = var15.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var21 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var26 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var27 = var26.getCharge();
    var26.setImplicitTritium(10);
    double var30 = var26.getX();
    var26.setCharge(1);
    int var33 = var26.getIsotopicMass();
    int var34 = var26.getCharge();
    net.sf.jniinchi.JniInchiAtom var39 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var40 = var39.getCharge();
    var39.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var44 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var45 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var15, var21, var26, var39, var44);
    net.sf.jniinchi.JniInchiStereo0D var46 = var7.addStereo0D(var45);
    net.sf.jniinchi.INCHI_PARITY var47 = var45.getDisconnectedParity();
    net.sf.jniinchi.JniInchiAtom var49 = var45.getNeighbor(0);
    net.sf.jniinchi.INCHI_PARITY var50 = var45.getParity();
    net.sf.jniinchi.INCHI_PARITY var51 = var45.getParity();
    net.sf.jniinchi.INCHI_PARITY var52 = var45.getDisconnectedParity();
    net.sf.jniinchi.JniInchiAtom[] var53 = var45.getNeighbors();
    net.sf.jniinchi.INCHI_PARITY var54 = var45.getDisconnectedParity();
    int var55 = var54.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);

  }

  public void test159() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test159");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var8 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput();
    var7.setStructure((net.sf.jniinchi.JniInchiStructure)var9);
    net.sf.jniinchi.INCHI_RET var11 = var7.getReturnStatus();
    long[][] var12 = var7.getWarningFlags();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test160() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test160");


    net.sf.jniinchi.JniInchiException var1 = new net.sf.jniinchi.JniInchiException("InChI Atom: hi! [1.0,10.0,100.0] Charge:1 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:10 // Radical: NONE");
    net.sf.jniinchi.JniInchiException var3 = new net.sf.jniinchi.JniInchiException("InChI_Output: WARNING///hi!/hi!");
    java.lang.String var4 = var3.toString();
    net.sf.jniinchi.JniInchiException var6 = new net.sf.jniinchi.JniInchiException("InChI_Output: WARNING///hi!/hi!");
    java.lang.String var7 = var6.toString();
    net.sf.jniinchi.LoadNativeLibraryException var8 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var6);
    var3.addSuppressed((java.lang.Throwable)var6);
    java.lang.String var10 = var3.toString();
    net.sf.jniinchi.LoadNativeLibraryException var11 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var3);
    java.lang.Throwable[] var12 = var3.getSuppressed();
    net.sf.jniinchi.LoadNativeLibraryException var13 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var3);
    net.sf.jniinchi.JniInchiException var14 = new net.sf.jniinchi.JniInchiException();
    var13.addSuppressed((java.lang.Throwable)var14);
    var1.addSuppressed((java.lang.Throwable)var13);
    net.sf.jniinchi.JniInchiException var17 = new net.sf.jniinchi.JniInchiException((java.lang.Throwable)var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var4.equals("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var7.equals("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var10.equals("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test161() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test161");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput(1, "", "", "hi!", "hi!");
    java.lang.String var6 = var5.getAuxInfo();
    java.lang.String var7 = var5.toString();
    net.sf.jniinchi.INCHI_RET var8 = var5.getReturnStatus();
    net.sf.jniinchi.JniInchiOutput var13 = new net.sf.jniinchi.JniInchiOutput(var8, "InChI Atom: hi! [100.0,100.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:1 T:0 // Radical: NONE", "VALID_STANDARD", "net.sf.jniinchi.JniInchiException: OK", "InChI Atom: hi! [10.0,10.0,100.0] Charge:0 // Iso Mass:10010 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE");
    int var14 = var8.getIndx();
    net.sf.jniinchi.JniInchiOutput var19 = new net.sf.jniinchi.JniInchiOutput(var8, "InChI_Output: EOF/OK/InChI Atom: hi! [1.0,10.0,100.0] Charge:10 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:10 // Radical: NONE/InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:1 D:0 T:0 // Radical: NONE/InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:10001 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE", "InChI_Output: EOF/InChI Atom: hi! [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE/OK/InChI Atom: hi! [100.0,100.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE/net.sf.jniinchi.JniInchiException: OK", "net.sf.jniinchi.JniInchiException: InChI Atom: hi! [1.0,10.0,100.0] Charge:1 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:10 // Radical: NONE", "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:1 D:0 T:-1 // Radical: NONE");
    net.sf.jniinchi.JniInchiOutput var24 = new net.sf.jniinchi.JniInchiOutput(var8, "InChI Atom: hi! [100.0,100.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", "ODD", "net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "InChI_Output: WARNING///hi!/hi!"+ "'", var7.equals("InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);

  }

  public void test162() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test162");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_KEY_STATUS var1 = net.sf.jniinchi.JniInchiWrapper.checkInchiKey("InChI_Output: null/InChI_Output: WARNING///hi!/hi!/InChI_Output: WARNING///hi!/hi!//hi!");
      fail("Expected exception of type net.sf.jniinchi.LoadNativeLibraryException");
    } catch (net.sf.jniinchi.LoadNativeLibraryException e) {
      // Expected exception.
    }

  }

  public void test163() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test163");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitTritium(10);
    var4.setImplicitTritium(1);
    net.sf.jniinchi.INCHI_RADICAL var10 = var4.getRadical();
    java.lang.String var11 = var4.getElementType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));

  }

  public void test164() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test164");


    net.sf.jniinchi.JniInchiAtom var1 = new net.sf.jniinchi.JniInchiAtom("NONE");
    var1.debug();
    double var3 = var1.getZ();
    var1.setCharge(6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.0d);

  }

  public void test165() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test165");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom((-1.0d), 1.0d, 0.0d, "InChI_Output: WARNING///hi!/hi!");
    double var5 = var4.getZ();
    int var6 = var4.getCharge();
    var4.setIsotopicMass(100);
    net.sf.jniinchi.INCHI_RADICAL var9 = var4.getRadical();
    java.lang.Class var10 = var9.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test166() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test166");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiInputInchi var2 = new net.sf.jniinchi.JniInchiInputInchi("net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", "EOF");
      fail("Expected exception of type net.sf.jniinchi.JniInchiException");
    } catch (net.sf.jniinchi.JniInchiException e) {
      // Expected exception.
    }

  }

  public void test167() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test167");


    net.sf.jniinchi.JniInchiInput var1 = new net.sf.jniinchi.JniInchiInput();
    int var2 = var1.getNumStereo0D();
    int var3 = var1.getNumBonds();
    net.sf.jniinchi.JniInchiOutputStructure var11 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var12 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var11);
    net.sf.jniinchi.INCHI_KEY var14 = net.sf.jniinchi.INCHI_KEY.getValue(0);
    net.sf.jniinchi.JniInchiOutputKey var16 = new net.sf.jniinchi.JniInchiOutputKey(var14, "InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiAtom var21 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var22 = var21.getCharge();
    var21.setImplicitTritium(10);
    double var25 = var21.getX();
    var21.setCharge(1);
    var21.setImplicitDeuterium(100);
    int var30 = var21.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var35 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var36 = var35.getCharge();
    var35.setImplicitTritium(10);
    double var39 = var35.getX();
    var35.setCharge(1);
    var35.setImplicitDeuterium(100);
    int var44 = var35.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var46 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var47 = var46.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var55 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var56 = var55.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var57 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var55);
    net.sf.jniinchi.JniInchiAtom[] var58 = new net.sf.jniinchi.JniInchiAtom[] { };
    var57.addAtoms(var58);
    boolean var60 = var46.equals((java.lang.Object)var58);
    net.sf.jniinchi.JniInchiBond var61 = new net.sf.jniinchi.JniInchiBond(var21, var35, var46);
    java.lang.String var62 = var61.getDebugString();
    boolean var63 = var14.equals((java.lang.Object)var61);
    net.sf.jniinchi.INCHI_BOND_TYPE var64 = var61.getBondType();
    java.lang.String var65 = var61.getDebugString();
    net.sf.jniinchi.JniInchiBond[] var66 = new net.sf.jniinchi.JniInchiBond[] { var61};
    var11.addBonds(var66);
    var1.addBonds(var66);
    net.sf.jniinchi.JniInchiInputData var71 = new net.sf.jniinchi.JniInchiInputData(3, var1, 4, "VALID_NON_STANDARD");
    java.lang.String var72 = var71.getErrorMessage();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var62.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var65.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "VALID_NON_STANDARD"+ "'", var72.equals("VALID_NON_STANDARD"));

  }

  public void test168() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test168");


    net.sf.jniinchi.JniInchiOutputStructure var8 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var9 = var8.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var10 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var8);
    java.lang.String var11 = var10.getOptions();
    net.sf.jniinchi.JniInchiInput var12 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var10);
    net.sf.jniinchi.JniInchiAtom var17 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var18 = var17.getCharge();
    var17.setImplicitTritium(10);
    double var21 = var17.getX();
    var17.setCharge(1);
    var17.setImplicitDeuterium(100);
    int var26 = var17.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var31 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var32 = var31.getCharge();
    var31.setImplicitTritium(10);
    double var35 = var31.getX();
    var31.setCharge(1);
    var31.setImplicitDeuterium(100);
    int var40 = var31.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var42 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var43 = var42.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var51 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var52 = var51.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var53 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var51);
    net.sf.jniinchi.JniInchiAtom[] var54 = new net.sf.jniinchi.JniInchiAtom[] { };
    var53.addAtoms(var54);
    boolean var56 = var42.equals((java.lang.Object)var54);
    net.sf.jniinchi.JniInchiBond var57 = new net.sf.jniinchi.JniInchiBond(var17, var31, var42);
    java.lang.String var58 = var57.getDebugString();
    net.sf.jniinchi.JniInchiAtom var63 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var64 = var63.getCharge();
    var63.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var71 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var72 = var71.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var74 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var75 = var74.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var77 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var78 = new net.sf.jniinchi.JniInchiBond(var63, var71, var74, var77);
    net.sf.jniinchi.INCHI_BOND_STEREO var79 = var78.getBondStereo();
    var57.setStereoDefinition(var79);
    net.sf.jniinchi.JniInchiBond[] var81 = new net.sf.jniinchi.JniInchiBond[] { var57};
    var10.addBonds(var81);
    net.sf.jniinchi.JniInchiInputData var85 = new net.sf.jniinchi.JniInchiInputData(1, var10, 10, "hi!");
    net.sf.jniinchi.INCHI_RET var86 = var85.getReturnValue();
    net.sf.jniinchi.INCHI_RET var87 = var85.getReturnValue();
    net.sf.jniinchi.INCHI_RET var88 = var85.getReturnValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var58.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test169() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test169");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    var4.setImplicitDeuterium((-1));
    net.sf.jniinchi.JniInchiAtom var11 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var12 = var11.getCharge();
    var11.setImplicitTritium(10);
    double var15 = var11.getX();
    int var16 = var11.getImplicitH();
    java.lang.String var17 = var11.getElementType();
    int var18 = var11.getImplicitProtium();
    var11.setIsotopicMass((-1));
    net.sf.jniinchi.INCHI_BOND_TYPE var22 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var23 = var22.getIndx();
    int var24 = var22.ordinal();
    net.sf.jniinchi.JniInchiBond var25 = new net.sf.jniinchi.JniInchiBond(var4, var11, var22);
    net.sf.jniinchi.JniInchiAtom var27 = new net.sf.jniinchi.JniInchiAtom("InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:1 // Radical: NONE");
    net.sf.jniinchi.INCHI_BOND_TYPE var29 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var30 = var29.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var38 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var39 = var38.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var40 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var38);
    net.sf.jniinchi.JniInchiAtom[] var41 = new net.sf.jniinchi.JniInchiAtom[] { };
    var40.addAtoms(var41);
    boolean var43 = var29.equals((java.lang.Object)var41);
    net.sf.jniinchi.JniInchiAtom var48 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var49 = var48.getCharge();
    var48.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var56 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var57 = var56.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var59 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var60 = var59.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var62 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var63 = new net.sf.jniinchi.JniInchiBond(var48, var56, var59, var62);
    net.sf.jniinchi.INCHI_BOND_STEREO var64 = var63.getBondStereo();
    int var65 = var64.ordinal();
    net.sf.jniinchi.JniInchiBond var66 = new net.sf.jniinchi.JniInchiBond(var4, var27, var29, var64);
    double var67 = var27.getZ();
    int var68 = var27.getIsotopicMass();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);

  }

  public void test170() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test170");


    net.sf.jniinchi.INCHI_KEY var1 = net.sf.jniinchi.INCHI_KEY.getValue(0);
    boolean var3 = var1.equals((java.lang.Object)0);
    int var4 = var1.getIndx();
    int var5 = var1.getIndx();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);

  }

  public void test171() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test171");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_STATUS var2 = net.sf.jniinchi.JniInchiWrapper.checkInchi("InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_2UP", true);
      fail("Expected exception of type net.sf.jniinchi.LoadNativeLibraryException");
    } catch (net.sf.jniinchi.LoadNativeLibraryException e) {
      // Expected exception.
    }

  }

  public void test172() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test172");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var8 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    net.sf.jniinchi.JniInchiAtom var13 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var14 = var13.getCharge();
    var13.setImplicitTritium(10);
    double var17 = var13.getX();
    var13.setCharge(1);
    var13.setImplicitDeuterium(100);
    int var22 = var13.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var27 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var28 = var27.getCharge();
    var27.setImplicitTritium(10);
    double var31 = var27.getX();
    var27.setCharge(1);
    var27.setImplicitDeuterium(100);
    int var36 = var27.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var38 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var39 = var38.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var47 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var48 = var47.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var49 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var47);
    net.sf.jniinchi.JniInchiAtom[] var50 = new net.sf.jniinchi.JniInchiAtom[] { };
    var49.addAtoms(var50);
    boolean var52 = var38.equals((java.lang.Object)var50);
    net.sf.jniinchi.JniInchiBond var53 = new net.sf.jniinchi.JniInchiBond(var13, var27, var38);
    net.sf.jniinchi.JniInchiBond var54 = var7.addBond(var53);
    net.sf.jniinchi.JniInchiOutput var60 = new net.sf.jniinchi.JniInchiOutput((-1), "hi!", "", "", "");
    net.sf.jniinchi.INCHI_RET var61 = var60.getReturnStatus();
    net.sf.jniinchi.JniInchiOutputStructure var62 = new net.sf.jniinchi.JniInchiOutputStructure(var61);
    net.sf.jniinchi.JniInchiOutputStructure var63 = new net.sf.jniinchi.JniInchiOutputStructure(var61);
    net.sf.jniinchi.INCHI_RET var64 = var63.getReturnStatus();
    long[][] var65 = var63.getWarningFlags();
    int var66 = var63.getNumBonds();
    net.sf.jniinchi.JniInchiOutputStructure var74 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var75 = var74.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var76 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var74);
    net.sf.jniinchi.JniInchiBond[] var77 = new net.sf.jniinchi.JniInchiBond[] { };
    var76.addBonds(var77);
    var63.addBonds(var77);
    var7.addBonds(var77);
    long[][] var81 = var7.getWarningFlags();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test173() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test173");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_PARITY var1 = net.sf.jniinchi.INCHI_PARITY.valueOf("InChI_Output: EOF/net.sf.jniinchi.LoadNativeLibraryException: /InChI_Output: null/InChI_Output: WARNING///hi!/hi!/InChI_Output: WARNING///hi!/hi!//hi!/InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:1 // Radical: NONE/InChI_Output: null/InChI_Output: WARNING///hi!/hi!/InChI_Output: WARNING///hi!/hi!//hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test174() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test174");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitTritium(10);
    double var8 = var4.getX();
    var4.setCharge(1);
    var4.setImplicitDeuterium(100);
    int var13 = var4.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var18 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var19 = var18.getCharge();
    var18.setImplicitTritium(10);
    double var22 = var18.getX();
    var18.setCharge(1);
    var18.setImplicitDeuterium(100);
    int var27 = var18.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var29 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var30 = var29.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var38 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var39 = var38.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var40 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var38);
    net.sf.jniinchi.JniInchiAtom[] var41 = new net.sf.jniinchi.JniInchiAtom[] { };
    var40.addAtoms(var41);
    boolean var43 = var29.equals((java.lang.Object)var41);
    net.sf.jniinchi.JniInchiBond var44 = new net.sf.jniinchi.JniInchiBond(var4, var18, var29);
    java.lang.String var45 = var44.getDebugString();
    net.sf.jniinchi.INCHI_BOND_TYPE var46 = var44.getBondType();
    net.sf.jniinchi.INCHI_BOND_STEREO var47 = var44.getBondStereo();
    int var48 = var47.getIndx();
    int var49 = var47.getIndx();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var45.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);

  }

  public void test175() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test175");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(0, "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", "", (-1L), 10L, 10L, 0L);
    java.lang.String var8 = var7.getLog();
    net.sf.jniinchi.JniInchiOutputStructure var16 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var17 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var16);
    net.sf.jniinchi.JniInchiInput var18 = new net.sf.jniinchi.JniInchiInput();
    var16.setStructure((net.sf.jniinchi.JniInchiStructure)var18);
    net.sf.jniinchi.JniInchiOutputStructure var27 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var28 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var27);
    int var29 = var28.getNumBonds();
    java.lang.String var30 = var28.getOptions();
    net.sf.jniinchi.JniInchiAtom var35 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var36 = var35.getCharge();
    var35.setImplicitTritium(10);
    double var39 = var35.getX();
    var35.setCharge(1);
    var35.setImplicitDeuterium(100);
    int var44 = var35.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var49 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var50 = var49.getCharge();
    var49.setImplicitTritium(10);
    double var53 = var49.getX();
    var49.setCharge(1);
    var49.setImplicitDeuterium(100);
    int var58 = var49.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var60 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var61 = var60.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var69 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var70 = var69.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var71 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var69);
    net.sf.jniinchi.JniInchiAtom[] var72 = new net.sf.jniinchi.JniInchiAtom[] { };
    var71.addAtoms(var72);
    boolean var74 = var60.equals((java.lang.Object)var72);
    net.sf.jniinchi.JniInchiBond var75 = new net.sf.jniinchi.JniInchiBond(var35, var49, var60);
    java.lang.String var76 = var75.getDebugString();
    net.sf.jniinchi.JniInchiBond var77 = var28.addBond(var75);
    net.sf.jniinchi.JniInchiBond var78 = var18.addBond(var75);
    net.sf.jniinchi.JniInchiBond var79 = var7.addBond(var75);
    net.sf.jniinchi.INCHI_BOND_TYPE var80 = var79.getBondType();
    int var81 = var80.getIndx();
    int var82 = var80.getIndx();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + ""+ "'", var30.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var76.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0);

  }

  public void test176() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test176");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var8 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    net.sf.jniinchi.JniInchiAtom var13 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var13.setIsotopicMassShift(1);
    int var16 = var13.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var17 = var7.addAtom(var13);
    int var18 = var7.getNumStereo0D();
    net.sf.jniinchi.JniInchiOutputStructure var26 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var27 = var26.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var28 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var26);
    java.lang.String var29 = var26.getLog();
    net.sf.jniinchi.JniInchiAtom var34 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var34.setImplicitProtium(1);
    int var37 = var34.getImplicitDeuterium();
    int var38 = var34.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var40 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var45 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var46 = var45.getCharge();
    var45.setImplicitTritium(10);
    double var49 = var45.getX();
    var45.setCharge(1);
    int var52 = var45.getIsotopicMass();
    int var53 = var45.getCharge();
    net.sf.jniinchi.JniInchiAtom var58 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var59 = var58.getCharge();
    var58.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var63 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var64 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var34, var40, var45, var58, var63);
    net.sf.jniinchi.JniInchiStereo0D var65 = var26.addStereo0D(var64);
    net.sf.jniinchi.JniInchiStereo0D var66 = var7.addStereo0D(var64);
    net.sf.jniinchi.JniInchiAtom var71 = new net.sf.jniinchi.JniInchiAtom((-1.0d), 1.0d, 0.0d, "InChI_Output: WARNING///hi!/hi!");
    java.lang.String var72 = var71.getElementType();
    net.sf.jniinchi.JniInchiAtom var73 = var7.addAtom(var71);
    java.lang.String var74 = var7.getLog();
    int var75 = var7.getNumAtoms();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi!"+ "'", var29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "InChI_Output: WARNING///hi!/hi!"+ "'", var72.equals("InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "hi!"+ "'", var74.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 2);

  }

  public void test177() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test177");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var4.setImplicitProtium(1);
    int var7 = var4.getImplicitDeuterium();
    int var8 = var4.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var10 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var15 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var16 = var15.getCharge();
    var15.setImplicitTritium(10);
    double var19 = var15.getX();
    var15.setCharge(1);
    int var22 = var15.getIsotopicMass();
    int var23 = var15.getCharge();
    net.sf.jniinchi.JniInchiAtom var28 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var29 = var28.getCharge();
    var28.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var33 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var34 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var4, var10, var15, var28, var33);
    net.sf.jniinchi.JniInchiAtom[] var35 = var34.getNeighbors();
    net.sf.jniinchi.JniInchiAtom[] var36 = var34.getNeighbors();
    net.sf.jniinchi.JniInchiAtom var41 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var41.setImplicitProtium(1);
    int var44 = var41.getImplicitDeuterium();
    int var45 = var41.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var47 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var52 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var53 = var52.getCharge();
    var52.setImplicitTritium(10);
    double var56 = var52.getX();
    var52.setCharge(1);
    int var59 = var52.getIsotopicMass();
    int var60 = var52.getCharge();
    net.sf.jniinchi.JniInchiAtom var65 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var66 = var65.getCharge();
    var65.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var70 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var71 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var41, var47, var52, var65, var70);
    net.sf.jniinchi.INCHI_PARITY var73 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    var71.setDisconnectedParity(var73);
    net.sf.jniinchi.INCHI_PARITY var75 = var71.getParity();
    net.sf.jniinchi.JniInchiAtom[] var76 = var71.getNeighbors();
    net.sf.jniinchi.INCHI_PARITY var77 = var71.getDisconnectedParity();
    int var78 = var77.getIndx();
    var34.setDisconnectedParity(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 1);

  }

  public void test178() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test178");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_KEY_STATUS var1 = net.sf.jniinchi.INCHI_KEY_STATUS.valueOf("InChI_Output: EOF/OK//InChI_Output: WARNING///hi!/hi!/hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test179() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test179");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    java.lang.String var10 = var7.getLog();
    net.sf.jniinchi.JniInchiAtom var15 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var15.setImplicitProtium(1);
    int var18 = var15.getImplicitDeuterium();
    int var19 = var15.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var21 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var26 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var27 = var26.getCharge();
    var26.setImplicitTritium(10);
    double var30 = var26.getX();
    var26.setCharge(1);
    int var33 = var26.getIsotopicMass();
    int var34 = var26.getCharge();
    net.sf.jniinchi.JniInchiAtom var39 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var40 = var39.getCharge();
    var39.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var44 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var45 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var15, var21, var26, var39, var44);
    net.sf.jniinchi.JniInchiStereo0D var46 = var7.addStereo0D(var45);
    net.sf.jniinchi.JniInchiAtom var51 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var52 = var51.getCharge();
    var51.setImplicitTritium(10);
    var51.setImplicitTritium(1);
    net.sf.jniinchi.INCHI_RADICAL var57 = var51.getRadical();
    var51.setIsotopicMassShift(1);
    int var60 = var51.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var61 = var7.addAtom(var51);
    var51.setIsotopicMass(10);
    java.lang.String var64 = var51.getDebugString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:10 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE"+ "'", var64.equals("InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:10 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE"));

  }

  public void test180() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test180");


    net.sf.jniinchi.JniInchiException var1 = new net.sf.jniinchi.JniInchiException("InChI_Output: null/InChI_Output: WARNING///hi!/hi!/InChI_Output: WARNING///hi!/hi!//hi!");
    net.sf.jniinchi.LoadNativeLibraryException var3 = new net.sf.jniinchi.LoadNativeLibraryException("");
    var1.addSuppressed((java.lang.Throwable)var3);
    java.lang.Throwable[] var5 = var3.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test181() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test181");


    net.sf.jniinchi.INCHI_KEY var1 = net.sf.jniinchi.INCHI_KEY.getValue(0);
    boolean var3 = var1.equals((java.lang.Object)'a');
    int var4 = var1.getIndx();
    int var5 = var1.getIndx();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);

  }

  public void test182() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test182");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var8 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput();
    var7.setStructure((net.sf.jniinchi.JniInchiStructure)var9);
    net.sf.jniinchi.JniInchiOutputStructure var18 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var19 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var18);
    net.sf.jniinchi.JniInchiInput var20 = new net.sf.jniinchi.JniInchiInput();
    var18.setStructure((net.sf.jniinchi.JniInchiStructure)var20);
    java.lang.String var22 = var20.getOptions();
    var7.setStructure((net.sf.jniinchi.JniInchiStructure)var20);
    net.sf.jniinchi.JniInchiOutputStructure var31 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var32 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var31);
    int var33 = var32.getNumBonds();
    java.lang.String var34 = var32.getOptions();
    net.sf.jniinchi.JniInchiAtom var39 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var40 = var39.getCharge();
    var39.setImplicitTritium(10);
    double var43 = var39.getX();
    var39.setCharge(1);
    var39.setImplicitDeuterium(100);
    int var48 = var39.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var53 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var54 = var53.getCharge();
    var53.setImplicitTritium(10);
    double var57 = var53.getX();
    var53.setCharge(1);
    var53.setImplicitDeuterium(100);
    int var62 = var53.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var64 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var65 = var64.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var73 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var74 = var73.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var75 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var73);
    net.sf.jniinchi.JniInchiAtom[] var76 = new net.sf.jniinchi.JniInchiAtom[] { };
    var75.addAtoms(var76);
    boolean var78 = var64.equals((java.lang.Object)var76);
    net.sf.jniinchi.JniInchiBond var79 = new net.sf.jniinchi.JniInchiBond(var39, var53, var64);
    java.lang.String var80 = var79.getDebugString();
    net.sf.jniinchi.JniInchiBond var81 = var32.addBond(var79);
    net.sf.jniinchi.JniInchiBond var82 = var7.addBond(var81);
    net.sf.jniinchi.JniInchiAtom var83 = var81.getTargetAtom();
    var81.debug();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + ""+ "'", var22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + ""+ "'", var34.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var80.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test183() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test183");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    java.lang.String var10 = var7.getLog();
    net.sf.jniinchi.JniInchiAtom var15 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var15.setImplicitProtium(1);
    int var18 = var15.getImplicitDeuterium();
    int var19 = var15.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var21 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var26 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var27 = var26.getCharge();
    var26.setImplicitTritium(10);
    double var30 = var26.getX();
    var26.setCharge(1);
    int var33 = var26.getIsotopicMass();
    int var34 = var26.getCharge();
    net.sf.jniinchi.JniInchiAtom var39 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var40 = var39.getCharge();
    var39.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var44 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var45 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var15, var21, var26, var39, var44);
    net.sf.jniinchi.JniInchiStereo0D var46 = var7.addStereo0D(var45);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiAtom var48 = var46.getNeighbor(6);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test184() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test184");


    net.sf.jniinchi.JniInchiOutputStructure var8 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var9 = var8.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var10 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var8);
    java.lang.String var11 = var10.getOptions();
    net.sf.jniinchi.JniInchiInput var12 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var10);
    net.sf.jniinchi.JniInchiAtom var17 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var18 = var17.getCharge();
    var17.setImplicitTritium(10);
    double var21 = var17.getX();
    var17.setCharge(1);
    var17.setImplicitDeuterium(100);
    int var26 = var17.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var31 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var32 = var31.getCharge();
    var31.setImplicitTritium(10);
    double var35 = var31.getX();
    var31.setCharge(1);
    var31.setImplicitDeuterium(100);
    int var40 = var31.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var42 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var43 = var42.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var51 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var52 = var51.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var53 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var51);
    net.sf.jniinchi.JniInchiAtom[] var54 = new net.sf.jniinchi.JniInchiAtom[] { };
    var53.addAtoms(var54);
    boolean var56 = var42.equals((java.lang.Object)var54);
    net.sf.jniinchi.JniInchiBond var57 = new net.sf.jniinchi.JniInchiBond(var17, var31, var42);
    java.lang.String var58 = var57.getDebugString();
    net.sf.jniinchi.JniInchiAtom var63 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var64 = var63.getCharge();
    var63.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var71 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var72 = var71.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var74 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var75 = var74.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var77 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var78 = new net.sf.jniinchi.JniInchiBond(var63, var71, var74, var77);
    net.sf.jniinchi.INCHI_BOND_STEREO var79 = var78.getBondStereo();
    var57.setStereoDefinition(var79);
    net.sf.jniinchi.JniInchiBond[] var81 = new net.sf.jniinchi.JniInchiBond[] { var57};
    var10.addBonds(var81);
    net.sf.jniinchi.JniInchiInputData var85 = new net.sf.jniinchi.JniInchiInputData(1, var10, 10, "hi!");
    java.lang.String var86 = var85.getErrorMessage();
    java.lang.String var87 = var85.getErrorMessage();
    net.sf.jniinchi.JniInchiInput var88 = var85.getInput();
    net.sf.jniinchi.JniInchiInput var89 = var85.getInput();
    net.sf.jniinchi.INCHI_RET var90 = var85.getReturnValue();
    net.sf.jniinchi.JniInchiOutput var95 = new net.sf.jniinchi.JniInchiOutput(var90, "net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.LoadNativeLibraryException: ", "NONE", "InChI Atom: hi! [0.0,0.0,0.0] Charge:0 // Iso Mass:4 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", "InChI Bond: hi!-InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE // Type: NONE // Stereo: SINGLE_1UP");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var58.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "hi!"+ "'", var86.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "hi!"+ "'", var87.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test185() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test185");


    net.sf.jniinchi.INCHI_KEY var1 = net.sf.jniinchi.INCHI_KEY.getValue(0);
    net.sf.jniinchi.JniInchiOutputKey var3 = new net.sf.jniinchi.JniInchiOutputKey(var1, "InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiOutputKey var5 = new net.sf.jniinchi.JniInchiOutputKey(var1, "hi!");
    net.sf.jniinchi.INCHI_KEY var6 = var5.getReturnStatus();
    int var7 = var6.getIndx();
    net.sf.jniinchi.JniInchiOutputKey var9 = new net.sf.jniinchi.JniInchiOutputKey(var6, "EOF");
    net.sf.jniinchi.JniInchiOutputKey var11 = new net.sf.jniinchi.JniInchiOutputKey(var6, "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:1 D:0 T:0 // Radical: NONE");
    net.sf.jniinchi.INCHI_KEY var12 = var11.getReturnStatus();
    net.sf.jniinchi.JniInchiOutputKey var14 = new net.sf.jniinchi.JniInchiOutputKey(var12, "InChI_Output: EOF/SINGLE_1UP/net.sf.jniinchi.LoadNativeLibraryException: /hi!/net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test186() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test186");


    net.sf.jniinchi.JniInchiOutputStructure var8 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var9 = var8.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var10 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var8);
    net.sf.jniinchi.JniInchiBond[] var11 = new net.sf.jniinchi.JniInchiBond[] { };
    var10.addBonds(var11);
    net.sf.jniinchi.JniInchiAtom var17 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var18 = var17.getCharge();
    var17.setImplicitTritium(10);
    double var21 = var17.getX();
    var17.setCharge(1);
    net.sf.jniinchi.JniInchiAtom var24 = var10.addAtom(var17);
    net.sf.jniinchi.JniInchiInputData var27 = new net.sf.jniinchi.JniInchiInputData(1, var10, 100, "InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP");
    net.sf.jniinchi.INCHI_RET var28 = var27.getReturnValue();
    net.sf.jniinchi.JniInchiInput var29 = var27.getInput();
    net.sf.jniinchi.JniInchiInput var30 = var27.getInput();
    net.sf.jniinchi.JniInchiOutputStructure var38 = new net.sf.jniinchi.JniInchiOutputStructure(100, "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE", "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", 10L, (-1L), (-1L), 1L);
    int var39 = var38.getNumAtoms();
    int var40 = var38.getNumStereo0D();
    net.sf.jniinchi.JniInchiAtom var42 = new net.sf.jniinchi.JniInchiAtom("hi!");
    int var43 = var42.getImplicitProtium();
    var42.debug();
    net.sf.jniinchi.JniInchiAtom var45 = var38.addAtom(var42);
    long[][] var46 = var38.getWarningFlags();
    long[][] var47 = var38.getWarningFlags();
    net.sf.jniinchi.JniInchiAtom var52 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var53 = var52.getCharge();
    var52.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var60 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var61 = var60.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var63 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var64 = var63.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var66 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var67 = new net.sf.jniinchi.JniInchiBond(var52, var60, var63, var66);
    net.sf.jniinchi.INCHI_BOND_STEREO var68 = var67.getBondStereo();
    net.sf.jniinchi.JniInchiAtom var69 = var67.getTargetAtom();
    net.sf.jniinchi.INCHI_BOND_STEREO var70 = var67.getBondStereo();
    net.sf.jniinchi.INCHI_BOND_TYPE var71 = var67.getBondType();
    net.sf.jniinchi.JniInchiBond var72 = var38.addBond(var67);
    net.sf.jniinchi.JniInchiAtom var77 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var78 = var77.getCharge();
    var77.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var85 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var86 = var85.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var88 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var89 = var88.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var91 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var92 = new net.sf.jniinchi.JniInchiBond(var77, var85, var88, var91);
    net.sf.jniinchi.INCHI_BOND_STEREO var93 = var92.getBondStereo();
    int var94 = var93.getIndx();
    var72.setStereoDefinition(var93);
    net.sf.jniinchi.INCHI_BOND_STEREO var96 = var72.getBondStereo();
    net.sf.jniinchi.JniInchiBond var97 = var30.addBond(var72);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiOutput var98 = net.sf.jniinchi.JniInchiWrapper.getStdInchi(var30);
      fail("Expected exception of type net.sf.jniinchi.LoadNativeLibraryException");
    } catch (net.sf.jniinchi.LoadNativeLibraryException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test187() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test187");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitTritium(10);
    var4.setImplicitTritium(1);
    int var10 = var4.getIsotopicMass();
    net.sf.jniinchi.INCHI_KEY var12 = net.sf.jniinchi.INCHI_KEY.getValue(0);
    net.sf.jniinchi.JniInchiOutputKey var14 = new net.sf.jniinchi.JniInchiOutputKey(var12, "InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiAtom var19 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var20 = var19.getCharge();
    var19.setImplicitTritium(10);
    double var23 = var19.getX();
    var19.setCharge(1);
    var19.setImplicitDeuterium(100);
    int var28 = var19.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var33 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var34 = var33.getCharge();
    var33.setImplicitTritium(10);
    double var37 = var33.getX();
    var33.setCharge(1);
    var33.setImplicitDeuterium(100);
    int var42 = var33.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var44 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var45 = var44.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var53 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var54 = var53.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var55 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var53);
    net.sf.jniinchi.JniInchiAtom[] var56 = new net.sf.jniinchi.JniInchiAtom[] { };
    var55.addAtoms(var56);
    boolean var58 = var44.equals((java.lang.Object)var56);
    net.sf.jniinchi.JniInchiBond var59 = new net.sf.jniinchi.JniInchiBond(var19, var33, var44);
    java.lang.String var60 = var59.getDebugString();
    boolean var61 = var12.equals((java.lang.Object)var59);
    net.sf.jniinchi.INCHI_BOND_TYPE var62 = var59.getBondType();
    net.sf.jniinchi.JniInchiAtom var63 = var59.getTargetAtom();
    net.sf.jniinchi.JniInchiAtom var64 = var59.getOriginAtom();
    var64.setImplicitH(0);
    net.sf.jniinchi.JniInchiAtom var68 = new net.sf.jniinchi.JniInchiAtom("NONE");
    var68.debug();
    net.sf.jniinchi.JniInchiAtom var74 = new net.sf.jniinchi.JniInchiAtom(0.0d, 1.0d, 1.0d, "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE");
    net.sf.jniinchi.INCHI_PARITY var76 = net.sf.jniinchi.INCHI_PARITY.valueOf("ODD");
    net.sf.jniinchi.JniInchiStereo0D var77 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var4, var64, var68, var74, var76);
    var77.debug();
    net.sf.jniinchi.INCHI_STEREOTYPE var79 = var77.getStereoType();
    var77.debug();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var60.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test188() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test188");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_RET var1 = net.sf.jniinchi.INCHI_RET.valueOf("net.sf.jniinchi.JniInchiException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test189() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test189");


    net.sf.jniinchi.INCHI_OPTION var1 = net.sf.jniinchi.INCHI_OPTION.valueOfIgnoreCase("InChI_Output: null/InChI_Output: WARNING///hi!/hi!/InChI_Output: WARNING///hi!/hi!//hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test190() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test190");


    net.sf.jniinchi.JniInchiInputInchi var2 = new net.sf.jniinchi.JniInchiInputInchi("OK", "");
    java.lang.String var3 = var2.getInchi();
    java.lang.String var4 = var2.getOptions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "OK"+ "'", var3.equals("OK"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));

  }

  public void test191() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test191");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    net.sf.jniinchi.INCHI_RET var10 = var7.getReturnStatus();
    int var11 = var7.getNumBonds();
    net.sf.jniinchi.JniInchiAtom var16 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var17 = var16.getCharge();
    var16.setImplicitTritium(10);
    double var20 = var16.getX();
    var16.setCharge(1);
    int var23 = var16.getIsotopicMass();
    net.sf.jniinchi.JniInchiAtom var24 = var7.addAtom(var16);
    int var25 = var24.getIsotopicMass();
    int var26 = var24.getCharge();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);

  }

  public void test192() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test192");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiInputInchi var2 = new net.sf.jniinchi.JniInchiInputInchi("InChI Atom: hi! [1.0,10.0,100.0] Charge:10001 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE", "InChI Atom:  [0.0,1.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE");
      fail("Expected exception of type net.sf.jniinchi.JniInchiException");
    } catch (net.sf.jniinchi.JniInchiException e) {
      // Expected exception.
    }

  }

  public void test193() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test193");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var8 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput();
    var7.setStructure((net.sf.jniinchi.JniInchiStructure)var9);
    net.sf.jniinchi.JniInchiOutputStructure var18 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var19 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var18);
    int var20 = var19.getNumBonds();
    java.lang.String var21 = var19.getOptions();
    net.sf.jniinchi.JniInchiAtom var26 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var27 = var26.getCharge();
    var26.setImplicitTritium(10);
    double var30 = var26.getX();
    var26.setCharge(1);
    var26.setImplicitDeuterium(100);
    int var35 = var26.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var40 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var41 = var40.getCharge();
    var40.setImplicitTritium(10);
    double var44 = var40.getX();
    var40.setCharge(1);
    var40.setImplicitDeuterium(100);
    int var49 = var40.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var51 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var52 = var51.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var60 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var61 = var60.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var62 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var60);
    net.sf.jniinchi.JniInchiAtom[] var63 = new net.sf.jniinchi.JniInchiAtom[] { };
    var62.addAtoms(var63);
    boolean var65 = var51.equals((java.lang.Object)var63);
    net.sf.jniinchi.JniInchiBond var66 = new net.sf.jniinchi.JniInchiBond(var26, var40, var51);
    java.lang.String var67 = var66.getDebugString();
    net.sf.jniinchi.JniInchiBond var68 = var19.addBond(var66);
    net.sf.jniinchi.JniInchiBond var69 = var9.addBond(var66);
    net.sf.jniinchi.INCHI_BOND_STEREO var70 = var69.getBondStereo();
    net.sf.jniinchi.INCHI_BOND_STEREO var72 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    java.lang.String var73 = var72.toString();
    int var74 = var72.getIndx();
    int var75 = var72.getIndx();
    var69.setStereoDefinition(var72);
    net.sf.jniinchi.JniInchiAtom var77 = var69.getTargetAtom();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + ""+ "'", var21.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var67.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "SINGLE_1UP"+ "'", var73.equals("SINGLE_1UP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test194() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test194");


    net.sf.jniinchi.JniInchiInput var0 = new net.sf.jniinchi.JniInchiInput();
    int var1 = var0.getNumStereo0D();
    net.sf.jniinchi.JniInchiOutputStructure var9 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var10 = var9.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var11 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var9);
    java.lang.String var12 = var9.getLog();
    net.sf.jniinchi.JniInchiAtom var17 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var17.setImplicitProtium(1);
    int var20 = var17.getImplicitDeuterium();
    int var21 = var17.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var23 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var28 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var29 = var28.getCharge();
    var28.setImplicitTritium(10);
    double var32 = var28.getX();
    var28.setCharge(1);
    int var35 = var28.getIsotopicMass();
    int var36 = var28.getCharge();
    net.sf.jniinchi.JniInchiAtom var41 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var42 = var41.getCharge();
    var41.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var46 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var47 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var17, var23, var28, var41, var46);
    net.sf.jniinchi.JniInchiStereo0D var48 = var9.addStereo0D(var47);
    net.sf.jniinchi.JniInchiStereo0D var49 = var0.addStereo0D(var48);
    var48.debug();
    var48.debug();
    net.sf.jniinchi.INCHI_STEREOTYPE var52 = var48.getStereoType();
    net.sf.jniinchi.INCHI_STEREOTYPE var53 = var48.getStereoType();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiAtom var55 = var48.getNeighbor(10);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test195() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test195");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(0.0d, 1.0d, 0.0d, "");
    int var5 = var4.getImplicitProtium();
    var4.setImplicitDeuterium(3);
    double var8 = var4.getY();
    int var9 = var4.getImplicitTritium();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);

  }

  public void test196() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test196");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput((-1), "hi!", "", "", "");
    net.sf.jniinchi.INCHI_RET var6 = var5.getReturnStatus();
    int var7 = var6.getIndx();
    net.sf.jniinchi.JniInchiOutput var12 = new net.sf.jniinchi.JniInchiOutput(var6, "NONE", "InChI_Output: EOF/SINGLE_1UP/net.sf.jniinchi.LoadNativeLibraryException: /hi!/net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", "InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD", "InChI_Output: EOF/SINGLE_1UP/net.sf.jniinchi.LoadNativeLibraryException: /hi!/net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiOutputStructure var13 = new net.sf.jniinchi.JniInchiOutputStructure(var6);
    net.sf.jniinchi.JniInchiOutputStructure var14 = new net.sf.jniinchi.JniInchiOutputStructure(var6);
    net.sf.jniinchi.JniInchiOutput var19 = new net.sf.jniinchi.JniInchiOutput(var6, "OKAY", "net.sf.jniinchi.LoadNativeLibraryException: InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD", "InChI Atom: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi! [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", "net.sf.jniinchi.JniInchiException: InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP");
    net.sf.jniinchi.JniInchiOutputStructure var20 = new net.sf.jniinchi.JniInchiOutputStructure(var6);
    net.sf.jniinchi.JniInchiOutputStructure var21 = new net.sf.jniinchi.JniInchiOutputStructure(var6);
    net.sf.jniinchi.JniInchiOutputStructure var22 = new net.sf.jniinchi.JniInchiOutputStructure(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1));

  }

  public void test197() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test197");


    net.sf.jniinchi.INCHI_KEY_STATUS var1 = net.sf.jniinchi.INCHI_KEY_STATUS.getValue(0);
    java.lang.Class var2 = var1.getDeclaringClass();
    java.lang.Enum var4 = java.lang.Enum.<java.lang.Enum>valueOf(var2, "INVALID_LAYOUT");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test198() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test198");


    net.sf.jniinchi.JniInchiOutputStructure var8 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var8);
    net.sf.jniinchi.JniInchiInputData var12 = new net.sf.jniinchi.JniInchiInputData(4, var9, 0, "InChI Atom: hi! [100.0,100.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiAtom var14 = var9.getAtom(4);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test199() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test199");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput(0, "InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD", "OK", "InChI Stereo0D: - [hi!,hi!,NONE,InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE] Type::DOUBLEBOND // Parity:ODD", "InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD");
    java.lang.String var6 = var5.getAuxInfo();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "OK"+ "'", var6.equals("OK"));

  }

  public void test200() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test200");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput((-1), "hi!", "", "", "");
    java.lang.String var6 = var5.getAuxInfo();
    net.sf.jniinchi.INCHI_RET var7 = var5.getReturnStatus();
    net.sf.jniinchi.JniInchiOutput var12 = new net.sf.jniinchi.JniInchiOutput(var7, "OK", "", "InChI_Output: WARNING///hi!/hi!", "hi!");
    int var13 = var7.getIndx();
    net.sf.jniinchi.JniInchiOutput var18 = new net.sf.jniinchi.JniInchiOutput(var7, "InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP", "InChI_Output: EOF/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/SINGLE_1UP/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/NONE", "InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE", "InChI_Output: EOF/hi!///");
    net.sf.jniinchi.INCHI_RET var19 = var18.getReturnStatus();
    net.sf.jniinchi.JniInchiOutputStructure var20 = new net.sf.jniinchi.JniInchiOutputStructure(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test201() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test201");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var4.setIsotopicMassShift(1);
    var4.setImplicitProtium(0);
    net.sf.jniinchi.JniInchiOutputStructure var16 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var17 = var16.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var18 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var16);
    java.lang.String var19 = var16.getLog();
    net.sf.jniinchi.JniInchiAtom var24 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var24.setImplicitProtium(1);
    int var27 = var24.getImplicitDeuterium();
    int var28 = var24.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var30 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var35 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var36 = var35.getCharge();
    var35.setImplicitTritium(10);
    double var39 = var35.getX();
    var35.setCharge(1);
    int var42 = var35.getIsotopicMass();
    int var43 = var35.getCharge();
    net.sf.jniinchi.JniInchiAtom var48 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var49 = var48.getCharge();
    var48.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var53 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var54 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var24, var30, var35, var48, var53);
    net.sf.jniinchi.JniInchiStereo0D var55 = var16.addStereo0D(var54);
    net.sf.jniinchi.JniInchiAtom var60 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var61 = var60.getCharge();
    var60.setImplicitTritium(10);
    var60.setImplicitTritium(1);
    net.sf.jniinchi.INCHI_RADICAL var66 = var60.getRadical();
    var60.setIsotopicMassShift(1);
    int var69 = var60.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var70 = var16.addAtom(var60);
    double var71 = var60.getZ();
    double var72 = var60.getZ();
    net.sf.jniinchi.INCHI_BOND_TYPE var74 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var75 = var74.getDeclaringClass();
    int var76 = var74.getIndx();
    java.lang.String var77 = var74.name();
    net.sf.jniinchi.JniInchiBond var78 = new net.sf.jniinchi.JniInchiBond(var4, var60, var74);
    net.sf.jniinchi.JniInchiAtom var79 = var78.getOriginAtom();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "NONE"+ "'", var77.equals("NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test202() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test202");


    net.sf.jniinchi.JniInchiOutputKey var2 = new net.sf.jniinchi.JniInchiOutputKey(0, "NONE");
    net.sf.jniinchi.INCHI_KEY var3 = var2.getReturnStatus();
    net.sf.jniinchi.JniInchiOutputKey var5 = new net.sf.jniinchi.JniInchiOutputKey(var3, "InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD");
    java.lang.String var6 = var3.toString();
    int var7 = var3.getIndx();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "OK"+ "'", var6.equals("OK"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);

  }

  public void test203() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test203");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var8 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput();
    var7.setStructure((net.sf.jniinchi.JniInchiStructure)var9);
    java.lang.String var11 = var9.getOptions();
    java.lang.String var12 = var9.getOptions();
    net.sf.jniinchi.JniInchiOutputStructure var20 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var21 = var20.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var22 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var20);
    java.lang.String var23 = var22.getOptions();
    net.sf.jniinchi.JniInchiInput var24 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var22);
    net.sf.jniinchi.JniInchiOutputStructure var32 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var33 = var32.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var34 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var32);
    long[][] var35 = var32.getWarningFlags();
    net.sf.jniinchi.JniInchiAtom var40 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var41 = var40.getCharge();
    var40.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var48 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var49 = var48.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var51 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var52 = var51.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var54 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var55 = new net.sf.jniinchi.JniInchiBond(var40, var48, var51, var54);
    net.sf.jniinchi.JniInchiBond var56 = var32.addBond(var55);
    net.sf.jniinchi.JniInchiBond[] var57 = new net.sf.jniinchi.JniInchiBond[] { var56};
    var22.addBonds(var57);
    var9.addBonds(var57);
    java.lang.String var60 = var9.getOptions();
    net.sf.jniinchi.JniInchiOutputStructure var68 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var69 = var68.getNumAtoms();
    net.sf.jniinchi.JniInchiStructure var70 = new net.sf.jniinchi.JniInchiStructure();
    net.sf.jniinchi.JniInchiOutputStructure var78 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var79 = var78.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var80 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var78);
    net.sf.jniinchi.JniInchiAtom[] var81 = new net.sf.jniinchi.JniInchiAtom[] { };
    var80.addAtoms(var81);
    var70.addAtoms(var81);
    var68.setStructure(var70);
    net.sf.jniinchi.JniInchiInput var85 = new net.sf.jniinchi.JniInchiInput(var70);
    int var86 = var70.getNumAtoms();
    var9.setStructure(var70);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiAtom var89 = var70.getAtom(3);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + ""+ "'", var23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + ""+ "'", var60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0);

  }

  public void test204() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test204");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput(10010, "InChI_Output: null/InChI_Output: WARNING///hi!/hi!/InChI_Output: WARNING///hi!/hi!//hi!", "net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", "InChI_Output: EOF/net.sf.jniinchi.LoadNativeLibraryException: /InChI_Output: null/InChI_Output: WARNING///hi!/hi!/InChI_Output: WARNING///hi!/hi!//hi!/InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:1 // Radical: NONE/InChI_Output: null/InChI_Output: WARNING///hi!/hi!/InChI_Output: WARNING///hi!/hi!//hi!", "InChI Atom: hi! [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE");
    net.sf.jniinchi.INCHI_RET var6 = var5.getReturnStatus();
    java.lang.String var7 = var5.getInchi();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "InChI_Output: null/InChI_Output: WARNING///hi!/hi!/InChI_Output: WARNING///hi!/hi!//hi!"+ "'", var7.equals("InChI_Output: null/InChI_Output: WARNING///hi!/hi!/InChI_Output: WARNING///hi!/hi!//hi!"));

  }

  public void test205() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test205");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput((-1), "hi!", "", "", "");
    net.sf.jniinchi.INCHI_RET var6 = var5.getReturnStatus();
    int var7 = var6.getIndx();
    net.sf.jniinchi.JniInchiOutput var12 = new net.sf.jniinchi.JniInchiOutput(var6, "NONE", "InChI_Output: EOF/SINGLE_1UP/net.sf.jniinchi.LoadNativeLibraryException: /hi!/net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", "InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD", "InChI_Output: EOF/SINGLE_1UP/net.sf.jniinchi.LoadNativeLibraryException: /hi!/net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiOutputStructure var13 = new net.sf.jniinchi.JniInchiOutputStructure(var6);
    net.sf.jniinchi.JniInchiOutputStructure var14 = new net.sf.jniinchi.JniInchiOutputStructure(var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiAtom var16 = var14.getAtom(6);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1));

  }

  public void test206() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test206");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput((-1), "hi!", "", "", "");
    java.lang.String var6 = var5.getAuxInfo();
    net.sf.jniinchi.INCHI_RET var7 = var5.getReturnStatus();
    net.sf.jniinchi.JniInchiOutput var12 = new net.sf.jniinchi.JniInchiOutput(var7, "OK", "", "InChI_Output: WARNING///hi!/hi!", "hi!");
    net.sf.jniinchi.JniInchiOutputStructure var13 = new net.sf.jniinchi.JniInchiOutputStructure(var7);
    long[][] var14 = var13.getWarningFlags();
    long[][] var15 = var13.getWarningFlags();
    java.lang.String var16 = var13.getLog();
    net.sf.jniinchi.JniInchiAtom var21 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var21.setImplicitProtium(1);
    int var24 = var21.getImplicitDeuterium();
    int var25 = var21.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var27 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var32 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var33 = var32.getCharge();
    var32.setImplicitTritium(10);
    double var36 = var32.getX();
    var32.setCharge(1);
    int var39 = var32.getIsotopicMass();
    int var40 = var32.getCharge();
    net.sf.jniinchi.JniInchiAtom var45 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var46 = var45.getCharge();
    var45.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var50 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var51 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var21, var27, var32, var45, var50);
    net.sf.jniinchi.INCHI_PARITY var53 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    var51.setDisconnectedParity(var53);
    net.sf.jniinchi.INCHI_PARITY var55 = var51.getParity();
    net.sf.jniinchi.JniInchiAtom[] var56 = var51.getNeighbors();
    net.sf.jniinchi.INCHI_PARITY var57 = var51.getDisconnectedParity();
    net.sf.jniinchi.INCHI_PARITY var58 = var51.getParity();
    net.sf.jniinchi.JniInchiStereo0D var59 = var13.addStereo0D(var51);
    var59.debug();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiAtom var62 = var59.getNeighbor(5);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test207() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test207");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput((-1), "hi!", "", "", "");
    java.lang.String var6 = var5.getAuxInfo();
    net.sf.jniinchi.INCHI_RET var7 = var5.getReturnStatus();
    net.sf.jniinchi.JniInchiOutput var12 = new net.sf.jniinchi.JniInchiOutput(var7, "OK", "", "InChI_Output: WARNING///hi!/hi!", "hi!");
    net.sf.jniinchi.JniInchiOutputStructure var13 = new net.sf.jniinchi.JniInchiOutputStructure(var7);
    long[][] var14 = var13.getWarningFlags();
    long[][] var15 = var13.getWarningFlags();
    java.lang.String var16 = var13.getLog();
    net.sf.jniinchi.JniInchiAtom var21 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var21.setImplicitProtium(1);
    int var24 = var21.getImplicitDeuterium();
    int var25 = var21.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var27 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var32 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var33 = var32.getCharge();
    var32.setImplicitTritium(10);
    double var36 = var32.getX();
    var32.setCharge(1);
    int var39 = var32.getIsotopicMass();
    int var40 = var32.getCharge();
    net.sf.jniinchi.JniInchiAtom var45 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var46 = var45.getCharge();
    var45.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var50 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var51 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var21, var27, var32, var45, var50);
    net.sf.jniinchi.INCHI_PARITY var53 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    var51.setDisconnectedParity(var53);
    net.sf.jniinchi.INCHI_PARITY var55 = var51.getParity();
    net.sf.jniinchi.JniInchiAtom[] var56 = var51.getNeighbors();
    net.sf.jniinchi.INCHI_PARITY var57 = var51.getDisconnectedParity();
    net.sf.jniinchi.INCHI_PARITY var58 = var51.getParity();
    net.sf.jniinchi.JniInchiStereo0D var59 = var13.addStereo0D(var51);
    net.sf.jniinchi.INCHI_PARITY var60 = var59.getDisconnectedParity();
    net.sf.jniinchi.JniInchiAtom var62 = var59.getNeighbor(1);
    int var63 = var62.getImplicitProtium();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);

  }

  public void test208() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test208");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiInputInchi var2 = new net.sf.jniinchi.JniInchiInputInchi("InChI Bond: hi!-InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE // Type: NONE // Stereo: SINGLE_1UP", "SINGLE_1UP");
      fail("Expected exception of type net.sf.jniinchi.JniInchiException");
    } catch (net.sf.jniinchi.JniInchiException e) {
      // Expected exception.
    }

  }

  public void test209() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test209");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.INCHI_RET var9 = var7.getReturnStatus();
    net.sf.jniinchi.JniInchiStructure var10 = net.sf.jniinchi.Main.getTestMolecule();
    var7.setStructure(var10);
    java.lang.String var12 = var7.getLog();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));

  }

  public void test210() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test210");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(3, "InChI Atom: hi! [1.0,10.0,100.0] Charge:1 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:10 // Radical: NONE", "net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", (-1L), 0L, 100L, 10L);
    net.sf.jniinchi.JniInchiOutputStructure var15 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var16 = var15.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var17 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var15);
    java.lang.String var18 = var15.getLog();
    net.sf.jniinchi.JniInchiAtom var23 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var23.setImplicitProtium(1);
    int var26 = var23.getImplicitDeuterium();
    int var27 = var23.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var29 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var34 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var35 = var34.getCharge();
    var34.setImplicitTritium(10);
    double var38 = var34.getX();
    var34.setCharge(1);
    int var41 = var34.getIsotopicMass();
    int var42 = var34.getCharge();
    net.sf.jniinchi.JniInchiAtom var47 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var48 = var47.getCharge();
    var47.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var52 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var53 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var23, var29, var34, var47, var52);
    net.sf.jniinchi.JniInchiStereo0D var54 = var15.addStereo0D(var53);
    net.sf.jniinchi.INCHI_PARITY var55 = var53.getDisconnectedParity();
    net.sf.jniinchi.JniInchiAtom var57 = var53.getNeighbor(0);
    net.sf.jniinchi.INCHI_PARITY var58 = var53.getParity();
    net.sf.jniinchi.INCHI_PARITY var59 = var53.getParity();
    var53.debug();
    net.sf.jniinchi.JniInchiAtom[] var61 = var53.getNeighbors();
    net.sf.jniinchi.JniInchiAtom[] var62 = var53.getNeighbors();
    net.sf.jniinchi.JniInchiAtom[] var63 = var53.getNeighbors();
    var7.addAtoms(var63);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiBond var66 = var7.getBond(4);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test211() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test211");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitTritium(10);
    double var8 = var4.getX();
    var4.setCharge(1);
    var4.setImplicitDeuterium(100);
    int var13 = var4.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var18 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var19 = var18.getCharge();
    var18.setImplicitTritium(10);
    double var22 = var18.getX();
    var18.setCharge(1);
    var18.setImplicitDeuterium(100);
    int var27 = var18.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var29 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var30 = var29.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var38 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var39 = var38.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var40 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var38);
    net.sf.jniinchi.JniInchiAtom[] var41 = new net.sf.jniinchi.JniInchiAtom[] { };
    var40.addAtoms(var41);
    boolean var43 = var29.equals((java.lang.Object)var41);
    net.sf.jniinchi.JniInchiBond var44 = new net.sf.jniinchi.JniInchiBond(var4, var18, var29);
    java.lang.String var45 = var44.getDebugString();
    net.sf.jniinchi.JniInchiAtom var50 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var51 = var50.getCharge();
    var50.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var58 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var59 = var58.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var61 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var62 = var61.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var64 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var65 = new net.sf.jniinchi.JniInchiBond(var50, var58, var61, var64);
    net.sf.jniinchi.INCHI_BOND_STEREO var66 = var65.getBondStereo();
    var44.setStereoDefinition(var66);
    java.lang.String var68 = var44.getDebugString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var45.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP"+ "'", var68.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP"));

  }

  public void test212() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test212");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_KEY_STATUS var1 = net.sf.jniinchi.INCHI_KEY_STATUS.valueOf("EOF");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test213() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test213");


    net.sf.jniinchi.JniInchiInputInchi var1 = new net.sf.jniinchi.JniInchiInputInchi("net.sf.jniinchi.JniInchiException: OK");

  }

  public void test214() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test214");


    net.sf.jniinchi.INCHI_KEY var1 = net.sf.jniinchi.INCHI_KEY.getValue(0);
    net.sf.jniinchi.JniInchiOutputKey var3 = new net.sf.jniinchi.JniInchiOutputKey(var1, "InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiAtom var8 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var9 = var8.getCharge();
    var8.setImplicitTritium(10);
    double var12 = var8.getX();
    var8.setCharge(1);
    var8.setImplicitDeuterium(100);
    int var17 = var8.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var22 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var23 = var22.getCharge();
    var22.setImplicitTritium(10);
    double var26 = var22.getX();
    var22.setCharge(1);
    var22.setImplicitDeuterium(100);
    int var31 = var22.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var33 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var34 = var33.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var42 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var43 = var42.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var44 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var42);
    net.sf.jniinchi.JniInchiAtom[] var45 = new net.sf.jniinchi.JniInchiAtom[] { };
    var44.addAtoms(var45);
    boolean var47 = var33.equals((java.lang.Object)var45);
    net.sf.jniinchi.JniInchiBond var48 = new net.sf.jniinchi.JniInchiBond(var8, var22, var33);
    java.lang.String var49 = var48.getDebugString();
    boolean var50 = var1.equals((java.lang.Object)var48);
    net.sf.jniinchi.INCHI_BOND_TYPE var51 = var48.getBondType();
    net.sf.jniinchi.JniInchiAtom var52 = var48.getTargetAtom();
    net.sf.jniinchi.JniInchiAtom var53 = var48.getOriginAtom();
    net.sf.jniinchi.INCHI_BOND_STEREO var54 = var48.getBondStereo();
    java.lang.String var55 = var48.getDebugString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var49.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var55.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));

  }

  public void test215() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test215");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput(1, "", "", "hi!", "hi!");
    java.lang.String var6 = var5.getAuxInfo();
    java.lang.String var7 = var5.toString();
    net.sf.jniinchi.INCHI_RET var8 = var5.getReturnStatus();
    net.sf.jniinchi.JniInchiOutputStructure var9 = new net.sf.jniinchi.JniInchiOutputStructure(var8);
    net.sf.jniinchi.JniInchiOutputStructure var10 = new net.sf.jniinchi.JniInchiOutputStructure(var8);
    long[][] var11 = var10.getWarningFlags();
    long[][] var12 = var10.getWarningFlags();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "InChI_Output: WARNING///hi!/hi!"+ "'", var7.equals("InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test216() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test216");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitTritium(10);
    var4.setImplicitTritium(1);
    net.sf.jniinchi.INCHI_RADICAL var10 = var4.getRadical();
    var4.setIsotopicMassShift(1);
    var4.setCharge(10);
    double var15 = var4.getX();
    java.lang.String var16 = var4.getElementType();
    int var17 = var4.getCharge();
    int var18 = var4.getImplicitH();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1));

  }

  public void test217() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test217");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_KEY var1 = net.sf.jniinchi.INCHI_KEY.valueOf("InChI_Output: null/InChI Atom: InChI_Output: EOF/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/SINGLE_1UP/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/NONE [1.0,-1.0,1.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE/VALID_STANDARD/InChI_Output: WARNING/InChI_Output: EOF/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/SINGLE_1UP/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/NONE/InChI Atom: hi! [1.0,10.0,100.0] Charge:10 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:10 // Radical: NONE/InChI Stereo0D: - [,hi!,hi!,NONE] Type::DOUBLEBOND // Parity:NONE/InChI Atom: hi! [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE/InChI_Output: EOF/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/InChI Atom: hi! [1.0,10.0,100.0] Charge:1 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:10 // Radical: NONE/hi!/");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test218() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test218");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiInputInchi var2 = new net.sf.jniinchi.JniInchiInputInchi("InChI_Output: WARNING///hi!/hi!", "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:10 // Radical: NONE");
      fail("Expected exception of type net.sf.jniinchi.JniInchiException");
    } catch (net.sf.jniinchi.JniInchiException e) {
      // Expected exception.
    }

  }

  public void test219() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test219");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(0, "FATAL", "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE", 100L, 100L, 10L, (-1L));

  }

  public void test220() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test220");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_RET var1 = net.sf.jniinchi.INCHI_RET.valueOf("net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test221() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test221");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var8 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput();
    var7.setStructure((net.sf.jniinchi.JniInchiStructure)var9);
    java.lang.String var11 = var9.getOptions();
    int var12 = var9.getNumBonds();
    net.sf.jniinchi.JniInchiOutput var18 = new net.sf.jniinchi.JniInchiOutput((-1), "hi!", "", "", "");
    net.sf.jniinchi.INCHI_RET var19 = var18.getReturnStatus();
    net.sf.jniinchi.JniInchiOutputStructure var20 = new net.sf.jniinchi.JniInchiOutputStructure(var19);
    net.sf.jniinchi.JniInchiOutputStructure var21 = new net.sf.jniinchi.JniInchiOutputStructure(var19);
    net.sf.jniinchi.INCHI_RET var22 = var21.getReturnStatus();
    var9.setStructure((net.sf.jniinchi.JniInchiStructure)var21);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiInput var25 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var21, "net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.LoadNativeLibraryException: ");
      fail("Expected exception of type net.sf.jniinchi.JniInchiException");
    } catch (net.sf.jniinchi.JniInchiException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test222() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test222");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var8 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    net.sf.jniinchi.INCHI_KEY var11 = net.sf.jniinchi.INCHI_KEY.getValue(0);
    net.sf.jniinchi.JniInchiOutputKey var13 = new net.sf.jniinchi.JniInchiOutputKey(var11, "InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiAtom var18 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var19 = var18.getCharge();
    var18.setImplicitTritium(10);
    double var22 = var18.getX();
    var18.setCharge(1);
    var18.setImplicitDeuterium(100);
    int var27 = var18.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var32 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var33 = var32.getCharge();
    var32.setImplicitTritium(10);
    double var36 = var32.getX();
    var32.setCharge(1);
    var32.setImplicitDeuterium(100);
    int var41 = var32.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var43 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var44 = var43.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var52 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var53 = var52.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var54 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var52);
    net.sf.jniinchi.JniInchiAtom[] var55 = new net.sf.jniinchi.JniInchiAtom[] { };
    var54.addAtoms(var55);
    boolean var57 = var43.equals((java.lang.Object)var55);
    net.sf.jniinchi.JniInchiBond var58 = new net.sf.jniinchi.JniInchiBond(var18, var32, var43);
    java.lang.String var59 = var58.getDebugString();
    boolean var60 = var11.equals((java.lang.Object)var58);
    net.sf.jniinchi.INCHI_BOND_TYPE var61 = var58.getBondType();
    net.sf.jniinchi.JniInchiBond var62 = var9.addBond(var58);
    net.sf.jniinchi.JniInchiAtom var63 = var58.getOriginAtom();
    net.sf.jniinchi.JniInchiAtom var68 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var69 = var68.getCharge();
    var68.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var76 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var77 = var76.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var79 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var80 = var79.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var82 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var83 = new net.sf.jniinchi.JniInchiBond(var68, var76, var79, var82);
    net.sf.jniinchi.INCHI_BOND_STEREO var84 = var83.getBondStereo();
    net.sf.jniinchi.JniInchiAtom var85 = var83.getTargetAtom();
    net.sf.jniinchi.INCHI_BOND_STEREO var86 = var83.getBondStereo();
    var58.setStereoDefinition(var86);
    var58.debug();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var59.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test223() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test223");


    net.sf.jniinchi.JniInchiException var1 = new net.sf.jniinchi.JniInchiException("InChI_Output: WARNING///hi!/hi!");
    java.lang.String var2 = var1.toString();
    net.sf.jniinchi.LoadNativeLibraryException var3 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var1);
    java.lang.String var4 = var3.toString();
    java.lang.String var5 = var3.toString();
    net.sf.jniinchi.LoadNativeLibraryException var6 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var3);
    net.sf.jniinchi.JniInchiException var7 = new net.sf.jniinchi.JniInchiException((java.lang.Throwable)var6);
    java.lang.String var8 = var7.toString();
    net.sf.jniinchi.LoadNativeLibraryException var9 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var2.equals("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var4.equals("net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var5.equals("net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var8.equals("net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));

  }

  public void test224() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test224");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(0, "InChI_Output: WARNING/InChI_Output: EOF/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/SINGLE_1UP/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/NONE/InChI Atom: hi! [1.0,10.0,100.0] Charge:10 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:10 // Radical: NONE/InChI Stereo0D: - [,hi!,hi!,NONE] Type::DOUBLEBOND // Parity:NONE/InChI Atom: hi! [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", "InChI_Output: WARNING/InChI_Output: EOF/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/SINGLE_1UP/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/NONE/InChI Atom: hi! [1.0,10.0,100.0] Charge:10 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:10 // Radical: NONE/InChI Stereo0D: - [,hi!,hi!,NONE] Type::DOUBLEBOND // Parity:NONE/InChI Atom: hi! [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", 100L, (-1L), 10L, (-1L));
    net.sf.jniinchi.JniInchiOutputStructure var15 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var16 = var15.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var17 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var15);
    java.lang.String var18 = var15.getLog();
    net.sf.jniinchi.JniInchiAtom var23 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var23.setImplicitProtium(1);
    int var26 = var23.getImplicitDeuterium();
    int var27 = var23.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var29 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var34 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var35 = var34.getCharge();
    var34.setImplicitTritium(10);
    double var38 = var34.getX();
    var34.setCharge(1);
    int var41 = var34.getIsotopicMass();
    int var42 = var34.getCharge();
    net.sf.jniinchi.JniInchiAtom var47 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var48 = var47.getCharge();
    var47.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var52 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var53 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var23, var29, var34, var47, var52);
    net.sf.jniinchi.JniInchiStereo0D var54 = var15.addStereo0D(var53);
    net.sf.jniinchi.INCHI_PARITY var55 = var53.getDisconnectedParity();
    net.sf.jniinchi.JniInchiAtom var57 = var53.getNeighbor(0);
    net.sf.jniinchi.INCHI_PARITY var58 = var53.getParity();
    net.sf.jniinchi.INCHI_PARITY var59 = var53.getParity();
    var53.debug();
    net.sf.jniinchi.JniInchiAtom[] var61 = var53.getNeighbors();
    net.sf.jniinchi.JniInchiAtom[] var62 = var53.getNeighbors();
    net.sf.jniinchi.JniInchiAtom[] var63 = var53.getNeighbors();
    net.sf.jniinchi.JniInchiAtom[] var64 = var53.getNeighbors();
    net.sf.jniinchi.JniInchiStereo0D var65 = var7.addStereo0D(var53);
    net.sf.jniinchi.INCHI_PARITY var66 = var65.getDisconnectedParity();
    net.sf.jniinchi.INCHI_PARITY var67 = var65.getDisconnectedParity();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test225() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test225");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var4.setImplicitProtium(1);
    int var7 = var4.getImplicitDeuterium();
    int var8 = var4.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var10 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var15 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var16 = var15.getCharge();
    var15.setImplicitTritium(10);
    double var19 = var15.getX();
    var15.setCharge(1);
    int var22 = var15.getIsotopicMass();
    int var23 = var15.getCharge();
    net.sf.jniinchi.JniInchiAtom var28 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var29 = var28.getCharge();
    var28.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var33 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var34 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var4, var10, var15, var28, var33);
    net.sf.jniinchi.JniInchiAtom var39 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var40 = var39.getCharge();
    int var41 = var39.getIsotopicMass();
    net.sf.jniinchi.JniInchiAtom var46 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var47 = var46.getCharge();
    var46.setImplicitTritium(10);
    double var50 = var46.getX();
    var46.setCharge(1);
    var46.setImplicitDeuterium(100);
    int var55 = var46.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var60 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var61 = var60.getCharge();
    var60.setImplicitTritium(10);
    double var64 = var60.getX();
    var60.setCharge(1);
    var60.setImplicitDeuterium(100);
    int var69 = var60.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var71 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var72 = var71.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var80 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var81 = var80.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var82 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var80);
    net.sf.jniinchi.JniInchiAtom[] var83 = new net.sf.jniinchi.JniInchiAtom[] { };
    var82.addAtoms(var83);
    boolean var85 = var71.equals((java.lang.Object)var83);
    net.sf.jniinchi.JniInchiBond var86 = new net.sf.jniinchi.JniInchiBond(var46, var60, var71);
    net.sf.jniinchi.JniInchiAtom var87 = var86.getOriginAtom();
    net.sf.jniinchi.JniInchiAtom var89 = new net.sf.jniinchi.JniInchiAtom("NONE");
    var89.debug();
    double var91 = var89.getZ();
    net.sf.jniinchi.INCHI_PARITY var93 = net.sf.jniinchi.INCHI_PARITY.getValue(0);
    int var94 = var93.getIndx();
    net.sf.jniinchi.JniInchiStereo0D var95 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var10, var39, var87, var89, var93);
    net.sf.jniinchi.INCHI_STEREOTYPE var96 = var95.getStereoType();
    java.lang.String var97 = var95.getDebugString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var97 + "' != '" + "InChI Stereo0D: - [,hi!,hi!,NONE] Type::DOUBLEBOND // Parity:NONE"+ "'", var97.equals("InChI Stereo0D: - [,hi!,hi!,NONE] Type::DOUBLEBOND // Parity:NONE"));

  }

  public void test226() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test226");


    net.sf.jniinchi.INCHI_KEY var1 = net.sf.jniinchi.INCHI_KEY.getValue(0);
    net.sf.jniinchi.JniInchiOutputKey var3 = new net.sf.jniinchi.JniInchiOutputKey(var1, "InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiAtom var8 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var9 = var8.getCharge();
    var8.setImplicitTritium(10);
    double var12 = var8.getX();
    var8.setCharge(1);
    var8.setImplicitDeuterium(100);
    int var17 = var8.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var22 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var23 = var22.getCharge();
    var22.setImplicitTritium(10);
    double var26 = var22.getX();
    var22.setCharge(1);
    var22.setImplicitDeuterium(100);
    int var31 = var22.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var33 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var34 = var33.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var42 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var43 = var42.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var44 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var42);
    net.sf.jniinchi.JniInchiAtom[] var45 = new net.sf.jniinchi.JniInchiAtom[] { };
    var44.addAtoms(var45);
    boolean var47 = var33.equals((java.lang.Object)var45);
    net.sf.jniinchi.JniInchiBond var48 = new net.sf.jniinchi.JniInchiBond(var8, var22, var33);
    java.lang.String var49 = var48.getDebugString();
    boolean var50 = var1.equals((java.lang.Object)var48);
    net.sf.jniinchi.INCHI_BOND_TYPE var51 = var48.getBondType();
    net.sf.jniinchi.JniInchiAtom var52 = var48.getTargetAtom();
    int var53 = var52.getIsotopicMass();
    double var54 = var52.getZ();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var49.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 100.0d);

  }

  public void test227() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test227");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiInputInchi var2 = new net.sf.jniinchi.JniInchiInputInchi("InChI_Output: EOF/net.sf.jniinchi.LoadNativeLibraryException: /InChI_Output: null/InChI_Output: WARNING///hi!/hi!/InChI_Output: WARNING///hi!/hi!//hi!/InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:1 // Radical: NONE/InChI_Output: null/InChI_Output: WARNING///hi!/hi!/InChI_Output: WARNING///hi!/hi!//hi!", "InChI_Output: EOF/OK//InChI_Output: WARNING///hi!/hi!/hi!");
      fail("Expected exception of type net.sf.jniinchi.JniInchiException");
    } catch (net.sf.jniinchi.JniInchiException e) {
      // Expected exception.
    }

  }

  public void test228() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test228");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    java.lang.String var10 = var7.getLog();
    net.sf.jniinchi.JniInchiAtom var15 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var15.setImplicitProtium(1);
    int var18 = var15.getImplicitDeuterium();
    int var19 = var15.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var21 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var26 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var27 = var26.getCharge();
    var26.setImplicitTritium(10);
    double var30 = var26.getX();
    var26.setCharge(1);
    int var33 = var26.getIsotopicMass();
    int var34 = var26.getCharge();
    net.sf.jniinchi.JniInchiAtom var39 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var40 = var39.getCharge();
    var39.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var44 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var45 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var15, var21, var26, var39, var44);
    net.sf.jniinchi.JniInchiStereo0D var46 = var7.addStereo0D(var45);
    net.sf.jniinchi.JniInchiAtom var47 = var46.getCentralAtom();
    net.sf.jniinchi.INCHI_STEREOTYPE var48 = var46.getStereoType();
    var46.debug();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test229() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test229");


    net.sf.jniinchi.JniInchiOutputStructure var8 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var8);
    net.sf.jniinchi.JniInchiInput var10 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var8);
    net.sf.jniinchi.JniInchiInputData var13 = new net.sf.jniinchi.JniInchiInputData(0, var10, 3, "NONE");
    net.sf.jniinchi.INCHI_RET var14 = var13.getReturnValue();
    java.lang.Class var15 = var14.getDeclaringClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test230() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test230");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    java.lang.String var10 = var7.getLog();
    net.sf.jniinchi.JniInchiAtom var15 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var15.setImplicitProtium(1);
    int var18 = var15.getImplicitDeuterium();
    int var19 = var15.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var21 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var26 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var27 = var26.getCharge();
    var26.setImplicitTritium(10);
    double var30 = var26.getX();
    var26.setCharge(1);
    int var33 = var26.getIsotopicMass();
    int var34 = var26.getCharge();
    net.sf.jniinchi.JniInchiAtom var39 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var40 = var39.getCharge();
    var39.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var44 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var45 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var15, var21, var26, var39, var44);
    net.sf.jniinchi.JniInchiStereo0D var46 = var7.addStereo0D(var45);
    net.sf.jniinchi.INCHI_PARITY var47 = var45.getDisconnectedParity();
    net.sf.jniinchi.JniInchiAtom var49 = var45.getNeighbor(0);
    net.sf.jniinchi.JniInchiAtom var50 = var45.getCentralAtom();
    net.sf.jniinchi.JniInchiAtom[] var51 = var45.getNeighbors();
    net.sf.jniinchi.JniInchiAtom[] var52 = var45.getNeighbors();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test231() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test231");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_RET var1 = net.sf.jniinchi.INCHI_RET.valueOf("InChI Atom: hi! [100.0,100.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:1 T:0 // Radical: NONE");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test232() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test232");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitTritium(10);
    var4.setImplicitTritium(1);
    net.sf.jniinchi.INCHI_RADICAL var10 = var4.getRadical();
    net.sf.jniinchi.INCHI_RADICAL var11 = var4.getRadical();
    var4.setImplicitDeuterium(0);
    int var14 = var4.getImplicitTritium();
    net.sf.jniinchi.JniInchiAtom var19 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var19.setImplicitProtium(1);
    double var22 = var19.getY();
    net.sf.jniinchi.INCHI_RADICAL var23 = var19.getRadical();
    var4.setRadical(var23);
    var4.setIsotopicMassShift((-1));
    net.sf.jniinchi.JniInchiAtom var31 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var32 = var31.getCharge();
    var31.setImplicitTritium(10);
    var31.setImplicitTritium(1);
    net.sf.jniinchi.INCHI_RADICAL var37 = var31.getRadical();
    net.sf.jniinchi.INCHI_RADICAL var38 = var31.getRadical();
    var4.setRadical(var38);
    int var40 = var4.getIsotopicMass();
    var4.setImplicitProtium(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 9999);

  }

  public void test233() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test233");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitTritium(10);
    double var8 = var4.getX();
    var4.setCharge(1);
    var4.setImplicitDeuterium(100);
    int var13 = var4.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var18 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var19 = var18.getCharge();
    var18.setImplicitTritium(10);
    double var22 = var18.getX();
    var18.setCharge(1);
    var18.setImplicitDeuterium(100);
    int var27 = var18.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var29 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var30 = var29.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var38 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var39 = var38.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var40 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var38);
    net.sf.jniinchi.JniInchiAtom[] var41 = new net.sf.jniinchi.JniInchiAtom[] { };
    var40.addAtoms(var41);
    boolean var43 = var29.equals((java.lang.Object)var41);
    net.sf.jniinchi.JniInchiBond var44 = new net.sf.jniinchi.JniInchiBond(var4, var18, var29);
    java.lang.String var45 = var44.getDebugString();
    net.sf.jniinchi.JniInchiAtom var50 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var51 = var50.getCharge();
    var50.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var58 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var59 = var58.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var61 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var62 = var61.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var64 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var65 = new net.sf.jniinchi.JniInchiBond(var50, var58, var61, var64);
    net.sf.jniinchi.INCHI_BOND_STEREO var66 = var65.getBondStereo();
    var44.setStereoDefinition(var66);
    net.sf.jniinchi.JniInchiAtom var68 = var44.getOriginAtom();
    net.sf.jniinchi.INCHI_BOND_STEREO var69 = var44.getBondStereo();
    net.sf.jniinchi.INCHI_BOND_TYPE var70 = var44.getBondType();
    net.sf.jniinchi.INCHI_BOND_STEREO var71 = var44.getBondStereo();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var45.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test234() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test234");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput(2, "InChI_Output: EOF/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/SINGLE_1UP/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/NONE", "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", "net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException", "InChI_Output: EOF/hi!///");

  }

  public void test235() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test235");


    net.sf.jniinchi.JniInchiInput var0 = new net.sf.jniinchi.JniInchiInput();
    net.sf.jniinchi.JniInchiOutputStructure var8 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var9 = var8.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var10 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var8);
    var0.setStructure((net.sf.jniinchi.JniInchiStructure)var8);
    net.sf.jniinchi.JniInchiAtom var16 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var16.setImplicitProtium(1);
    int var19 = var16.getImplicitDeuterium();
    int var20 = var16.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var22 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var27 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var28 = var27.getCharge();
    var27.setImplicitTritium(10);
    double var31 = var27.getX();
    var27.setCharge(1);
    int var34 = var27.getIsotopicMass();
    int var35 = var27.getCharge();
    net.sf.jniinchi.JniInchiAtom var40 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var41 = var40.getCharge();
    var40.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var45 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var46 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var16, var22, var27, var40, var45);
    net.sf.jniinchi.INCHI_PARITY var48 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    var46.setDisconnectedParity(var48);
    net.sf.jniinchi.INCHI_PARITY var50 = var46.getParity();
    net.sf.jniinchi.INCHI_PARITY var51 = var46.getDisconnectedParity();
    java.lang.String var52 = var46.getDebugString();
    net.sf.jniinchi.JniInchiStereo0D var53 = var8.addStereo0D(var46);
    net.sf.jniinchi.JniInchiAtom[] var54 = var46.getNeighbors();
    net.sf.jniinchi.INCHI_PARITY var55 = var46.getDisconnectedParity();
    java.lang.String var56 = var55.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD"+ "'", var52.equals("InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "ODD"+ "'", var56.equals("ODD"));

  }

  public void test236() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test236");


    net.sf.jniinchi.JniInchiOutputStructure var8 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var8);
    java.lang.String var10 = var9.getOptions();
    net.sf.jniinchi.JniInchiInputData var13 = new net.sf.jniinchi.JniInchiInputData(0, var9, 0, "net.sf.jniinchi.LoadNativeLibraryException");
    java.lang.String var14 = var13.getErrorMessage();
    net.sf.jniinchi.INCHI_RET var15 = var13.getReturnValue();
    net.sf.jniinchi.INCHI_RET var16 = var13.getReturnValue();
    net.sf.jniinchi.INCHI_RET var17 = var13.getReturnValue();
    net.sf.jniinchi.JniInchiInput var18 = var13.getInput();
    net.sf.jniinchi.JniInchiAtom var23 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var24 = var23.getCharge();
    var23.setImplicitTritium(10);
    var23.setImplicitTritium(1);
    net.sf.jniinchi.INCHI_RADICAL var29 = var23.getRadical();
    var23.setIsotopicMassShift(1);
    int var32 = var23.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var37 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var38 = var37.getCharge();
    var37.setImplicitTritium(10);
    double var41 = var37.getX();
    int var42 = var37.getImplicitH();
    java.lang.String var43 = var37.getElementType();
    int var44 = var37.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var46 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var47 = var46.getDeclaringClass();
    int var48 = var46.getIndx();
    int var49 = var46.getIndx();
    net.sf.jniinchi.JniInchiBond var50 = new net.sf.jniinchi.JniInchiBond(var23, var37, var46);
    java.lang.String var51 = var50.getDebugString();
    net.sf.jniinchi.JniInchiAtom var52 = var50.getOriginAtom();
    net.sf.jniinchi.JniInchiBond var53 = var18.addBond(var50);
    net.sf.jniinchi.INCHI_BOND_TYPE var54 = var53.getBondType();
    net.sf.jniinchi.JniInchiAtom var55 = var53.getTargetAtom();
    net.sf.jniinchi.JniInchiAtom var56 = var53.getOriginAtom();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + ""+ "'", var10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "net.sf.jniinchi.LoadNativeLibraryException"+ "'", var14.equals("net.sf.jniinchi.LoadNativeLibraryException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "hi!"+ "'", var43.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var51.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test237() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test237");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput((-1), "hi!", "", "", "");
    java.lang.String var6 = var5.getAuxInfo();
    net.sf.jniinchi.INCHI_RET var7 = var5.getReturnStatus();
    net.sf.jniinchi.JniInchiOutput var12 = new net.sf.jniinchi.JniInchiOutput(var7, "OK", "", "InChI_Output: WARNING///hi!/hi!", "hi!");
    int var13 = var7.getIndx();
    net.sf.jniinchi.JniInchiOutputStructure var14 = new net.sf.jniinchi.JniInchiOutputStructure(var7);
    int var15 = var14.getNumAtoms();
    java.lang.String var16 = var14.getLog();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test238() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test238");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput(10010, "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:-1 T:0 // Radical: NONE", "InChI_Output: EOF/net.sf.jniinchi.LoadNativeLibraryException: /InChI_Output: null/InChI_Output: WARNING///hi!/hi!/InChI_Output: WARNING///hi!/hi!//hi!/InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:1 // Radical: NONE/InChI_Output: null/InChI_Output: WARNING///hi!/hi!/InChI_Output: WARNING///hi!/hi!//hi!", "InChI Atom: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi! [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE");
    java.lang.String var6 = var5.getLog();
    java.lang.String var7 = var5.getAuxInfo();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "InChI Atom: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi! [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE"+ "'", var6.equals("InChI Atom: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi! [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:-1 T:0 // Radical: NONE"+ "'", var7.equals("InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:-1 T:0 // Radical: NONE"));

  }

  public void test239() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test239");


    net.sf.jniinchi.INCHI_KEY var1 = net.sf.jniinchi.INCHI_KEY.getValue(0);
    net.sf.jniinchi.JniInchiOutputKey var3 = new net.sf.jniinchi.JniInchiOutputKey(var1, "InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiAtom var8 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var9 = var8.getCharge();
    var8.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var16 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var17 = var16.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var19 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var20 = var19.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var22 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var23 = new net.sf.jniinchi.JniInchiBond(var8, var16, var19, var22);
    boolean var24 = var1.equals((java.lang.Object)var23);
    int var25 = var1.getIndx();
    net.sf.jniinchi.JniInchiOutputKey var27 = new net.sf.jniinchi.JniInchiOutputKey(var1, "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.INCHI_KEY var28 = var27.getReturnStatus();
    net.sf.jniinchi.JniInchiOutputKey var30 = new net.sf.jniinchi.JniInchiOutputKey(var28, "net.sf.jniinchi.JniInchiException: InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:10001 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE");
    java.lang.String var31 = var28.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "OK"+ "'", var31.equals("OK"));

  }

  public void test240() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test240");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    net.sf.jniinchi.JniInchiAtom[] var10 = new net.sf.jniinchi.JniInchiAtom[] { };
    var9.addAtoms(var10);
    net.sf.jniinchi.JniInchiStructure var12 = new net.sf.jniinchi.JniInchiStructure();
    net.sf.jniinchi.JniInchiOutputStructure var20 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var21 = var20.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var22 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var20);
    net.sf.jniinchi.JniInchiAtom[] var23 = new net.sf.jniinchi.JniInchiAtom[] { };
    var22.addAtoms(var23);
    var12.addAtoms(var23);
    var9.addAtoms(var23);
    java.lang.String var27 = var9.getOptions();
    int var28 = var9.getNumBonds();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + ""+ "'", var27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);

  }

  public void test241() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test241");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitTritium(10);
    double var8 = var4.getX();
    var4.setCharge(1);
    var4.setImplicitDeuterium(100);
    int var13 = var4.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var18 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var19 = var18.getCharge();
    var18.setImplicitTritium(10);
    double var22 = var18.getX();
    var18.setCharge(1);
    var18.setImplicitDeuterium(100);
    int var27 = var18.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var29 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var30 = var29.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var38 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var39 = var38.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var40 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var38);
    net.sf.jniinchi.JniInchiAtom[] var41 = new net.sf.jniinchi.JniInchiAtom[] { };
    var40.addAtoms(var41);
    boolean var43 = var29.equals((java.lang.Object)var41);
    net.sf.jniinchi.JniInchiBond var44 = new net.sf.jniinchi.JniInchiBond(var4, var18, var29);
    net.sf.jniinchi.JniInchiAtom var45 = var44.getOriginAtom();
    var45.setImplicitProtium(0);
    int var48 = var45.getCharge();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1);

  }

  public void test242() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test242");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_BOND_STEREO var1 = net.sf.jniinchi.INCHI_BOND_STEREO.valueOf("InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test243() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test243");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_BOND_TYPE var1 = net.sf.jniinchi.INCHI_BOND_TYPE.valueOf("InChI Atom: hi! [1.0,10.0,100.0] Charge:1 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:10 // Radical: NONE");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test244() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test244");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_KEY_STATUS var1 = net.sf.jniinchi.JniInchiWrapper.checkInchiKey("net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");
      fail("Expected exception of type net.sf.jniinchi.LoadNativeLibraryException");
    } catch (net.sf.jniinchi.LoadNativeLibraryException e) {
      // Expected exception.
    }

  }

  public void test245() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test245");


    net.sf.jniinchi.JniInchiOutput var6 = new net.sf.jniinchi.JniInchiOutput((-1), "hi!", "", "", "");
    net.sf.jniinchi.INCHI_RET var7 = var6.getReturnStatus();
    int var8 = var7.getIndx();
    net.sf.jniinchi.JniInchiOutput var13 = new net.sf.jniinchi.JniInchiOutput(var7, "", "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", "net.sf.jniinchi.LoadNativeLibraryException", "net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiOutputStructure var21 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var22 = var21.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var23 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var21);
    java.lang.String var24 = var23.getOptions();
    net.sf.jniinchi.JniInchiInput var25 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var23);
    net.sf.jniinchi.INCHI_KEY var27 = net.sf.jniinchi.INCHI_KEY.getValue(0);
    net.sf.jniinchi.JniInchiOutputKey var29 = new net.sf.jniinchi.JniInchiOutputKey(var27, "InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiAtom var34 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var35 = var34.getCharge();
    var34.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var42 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var43 = var42.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var45 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var46 = var45.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var48 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var49 = new net.sf.jniinchi.JniInchiBond(var34, var42, var45, var48);
    boolean var50 = var27.equals((java.lang.Object)var49);
    net.sf.jniinchi.JniInchiAtom var51 = var49.getOriginAtom();
    net.sf.jniinchi.JniInchiBond var52 = var23.addBond(var49);
    boolean var53 = var7.equals((java.lang.Object)var23);
    net.sf.jniinchi.JniInchiInputData var56 = new net.sf.jniinchi.JniInchiInputData(100, var23, 9999, "InChI Atom: hi! [1.0,10.0,100.0] Charge:1 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:10 // Radical: NONE");
    net.sf.jniinchi.JniInchiInput var57 = var56.getInput();
    java.lang.String var58 = var56.getErrorMessage();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + ""+ "'", var24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "InChI Atom: hi! [1.0,10.0,100.0] Charge:1 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:10 // Radical: NONE"+ "'", var58.equals("InChI Atom: hi! [1.0,10.0,100.0] Charge:1 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:10 // Radical: NONE"));

  }

  public void test246() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test246");


    net.sf.jniinchi.JniInchiInput var0 = new net.sf.jniinchi.JniInchiInput();
    net.sf.jniinchi.JniInchiOutputStructure var8 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var9 = var8.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var10 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var8);
    var0.setStructure((net.sf.jniinchi.JniInchiStructure)var8);
    net.sf.jniinchi.JniInchiAtom var16 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var17 = var16.getCharge();
    var16.setImplicitTritium(10);
    double var20 = var16.getX();
    var16.setCharge(1);
    var16.setImplicitDeuterium(100);
    int var25 = var16.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var30 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var31 = var30.getCharge();
    var30.setImplicitTritium(10);
    double var34 = var30.getX();
    var30.setCharge(1);
    var30.setImplicitDeuterium(100);
    int var39 = var30.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var41 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var42 = var41.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var50 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var51 = var50.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var52 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var50);
    net.sf.jniinchi.JniInchiAtom[] var53 = new net.sf.jniinchi.JniInchiAtom[] { };
    var52.addAtoms(var53);
    boolean var55 = var41.equals((java.lang.Object)var53);
    net.sf.jniinchi.JniInchiBond var56 = new net.sf.jniinchi.JniInchiBond(var16, var30, var41);
    java.lang.String var57 = var56.getDebugString();
    net.sf.jniinchi.JniInchiAtom var62 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var63 = var62.getCharge();
    var62.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var70 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var71 = var70.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var73 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var74 = var73.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var76 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var77 = new net.sf.jniinchi.JniInchiBond(var62, var70, var73, var76);
    net.sf.jniinchi.INCHI_BOND_STEREO var78 = var77.getBondStereo();
    var56.setStereoDefinition(var78);
    net.sf.jniinchi.JniInchiAtom var80 = var56.getTargetAtom();
    net.sf.jniinchi.JniInchiBond var81 = var8.addBond(var56);
    net.sf.jniinchi.JniInchiAtom var82 = var56.getOriginAtom();
    net.sf.jniinchi.INCHI_BOND_STEREO var83 = var56.getBondStereo();
    net.sf.jniinchi.INCHI_BOND_TYPE var84 = var56.getBondType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var57.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test247() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test247");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.INCHI_KEY var9 = net.sf.jniinchi.INCHI_KEY.getValue(0);
    net.sf.jniinchi.JniInchiOutputKey var11 = new net.sf.jniinchi.JniInchiOutputKey(var9, "InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiAtom var16 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var17 = var16.getCharge();
    var16.setImplicitTritium(10);
    double var20 = var16.getX();
    var16.setCharge(1);
    var16.setImplicitDeuterium(100);
    int var25 = var16.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var30 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var31 = var30.getCharge();
    var30.setImplicitTritium(10);
    double var34 = var30.getX();
    var30.setCharge(1);
    var30.setImplicitDeuterium(100);
    int var39 = var30.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var41 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var42 = var41.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var50 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var51 = var50.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var52 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var50);
    net.sf.jniinchi.JniInchiAtom[] var53 = new net.sf.jniinchi.JniInchiAtom[] { };
    var52.addAtoms(var53);
    boolean var55 = var41.equals((java.lang.Object)var53);
    net.sf.jniinchi.JniInchiBond var56 = new net.sf.jniinchi.JniInchiBond(var16, var30, var41);
    java.lang.String var57 = var56.getDebugString();
    boolean var58 = var9.equals((java.lang.Object)var56);
    net.sf.jniinchi.INCHI_BOND_TYPE var59 = var56.getBondType();
    net.sf.jniinchi.JniInchiAtom var60 = var56.getTargetAtom();
    net.sf.jniinchi.JniInchiAtom var61 = var56.getOriginAtom();
    net.sf.jniinchi.INCHI_RADICAL var62 = var61.getRadical();
    net.sf.jniinchi.JniInchiAtom var63 = var7.addAtom(var61);
    net.sf.jniinchi.JniInchiOutput var69 = new net.sf.jniinchi.JniInchiOutput((-1), "hi!", "", "", "");
    net.sf.jniinchi.INCHI_RET var70 = var69.getReturnStatus();
    net.sf.jniinchi.JniInchiOutputStructure var71 = new net.sf.jniinchi.JniInchiOutputStructure(var70);
    net.sf.jniinchi.JniInchiOutputStructure var72 = new net.sf.jniinchi.JniInchiOutputStructure(var70);
    net.sf.jniinchi.INCHI_RET var73 = var72.getReturnStatus();
    long[][] var74 = var72.getWarningFlags();
    int var75 = var72.getNumBonds();
    net.sf.jniinchi.JniInchiOutputStructure var83 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var84 = var83.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var85 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var83);
    net.sf.jniinchi.JniInchiBond[] var86 = new net.sf.jniinchi.JniInchiBond[] { };
    var85.addBonds(var86);
    var72.addBonds(var86);
    var7.addBonds(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var57.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test248() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test248");


    net.sf.jniinchi.JniInchiInputInchi var1 = new net.sf.jniinchi.JniInchiInputInchi("NONE");
    java.lang.String var2 = var1.getOptions();
    java.lang.String var3 = var1.getOptions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));

  }

  public void test249() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test249");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(100.0d, 0.0d, 100.0d, "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE");
    var4.setCharge(0);
    var4.setImplicitH(2);
    var4.setImplicitProtium(2);

  }

  public void test250() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test250");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.JniInchiStructure var9 = new net.sf.jniinchi.JniInchiStructure();
    net.sf.jniinchi.JniInchiOutputStructure var17 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var18 = var17.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var19 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var17);
    net.sf.jniinchi.JniInchiAtom[] var20 = new net.sf.jniinchi.JniInchiAtom[] { };
    var19.addAtoms(var20);
    var9.addAtoms(var20);
    var7.setStructure(var9);
    net.sf.jniinchi.JniInchiInput var24 = new net.sf.jniinchi.JniInchiInput(var9);
    int var25 = var9.getNumAtoms();
    net.sf.jniinchi.JniInchiOutputStructure var33 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var34 = var33.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var35 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var33);
    java.lang.String var36 = var33.getLog();
    net.sf.jniinchi.JniInchiAtom var41 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var41.setImplicitProtium(1);
    int var44 = var41.getImplicitDeuterium();
    int var45 = var41.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var47 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var52 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var53 = var52.getCharge();
    var52.setImplicitTritium(10);
    double var56 = var52.getX();
    var52.setCharge(1);
    int var59 = var52.getIsotopicMass();
    int var60 = var52.getCharge();
    net.sf.jniinchi.JniInchiAtom var65 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var66 = var65.getCharge();
    var65.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var70 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var71 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var41, var47, var52, var65, var70);
    net.sf.jniinchi.JniInchiStereo0D var72 = var33.addStereo0D(var71);
    net.sf.jniinchi.INCHI_PARITY var73 = var71.getDisconnectedParity();
    net.sf.jniinchi.JniInchiAtom var75 = var71.getNeighbor(0);
    net.sf.jniinchi.INCHI_PARITY var76 = var71.getParity();
    net.sf.jniinchi.INCHI_PARITY var77 = var71.getParity();
    var71.debug();
    net.sf.jniinchi.JniInchiAtom[] var79 = var71.getNeighbors();
    net.sf.jniinchi.JniInchiAtom[] var80 = var71.getNeighbors();
    net.sf.jniinchi.JniInchiAtom[] var81 = var71.getNeighbors();
    var9.addAtoms(var81);
    net.sf.jniinchi.JniInchiInput var83 = new net.sf.jniinchi.JniInchiInput(var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiOutput var84 = net.sf.jniinchi.JniInchiWrapper.getInchi(var83);
      fail("Expected exception of type net.sf.jniinchi.LoadNativeLibraryException");
    } catch (net.sf.jniinchi.LoadNativeLibraryException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "hi!"+ "'", var36.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test251() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test251");


    net.sf.jniinchi.INCHI_KEY_STATUS var1 = net.sf.jniinchi.INCHI_KEY_STATUS.valueOf("INVALID_VERSION");
    net.sf.jniinchi.LoadNativeLibraryException var3 = new net.sf.jniinchi.LoadNativeLibraryException("net.sf.jniinchi.LoadNativeLibraryException: OK");
    net.sf.jniinchi.JniInchiException var5 = new net.sf.jniinchi.JniInchiException("InChI_Output: WARNING///hi!/hi!");
    java.lang.String var6 = var5.toString();
    net.sf.jniinchi.JniInchiException var7 = new net.sf.jniinchi.JniInchiException((java.lang.Throwable)var5);
    var3.addSuppressed((java.lang.Throwable)var5);
    boolean var9 = var1.equals((java.lang.Object)var5);
    int var10 = var1.getIndx();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var6.equals("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 3);

  }

  public void test252() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test252");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var8 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    net.sf.jniinchi.JniInchiAtom var13 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var13.setIsotopicMassShift(1);
    int var16 = var13.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var17 = var7.addAtom(var13);
    double var18 = var13.getZ();
    double var19 = var13.getX();
    var13.setIsotopicMass(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 100.0d);

  }

  public void test253() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test253");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_KEY var1 = net.sf.jniinchi.INCHI_KEY.valueOf("InChI Atom: hi! [1.0,10.0,100.0] Charge:1 // Iso Mass:0 // Implicit H:-1 P:10 D:0 T:10 // Radical: NONE");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test254() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test254");


    net.sf.jniinchi.INCHI_KEY var1 = net.sf.jniinchi.INCHI_KEY.getValue(0);
    net.sf.jniinchi.JniInchiOutputKey var3 = new net.sf.jniinchi.JniInchiOutputKey(var1, "InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiAtom var8 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var9 = var8.getCharge();
    var8.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var16 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var17 = var16.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var19 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var20 = var19.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var22 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var23 = new net.sf.jniinchi.JniInchiBond(var8, var16, var19, var22);
    boolean var24 = var1.equals((java.lang.Object)var23);
    int var25 = var1.getIndx();
    net.sf.jniinchi.JniInchiOutputKey var27 = new net.sf.jniinchi.JniInchiOutputKey(var1, "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiOutputKey var29 = new net.sf.jniinchi.JniInchiOutputKey(var1, "InChI_Output: EOF/InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP/InChI_Output: EOF/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/SINGLE_1UP/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/NONE/InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE/InChI_Output: EOF/hi!///");
    net.sf.jniinchi.INCHI_KEY var30 = var29.getReturnStatus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test255() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test255");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var4.setImplicitProtium(1);
    double var7 = var4.getY();
    var4.setImplicitProtium(0);
    int var10 = var4.getIsotopicMass();
    var4.setCharge(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);

  }

  public void test256() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test256");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_STATUS var2 = net.sf.jniinchi.JniInchiWrapper.checkInchi("net.sf.jniinchi.JniInchiException: InChI Stereo0D: - [,hi!,hi!,NONE] Type::DOUBLEBOND // Parity:NONE", false);
      fail("Expected exception of type net.sf.jniinchi.LoadNativeLibraryException");
    } catch (net.sf.jniinchi.LoadNativeLibraryException e) {
      // Expected exception.
    }

  }

  public void test257() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test257");


    net.sf.jniinchi.INCHI_KEY_STATUS var1 = net.sf.jniinchi.INCHI_KEY_STATUS.getValue(10000);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test258() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test258");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_RADICAL var1 = net.sf.jniinchi.INCHI_RADICAL.valueOf("InChI_Output: WARNING/SINGLE_1UP/InChI_Output: EOF/SINGLE_1UP/net.sf.jniinchi.LoadNativeLibraryException: /hi!/net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE/InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test259() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test259");


    net.sf.jniinchi.INCHI_RET var1 = net.sf.jniinchi.INCHI_RET.getValue(3);
    net.sf.jniinchi.JniInchiOutputStructure var2 = new net.sf.jniinchi.JniInchiOutputStructure(var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiAtom var4 = var2.getAtom(4);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test260() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test260");


    net.sf.jniinchi.JniInchiException var1 = new net.sf.jniinchi.JniInchiException("InChI_Output: WARNING///hi!/hi!");
    java.lang.String var2 = var1.toString();
    net.sf.jniinchi.JniInchiException var4 = new net.sf.jniinchi.JniInchiException("InChI_Output: WARNING///hi!/hi!");
    java.lang.String var5 = var4.toString();
    net.sf.jniinchi.LoadNativeLibraryException var6 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var4);
    var1.addSuppressed((java.lang.Throwable)var4);
    java.lang.Throwable[] var8 = var1.getSuppressed();
    net.sf.jniinchi.LoadNativeLibraryException var10 = new net.sf.jniinchi.LoadNativeLibraryException("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiException var11 = new net.sf.jniinchi.JniInchiException((java.lang.Throwable)var10);
    java.lang.String var12 = var11.toString();
    net.sf.jniinchi.LoadNativeLibraryException var13 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var11);
    var1.addSuppressed((java.lang.Throwable)var13);
    java.lang.Throwable[] var15 = var13.getSuppressed();
    java.lang.String var16 = var13.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var2.equals("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var5.equals("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var12.equals("net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var16.equals("net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));

  }

  public void test261() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test261");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE", "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", 10L, (-1L), (-1L), 1L);
    int var8 = var7.getNumAtoms();
    int var9 = var7.getNumStereo0D();
    net.sf.jniinchi.JniInchiAtom var11 = new net.sf.jniinchi.JniInchiAtom("hi!");
    int var12 = var11.getImplicitProtium();
    var11.debug();
    net.sf.jniinchi.JniInchiAtom var14 = var7.addAtom(var11);
    net.sf.jniinchi.JniInchiAtom var19 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var20 = var19.getCharge();
    var19.setImplicitTritium(10);
    var19.setImplicitTritium(1);
    net.sf.jniinchi.INCHI_RADICAL var25 = var19.getRadical();
    net.sf.jniinchi.INCHI_RADICAL var26 = var19.getRadical();
    var19.setImplicitDeuterium(0);
    int var29 = var19.getImplicitTritium();
    net.sf.jniinchi.JniInchiAtom var34 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var34.setImplicitProtium(1);
    double var37 = var34.getY();
    net.sf.jniinchi.INCHI_RADICAL var38 = var34.getRadical();
    var19.setRadical(var38);
    int var40 = var38.getIndx();
    var14.setRadical(var38);
    int var42 = var14.getImplicitTritium();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);

  }

  public void test262() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test262");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.INCHI_KEY var10 = net.sf.jniinchi.INCHI_KEY.getValue(0);
    net.sf.jniinchi.JniInchiOutputKey var12 = new net.sf.jniinchi.JniInchiOutputKey(var10, "InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiAtom var17 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var18 = var17.getCharge();
    var17.setImplicitTritium(10);
    double var21 = var17.getX();
    var17.setCharge(1);
    var17.setImplicitDeuterium(100);
    int var26 = var17.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var31 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var32 = var31.getCharge();
    var31.setImplicitTritium(10);
    double var35 = var31.getX();
    var31.setCharge(1);
    var31.setImplicitDeuterium(100);
    int var40 = var31.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var42 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var43 = var42.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var51 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var52 = var51.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var53 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var51);
    net.sf.jniinchi.JniInchiAtom[] var54 = new net.sf.jniinchi.JniInchiAtom[] { };
    var53.addAtoms(var54);
    boolean var56 = var42.equals((java.lang.Object)var54);
    net.sf.jniinchi.JniInchiBond var57 = new net.sf.jniinchi.JniInchiBond(var17, var31, var42);
    java.lang.String var58 = var57.getDebugString();
    boolean var59 = var10.equals((java.lang.Object)var57);
    net.sf.jniinchi.INCHI_BOND_TYPE var60 = var57.getBondType();
    net.sf.jniinchi.JniInchiAtom var61 = var57.getOriginAtom();
    net.sf.jniinchi.JniInchiBond var62 = var7.addBond(var57);
    int var63 = var7.getNumAtoms();
    net.sf.jniinchi.INCHI_RET var64 = var7.getReturnStatus();
    net.sf.jniinchi.JniInchiOutputStructure var73 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var74 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var73);
    java.lang.String var75 = var74.getOptions();
    net.sf.jniinchi.JniInchiInputData var78 = new net.sf.jniinchi.JniInchiInputData(0, var74, 0, "net.sf.jniinchi.LoadNativeLibraryException");
    java.lang.String var79 = var78.getErrorMessage();
    net.sf.jniinchi.INCHI_RET var80 = var78.getReturnValue();
    net.sf.jniinchi.JniInchiOutput var85 = new net.sf.jniinchi.JniInchiOutput(var80, "InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD", "net.sf.jniinchi.JniInchiException: OK", "InChI Atom: hi! [1.0,10.0,100.0] Charge:1 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:10 // Radical: NONE", "InChI_Output: EOF/hi!///");
    net.sf.jniinchi.JniInchiOutputStructure var86 = new net.sf.jniinchi.JniInchiOutputStructure(var80);
    var7.setStructure((net.sf.jniinchi.JniInchiStructure)var86);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiInput var89 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7, "InChI_Output: EOF/InChI Atom: hi! [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE/OK/InChI Atom: hi! [100.0,100.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE/net.sf.jniinchi.JniInchiException: OK");
      fail("Expected exception of type net.sf.jniinchi.JniInchiException");
    } catch (net.sf.jniinchi.JniInchiException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var58.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + ""+ "'", var75.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "net.sf.jniinchi.LoadNativeLibraryException"+ "'", var79.equals("net.sf.jniinchi.LoadNativeLibraryException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test263() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test263");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiOutputKey var1 = net.sf.jniinchi.JniInchiWrapper.getInchiKey("InChI Stereo0D:  [InChI_Output: WARNING///hi!/hi!,hi!,InChI_Output: WARNING///hi!/hi!,hi!] Type::NONE // Parity:NONE");
      fail("Expected exception of type net.sf.jniinchi.LoadNativeLibraryException");
    } catch (net.sf.jniinchi.LoadNativeLibraryException e) {
      // Expected exception.
    }

  }

  public void test264() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test264");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    java.lang.String var9 = var7.getLog();
    net.sf.jniinchi.JniInchiInput var10 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiBond var12 = var10.getBond(3);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));

  }

  public void test265() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test265");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var8 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    net.sf.jniinchi.JniInchiOutputStructure var17 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var18 = var17.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var19 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var17);
    java.lang.String var20 = var19.getOptions();
    net.sf.jniinchi.JniInchiInput var21 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var19);
    net.sf.jniinchi.JniInchiAtom var26 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var27 = var26.getCharge();
    var26.setImplicitTritium(10);
    double var30 = var26.getX();
    var26.setCharge(1);
    var26.setImplicitDeuterium(100);
    int var35 = var26.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var40 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var41 = var40.getCharge();
    var40.setImplicitTritium(10);
    double var44 = var40.getX();
    var40.setCharge(1);
    var40.setImplicitDeuterium(100);
    int var49 = var40.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var51 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var52 = var51.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var60 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var61 = var60.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var62 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var60);
    net.sf.jniinchi.JniInchiAtom[] var63 = new net.sf.jniinchi.JniInchiAtom[] { };
    var62.addAtoms(var63);
    boolean var65 = var51.equals((java.lang.Object)var63);
    net.sf.jniinchi.JniInchiBond var66 = new net.sf.jniinchi.JniInchiBond(var26, var40, var51);
    java.lang.String var67 = var66.getDebugString();
    net.sf.jniinchi.JniInchiAtom var72 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var73 = var72.getCharge();
    var72.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var80 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var81 = var80.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var83 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var84 = var83.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var86 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var87 = new net.sf.jniinchi.JniInchiBond(var72, var80, var83, var86);
    net.sf.jniinchi.INCHI_BOND_STEREO var88 = var87.getBondStereo();
    var66.setStereoDefinition(var88);
    net.sf.jniinchi.JniInchiBond[] var90 = new net.sf.jniinchi.JniInchiBond[] { var66};
    var19.addBonds(var90);
    net.sf.jniinchi.JniInchiInputData var94 = new net.sf.jniinchi.JniInchiInputData(1, var19, 10, "hi!");
    var7.setStructure((net.sf.jniinchi.JniInchiStructure)var19);
    int var96 = var7.getNumBonds();
    long[][] var97 = var7.getWarningFlags();
    java.lang.String var98 = var7.getLog();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + ""+ "'", var20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var67.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var98 + "' != '" + "hi!"+ "'", var98.equals("hi!"));

  }

  public void test266() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test266");


    net.sf.jniinchi.JniInchiInput var1 = new net.sf.jniinchi.JniInchiInput();
    net.sf.jniinchi.JniInchiOutputStructure var9 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var10 = var9.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var11 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var9);
    var1.setStructure((net.sf.jniinchi.JniInchiStructure)var9);
    int var13 = var1.getNumAtoms();
    net.sf.jniinchi.JniInchiInputData var16 = new net.sf.jniinchi.JniInchiInputData(0, var1, 3, "net.sf.jniinchi.LoadNativeLibraryException");
    net.sf.jniinchi.JniInchiInput var17 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiOutput var18 = net.sf.jniinchi.JniInchiWrapper.getInchi(var1);
      fail("Expected exception of type net.sf.jniinchi.LoadNativeLibraryException");
    } catch (net.sf.jniinchi.LoadNativeLibraryException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);

  }

  public void test267() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test267");


    net.sf.jniinchi.JniInchiAtom var1 = new net.sf.jniinchi.JniInchiAtom("InChI_Output: null/SINGLE_1UP/InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP/InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE/InChI_Output: null/InChI_Output: WARNING///hi!/hi!/InChI_Output: WARNING///hi!/hi!//hi!");
    double var2 = var1.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0.0d);

  }

  public void test268() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test268");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var8 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput();
    var7.setStructure((net.sf.jniinchi.JniInchiStructure)var9);
    net.sf.jniinchi.JniInchiOutput var16 = new net.sf.jniinchi.JniInchiOutput((-1), "hi!", "", "", "");
    net.sf.jniinchi.INCHI_RET var17 = var16.getReturnStatus();
    net.sf.jniinchi.JniInchiOutputStructure var18 = new net.sf.jniinchi.JniInchiOutputStructure(var17);
    net.sf.jniinchi.JniInchiOutputStructure var19 = new net.sf.jniinchi.JniInchiOutputStructure(var17);
    net.sf.jniinchi.INCHI_RET var20 = var19.getReturnStatus();
    int var21 = var19.getNumStereo0D();
    var9.setStructure((net.sf.jniinchi.JniInchiStructure)var19);
    java.lang.String var23 = var9.getOptions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + ""+ "'", var23.equals(""));

  }

  public void test269() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test269");


    net.sf.jniinchi.JniInchiAtom var1 = new net.sf.jniinchi.JniInchiAtom("hi!");
    var1.setCharge(0);
    net.sf.jniinchi.JniInchiAtom var8 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var8.setImplicitProtium(1);
    int var11 = var8.getImplicitDeuterium();
    int var12 = var8.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var14 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var19 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var20 = var19.getCharge();
    var19.setImplicitTritium(10);
    double var23 = var19.getX();
    var19.setCharge(1);
    int var26 = var19.getIsotopicMass();
    int var27 = var19.getCharge();
    net.sf.jniinchi.JniInchiAtom var32 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var33 = var32.getCharge();
    var32.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var37 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var38 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var8, var14, var19, var32, var37);
    net.sf.jniinchi.JniInchiAtom var43 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var44 = var43.getCharge();
    var43.setImplicitTritium(10);
    double var47 = var43.getX();
    var43.setCharge(1);
    var43.setImplicitDeuterium(100);
    int var52 = var43.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var57 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var58 = var57.getCharge();
    var57.setImplicitTritium(10);
    double var61 = var57.getX();
    var57.setCharge(1);
    var57.setImplicitDeuterium(100);
    int var66 = var57.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var68 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var69 = var68.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var77 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var78 = var77.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var79 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var77);
    net.sf.jniinchi.JniInchiAtom[] var80 = new net.sf.jniinchi.JniInchiAtom[] { };
    var79.addAtoms(var80);
    boolean var82 = var68.equals((java.lang.Object)var80);
    net.sf.jniinchi.JniInchiBond var83 = new net.sf.jniinchi.JniInchiBond(var43, var57, var68);
    net.sf.jniinchi.INCHI_BOND_TYPE var84 = var83.getBondType();
    net.sf.jniinchi.JniInchiBond var85 = new net.sf.jniinchi.JniInchiBond(var1, var32, var84);
    int var86 = var32.getImplicitH();
    int var87 = var32.getImplicitDeuterium();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);

  }

  public void test270() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test270");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput((-1), "hi!", "", "", "");
    net.sf.jniinchi.INCHI_RET var6 = var5.getReturnStatus();
    int var7 = var6.getIndx();
    net.sf.jniinchi.JniInchiOutput var12 = new net.sf.jniinchi.JniInchiOutput(var6, "NONE", "InChI_Output: EOF/SINGLE_1UP/net.sf.jniinchi.LoadNativeLibraryException: /hi!/net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", "InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD", "InChI_Output: EOF/SINGLE_1UP/net.sf.jniinchi.LoadNativeLibraryException: /hi!/net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiOutputStructure var13 = new net.sf.jniinchi.JniInchiOutputStructure(var6);
    net.sf.jniinchi.JniInchiOutputStructure var14 = new net.sf.jniinchi.JniInchiOutputStructure(var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiBond var16 = var14.getBond(10100);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1));

  }

  public void test271() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test271");


    net.sf.jniinchi.JniInchiInputInchi var1 = new net.sf.jniinchi.JniInchiInputInchi("InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:100 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE");
    java.lang.String var2 = var1.getOptions();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiOutputStructure var3 = net.sf.jniinchi.JniInchiWrapper.getStructureFromInchi(var1);
      fail("Expected exception of type net.sf.jniinchi.LoadNativeLibraryException");
    } catch (net.sf.jniinchi.LoadNativeLibraryException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));

  }

  public void test272() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test272");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    net.sf.jniinchi.JniInchiBond[] var10 = new net.sf.jniinchi.JniInchiBond[] { };
    var9.addBonds(var10);
    net.sf.jniinchi.INCHI_KEY var13 = net.sf.jniinchi.INCHI_KEY.getValue(0);
    net.sf.jniinchi.JniInchiOutputKey var15 = new net.sf.jniinchi.JniInchiOutputKey(var13, "InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiAtom var20 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var21 = var20.getCharge();
    var20.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var28 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var29 = var28.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var31 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var32 = var31.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var34 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var35 = new net.sf.jniinchi.JniInchiBond(var20, var28, var31, var34);
    boolean var36 = var13.equals((java.lang.Object)var35);
    java.lang.String var37 = var35.getDebugString();
    var35.debug();
    net.sf.jniinchi.JniInchiBond var39 = var9.addBond(var35);
    java.lang.String var40 = var35.getDebugString();
    net.sf.jniinchi.INCHI_BOND_STEREO var41 = var35.getBondStereo();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP"+ "'", var37.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP"+ "'", var40.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test273() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test273");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    var4.setImplicitDeuterium(10);
    net.sf.jniinchi.JniInchiAtom var11 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var11.setIsotopicMassShift(1);
    net.sf.jniinchi.JniInchiAtom var18 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var19 = var18.getCharge();
    var18.setImplicitTritium(10);
    double var22 = var18.getX();
    int var23 = var18.getImplicitH();
    java.lang.String var24 = var18.getElementType();
    int var25 = var18.getImplicitProtium();
    int var26 = var18.getImplicitTritium();
    net.sf.jniinchi.JniInchiAtom var31 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var32 = var31.getCharge();
    var31.setImplicitProtium(1);
    var31.setImplicitDeuterium(10001);
    net.sf.jniinchi.JniInchiAtom var41 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var42 = var41.getCharge();
    var41.setImplicitTritium(10);
    double var45 = var41.getX();
    var41.setCharge(1);
    int var48 = var41.getIsotopicMass();
    net.sf.jniinchi.INCHI_PARITY var50 = net.sf.jniinchi.INCHI_PARITY.getValue(0);
    int var51 = var50.getIndx();
    int var52 = var50.getIndx();
    net.sf.jniinchi.JniInchiStereo0D var53 = net.sf.jniinchi.JniInchiStereo0D.createNewTetrahedralStereo0D(var4, var11, var18, var31, var41, var50);
    net.sf.jniinchi.INCHI_RADICAL var54 = var31.getRadical();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "hi!"+ "'", var24.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test274() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test274");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    var4.setImplicitDeuterium(10);
    var4.setIsotopicMass((-1));

  }

  public void test275() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test275");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    java.lang.String var10 = var9.getOptions();
    net.sf.jniinchi.JniInchiInput var11 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var9);
    net.sf.jniinchi.JniInchiAtom var16 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var17 = var16.getCharge();
    var16.setImplicitTritium(10);
    double var20 = var16.getX();
    var16.setCharge(1);
    var16.setImplicitDeuterium(100);
    int var25 = var16.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var30 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var31 = var30.getCharge();
    var30.setImplicitTritium(10);
    double var34 = var30.getX();
    var30.setCharge(1);
    var30.setImplicitDeuterium(100);
    int var39 = var30.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var41 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var42 = var41.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var50 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var51 = var50.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var52 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var50);
    net.sf.jniinchi.JniInchiAtom[] var53 = new net.sf.jniinchi.JniInchiAtom[] { };
    var52.addAtoms(var53);
    boolean var55 = var41.equals((java.lang.Object)var53);
    net.sf.jniinchi.JniInchiBond var56 = new net.sf.jniinchi.JniInchiBond(var16, var30, var41);
    java.lang.String var57 = var56.getDebugString();
    net.sf.jniinchi.JniInchiAtom var62 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var63 = var62.getCharge();
    var62.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var70 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var71 = var70.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var73 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var74 = var73.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var76 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var77 = new net.sf.jniinchi.JniInchiBond(var62, var70, var73, var76);
    net.sf.jniinchi.INCHI_BOND_STEREO var78 = var77.getBondStereo();
    var56.setStereoDefinition(var78);
    net.sf.jniinchi.JniInchiBond[] var80 = new net.sf.jniinchi.JniInchiBond[] { var56};
    var9.addBonds(var80);
    net.sf.jniinchi.JniInchiInput var82 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var9);
    int var83 = var9.getNumBonds();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + ""+ "'", var10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var57.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 1);

  }

  public void test276() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test276");


    net.sf.jniinchi.INCHI_KEY var1 = net.sf.jniinchi.INCHI_KEY.getValue(0);
    net.sf.jniinchi.JniInchiOutputKey var3 = new net.sf.jniinchi.JniInchiOutputKey(var1, "InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiAtom var8 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var9 = var8.getCharge();
    var8.setImplicitTritium(10);
    double var12 = var8.getX();
    var8.setCharge(1);
    var8.setImplicitDeuterium(100);
    int var17 = var8.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var22 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var23 = var22.getCharge();
    var22.setImplicitTritium(10);
    double var26 = var22.getX();
    var22.setCharge(1);
    var22.setImplicitDeuterium(100);
    int var31 = var22.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var33 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var34 = var33.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var42 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var43 = var42.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var44 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var42);
    net.sf.jniinchi.JniInchiAtom[] var45 = new net.sf.jniinchi.JniInchiAtom[] { };
    var44.addAtoms(var45);
    boolean var47 = var33.equals((java.lang.Object)var45);
    net.sf.jniinchi.JniInchiBond var48 = new net.sf.jniinchi.JniInchiBond(var8, var22, var33);
    java.lang.String var49 = var48.getDebugString();
    boolean var50 = var1.equals((java.lang.Object)var48);
    net.sf.jniinchi.INCHI_BOND_TYPE var51 = var48.getBondType();
    net.sf.jniinchi.JniInchiAtom var52 = var48.getTargetAtom();
    int var53 = var52.getIsotopicMass();
    int var54 = var52.getImplicitTritium();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var49.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 10);

  }

  public void test277() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test277");


    net.sf.jniinchi.JniInchiException var1 = new net.sf.jniinchi.JniInchiException("InChI_Output: WARNING///hi!/hi!");
    java.lang.String var2 = var1.toString();
    net.sf.jniinchi.JniInchiException var4 = new net.sf.jniinchi.JniInchiException("InChI_Output: WARNING///hi!/hi!");
    java.lang.String var5 = var4.toString();
    net.sf.jniinchi.LoadNativeLibraryException var6 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var4);
    var1.addSuppressed((java.lang.Throwable)var4);
    net.sf.jniinchi.JniInchiException var8 = new net.sf.jniinchi.JniInchiException((java.lang.Throwable)var4);
    net.sf.jniinchi.JniInchiException var9 = new net.sf.jniinchi.JniInchiException((java.lang.Throwable)var4);
    java.lang.Throwable[] var10 = var9.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var2.equals("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var5.equals("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test278() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test278");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_RADICAL var8 = var4.getRadical();
    var4.setImplicitH(5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test279() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test279");


    net.sf.jniinchi.JniInchiOutputStructure var8 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var8);
    java.lang.String var10 = var9.getOptions();
    net.sf.jniinchi.JniInchiInputData var13 = new net.sf.jniinchi.JniInchiInputData(0, var9, 0, "net.sf.jniinchi.LoadNativeLibraryException");
    java.lang.String var14 = var13.getErrorMessage();
    net.sf.jniinchi.JniInchiInput var15 = var13.getInput();
    net.sf.jniinchi.INCHI_RET var16 = var13.getReturnValue();
    net.sf.jniinchi.JniInchiInput var17 = var13.getInput();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiOutput var18 = net.sf.jniinchi.JniInchiWrapper.getInchi(var17);
      fail("Expected exception of type net.sf.jniinchi.LoadNativeLibraryException");
    } catch (net.sf.jniinchi.LoadNativeLibraryException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + ""+ "'", var10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "net.sf.jniinchi.LoadNativeLibraryException"+ "'", var14.equals("net.sf.jniinchi.LoadNativeLibraryException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test280() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test280");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput(10, "InChI_Output: WARNING///hi!/hi!", "InChI_Output: WARNING///hi!/hi!", "", "hi!");
    net.sf.jniinchi.INCHI_RET var6 = var5.getReturnStatus();
    java.lang.String var7 = var5.getLog();
    java.lang.String var8 = var5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "InChI_Output: null/InChI_Output: WARNING///hi!/hi!/InChI_Output: WARNING///hi!/hi!//hi!"+ "'", var8.equals("InChI_Output: null/InChI_Output: WARNING///hi!/hi!/InChI_Output: WARNING///hi!/hi!//hi!"));

  }

  public void test281() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test281");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput((-1), "hi!", "", "", "");
    java.lang.String var6 = var5.getAuxInfo();
    net.sf.jniinchi.INCHI_RET var7 = var5.getReturnStatus();
    net.sf.jniinchi.JniInchiOutput var12 = new net.sf.jniinchi.JniInchiOutput(var7, "OK", "", "InChI_Output: WARNING///hi!/hi!", "hi!");
    net.sf.jniinchi.JniInchiOutputStructure var13 = new net.sf.jniinchi.JniInchiOutputStructure(var7);
    java.lang.String var14 = var13.getLog();
    net.sf.jniinchi.INCHI_RET var16 = net.sf.jniinchi.INCHI_RET.getValue((-1));
    net.sf.jniinchi.JniInchiOutput var21 = new net.sf.jniinchi.JniInchiOutput(var16, "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", "InChI Atom: hi! [1.0,10.0,100.0] Charge:1 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:10 // Radical: NONE", "hi!", "");
    net.sf.jniinchi.JniInchiOutputStructure var22 = new net.sf.jniinchi.JniInchiOutputStructure(var16);
    net.sf.jniinchi.JniInchiOutputStructure var31 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var32 = var31.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var33 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var31);
    net.sf.jniinchi.JniInchiBond[] var34 = new net.sf.jniinchi.JniInchiBond[] { };
    var33.addBonds(var34);
    net.sf.jniinchi.JniInchiAtom var40 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var41 = var40.getCharge();
    var40.setImplicitTritium(10);
    double var44 = var40.getX();
    var40.setCharge(1);
    net.sf.jniinchi.JniInchiAtom var47 = var33.addAtom(var40);
    net.sf.jniinchi.JniInchiInputData var50 = new net.sf.jniinchi.JniInchiInputData(1, var33, 100, "InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP");
    net.sf.jniinchi.JniInchiInput var51 = var50.getInput();
    net.sf.jniinchi.JniInchiInput var52 = var50.getInput();
    var22.setStructure((net.sf.jniinchi.JniInchiStructure)var52);
    var13.setStructure((net.sf.jniinchi.JniInchiStructure)var52);
    net.sf.jniinchi.JniInchiInput var55 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var52);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiInput var57 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var55, "net.sf.jniinchi.JniInchiException: InChI Atom: hi! [1.0,10.0,100.0] Charge:1 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:10 // Radical: NONE");
      fail("Expected exception of type net.sf.jniinchi.JniInchiException");
    } catch (net.sf.jniinchi.JniInchiException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test282() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test282");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    java.lang.String var10 = var9.getOptions();
    net.sf.jniinchi.JniInchiInput var11 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var9);
    int var12 = var9.getNumBonds();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiOutput var13 = net.sf.jniinchi.JniInchiWrapper.getStdInchi(var9);
      fail("Expected exception of type net.sf.jniinchi.LoadNativeLibraryException");
    } catch (net.sf.jniinchi.LoadNativeLibraryException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + ""+ "'", var10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);

  }

  public void test283() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test283");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiInputData var1 = net.sf.jniinchi.JniInchiWrapper.getInputFromAuxInfo("net.sf.jniinchi.JniInchiException: InChI_Output: EOF/InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP/InChI_Output: EOF/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/SINGLE_1UP/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/NONE/InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE/InChI_Output: EOF/hi!///");
      fail("Expected exception of type net.sf.jniinchi.LoadNativeLibraryException");
    } catch (net.sf.jniinchi.LoadNativeLibraryException e) {
      // Expected exception.
    }

  }

  public void test284() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test284");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    int var9 = var7.getNumBonds();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiAtom var11 = var7.getAtom(0);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);

  }

  public void test285() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test285");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var12 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var13 = var12.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var15 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var16 = var15.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var18 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var19 = new net.sf.jniinchi.JniInchiBond(var4, var12, var15, var18);
    net.sf.jniinchi.INCHI_BOND_STEREO var20 = var19.getBondStereo();
    net.sf.jniinchi.JniInchiAtom var25 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var26 = var25.getCharge();
    var25.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var33 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var34 = var33.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var36 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var37 = var36.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var39 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var40 = new net.sf.jniinchi.JniInchiBond(var25, var33, var36, var39);
    net.sf.jniinchi.INCHI_BOND_STEREO var41 = var40.getBondStereo();
    net.sf.jniinchi.JniInchiAtom var42 = var40.getTargetAtom();
    net.sf.jniinchi.INCHI_BOND_STEREO var44 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    var40.setStereoDefinition(var44);
    var19.setStereoDefinition(var44);
    var19.debug();
    net.sf.jniinchi.JniInchiAtom var48 = var19.getOriginAtom();
    net.sf.jniinchi.JniInchiAtom var49 = var19.getOriginAtom();
    net.sf.jniinchi.JniInchiAtom var54 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var54.setImplicitProtium(1);
    double var57 = var54.getY();
    var54.setImplicitProtium(0);
    net.sf.jniinchi.INCHI_RADICAL var60 = var54.getRadical();
    net.sf.jniinchi.INCHI_RADICAL var61 = var54.getRadical();
    int var62 = var61.getIndx();
    net.sf.jniinchi.LoadNativeLibraryException var64 = new net.sf.jniinchi.LoadNativeLibraryException("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiException var65 = new net.sf.jniinchi.JniInchiException((java.lang.Throwable)var64);
    java.lang.String var66 = var65.toString();
    java.lang.Throwable[] var67 = var65.getSuppressed();
    net.sf.jniinchi.LoadNativeLibraryException var69 = new net.sf.jniinchi.LoadNativeLibraryException("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiException var70 = new net.sf.jniinchi.JniInchiException((java.lang.Throwable)var69);
    net.sf.jniinchi.JniInchiException var71 = new net.sf.jniinchi.JniInchiException((java.lang.Throwable)var69);
    var65.addSuppressed((java.lang.Throwable)var69);
    java.lang.String var73 = var65.toString();
    boolean var74 = var61.equals((java.lang.Object)var73);
    var49.setRadical(var61);
    var49.setImplicitProtium(10100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var66.equals("net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var73.equals("net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);

  }

  public void test286() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test286");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiInput var1 = new net.sf.jniinchi.JniInchiInput("net.sf.jniinchi.JniInchiException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");
      fail("Expected exception of type net.sf.jniinchi.JniInchiException");
    } catch (net.sf.jniinchi.JniInchiException e) {
      // Expected exception.
    }

  }

  public void test287() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test287");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_KEY_STATUS var1 = net.sf.jniinchi.JniInchiWrapper.checkInchiKey("net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");
      fail("Expected exception of type net.sf.jniinchi.LoadNativeLibraryException");
    } catch (net.sf.jniinchi.LoadNativeLibraryException e) {
      // Expected exception.
    }

  }

  public void test288() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test288");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var4.setImplicitProtium(1);
    double var7 = var4.getY();
    var4.setImplicitProtium(0);
    var4.setIsotopicMassShift(0);
    net.sf.jniinchi.JniInchiAtom var16 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    var16.setImplicitDeuterium(10);
    net.sf.jniinchi.INCHI_RADICAL var19 = var16.getRadical();
    var4.setRadical(var19);
    int var21 = var19.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);

  }

  public void test289() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test289");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiInputData var1 = net.sf.jniinchi.JniInchiWrapper.getInputFromAuxInfo("InChI Atom: hi! [1.0,10.0,100.0] Charge:1 // Iso Mass:0 // Implicit H:100 P:100 D:0 T:10 // Radical: NONE");
      fail("Expected exception of type net.sf.jniinchi.LoadNativeLibraryException");
    } catch (net.sf.jniinchi.LoadNativeLibraryException e) {
      // Expected exception.
    }

  }

  public void test290() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test290");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    java.lang.String var10 = var7.getLog();
    net.sf.jniinchi.JniInchiAtom var15 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var15.setImplicitProtium(1);
    int var18 = var15.getImplicitDeuterium();
    int var19 = var15.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var21 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var26 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var27 = var26.getCharge();
    var26.setImplicitTritium(10);
    double var30 = var26.getX();
    var26.setCharge(1);
    int var33 = var26.getIsotopicMass();
    int var34 = var26.getCharge();
    net.sf.jniinchi.JniInchiAtom var39 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var40 = var39.getCharge();
    var39.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var44 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var45 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var15, var21, var26, var39, var44);
    net.sf.jniinchi.JniInchiStereo0D var46 = var7.addStereo0D(var45);
    net.sf.jniinchi.INCHI_PARITY var47 = var45.getDisconnectedParity();
    net.sf.jniinchi.JniInchiAtom var49 = var45.getNeighbor(0);
    net.sf.jniinchi.INCHI_PARITY var50 = var45.getParity();
    net.sf.jniinchi.INCHI_STEREOTYPE var51 = var45.getStereoType();
    net.sf.jniinchi.INCHI_STEREOTYPE var52 = var45.getStereoType();
    net.sf.jniinchi.INCHI_STEREOTYPE var53 = var45.getStereoType();
    net.sf.jniinchi.JniInchiAtom var58 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var58.setImplicitProtium(1);
    int var61 = var58.getImplicitDeuterium();
    int var62 = var58.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var64 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var69 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var70 = var69.getCharge();
    var69.setImplicitTritium(10);
    double var73 = var69.getX();
    var69.setCharge(1);
    int var76 = var69.getIsotopicMass();
    int var77 = var69.getCharge();
    net.sf.jniinchi.JniInchiAtom var82 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var83 = var82.getCharge();
    var82.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var87 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var88 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var58, var64, var69, var82, var87);
    net.sf.jniinchi.INCHI_PARITY var90 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    var88.setDisconnectedParity(var90);
    net.sf.jniinchi.INCHI_PARITY var92 = var88.getParity();
    net.sf.jniinchi.INCHI_PARITY var93 = var88.getDisconnectedParity();
    int var94 = var93.getIndx();
    int var95 = var93.getIndx();
    var45.setDisconnectedParity(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == 1);

  }

  public void test291() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test291");


    net.sf.jniinchi.JniInchiAtom var1 = new net.sf.jniinchi.JniInchiAtom("hi!");
    var1.setCharge(0);
    var1.setImplicitProtium(10);
    double var6 = var1.getZ();
    java.lang.String var7 = var1.getElementType();
    var1.setImplicitH(10100);
    double var10 = var1.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.0d);

  }

  public void test292() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test292");


    net.sf.jniinchi.JniInchiOutputStructure var8 = new net.sf.jniinchi.JniInchiOutputStructure(100, "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE", "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", 10L, (-1L), (-1L), 1L);
    int var9 = var8.getNumAtoms();
    int var10 = var8.getNumStereo0D();
    net.sf.jniinchi.JniInchiAtom var12 = new net.sf.jniinchi.JniInchiAtom("hi!");
    int var13 = var12.getImplicitProtium();
    var12.debug();
    net.sf.jniinchi.JniInchiAtom var15 = var8.addAtom(var12);
    int var16 = var8.getNumStereo0D();
    net.sf.jniinchi.JniInchiOutputStructure var25 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var26 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var25);
    net.sf.jniinchi.JniInchiInput var27 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var25);
    net.sf.jniinchi.JniInchiInputData var30 = new net.sf.jniinchi.JniInchiInputData(0, var27, 3, "NONE");
    var8.setStructure((net.sf.jniinchi.JniInchiStructure)var27);
    net.sf.jniinchi.JniInchiAtom var36 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var37 = var36.getCharge();
    var36.setImplicitTritium(10);
    double var40 = var36.getX();
    var36.setCharge(1);
    var36.setImplicitDeuterium(100);
    int var45 = var36.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var50 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var51 = var50.getCharge();
    var50.setImplicitTritium(10);
    double var54 = var50.getX();
    var50.setCharge(1);
    var50.setImplicitDeuterium(100);
    int var59 = var50.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var61 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var62 = var61.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var70 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var71 = var70.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var72 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var70);
    net.sf.jniinchi.JniInchiAtom[] var73 = new net.sf.jniinchi.JniInchiAtom[] { };
    var72.addAtoms(var73);
    boolean var75 = var61.equals((java.lang.Object)var73);
    net.sf.jniinchi.JniInchiBond var76 = new net.sf.jniinchi.JniInchiBond(var36, var50, var61);
    net.sf.jniinchi.INCHI_BOND_TYPE var77 = var76.getBondType();
    net.sf.jniinchi.INCHI_BOND_STEREO var78 = var76.getBondStereo();
    net.sf.jniinchi.JniInchiBond var79 = var27.addBond(var76);
    net.sf.jniinchi.JniInchiInputData var82 = new net.sf.jniinchi.JniInchiInputData(0, var27, 10001, "net.sf.jniinchi.LoadNativeLibraryException");
    java.lang.String var83 = var82.getErrorMessage();
    net.sf.jniinchi.JniInchiInput var84 = var82.getInput();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "net.sf.jniinchi.LoadNativeLibraryException"+ "'", var83.equals("net.sf.jniinchi.LoadNativeLibraryException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test293() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test293");


    net.sf.jniinchi.JniInchiOutputStructure var8 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var9 = var8.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var10 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var8);
    net.sf.jniinchi.JniInchiBond[] var11 = new net.sf.jniinchi.JniInchiBond[] { };
    var10.addBonds(var11);
    net.sf.jniinchi.JniInchiAtom var17 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var18 = var17.getCharge();
    var17.setImplicitTritium(10);
    double var21 = var17.getX();
    var17.setCharge(1);
    net.sf.jniinchi.JniInchiAtom var24 = var10.addAtom(var17);
    net.sf.jniinchi.JniInchiInputData var27 = new net.sf.jniinchi.JniInchiInputData(1, var10, 100, "InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP");
    net.sf.jniinchi.INCHI_RET var28 = var27.getReturnValue();
    java.lang.String var29 = var27.getErrorMessage();
    net.sf.jniinchi.JniInchiInput var30 = var27.getInput();
    int var31 = var30.getNumBonds();
    int var32 = var30.getNumBonds();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP"+ "'", var29.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);

  }

  public void test294() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test294");


    net.sf.jniinchi.JniInchiOutputStructure var8 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var9 = var8.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var10 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var8);
    net.sf.jniinchi.JniInchiBond[] var11 = new net.sf.jniinchi.JniInchiBond[] { };
    var10.addBonds(var11);
    net.sf.jniinchi.JniInchiAtom var17 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var18 = var17.getCharge();
    var17.setImplicitTritium(10);
    double var21 = var17.getX();
    var17.setCharge(1);
    net.sf.jniinchi.JniInchiAtom var24 = var10.addAtom(var17);
    net.sf.jniinchi.JniInchiInputData var27 = new net.sf.jniinchi.JniInchiInputData(1, var10, 100, "InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP");
    net.sf.jniinchi.INCHI_RET var28 = var27.getReturnValue();
    net.sf.jniinchi.JniInchiInput var29 = var27.getInput();
    net.sf.jniinchi.JniInchiInput var30 = var27.getInput();
    net.sf.jniinchi.JniInchiOutputStructure var38 = new net.sf.jniinchi.JniInchiOutputStructure(100, "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE", "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", 10L, (-1L), (-1L), 1L);
    int var39 = var38.getNumAtoms();
    int var40 = var38.getNumStereo0D();
    net.sf.jniinchi.JniInchiAtom var42 = new net.sf.jniinchi.JniInchiAtom("hi!");
    int var43 = var42.getImplicitProtium();
    var42.debug();
    net.sf.jniinchi.JniInchiAtom var45 = var38.addAtom(var42);
    long[][] var46 = var38.getWarningFlags();
    long[][] var47 = var38.getWarningFlags();
    net.sf.jniinchi.JniInchiAtom var52 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var53 = var52.getCharge();
    var52.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var60 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var61 = var60.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var63 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var64 = var63.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var66 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var67 = new net.sf.jniinchi.JniInchiBond(var52, var60, var63, var66);
    net.sf.jniinchi.INCHI_BOND_STEREO var68 = var67.getBondStereo();
    net.sf.jniinchi.JniInchiAtom var69 = var67.getTargetAtom();
    net.sf.jniinchi.INCHI_BOND_STEREO var70 = var67.getBondStereo();
    net.sf.jniinchi.INCHI_BOND_TYPE var71 = var67.getBondType();
    net.sf.jniinchi.JniInchiBond var72 = var38.addBond(var67);
    net.sf.jniinchi.JniInchiAtom var77 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var78 = var77.getCharge();
    var77.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var85 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var86 = var85.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var88 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var89 = var88.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var91 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var92 = new net.sf.jniinchi.JniInchiBond(var77, var85, var88, var91);
    net.sf.jniinchi.INCHI_BOND_STEREO var93 = var92.getBondStereo();
    int var94 = var93.getIndx();
    var72.setStereoDefinition(var93);
    net.sf.jniinchi.INCHI_BOND_STEREO var96 = var72.getBondStereo();
    net.sf.jniinchi.JniInchiBond var97 = var30.addBond(var72);
    net.sf.jniinchi.INCHI_BOND_STEREO var98 = var72.getBondStereo();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test295() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test295");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(0.0d, 1.0d, 0.0d, "");
    var4.setIsotopicMassShift(10);
    net.sf.jniinchi.JniInchiAtom var11 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var11.setImplicitH((-1));
    net.sf.jniinchi.JniInchiAtom var18 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var19 = var18.getCharge();
    int var20 = var18.getIsotopicMass();
    net.sf.jniinchi.JniInchiAtom var25 = new net.sf.jniinchi.JniInchiAtom((-1.0d), 1.0d, 0.0d, "InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiAtom var30 = new net.sf.jniinchi.JniInchiAtom(100.0d, 100.0d, 100.0d, "hi!");
    int var31 = var30.getImplicitDeuterium();
    var30.setImplicitDeuterium(1);
    net.sf.jniinchi.INCHI_STEREOTYPE var35 = net.sf.jniinchi.INCHI_STEREOTYPE.getValue(0);
    net.sf.jniinchi.JniInchiAtom var40 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    var40.setImplicitDeuterium(10);
    net.sf.jniinchi.JniInchiAtom var47 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var47.setIsotopicMassShift(1);
    net.sf.jniinchi.JniInchiAtom var54 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var55 = var54.getCharge();
    var54.setImplicitTritium(10);
    double var58 = var54.getX();
    int var59 = var54.getImplicitH();
    java.lang.String var60 = var54.getElementType();
    int var61 = var54.getImplicitProtium();
    int var62 = var54.getImplicitTritium();
    net.sf.jniinchi.JniInchiAtom var67 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var68 = var67.getCharge();
    var67.setImplicitProtium(1);
    var67.setImplicitDeuterium(10001);
    net.sf.jniinchi.JniInchiAtom var77 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var78 = var77.getCharge();
    var77.setImplicitTritium(10);
    double var81 = var77.getX();
    var77.setCharge(1);
    int var84 = var77.getIsotopicMass();
    net.sf.jniinchi.INCHI_PARITY var86 = net.sf.jniinchi.INCHI_PARITY.getValue(0);
    int var87 = var86.getIndx();
    int var88 = var86.getIndx();
    net.sf.jniinchi.JniInchiStereo0D var89 = net.sf.jniinchi.JniInchiStereo0D.createNewTetrahedralStereo0D(var40, var47, var54, var67, var77, var86);
    net.sf.jniinchi.JniInchiStereo0D var90 = new net.sf.jniinchi.JniInchiStereo0D(var4, var11, var18, var25, var30, var35, var86);
    net.sf.jniinchi.INCHI_PARITY var91 = var90.getDisconnectedParity();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test296() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test296");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(0.0d, 1.0d, 1.0d, "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE");
    java.lang.String var5 = var4.getElementType();
    var4.debug();
    var4.setImplicitDeuterium(9999);
    int var9 = var4.getCharge();
    java.lang.String var10 = var4.getDebugString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE"+ "'", var5.equals("InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "InChI Atom: InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE [0.0,1.0,1.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:9999 T:0 // Radical: NONE"+ "'", var10.equals("InChI Atom: InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE [0.0,1.0,1.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:9999 T:0 // Radical: NONE"));

  }

  public void test297() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test297");


    net.sf.jniinchi.JniInchiAtom var1 = new net.sf.jniinchi.JniInchiAtom("hi!");
    var1.setCharge(0);
    net.sf.jniinchi.JniInchiOutputStructure var11 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var12 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var11);
    net.sf.jniinchi.JniInchiAtom var17 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var18 = var17.getCharge();
    var17.setImplicitTritium(10);
    double var21 = var17.getX();
    var17.setCharge(1);
    var17.setImplicitDeuterium(100);
    int var26 = var17.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var31 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var32 = var31.getCharge();
    var31.setImplicitTritium(10);
    double var35 = var31.getX();
    var31.setCharge(1);
    var31.setImplicitDeuterium(100);
    int var40 = var31.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var42 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var43 = var42.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var51 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var52 = var51.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var53 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var51);
    net.sf.jniinchi.JniInchiAtom[] var54 = new net.sf.jniinchi.JniInchiAtom[] { };
    var53.addAtoms(var54);
    boolean var56 = var42.equals((java.lang.Object)var54);
    net.sf.jniinchi.JniInchiBond var57 = new net.sf.jniinchi.JniInchiBond(var17, var31, var42);
    net.sf.jniinchi.JniInchiBond var58 = var11.addBond(var57);
    var57.debug();
    net.sf.jniinchi.JniInchiAtom var60 = var57.getOriginAtom();
    net.sf.jniinchi.INCHI_BOND_TYPE var62 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var63 = var62.ordinal();
    java.lang.String var64 = var62.name();
    net.sf.jniinchi.JniInchiBond var65 = new net.sf.jniinchi.JniInchiBond(var1, var60, var62);
    double var66 = var1.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "NONE"+ "'", var64.equals("NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0.0d);

  }

  public void test298() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test298");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var8 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput();
    var7.setStructure((net.sf.jniinchi.JniInchiStructure)var9);
    java.lang.String var11 = var9.getOptions();
    int var12 = var9.getNumBonds();
    net.sf.jniinchi.JniInchiOutput var18 = new net.sf.jniinchi.JniInchiOutput((-1), "hi!", "", "", "");
    net.sf.jniinchi.INCHI_RET var19 = var18.getReturnStatus();
    net.sf.jniinchi.JniInchiOutputStructure var20 = new net.sf.jniinchi.JniInchiOutputStructure(var19);
    net.sf.jniinchi.JniInchiOutputStructure var21 = new net.sf.jniinchi.JniInchiOutputStructure(var19);
    net.sf.jniinchi.INCHI_RET var22 = var21.getReturnStatus();
    var9.setStructure((net.sf.jniinchi.JniInchiStructure)var21);
    int var24 = var9.getNumBonds();
    java.lang.String var25 = var9.getOptions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + ""+ "'", var25.equals(""));

  }

  public void test299() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test299");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitTritium(10);
    double var8 = var4.getX();
    var4.setCharge(1);
    double var11 = var4.getZ();
    var4.setIsotopicMassShift(100);
    var4.debug();
    var4.setCharge(100);
    var4.setIsotopicMassShift(0);
    java.lang.String var19 = var4.getElementType();
    int var20 = var4.getImplicitH();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "hi!"+ "'", var19.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));

  }

  public void test300() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test300");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitTritium(10);
    double var8 = var4.getX();
    var4.setCharge(1);
    var4.setImplicitDeuterium(100);
    int var13 = var4.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var18 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var19 = var18.getCharge();
    var18.setImplicitTritium(10);
    double var22 = var18.getX();
    var18.setCharge(1);
    var18.setImplicitDeuterium(100);
    int var27 = var18.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var29 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var30 = var29.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var38 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var39 = var38.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var40 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var38);
    net.sf.jniinchi.JniInchiAtom[] var41 = new net.sf.jniinchi.JniInchiAtom[] { };
    var40.addAtoms(var41);
    boolean var43 = var29.equals((java.lang.Object)var41);
    net.sf.jniinchi.JniInchiBond var44 = new net.sf.jniinchi.JniInchiBond(var4, var18, var29);
    net.sf.jniinchi.JniInchiAtom var46 = new net.sf.jniinchi.JniInchiAtom("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.INCHI_BOND_TYPE var48 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var49 = var48.ordinal();
    net.sf.jniinchi.INCHI_BOND_STEREO var51 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var52 = new net.sf.jniinchi.JniInchiBond(var18, var46, var48, var51);
    net.sf.jniinchi.JniInchiAtom var53 = var52.getTargetAtom();
    net.sf.jniinchi.INCHI_BOND_TYPE var54 = var52.getBondType();
    int var55 = var54.getIndx();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);

  }

  public void test301() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test301");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitTritium(10);
    var4.setImplicitTritium(1);
    net.sf.jniinchi.INCHI_RADICAL var10 = var4.getRadical();
    net.sf.jniinchi.INCHI_RADICAL var11 = var4.getRadical();
    var4.setImplicitDeuterium(0);
    int var14 = var4.getImplicitTritium();
    net.sf.jniinchi.JniInchiAtom var19 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var19.setImplicitProtium(1);
    double var22 = var19.getY();
    net.sf.jniinchi.INCHI_RADICAL var23 = var19.getRadical();
    var4.setRadical(var23);
    net.sf.jniinchi.JniInchiAtom var29 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var30 = var29.getCharge();
    var29.setImplicitTritium(10);
    double var33 = var29.getX();
    var29.setCharge(1);
    int var36 = var29.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var41 = new net.sf.jniinchi.JniInchiAtom((-1.0d), 1.0d, 0.0d, "InChI_Output: WARNING///hi!/hi!");
    java.lang.String var42 = var41.getElementType();
    net.sf.jniinchi.INCHI_RADICAL var43 = var41.getRadical();
    net.sf.jniinchi.JniInchiAtom var48 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    var48.setImplicitDeuterium(10);
    net.sf.jniinchi.JniInchiAtom var55 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var55.setImplicitProtium(1);
    int var58 = var55.getImplicitDeuterium();
    int var59 = var55.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var61 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var66 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var67 = var66.getCharge();
    var66.setImplicitTritium(10);
    double var70 = var66.getX();
    var66.setCharge(1);
    int var73 = var66.getIsotopicMass();
    int var74 = var66.getCharge();
    net.sf.jniinchi.JniInchiAtom var79 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var80 = var79.getCharge();
    var79.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var84 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var85 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var55, var61, var66, var79, var84);
    net.sf.jniinchi.INCHI_PARITY var87 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    var85.setDisconnectedParity(var87);
    net.sf.jniinchi.INCHI_PARITY var89 = var85.getParity();
    java.lang.String var90 = var89.toString();
    net.sf.jniinchi.JniInchiStereo0D var91 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var4, var29, var41, var48, var89);
    var48.setImplicitDeuterium(10100);
    var48.setImplicitTritium(10100);
    var48.setIsotopicMassShift(1);
    double var98 = var48.getZ();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "InChI_Output: WARNING///hi!/hi!"+ "'", var42.equals("InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "ODD"+ "'", var90.equals("ODD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == 100.0d);

  }

  public void test302() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test302");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiOutputKey var1 = net.sf.jniinchi.JniInchiWrapper.getInchiKey("EOF");
      fail("Expected exception of type net.sf.jniinchi.LoadNativeLibraryException");
    } catch (net.sf.jniinchi.LoadNativeLibraryException e) {
      // Expected exception.
    }

  }

  public void test303() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test303");


    net.sf.jniinchi.JniInchiException var0 = new net.sf.jniinchi.JniInchiException();
    net.sf.jniinchi.JniInchiException var1 = new net.sf.jniinchi.JniInchiException((java.lang.Throwable)var0);

  }

  public void test304() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test304");


    net.sf.jniinchi.JniInchiException var1 = new net.sf.jniinchi.JniInchiException("InChI_Output: WARNING///hi!/hi!");
    java.lang.String var2 = var1.toString();
    net.sf.jniinchi.LoadNativeLibraryException var3 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var1);
    java.lang.String var4 = var3.toString();
    net.sf.jniinchi.LoadNativeLibraryException var5 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var3);
    java.lang.Throwable[] var6 = var5.getSuppressed();
    java.lang.Throwable[] var7 = var5.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var2.equals("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var4.equals("net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test305() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test305");


    net.sf.jniinchi.INCHI_RADICAL var1 = net.sf.jniinchi.INCHI_RADICAL.getValue(0);
    java.lang.Class var2 = var1.getDeclaringClass();
    int var3 = var1.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test306() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test306");


    net.sf.jniinchi.JniInchiException var1 = new net.sf.jniinchi.JniInchiException("InChI_Output: WARNING///hi!/hi!");
    java.lang.String var2 = var1.toString();
    net.sf.jniinchi.LoadNativeLibraryException var3 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var1);
    java.lang.String var4 = var3.toString();
    java.lang.String var5 = var3.toString();
    net.sf.jniinchi.LoadNativeLibraryException var6 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var3);
    net.sf.jniinchi.JniInchiException var7 = new net.sf.jniinchi.JniInchiException((java.lang.Throwable)var6);
    net.sf.jniinchi.JniInchiException var8 = new net.sf.jniinchi.JniInchiException((java.lang.Throwable)var6);
    net.sf.jniinchi.JniInchiException var9 = new net.sf.jniinchi.JniInchiException((java.lang.Throwable)var6);
    net.sf.jniinchi.LoadNativeLibraryException var11 = new net.sf.jniinchi.LoadNativeLibraryException("");
    java.lang.String var12 = var11.toString();
    net.sf.jniinchi.JniInchiException var14 = new net.sf.jniinchi.JniInchiException("InChI_Output: WARNING///hi!/hi!");
    java.lang.String var15 = var14.toString();
    net.sf.jniinchi.JniInchiException var17 = new net.sf.jniinchi.JniInchiException("InChI_Output: WARNING///hi!/hi!");
    java.lang.String var18 = var17.toString();
    net.sf.jniinchi.LoadNativeLibraryException var19 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var17);
    var14.addSuppressed((java.lang.Throwable)var17);
    java.lang.String var21 = var14.toString();
    net.sf.jniinchi.LoadNativeLibraryException var22 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var14);
    java.lang.Throwable[] var23 = var14.getSuppressed();
    var11.addSuppressed((java.lang.Throwable)var14);
    var6.addSuppressed((java.lang.Throwable)var11);
    net.sf.jniinchi.JniInchiException var26 = new net.sf.jniinchi.JniInchiException((java.lang.Throwable)var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var2.equals("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var4.equals("net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var5.equals("net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "net.sf.jniinchi.LoadNativeLibraryException: "+ "'", var12.equals("net.sf.jniinchi.LoadNativeLibraryException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var15.equals("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var18.equals("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var21.equals("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test307() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test307");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var8 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    int var9 = var8.getNumBonds();
    net.sf.jniinchi.JniInchiInput var10 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var8);
    net.sf.jniinchi.JniInchiInput var11 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var8);
    net.sf.jniinchi.JniInchiOutputStructure var19 = new net.sf.jniinchi.JniInchiOutputStructure(4, "InChI_Output: EOF/SINGLE_1UP/net.sf.jniinchi.LoadNativeLibraryException: /hi!/net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", "InChI Atom: InChI_Output: EOF/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/SINGLE_1UP/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/NONE [1.0,-1.0,1.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", (-1L), 10L, 100L, 0L);
    net.sf.jniinchi.JniInchiOutputStructure var27 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var28 = var27.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var29 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var27);
    net.sf.jniinchi.JniInchiBond[] var30 = new net.sf.jniinchi.JniInchiBond[] { };
    var29.addBonds(var30);
    net.sf.jniinchi.JniInchiAtom var36 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var37 = var36.getCharge();
    var36.setImplicitTritium(10);
    double var40 = var36.getX();
    var36.setCharge(1);
    net.sf.jniinchi.JniInchiAtom var43 = var29.addAtom(var36);
    int var44 = var29.getNumBonds();
    net.sf.jniinchi.JniInchiOutputStructure var52 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var53 = var52.getNumAtoms();
    net.sf.jniinchi.INCHI_RET var54 = var52.getReturnStatus();
    net.sf.jniinchi.JniInchiStructure var55 = net.sf.jniinchi.Main.getTestMolecule();
    var52.setStructure(var55);
    var29.setStructure(var55);
    net.sf.jniinchi.JniInchiOutputStructure var65 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var66 = var65.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var67 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var65);
    long[][] var68 = var65.getWarningFlags();
    int var69 = var65.getNumAtoms();
    net.sf.jniinchi.JniInchiOutputStructure var77 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var78 = var77.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var79 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var77);
    net.sf.jniinchi.JniInchiBond[] var80 = new net.sf.jniinchi.JniInchiBond[] { };
    var79.addBonds(var80);
    var65.addBonds(var80);
    var29.addBonds(var80);
    var19.addBonds(var80);
    var11.addBonds(var80);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiOutput var86 = net.sf.jniinchi.JniInchiWrapper.getInchi(var11);
      fail("Expected exception of type net.sf.jniinchi.LoadNativeLibraryException");
    } catch (net.sf.jniinchi.LoadNativeLibraryException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test308() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test308");


    net.sf.jniinchi.JniInchiOutputStructure var8 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var8);
    java.lang.String var10 = var9.getOptions();
    net.sf.jniinchi.JniInchiInputData var13 = new net.sf.jniinchi.JniInchiInputData(0, var9, 0, "net.sf.jniinchi.LoadNativeLibraryException");
    java.lang.String var14 = var13.getErrorMessage();
    net.sf.jniinchi.JniInchiInput var15 = var13.getInput();
    net.sf.jniinchi.INCHI_RET var16 = var13.getReturnValue();
    net.sf.jniinchi.JniInchiOutput var21 = new net.sf.jniinchi.JniInchiOutput(var16, "net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", "InChI Atom: hi! [1.0,10.0,100.0] Charge:10 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:10 // Radical: NONE", "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:100 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", "EOF");
    net.sf.jniinchi.JniInchiOutput var26 = new net.sf.jniinchi.JniInchiOutput(var16, "InChI_Output: EOF/InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP/InChI_Output: EOF/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/SINGLE_1UP/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/NONE/InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE/InChI_Output: EOF/hi!///", "InChI Atom: hi! [0.0,0.0,0.0] Charge:0 // Iso Mass:10000 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", "net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", "InChI_Output: null/SINGLE_1UP/InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP/InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE/InChI_Output: null/InChI_Output: WARNING///hi!/hi!/InChI_Output: WARNING///hi!/hi!//hi!");
    java.lang.Class var27 = var16.getDeclaringClass();
    int var28 = var16.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + ""+ "'", var10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "net.sf.jniinchi.LoadNativeLibraryException"+ "'", var14.equals("net.sf.jniinchi.LoadNativeLibraryException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 2);

  }

  public void test309() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test309");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput((-1), "hi!", "", "", "");
    java.lang.String var6 = var5.getAuxInfo();
    net.sf.jniinchi.INCHI_RET var7 = var5.getReturnStatus();
    net.sf.jniinchi.JniInchiOutput var12 = new net.sf.jniinchi.JniInchiOutput(var7, "OK", "", "InChI_Output: WARNING///hi!/hi!", "hi!");
    int var13 = var7.getIndx();
    net.sf.jniinchi.JniInchiOutputStructure var14 = new net.sf.jniinchi.JniInchiOutputStructure(var7);
    int var15 = var14.getNumAtoms();
    net.sf.jniinchi.JniInchiOutputStructure var23 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var24 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var23);
    net.sf.jniinchi.INCHI_KEY var26 = net.sf.jniinchi.INCHI_KEY.getValue(0);
    net.sf.jniinchi.JniInchiOutputKey var28 = new net.sf.jniinchi.JniInchiOutputKey(var26, "InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiAtom var33 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var34 = var33.getCharge();
    var33.setImplicitTritium(10);
    double var37 = var33.getX();
    var33.setCharge(1);
    var33.setImplicitDeuterium(100);
    int var42 = var33.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var47 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var48 = var47.getCharge();
    var47.setImplicitTritium(10);
    double var51 = var47.getX();
    var47.setCharge(1);
    var47.setImplicitDeuterium(100);
    int var56 = var47.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var58 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var59 = var58.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var67 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var68 = var67.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var69 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var67);
    net.sf.jniinchi.JniInchiAtom[] var70 = new net.sf.jniinchi.JniInchiAtom[] { };
    var69.addAtoms(var70);
    boolean var72 = var58.equals((java.lang.Object)var70);
    net.sf.jniinchi.JniInchiBond var73 = new net.sf.jniinchi.JniInchiBond(var33, var47, var58);
    java.lang.String var74 = var73.getDebugString();
    boolean var75 = var26.equals((java.lang.Object)var73);
    net.sf.jniinchi.INCHI_BOND_TYPE var76 = var73.getBondType();
    java.lang.String var77 = var73.getDebugString();
    net.sf.jniinchi.JniInchiBond[] var78 = new net.sf.jniinchi.JniInchiBond[] { var73};
    var23.addBonds(var78);
    var14.addBonds(var78);
    int var81 = var14.getNumAtoms();
    int var82 = var14.getNumBonds();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var74.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var77.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 1);

  }

  public void test310() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test310");


    net.sf.jniinchi.JniInchiStructure var0 = net.sf.jniinchi.Main.getTestMolecule();
    net.sf.jniinchi.JniInchiAtom var5 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var5.setImplicitProtium(1);
    int var8 = var5.getImplicitDeuterium();
    int var9 = var5.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var11 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var16 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var17 = var16.getCharge();
    var16.setImplicitTritium(10);
    double var20 = var16.getX();
    var16.setCharge(1);
    int var23 = var16.getIsotopicMass();
    int var24 = var16.getCharge();
    net.sf.jniinchi.JniInchiAtom var29 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var30 = var29.getCharge();
    var29.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var34 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var35 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var5, var11, var16, var29, var34);
    net.sf.jniinchi.INCHI_PARITY var37 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    var35.setDisconnectedParity(var37);
    net.sf.jniinchi.JniInchiStereo0D var39 = var0.addStereo0D(var35);
    net.sf.jniinchi.INCHI_STEREOTYPE var40 = var39.getStereoType();
    net.sf.jniinchi.INCHI_STEREOTYPE var41 = var39.getStereoType();
    net.sf.jniinchi.JniInchiAtom var43 = var39.getNeighbor(2);
    java.lang.String var44 = var39.getDebugString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD"+ "'", var44.equals("InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD"));

  }

  public void test311() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test311");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    long[][] var10 = var7.getWarningFlags();
    net.sf.jniinchi.JniInchiAtom var15 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var16 = var15.getCharge();
    var15.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var23 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var24 = var23.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var26 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var27 = var26.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var29 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var30 = new net.sf.jniinchi.JniInchiBond(var15, var23, var26, var29);
    net.sf.jniinchi.JniInchiBond var31 = var7.addBond(var30);
    net.sf.jniinchi.JniInchiAtom var32 = var30.getOriginAtom();
    var30.debug();
    net.sf.jniinchi.INCHI_BOND_TYPE var34 = var30.getBondType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test312() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test312");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var4.setImplicitProtium(1);
    int var7 = var4.getImplicitDeuterium();
    int var8 = var4.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var10 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var15 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var16 = var15.getCharge();
    var15.setImplicitTritium(10);
    double var19 = var15.getX();
    var15.setCharge(1);
    int var22 = var15.getIsotopicMass();
    int var23 = var15.getCharge();
    net.sf.jniinchi.JniInchiAtom var28 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var29 = var28.getCharge();
    var28.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var33 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var34 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var4, var10, var15, var28, var33);
    net.sf.jniinchi.INCHI_PARITY var36 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    var34.setDisconnectedParity(var36);
    net.sf.jniinchi.INCHI_PARITY var38 = var34.getParity();
    net.sf.jniinchi.JniInchiAtom[] var39 = var34.getNeighbors();
    net.sf.jniinchi.JniInchiAtom var40 = var34.getCentralAtom();
    net.sf.jniinchi.INCHI_PARITY var41 = var34.getParity();
    net.sf.jniinchi.JniInchiAtom var43 = var34.getNeighbor(1);
    var43.setImplicitProtium(3);
    var43.setImplicitDeuterium(6);
    var43.setIsotopicMassShift(3);
    double var50 = var43.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.0d);

  }

  public void test313() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test313");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitTritium(10);
    double var8 = var4.getX();
    var4.setCharge(1);
    var4.setImplicitDeuterium(100);
    int var13 = var4.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var18 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var19 = var18.getCharge();
    var18.setImplicitTritium(10);
    double var22 = var18.getX();
    var18.setCharge(1);
    var18.setImplicitDeuterium(100);
    int var27 = var18.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var29 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var30 = var29.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var38 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var39 = var38.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var40 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var38);
    net.sf.jniinchi.JniInchiAtom[] var41 = new net.sf.jniinchi.JniInchiAtom[] { };
    var40.addAtoms(var41);
    boolean var43 = var29.equals((java.lang.Object)var41);
    net.sf.jniinchi.JniInchiBond var44 = new net.sf.jniinchi.JniInchiBond(var4, var18, var29);
    net.sf.jniinchi.INCHI_BOND_TYPE var45 = var44.getBondType();
    net.sf.jniinchi.INCHI_BOND_STEREO var46 = var44.getBondStereo();
    net.sf.jniinchi.INCHI_BOND_STEREO var47 = var44.getBondStereo();
    int var48 = var47.getIndx();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);

  }

  public void test314() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test314");


    net.sf.jniinchi.JniInchiException var1 = new net.sf.jniinchi.JniInchiException("InChI_Output: WARNING///hi!/hi!");
    java.lang.String var2 = var1.toString();
    net.sf.jniinchi.JniInchiException var4 = new net.sf.jniinchi.JniInchiException("InChI_Output: WARNING///hi!/hi!");
    java.lang.String var5 = var4.toString();
    net.sf.jniinchi.LoadNativeLibraryException var6 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var4);
    var1.addSuppressed((java.lang.Throwable)var4);
    net.sf.jniinchi.LoadNativeLibraryException var8 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var1);
    java.lang.String var9 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var2.equals("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var5.equals("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var9.equals("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));

  }

  public void test315() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test315");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_BOND_STEREO var1 = net.sf.jniinchi.INCHI_BOND_STEREO.valueOf("FATAL");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test316() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test316");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    java.lang.String var9 = var7.getLog();
    net.sf.jniinchi.JniInchiInput var10 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    net.sf.jniinchi.JniInchiInput var11 = new net.sf.jniinchi.JniInchiInput();
    int var12 = var11.getNumStereo0D();
    net.sf.jniinchi.JniInchiOutputStructure var20 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var21 = var20.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var22 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var20);
    java.lang.String var23 = var20.getLog();
    net.sf.jniinchi.JniInchiAtom var28 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var28.setImplicitProtium(1);
    int var31 = var28.getImplicitDeuterium();
    int var32 = var28.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var34 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var39 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var40 = var39.getCharge();
    var39.setImplicitTritium(10);
    double var43 = var39.getX();
    var39.setCharge(1);
    int var46 = var39.getIsotopicMass();
    int var47 = var39.getCharge();
    net.sf.jniinchi.JniInchiAtom var52 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var53 = var52.getCharge();
    var52.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var57 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var58 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var28, var34, var39, var52, var57);
    net.sf.jniinchi.JniInchiStereo0D var59 = var20.addStereo0D(var58);
    net.sf.jniinchi.JniInchiStereo0D var60 = var11.addStereo0D(var59);
    net.sf.jniinchi.JniInchiAtom[] var61 = var59.getNeighbors();
    var10.addAtoms(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test317() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test317");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitTritium(10);
    var4.setImplicitTritium(1);
    net.sf.jniinchi.INCHI_RADICAL var10 = var4.getRadical();
    net.sf.jniinchi.INCHI_RADICAL var11 = var4.getRadical();
    var4.setImplicitDeuterium(0);
    int var14 = var4.getImplicitTritium();
    net.sf.jniinchi.JniInchiAtom var19 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var19.setImplicitProtium(1);
    double var22 = var19.getY();
    net.sf.jniinchi.INCHI_RADICAL var23 = var19.getRadical();
    var4.setRadical(var23);
    net.sf.jniinchi.JniInchiAtom var29 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var30 = var29.getCharge();
    var29.setImplicitTritium(10);
    double var33 = var29.getX();
    var29.setCharge(1);
    int var36 = var29.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var41 = new net.sf.jniinchi.JniInchiAtom((-1.0d), 1.0d, 0.0d, "InChI_Output: WARNING///hi!/hi!");
    java.lang.String var42 = var41.getElementType();
    net.sf.jniinchi.INCHI_RADICAL var43 = var41.getRadical();
    net.sf.jniinchi.JniInchiAtom var48 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    var48.setImplicitDeuterium(10);
    net.sf.jniinchi.JniInchiAtom var55 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var55.setImplicitProtium(1);
    int var58 = var55.getImplicitDeuterium();
    int var59 = var55.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var61 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var66 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var67 = var66.getCharge();
    var66.setImplicitTritium(10);
    double var70 = var66.getX();
    var66.setCharge(1);
    int var73 = var66.getIsotopicMass();
    int var74 = var66.getCharge();
    net.sf.jniinchi.JniInchiAtom var79 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var80 = var79.getCharge();
    var79.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var84 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var85 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var55, var61, var66, var79, var84);
    net.sf.jniinchi.INCHI_PARITY var87 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    var85.setDisconnectedParity(var87);
    net.sf.jniinchi.INCHI_PARITY var89 = var85.getParity();
    java.lang.String var90 = var89.toString();
    net.sf.jniinchi.JniInchiStereo0D var91 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var4, var29, var41, var48, var89);
    net.sf.jniinchi.INCHI_PARITY var92 = var91.getParity();
    net.sf.jniinchi.INCHI_PARITY var94 = net.sf.jniinchi.INCHI_PARITY.getValue(3);
    int var95 = var94.getIndx();
    var91.setDisconnectedParity(var94);
    int var97 = var94.getIndx();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "InChI_Output: WARNING///hi!/hi!"+ "'", var42.equals("InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "ODD"+ "'", var90.equals("ODD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == 3);

  }

  public void test318() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test318");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var4.setImplicitProtium(1);
    double var7 = var4.getY();
    var4.setImplicitProtium(0);
    net.sf.jniinchi.INCHI_RADICAL var10 = var4.getRadical();
    net.sf.jniinchi.INCHI_RADICAL var11 = var4.getRadical();
    var4.setImplicitH((-1));
    java.lang.String var14 = var4.getDebugString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "InChI Atom: InChI_Output: WARNING///hi!/hi! [100.0,10.0,1.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE"+ "'", var14.equals("InChI Atom: InChI_Output: WARNING///hi!/hi! [100.0,10.0,1.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE"));

  }

  public void test319() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test319");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(0, "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", "", (-1L), 10L, 10L, 0L);
    net.sf.jniinchi.INCHI_RET var8 = var7.getReturnStatus();
    net.sf.jniinchi.JniInchiOutputStructure var16 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var17 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var16);
    int var18 = var17.getNumBonds();
    boolean var19 = var8.equals((java.lang.Object)var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test320() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test320");


    net.sf.jniinchi.INCHI_KEY var1 = net.sf.jniinchi.INCHI_KEY.getValue(0);
    net.sf.jniinchi.JniInchiOutputKey var3 = new net.sf.jniinchi.JniInchiOutputKey(var1, "InChI_Output: WARNING///hi!/hi!");
    java.lang.String var4 = var3.getKey();
    java.lang.String var5 = var3.getKey();
    java.lang.String var6 = var3.getKey();
    net.sf.jniinchi.INCHI_KEY var7 = var3.getReturnStatus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "InChI_Output: WARNING///hi!/hi!"+ "'", var4.equals("InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "InChI_Output: WARNING///hi!/hi!"+ "'", var5.equals("InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "InChI_Output: WARNING///hi!/hi!"+ "'", var6.equals("InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test321() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test321");


    net.sf.jniinchi.JniInchiOutputStructure var8 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var9 = var8.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var10 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var8);
    java.lang.String var11 = var10.getOptions();
    net.sf.jniinchi.JniInchiInput var12 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var10);
    net.sf.jniinchi.JniInchiAtom var17 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var18 = var17.getCharge();
    var17.setImplicitTritium(10);
    double var21 = var17.getX();
    var17.setCharge(1);
    var17.setImplicitDeuterium(100);
    int var26 = var17.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var31 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var32 = var31.getCharge();
    var31.setImplicitTritium(10);
    double var35 = var31.getX();
    var31.setCharge(1);
    var31.setImplicitDeuterium(100);
    int var40 = var31.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var42 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var43 = var42.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var51 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var52 = var51.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var53 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var51);
    net.sf.jniinchi.JniInchiAtom[] var54 = new net.sf.jniinchi.JniInchiAtom[] { };
    var53.addAtoms(var54);
    boolean var56 = var42.equals((java.lang.Object)var54);
    net.sf.jniinchi.JniInchiBond var57 = new net.sf.jniinchi.JniInchiBond(var17, var31, var42);
    java.lang.String var58 = var57.getDebugString();
    net.sf.jniinchi.JniInchiAtom var63 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var64 = var63.getCharge();
    var63.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var71 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var72 = var71.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var74 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var75 = var74.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var77 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var78 = new net.sf.jniinchi.JniInchiBond(var63, var71, var74, var77);
    net.sf.jniinchi.INCHI_BOND_STEREO var79 = var78.getBondStereo();
    var57.setStereoDefinition(var79);
    net.sf.jniinchi.JniInchiBond[] var81 = new net.sf.jniinchi.JniInchiBond[] { var57};
    var10.addBonds(var81);
    net.sf.jniinchi.JniInchiInputData var85 = new net.sf.jniinchi.JniInchiInputData(1, var10, 10, "hi!");
    java.lang.String var86 = var85.getErrorMessage();
    java.lang.String var87 = var85.getErrorMessage();
    net.sf.jniinchi.JniInchiInput var88 = var85.getInput();
    net.sf.jniinchi.INCHI_RET var89 = var85.getReturnValue();
    java.lang.Class var90 = var89.getDeclaringClass();
    java.lang.Enum var92 = java.lang.Enum.<java.lang.Enum>valueOf(var90, "OKAY");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var58.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "hi!"+ "'", var86.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "hi!"+ "'", var87.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test322() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test322");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_OPTION var1 = net.sf.jniinchi.INCHI_OPTION.valueOf("net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.LoadNativeLibraryException: ");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test323() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test323");


    net.sf.jniinchi.INCHI_KEY var1 = net.sf.jniinchi.INCHI_KEY.getValue(0);
    net.sf.jniinchi.JniInchiOutputKey var3 = new net.sf.jniinchi.JniInchiOutputKey(var1, "InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiAtom var8 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var9 = var8.getCharge();
    var8.setImplicitTritium(10);
    double var12 = var8.getX();
    var8.setCharge(1);
    var8.setImplicitDeuterium(100);
    int var17 = var8.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var22 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var23 = var22.getCharge();
    var22.setImplicitTritium(10);
    double var26 = var22.getX();
    var22.setCharge(1);
    var22.setImplicitDeuterium(100);
    int var31 = var22.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var33 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var34 = var33.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var42 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var43 = var42.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var44 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var42);
    net.sf.jniinchi.JniInchiAtom[] var45 = new net.sf.jniinchi.JniInchiAtom[] { };
    var44.addAtoms(var45);
    boolean var47 = var33.equals((java.lang.Object)var45);
    net.sf.jniinchi.JniInchiBond var48 = new net.sf.jniinchi.JniInchiBond(var8, var22, var33);
    java.lang.String var49 = var48.getDebugString();
    boolean var50 = var1.equals((java.lang.Object)var48);
    net.sf.jniinchi.INCHI_BOND_TYPE var51 = var48.getBondType();
    net.sf.jniinchi.JniInchiAtom var52 = var48.getTargetAtom();
    var48.debug();
    java.lang.String var54 = var48.getDebugString();
    java.lang.String var55 = var48.getDebugString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var49.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var54.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var55.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));

  }

  public void test324() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test324");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_KEY var1 = net.sf.jniinchi.INCHI_KEY.valueOf("InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:1 D:0 T:-1 // Radical: NONE");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test325() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test325");


    net.sf.jniinchi.INCHI_PARITY var1 = net.sf.jniinchi.INCHI_PARITY.getValue(2);
    int var2 = var1.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2);

  }

  public void test326() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test326");


    net.sf.jniinchi.JniInchiOutputStructure var8 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var8);
    java.lang.String var10 = var9.getOptions();
    net.sf.jniinchi.JniInchiInputData var13 = new net.sf.jniinchi.JniInchiInputData(0, var9, 0, "net.sf.jniinchi.LoadNativeLibraryException");
    java.lang.String var14 = var13.getErrorMessage();
    net.sf.jniinchi.JniInchiInput var15 = var13.getInput();
    net.sf.jniinchi.JniInchiAtom var20 = new net.sf.jniinchi.JniInchiAtom(100.0d, 100.0d, 100.0d, "hi!");
    net.sf.jniinchi.JniInchiAtom var21 = var15.addAtom(var20);
    net.sf.jniinchi.JniInchiOutputStructure var29 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var30 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var29);
    int var31 = var30.getNumBonds();
    java.lang.String var32 = var30.getOptions();
    net.sf.jniinchi.JniInchiAtom var37 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var38 = var37.getCharge();
    var37.setImplicitTritium(10);
    double var41 = var37.getX();
    var37.setCharge(1);
    var37.setImplicitDeuterium(100);
    int var46 = var37.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var51 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var52 = var51.getCharge();
    var51.setImplicitTritium(10);
    double var55 = var51.getX();
    var51.setCharge(1);
    var51.setImplicitDeuterium(100);
    int var60 = var51.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var62 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var63 = var62.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var71 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var72 = var71.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var73 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var71);
    net.sf.jniinchi.JniInchiAtom[] var74 = new net.sf.jniinchi.JniInchiAtom[] { };
    var73.addAtoms(var74);
    boolean var76 = var62.equals((java.lang.Object)var74);
    net.sf.jniinchi.JniInchiBond var77 = new net.sf.jniinchi.JniInchiBond(var37, var51, var62);
    java.lang.String var78 = var77.getDebugString();
    net.sf.jniinchi.JniInchiBond var79 = var30.addBond(var77);
    net.sf.jniinchi.INCHI_BOND_TYPE var80 = var79.getBondType();
    net.sf.jniinchi.JniInchiBond var81 = var15.addBond(var79);
    java.lang.String var82 = var79.getDebugString();
    net.sf.jniinchi.JniInchiAtom var83 = var79.getTargetAtom();
    int var84 = var83.getCharge();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + ""+ "'", var10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "net.sf.jniinchi.LoadNativeLibraryException"+ "'", var14.equals("net.sf.jniinchi.LoadNativeLibraryException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + ""+ "'", var32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var78.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var82.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);

  }

  public void test327() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test327");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput((-1), "hi!", "", "", "");
    net.sf.jniinchi.INCHI_RET var6 = var5.getReturnStatus();
    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(var6);
    int var8 = var6.getIndx();
    net.sf.jniinchi.JniInchiOutputStructure var9 = new net.sf.jniinchi.JniInchiOutputStructure(var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiBond var11 = var9.getBond(100);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));

  }

  public void test328() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test328");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var8 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    net.sf.jniinchi.JniInchiAtom var13 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var13.setIsotopicMassShift(1);
    int var16 = var13.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var17 = var7.addAtom(var13);
    int var18 = var7.getNumStereo0D();
    net.sf.jniinchi.JniInchiOutputStructure var26 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var27 = var26.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var28 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var26);
    java.lang.String var29 = var26.getLog();
    net.sf.jniinchi.JniInchiAtom var34 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var34.setImplicitProtium(1);
    int var37 = var34.getImplicitDeuterium();
    int var38 = var34.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var40 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var45 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var46 = var45.getCharge();
    var45.setImplicitTritium(10);
    double var49 = var45.getX();
    var45.setCharge(1);
    int var52 = var45.getIsotopicMass();
    int var53 = var45.getCharge();
    net.sf.jniinchi.JniInchiAtom var58 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var59 = var58.getCharge();
    var58.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var63 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var64 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var34, var40, var45, var58, var63);
    net.sf.jniinchi.JniInchiStereo0D var65 = var26.addStereo0D(var64);
    net.sf.jniinchi.INCHI_PARITY var66 = var64.getDisconnectedParity();
    net.sf.jniinchi.JniInchiAtom var68 = var64.getNeighbor(0);
    java.lang.String var69 = var64.getDebugString();
    net.sf.jniinchi.JniInchiStereo0D var70 = var7.addStereo0D(var64);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiAtom var72 = var70.getNeighbor(5);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "hi!"+ "'", var29.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD"+ "'", var69.equals("InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test329() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test329");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_STEREOTYPE var1 = net.sf.jniinchi.INCHI_STEREOTYPE.valueOf("InChI Atom: hi! [100.0,100.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:10100 // Radical: NONE");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test330() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test330");


    net.sf.jniinchi.JniInchiAtom var1 = new net.sf.jniinchi.JniInchiAtom("net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");

  }

  public void test331() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test331");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(0.0d, 1.0d, 0.0d, "");
    var4.setIsotopicMassShift(10);
    net.sf.jniinchi.JniInchiAtom var11 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var11.setImplicitH((-1));
    net.sf.jniinchi.JniInchiAtom var18 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var19 = var18.getCharge();
    int var20 = var18.getIsotopicMass();
    net.sf.jniinchi.JniInchiAtom var25 = new net.sf.jniinchi.JniInchiAtom((-1.0d), 1.0d, 0.0d, "InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiAtom var30 = new net.sf.jniinchi.JniInchiAtom(100.0d, 100.0d, 100.0d, "hi!");
    int var31 = var30.getImplicitDeuterium();
    var30.setImplicitDeuterium(1);
    net.sf.jniinchi.INCHI_STEREOTYPE var35 = net.sf.jniinchi.INCHI_STEREOTYPE.getValue(0);
    net.sf.jniinchi.JniInchiAtom var40 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    var40.setImplicitDeuterium(10);
    net.sf.jniinchi.JniInchiAtom var47 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var47.setIsotopicMassShift(1);
    net.sf.jniinchi.JniInchiAtom var54 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var55 = var54.getCharge();
    var54.setImplicitTritium(10);
    double var58 = var54.getX();
    int var59 = var54.getImplicitH();
    java.lang.String var60 = var54.getElementType();
    int var61 = var54.getImplicitProtium();
    int var62 = var54.getImplicitTritium();
    net.sf.jniinchi.JniInchiAtom var67 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var68 = var67.getCharge();
    var67.setImplicitProtium(1);
    var67.setImplicitDeuterium(10001);
    net.sf.jniinchi.JniInchiAtom var77 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var78 = var77.getCharge();
    var77.setImplicitTritium(10);
    double var81 = var77.getX();
    var77.setCharge(1);
    int var84 = var77.getIsotopicMass();
    net.sf.jniinchi.INCHI_PARITY var86 = net.sf.jniinchi.INCHI_PARITY.getValue(0);
    int var87 = var86.getIndx();
    int var88 = var86.getIndx();
    net.sf.jniinchi.JniInchiStereo0D var89 = net.sf.jniinchi.JniInchiStereo0D.createNewTetrahedralStereo0D(var40, var47, var54, var67, var77, var86);
    net.sf.jniinchi.JniInchiStereo0D var90 = new net.sf.jniinchi.JniInchiStereo0D(var4, var11, var18, var25, var30, var35, var86);
    var18.setImplicitH((-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "hi!"+ "'", var60.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test332() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test332");


    net.sf.jniinchi.INCHI_KEY_STATUS var1 = net.sf.jniinchi.INCHI_KEY_STATUS.valueOf("INVALID_VERSION");
    int var2 = var1.getIndx();
    int var3 = var1.getIndx();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 3);

  }

  public void test333() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test333");


    net.sf.jniinchi.JniInchiInputInchi var2 = new net.sf.jniinchi.JniInchiInputInchi("OK", "");
    java.lang.String var3 = var2.getInchi();
    java.lang.String var4 = var2.getInchi();
    java.lang.String var5 = var2.getInchi();
    java.lang.String var6 = var2.getInchi();
    java.lang.String var7 = var2.getInchi();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiOutputStructure var8 = net.sf.jniinchi.JniInchiWrapper.getStructureFromInchi(var2);
      fail("Expected exception of type net.sf.jniinchi.LoadNativeLibraryException");
    } catch (net.sf.jniinchi.LoadNativeLibraryException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "OK"+ "'", var3.equals("OK"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "OK"+ "'", var4.equals("OK"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "OK"+ "'", var5.equals("OK"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "OK"+ "'", var6.equals("OK"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "OK"+ "'", var7.equals("OK"));

  }

  public void test334() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test334");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiInputInchi var2 = new net.sf.jniinchi.JniInchiInputInchi("net.sf.jniinchi.JniInchiException: InChI_Output: EOF/InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP/InChI_Output: EOF/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/SINGLE_1UP/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/NONE/InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE/InChI_Output: EOF/hi!///", "InChI_Output: null/InChI Atom: InChI_Output: EOF/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/SINGLE_1UP/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/NONE [1.0,-1.0,1.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE/VALID_STANDARD/InChI_Output: WARNING/InChI_Output: EOF/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/SINGLE_1UP/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/NONE/InChI Atom: hi! [1.0,10.0,100.0] Charge:10 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:10 // Radical: NONE/InChI Stereo0D: - [,hi!,hi!,NONE] Type::DOUBLEBOND // Parity:NONE/InChI Atom: hi! [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE/InChI_Output: EOF/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/InChI Atom: hi! [1.0,10.0,100.0] Charge:1 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:10 // Radical: NONE/hi!/");
      fail("Expected exception of type net.sf.jniinchi.JniInchiException");
    } catch (net.sf.jniinchi.JniInchiException e) {
      // Expected exception.
    }

  }

  public void test335() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test335");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_STATUS var2 = net.sf.jniinchi.JniInchiWrapper.checkInchi("InChI Atom: hi! [10.0,10.0,100.0] Charge:0 // Iso Mass:10010 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", false);
      fail("Expected exception of type net.sf.jniinchi.LoadNativeLibraryException");
    } catch (net.sf.jniinchi.LoadNativeLibraryException e) {
      // Expected exception.
    }

  }

  public void test336() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test336");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_STATUS var1 = net.sf.jniinchi.INCHI_STATUS.valueOf("InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:-1 T:0 // Radical: NONE");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test337() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test337");


    net.sf.jniinchi.JniInchiOutputStructure var8 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var8);
    java.lang.String var10 = var9.getOptions();
    net.sf.jniinchi.JniInchiInputData var13 = new net.sf.jniinchi.JniInchiInputData(0, var9, 0, "net.sf.jniinchi.LoadNativeLibraryException");
    java.lang.String var14 = var13.getErrorMessage();
    net.sf.jniinchi.JniInchiInput var15 = var13.getInput();
    net.sf.jniinchi.JniInchiAtom var20 = new net.sf.jniinchi.JniInchiAtom(100.0d, 100.0d, 100.0d, "hi!");
    net.sf.jniinchi.JniInchiAtom var21 = var15.addAtom(var20);
    net.sf.jniinchi.JniInchiOutputStructure var29 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var30 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var29);
    int var31 = var30.getNumBonds();
    java.lang.String var32 = var30.getOptions();
    net.sf.jniinchi.JniInchiAtom var37 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var38 = var37.getCharge();
    var37.setImplicitTritium(10);
    double var41 = var37.getX();
    var37.setCharge(1);
    var37.setImplicitDeuterium(100);
    int var46 = var37.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var51 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var52 = var51.getCharge();
    var51.setImplicitTritium(10);
    double var55 = var51.getX();
    var51.setCharge(1);
    var51.setImplicitDeuterium(100);
    int var60 = var51.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var62 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var63 = var62.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var71 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var72 = var71.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var73 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var71);
    net.sf.jniinchi.JniInchiAtom[] var74 = new net.sf.jniinchi.JniInchiAtom[] { };
    var73.addAtoms(var74);
    boolean var76 = var62.equals((java.lang.Object)var74);
    net.sf.jniinchi.JniInchiBond var77 = new net.sf.jniinchi.JniInchiBond(var37, var51, var62);
    java.lang.String var78 = var77.getDebugString();
    net.sf.jniinchi.JniInchiBond var79 = var30.addBond(var77);
    net.sf.jniinchi.INCHI_BOND_TYPE var80 = var79.getBondType();
    net.sf.jniinchi.JniInchiBond var81 = var15.addBond(var79);
    java.lang.String var82 = var79.getDebugString();
    net.sf.jniinchi.JniInchiAtom var83 = var79.getTargetAtom();
    var83.setImplicitDeuterium(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + ""+ "'", var10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "net.sf.jniinchi.LoadNativeLibraryException"+ "'", var14.equals("net.sf.jniinchi.LoadNativeLibraryException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + ""+ "'", var32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var78.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var82.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test338() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test338");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    net.sf.jniinchi.JniInchiAtom var14 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var15 = var14.getCharge();
    var14.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var22 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var23 = var22.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var25 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var26 = var25.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var28 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var29 = new net.sf.jniinchi.JniInchiBond(var14, var22, var25, var28);
    net.sf.jniinchi.INCHI_BOND_STEREO var30 = var29.getBondStereo();
    net.sf.jniinchi.JniInchiAtom var31 = var29.getTargetAtom();
    net.sf.jniinchi.JniInchiBond var32 = var7.addBond(var29);
    net.sf.jniinchi.INCHI_BOND_TYPE var33 = var32.getBondType();
    int var34 = var33.getIndx();
    java.lang.String var35 = var33.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "NONE"+ "'", var35.equals("NONE"));

  }

  public void test339() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test339");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitTritium(10);
    double var8 = var4.getX();
    var4.setCharge(1);
    var4.setImplicitDeuterium(100);
    int var13 = var4.getImplicitProtium();
    double var14 = var4.getY();
    double var15 = var4.getX();
    java.lang.String var16 = var4.getElementType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "hi!"+ "'", var16.equals("hi!"));

  }

  public void test340() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test340");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(100.0d, 100.0d, 100.0d, "hi!");
    int var5 = var4.getImplicitDeuterium();
    var4.setImplicitProtium(10010);
    java.lang.String var8 = var4.getDebugString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "InChI Atom: hi! [100.0,100.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:10010 D:0 T:0 // Radical: NONE"+ "'", var8.equals("InChI Atom: hi! [100.0,100.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:10010 D:0 T:0 // Radical: NONE"));

  }

  public void test341() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test341");


    net.sf.jniinchi.JniInchiInputInchi var2 = new net.sf.jniinchi.JniInchiInputInchi("OK", "");
    java.lang.String var3 = var2.getInchi();
    java.lang.String var4 = var2.getInchi();
    java.lang.String var5 = var2.getOptions();
    java.lang.String var6 = var2.getOptions();
    java.lang.String var7 = var2.getOptions();
    java.lang.String var8 = var2.getOptions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "OK"+ "'", var3.equals("OK"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "OK"+ "'", var4.equals("OK"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + ""+ "'", var7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));

  }

  public void test342() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test342");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_BOND_STEREO var1 = net.sf.jniinchi.INCHI_BOND_STEREO.valueOf("net.sf.jniinchi.JniInchiException: net.sf.jniinchi.JniInchiException: InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test343() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test343");


    net.sf.jniinchi.JniInchiInputInchi var1 = new net.sf.jniinchi.JniInchiInputInchi("net.sf.jniinchi.JniInchiException: InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:10001 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE");
    java.lang.String var2 = var1.getOptions();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiOutput var3 = net.sf.jniinchi.JniInchiWrapper.getInchiFromInchi(var1);
      fail("Expected exception of type net.sf.jniinchi.LoadNativeLibraryException");
    } catch (net.sf.jniinchi.LoadNativeLibraryException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));

  }

  public void test344() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test344");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    int var10 = var7.getNumStereo0D();
    int var11 = var7.getNumBonds();
    int var12 = var7.getNumAtoms();
    java.lang.String var13 = var7.getLog();
    net.sf.jniinchi.JniInchiStructure var14 = net.sf.jniinchi.Main.getTestMolecule();
    net.sf.jniinchi.JniInchiOutputStructure var22 = new net.sf.jniinchi.JniInchiOutputStructure(0, "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", "", (-1L), 10L, 10L, 0L);
    java.lang.String var23 = var22.getLog();
    net.sf.jniinchi.JniInchiOutputStructure var31 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var32 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var31);
    net.sf.jniinchi.JniInchiInput var33 = new net.sf.jniinchi.JniInchiInput();
    var31.setStructure((net.sf.jniinchi.JniInchiStructure)var33);
    net.sf.jniinchi.JniInchiOutputStructure var42 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var43 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var42);
    int var44 = var43.getNumBonds();
    java.lang.String var45 = var43.getOptions();
    net.sf.jniinchi.JniInchiAtom var50 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var51 = var50.getCharge();
    var50.setImplicitTritium(10);
    double var54 = var50.getX();
    var50.setCharge(1);
    var50.setImplicitDeuterium(100);
    int var59 = var50.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var64 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var65 = var64.getCharge();
    var64.setImplicitTritium(10);
    double var68 = var64.getX();
    var64.setCharge(1);
    var64.setImplicitDeuterium(100);
    int var73 = var64.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var75 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var76 = var75.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var84 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var85 = var84.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var86 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var84);
    net.sf.jniinchi.JniInchiAtom[] var87 = new net.sf.jniinchi.JniInchiAtom[] { };
    var86.addAtoms(var87);
    boolean var89 = var75.equals((java.lang.Object)var87);
    net.sf.jniinchi.JniInchiBond var90 = new net.sf.jniinchi.JniInchiBond(var50, var64, var75);
    java.lang.String var91 = var90.getDebugString();
    net.sf.jniinchi.JniInchiBond var92 = var43.addBond(var90);
    net.sf.jniinchi.JniInchiBond var93 = var33.addBond(var90);
    net.sf.jniinchi.JniInchiBond var94 = var22.addBond(var90);
    net.sf.jniinchi.JniInchiAtom var95 = var90.getOriginAtom();
    net.sf.jniinchi.JniInchiBond var96 = var14.addBond(var90);
    var90.debug();
    net.sf.jniinchi.JniInchiBond var98 = var7.addBond(var90);
    net.sf.jniinchi.INCHI_RET var99 = var7.getReturnStatus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!"+ "'", var13.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + ""+ "'", var23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + ""+ "'", var45.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var91.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var99);

  }

  public void test345() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test345");


    net.sf.jniinchi.JniInchiAtom var1 = new net.sf.jniinchi.JniInchiAtom("net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");

  }

  public void test346() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test346");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_RADICAL var1 = net.sf.jniinchi.INCHI_RADICAL.valueOf("InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_2UP");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test347() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test347");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitTritium(10);
    double var8 = var4.getX();
    var4.setCharge(1);
    double var11 = var4.getZ();
    var4.setImplicitTritium((-1));
    net.sf.jniinchi.JniInchiAtom var18 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var19 = var18.getCharge();
    var18.setImplicitTritium(10);
    double var22 = var18.getX();
    java.lang.String var23 = var18.getElementType();
    var18.setCharge(10);
    net.sf.jniinchi.JniInchiAtom var30 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var31 = var30.getCharge();
    var30.setImplicitTritium(10);
    double var34 = var30.getX();
    var30.setCharge(1);
    var30.setImplicitDeuterium(100);
    int var39 = var30.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var44 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var45 = var44.getCharge();
    var44.setImplicitTritium(10);
    double var48 = var44.getX();
    var44.setCharge(1);
    var44.setImplicitDeuterium(100);
    int var53 = var44.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var55 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var56 = var55.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var64 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var65 = var64.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var66 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var64);
    net.sf.jniinchi.JniInchiAtom[] var67 = new net.sf.jniinchi.JniInchiAtom[] { };
    var66.addAtoms(var67);
    boolean var69 = var55.equals((java.lang.Object)var67);
    net.sf.jniinchi.JniInchiBond var70 = new net.sf.jniinchi.JniInchiBond(var30, var44, var55);
    net.sf.jniinchi.JniInchiAtom var72 = new net.sf.jniinchi.JniInchiAtom("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.INCHI_BOND_TYPE var74 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var75 = var74.ordinal();
    net.sf.jniinchi.INCHI_BOND_STEREO var77 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var78 = new net.sf.jniinchi.JniInchiBond(var44, var72, var74, var77);
    java.lang.String var79 = var74.toString();
    net.sf.jniinchi.JniInchiBond var80 = new net.sf.jniinchi.JniInchiBond(var4, var18, var74);
    int var81 = var18.getImplicitTritium();
    java.lang.String var82 = var18.getDebugString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "NONE"+ "'", var79.equals("NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "InChI Atom: hi! [1.0,10.0,100.0] Charge:10 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:10 // Radical: NONE"+ "'", var82.equals("InChI Atom: hi! [1.0,10.0,100.0] Charge:10 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:10 // Radical: NONE"));

  }

  public void test348() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test348");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(3, "InChI Atom: hi! [100.0,100.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", "InChI_Output: EOF/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/SINGLE_1UP/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/NONE", 10L, 100L, 10L, 10L);
    net.sf.jniinchi.JniInchiInput var8 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);

  }

  public void test349() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test349");


    net.sf.jniinchi.JniInchiInput var0 = new net.sf.jniinchi.JniInchiInput();
    int var1 = var0.getNumStereo0D();
    net.sf.jniinchi.JniInchiOutputStructure var9 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var10 = var9.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var11 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var9);
    java.lang.String var12 = var9.getLog();
    net.sf.jniinchi.JniInchiAtom var17 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var17.setImplicitProtium(1);
    int var20 = var17.getImplicitDeuterium();
    int var21 = var17.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var23 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var28 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var29 = var28.getCharge();
    var28.setImplicitTritium(10);
    double var32 = var28.getX();
    var28.setCharge(1);
    int var35 = var28.getIsotopicMass();
    int var36 = var28.getCharge();
    net.sf.jniinchi.JniInchiAtom var41 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var42 = var41.getCharge();
    var41.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var46 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var47 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var17, var23, var28, var41, var46);
    net.sf.jniinchi.JniInchiStereo0D var48 = var9.addStereo0D(var47);
    net.sf.jniinchi.JniInchiStereo0D var49 = var0.addStereo0D(var48);
    net.sf.jniinchi.INCHI_STEREOTYPE var50 = var49.getStereoType();
    net.sf.jniinchi.INCHI_PARITY var51 = var49.getParity();
    java.lang.String var52 = var49.getDebugString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD"+ "'", var52.equals("InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD"));

  }

  public void test350() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test350");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(0.0d, 10.0d, 10.0d, "hi!");

  }

  public void test351() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test351");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput(0, "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE", "net.sf.jniinchi.LoadNativeLibraryException", "");
    net.sf.jniinchi.INCHI_RET var6 = var5.getReturnStatus();
    java.lang.String var7 = var5.toString();
    java.lang.String var8 = var5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "InChI_Output: OKAY/InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE/InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE/net.sf.jniinchi.LoadNativeLibraryException/"+ "'", var7.equals("InChI_Output: OKAY/InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE/InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE/net.sf.jniinchi.LoadNativeLibraryException/"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "InChI_Output: OKAY/InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE/InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE/net.sf.jniinchi.LoadNativeLibraryException/"+ "'", var8.equals("InChI_Output: OKAY/InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE/InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE/net.sf.jniinchi.LoadNativeLibraryException/"));

  }

  public void test352() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test352");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    int var9 = var7.getNumBonds();
    net.sf.jniinchi.JniInchiOutputStructure var17 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var18 = var17.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var19 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var17);
    java.lang.String var20 = var17.getLog();
    int var21 = var17.getNumStereo0D();
    net.sf.jniinchi.INCHI_RET var22 = var17.getReturnStatus();
    int var23 = var17.getNumStereo0D();
    var7.setStructure((net.sf.jniinchi.JniInchiStructure)var17);
    int var25 = var7.getNumAtoms();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "hi!"+ "'", var20.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);

  }

  public void test353() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test353");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(10010, "hi!", "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:10001 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE", 10L, 100L, (-1L), 0L);
    net.sf.jniinchi.JniInchiOutputStructure var15 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var16 = var15.getNumAtoms();
    net.sf.jniinchi.INCHI_KEY var18 = net.sf.jniinchi.INCHI_KEY.getValue(0);
    net.sf.jniinchi.JniInchiOutputKey var20 = new net.sf.jniinchi.JniInchiOutputKey(var18, "InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiAtom var25 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var26 = var25.getCharge();
    var25.setImplicitTritium(10);
    double var29 = var25.getX();
    var25.setCharge(1);
    var25.setImplicitDeuterium(100);
    int var34 = var25.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var39 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var40 = var39.getCharge();
    var39.setImplicitTritium(10);
    double var43 = var39.getX();
    var39.setCharge(1);
    var39.setImplicitDeuterium(100);
    int var48 = var39.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var50 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var51 = var50.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var59 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var60 = var59.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var61 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var59);
    net.sf.jniinchi.JniInchiAtom[] var62 = new net.sf.jniinchi.JniInchiAtom[] { };
    var61.addAtoms(var62);
    boolean var64 = var50.equals((java.lang.Object)var62);
    net.sf.jniinchi.JniInchiBond var65 = new net.sf.jniinchi.JniInchiBond(var25, var39, var50);
    java.lang.String var66 = var65.getDebugString();
    boolean var67 = var18.equals((java.lang.Object)var65);
    net.sf.jniinchi.INCHI_BOND_TYPE var68 = var65.getBondType();
    net.sf.jniinchi.JniInchiAtom var69 = var65.getOriginAtom();
    net.sf.jniinchi.JniInchiBond var70 = var15.addBond(var65);
    java.lang.String var71 = var15.getLog();
    net.sf.jniinchi.INCHI_RET var72 = var15.getReturnStatus();
    var7.setStructure((net.sf.jniinchi.JniInchiStructure)var15);
    java.lang.String var74 = var15.getLog();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var66.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "hi!"+ "'", var71.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "hi!"+ "'", var74.equals("hi!"));

  }

  public void test354() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test354");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var8 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    int var9 = var8.getNumBonds();
    net.sf.jniinchi.JniInchiAtom var14 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var14.setImplicitProtium(1);
    int var17 = var14.getImplicitDeuterium();
    int var18 = var14.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var20 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var25 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var26 = var25.getCharge();
    var25.setImplicitTritium(10);
    double var29 = var25.getX();
    var25.setCharge(1);
    int var32 = var25.getIsotopicMass();
    int var33 = var25.getCharge();
    net.sf.jniinchi.JniInchiAtom var38 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var39 = var38.getCharge();
    var38.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var43 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var44 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var14, var20, var25, var38, var43);
    net.sf.jniinchi.INCHI_PARITY var46 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    var44.setDisconnectedParity(var46);
    net.sf.jniinchi.INCHI_PARITY var48 = var44.getParity();
    net.sf.jniinchi.JniInchiAtom[] var49 = var44.getNeighbors();
    var8.addAtoms(var49);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiOutput var51 = net.sf.jniinchi.JniInchiWrapper.getStdInchi(var8);
      fail("Expected exception of type net.sf.jniinchi.LoadNativeLibraryException");
    } catch (net.sf.jniinchi.LoadNativeLibraryException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test355() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test355");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    java.lang.String var10 = var7.getLog();
    net.sf.jniinchi.JniInchiAtom var15 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var15.setImplicitProtium(1);
    int var18 = var15.getImplicitDeuterium();
    int var19 = var15.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var21 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var26 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var27 = var26.getCharge();
    var26.setImplicitTritium(10);
    double var30 = var26.getX();
    var26.setCharge(1);
    int var33 = var26.getIsotopicMass();
    int var34 = var26.getCharge();
    net.sf.jniinchi.JniInchiAtom var39 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var40 = var39.getCharge();
    var39.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var44 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var45 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var15, var21, var26, var39, var44);
    net.sf.jniinchi.JniInchiStereo0D var46 = var7.addStereo0D(var45);
    net.sf.jniinchi.INCHI_PARITY var47 = var45.getDisconnectedParity();
    net.sf.jniinchi.JniInchiAtom var49 = var45.getNeighbor(0);
    net.sf.jniinchi.INCHI_PARITY var50 = var45.getParity();
    net.sf.jniinchi.INCHI_PARITY var51 = var45.getParity();
    var45.debug();
    var45.debug();
    net.sf.jniinchi.INCHI_PARITY var54 = var45.getDisconnectedParity();
    net.sf.jniinchi.JniInchiAtom[] var55 = var45.getNeighbors();
    net.sf.jniinchi.INCHI_PARITY var56 = var45.getDisconnectedParity();
    net.sf.jniinchi.JniInchiAtom[] var57 = var45.getNeighbors();
    java.lang.String var58 = var45.getDebugString();
    net.sf.jniinchi.INCHI_PARITY var59 = var45.getParity();
    net.sf.jniinchi.JniInchiAtom[] var60 = var45.getNeighbors();
    net.sf.jniinchi.JniInchiAtom[] var61 = var45.getNeighbors();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD"+ "'", var58.equals("InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test356() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test356");


    net.sf.jniinchi.JniInchiOutputStructure var8 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var8);
    java.lang.String var10 = var9.getOptions();
    net.sf.jniinchi.JniInchiInputData var13 = new net.sf.jniinchi.JniInchiInputData(0, var9, 0, "net.sf.jniinchi.LoadNativeLibraryException");
    java.lang.String var14 = var13.getErrorMessage();
    net.sf.jniinchi.JniInchiInput var15 = var13.getInput();
    net.sf.jniinchi.INCHI_RET var16 = var13.getReturnValue();
    net.sf.jniinchi.JniInchiOutput var21 = new net.sf.jniinchi.JniInchiOutput(var16, "net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", "InChI Atom: hi! [1.0,10.0,100.0] Charge:10 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:10 // Radical: NONE", "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:100 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", "EOF");
    int var22 = var16.getIndx();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + ""+ "'", var10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "net.sf.jniinchi.LoadNativeLibraryException"+ "'", var14.equals("net.sf.jniinchi.LoadNativeLibraryException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);

  }

  public void test357() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test357");


    net.sf.jniinchi.INCHI_KEY var1 = net.sf.jniinchi.INCHI_KEY.getValue(0);
    net.sf.jniinchi.JniInchiOutputKey var3 = new net.sf.jniinchi.JniInchiOutputKey(var1, "InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiAtom var8 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var9 = var8.getCharge();
    var8.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var16 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var17 = var16.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var19 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var20 = var19.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var22 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var23 = new net.sf.jniinchi.JniInchiBond(var8, var16, var19, var22);
    boolean var24 = var1.equals((java.lang.Object)var23);
    java.lang.String var25 = var23.getDebugString();
    net.sf.jniinchi.INCHI_BOND_STEREO var26 = var23.getBondStereo();
    int var27 = var26.getIndx();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP"+ "'", var25.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);

  }

  public void test358() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test358");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput((-1), "hi!", "", "", "");
    net.sf.jniinchi.INCHI_RET var6 = var5.getReturnStatus();
    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(var6);
    net.sf.jniinchi.JniInchiOutputStructure var8 = new net.sf.jniinchi.JniInchiOutputStructure(var6);
    net.sf.jniinchi.INCHI_RET var9 = var8.getReturnStatus();
    long[][] var10 = var8.getWarningFlags();
    net.sf.jniinchi.INCHI_RET var11 = var8.getReturnStatus();
    java.lang.String var12 = var11.name();
    net.sf.jniinchi.JniInchiOutputStructure var13 = new net.sf.jniinchi.JniInchiOutputStructure(var11);
    java.lang.String var14 = var11.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "EOF"+ "'", var12.equals("EOF"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "EOF"+ "'", var14.equals("EOF"));

  }

  public void test359() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test359");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitTritium(10);
    var4.setImplicitTritium(1);
    net.sf.jniinchi.INCHI_RADICAL var10 = var4.getRadical();
    net.sf.jniinchi.INCHI_RADICAL var11 = var4.getRadical();
    java.lang.String var12 = var4.getDebugString();
    var4.setImplicitDeuterium(3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE"+ "'", var12.equals("InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE"));

  }

  public void test360() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test360");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitTritium(10);
    double var8 = var4.getX();
    var4.setCharge(1);
    var4.setImplicitDeuterium(100);
    int var13 = var4.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var18 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var19 = var18.getCharge();
    var18.setImplicitTritium(10);
    double var22 = var18.getX();
    var18.setCharge(1);
    var18.setImplicitDeuterium(100);
    int var27 = var18.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var29 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var30 = var29.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var38 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var39 = var38.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var40 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var38);
    net.sf.jniinchi.JniInchiAtom[] var41 = new net.sf.jniinchi.JniInchiAtom[] { };
    var40.addAtoms(var41);
    boolean var43 = var29.equals((java.lang.Object)var41);
    net.sf.jniinchi.JniInchiBond var44 = new net.sf.jniinchi.JniInchiBond(var4, var18, var29);
    net.sf.jniinchi.JniInchiAtom var46 = new net.sf.jniinchi.JniInchiAtom("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.INCHI_BOND_TYPE var48 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var49 = var48.ordinal();
    net.sf.jniinchi.INCHI_BOND_STEREO var51 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var52 = new net.sf.jniinchi.JniInchiBond(var18, var46, var48, var51);
    var18.setIsotopicMassShift(1);
    java.lang.String var55 = var18.getDebugString();
    int var56 = var18.getImplicitProtium();
    var18.setCharge(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "InChI Atom: hi! [1.0,10.0,100.0] Charge:1 // Iso Mass:10001 // Implicit H:-1 P:0 D:100 T:10 // Radical: NONE"+ "'", var55.equals("InChI Atom: hi! [1.0,10.0,100.0] Charge:1 // Iso Mass:10001 // Implicit H:-1 P:0 D:100 T:10 // Radical: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);

  }

  public void test361() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test361");


    net.sf.jniinchi.JniInchiAtom var1 = new net.sf.jniinchi.JniInchiAtom("hi!");
    var1.setCharge(0);
    var1.setImplicitProtium(0);
    net.sf.jniinchi.INCHI_RADICAL var6 = var1.getRadical();
    var1.setIsotopicMass(0);
    var1.setImplicitProtium(10);
    int var11 = var1.getImplicitProtium();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 10);

  }

  public void test362() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test362");


    net.sf.jniinchi.JniInchiOutputStructure var8 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var8);
    java.lang.String var10 = var9.getOptions();
    net.sf.jniinchi.JniInchiInputData var13 = new net.sf.jniinchi.JniInchiInputData(0, var9, 0, "net.sf.jniinchi.LoadNativeLibraryException");
    java.lang.String var14 = var13.getErrorMessage();
    net.sf.jniinchi.JniInchiInput var15 = var13.getInput();
    net.sf.jniinchi.INCHI_RET var16 = var13.getReturnValue();
    net.sf.jniinchi.JniInchiOutput var21 = new net.sf.jniinchi.JniInchiOutput(var16, "net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", "InChI Atom: hi! [1.0,10.0,100.0] Charge:10 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:10 // Radical: NONE", "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:100 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", "EOF");
    net.sf.jniinchi.JniInchiOutput var26 = new net.sf.jniinchi.JniInchiOutput(var16, "InChI_Output: EOF/InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP/InChI_Output: EOF/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/SINGLE_1UP/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/NONE/InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE/InChI_Output: EOF/hi!///", "InChI Atom: hi! [0.0,0.0,0.0] Charge:0 // Iso Mass:10000 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", "net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", "InChI_Output: null/SINGLE_1UP/InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP/InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE/InChI_Output: null/InChI_Output: WARNING///hi!/hi!/InChI_Output: WARNING///hi!/hi!//hi!");
    net.sf.jniinchi.JniInchiOutputStructure var27 = new net.sf.jniinchi.JniInchiOutputStructure(var16);
    net.sf.jniinchi.JniInchiOutputStructure var28 = new net.sf.jniinchi.JniInchiOutputStructure(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + ""+ "'", var10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "net.sf.jniinchi.LoadNativeLibraryException"+ "'", var14.equals("net.sf.jniinchi.LoadNativeLibraryException"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test363() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test363");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(10010, "EOF", "net.sf.jniinchi.JniInchiException: OK", 1L, 1L, 10L, 0L);
    int var8 = var7.getNumBonds();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);

  }

  public void test364() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test364");


    net.sf.jniinchi.INCHI_OPTION var1 = net.sf.jniinchi.INCHI_OPTION.valueOfIgnoreCase("InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:-1 T:0 // Radical: NONE");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test365() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test365");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.INCHI_RET var9 = var7.getReturnStatus();
    net.sf.jniinchi.INCHI_RET var10 = var7.getReturnStatus();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiAtom var12 = var7.getAtom(10001);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test366() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test366");


    net.sf.jniinchi.INCHI_PARITY var1 = net.sf.jniinchi.INCHI_PARITY.getValue(6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test367() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test367");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_KEY_STATUS var1 = net.sf.jniinchi.INCHI_KEY_STATUS.valueOf("InChI Bond: InChI_Output: WARNING///hi!/hi!-InChI_Output: WARNING///hi!/hi! // Type: NONE // Stereo: NONE");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test368() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test368");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitTritium(10);
    double var8 = var4.getX();
    var4.setCharge(1);
    var4.setImplicitDeuterium(100);
    int var13 = var4.getImplicitProtium();
    var4.setImplicitTritium(0);
    var4.setImplicitProtium(10);
    net.sf.jniinchi.INCHI_RADICAL var18 = var4.getRadical();
    int var19 = var18.getIndx();
    int var20 = var18.getIndx();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);

  }

  public void test369() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test369");


    net.sf.jniinchi.INCHI_KEY var1 = net.sf.jniinchi.INCHI_KEY.getValue(0);
    net.sf.jniinchi.JniInchiOutputKey var3 = new net.sf.jniinchi.JniInchiOutputKey(var1, "InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiAtom var8 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var9 = var8.getCharge();
    var8.setImplicitTritium(10);
    double var12 = var8.getX();
    var8.setCharge(1);
    var8.setImplicitDeuterium(100);
    int var17 = var8.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var22 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var23 = var22.getCharge();
    var22.setImplicitTritium(10);
    double var26 = var22.getX();
    var22.setCharge(1);
    var22.setImplicitDeuterium(100);
    int var31 = var22.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var33 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var34 = var33.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var42 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var43 = var42.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var44 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var42);
    net.sf.jniinchi.JniInchiAtom[] var45 = new net.sf.jniinchi.JniInchiAtom[] { };
    var44.addAtoms(var45);
    boolean var47 = var33.equals((java.lang.Object)var45);
    net.sf.jniinchi.JniInchiBond var48 = new net.sf.jniinchi.JniInchiBond(var8, var22, var33);
    java.lang.String var49 = var48.getDebugString();
    boolean var50 = var1.equals((java.lang.Object)var48);
    int var51 = var1.getIndx();
    int var52 = var1.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var49.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);

  }

  public void test370() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test370");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(10, "InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE", "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", 100L, 1L, (-1L), 100L);
    net.sf.jniinchi.JniInchiOutputStructure var15 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var16 = var15.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var17 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var15);
    java.lang.String var18 = var17.getOptions();
    net.sf.jniinchi.JniInchiInput var19 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var17);
    net.sf.jniinchi.INCHI_KEY var21 = net.sf.jniinchi.INCHI_KEY.getValue(0);
    net.sf.jniinchi.JniInchiOutputKey var23 = new net.sf.jniinchi.JniInchiOutputKey(var21, "InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiAtom var28 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var29 = var28.getCharge();
    var28.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var36 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var37 = var36.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var39 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var40 = var39.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var42 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var43 = new net.sf.jniinchi.JniInchiBond(var28, var36, var39, var42);
    boolean var44 = var21.equals((java.lang.Object)var43);
    net.sf.jniinchi.JniInchiAtom var45 = var43.getOriginAtom();
    net.sf.jniinchi.JniInchiBond var46 = var17.addBond(var43);
    net.sf.jniinchi.JniInchiInput var47 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var17);
    net.sf.jniinchi.JniInchiInput var48 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var17);
    var7.setStructure((net.sf.jniinchi.JniInchiStructure)var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + ""+ "'", var18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test371() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test371");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    int var6 = var4.getIsotopicMass();
    int var7 = var4.getImplicitH();
    int var8 = var4.getImplicitH();
    net.sf.jniinchi.INCHI_RADICAL var9 = var4.getRadical();
    java.lang.String var10 = var4.getElementType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));

  }

  public void test372() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test372");


    net.sf.jniinchi.INCHI_KEY var1 = net.sf.jniinchi.INCHI_KEY.getValue(0);
    net.sf.jniinchi.JniInchiOutputKey var3 = new net.sf.jniinchi.JniInchiOutputKey(var1, "InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiAtom var8 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var9 = var8.getCharge();
    var8.setImplicitTritium(10);
    double var12 = var8.getX();
    var8.setCharge(1);
    var8.setImplicitDeuterium(100);
    int var17 = var8.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var22 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var23 = var22.getCharge();
    var22.setImplicitTritium(10);
    double var26 = var22.getX();
    var22.setCharge(1);
    var22.setImplicitDeuterium(100);
    int var31 = var22.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var33 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var34 = var33.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var42 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var43 = var42.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var44 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var42);
    net.sf.jniinchi.JniInchiAtom[] var45 = new net.sf.jniinchi.JniInchiAtom[] { };
    var44.addAtoms(var45);
    boolean var47 = var33.equals((java.lang.Object)var45);
    net.sf.jniinchi.JniInchiBond var48 = new net.sf.jniinchi.JniInchiBond(var8, var22, var33);
    java.lang.String var49 = var48.getDebugString();
    boolean var50 = var1.equals((java.lang.Object)var48);
    net.sf.jniinchi.INCHI_BOND_TYPE var51 = var48.getBondType();
    net.sf.jniinchi.JniInchiAtom var52 = var48.getTargetAtom();
    java.lang.String var53 = var48.getDebugString();
    net.sf.jniinchi.INCHI_BOND_STEREO var55 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    var48.setStereoDefinition(var55);
    var48.debug();
    java.lang.String var58 = var48.getDebugString();
    net.sf.jniinchi.JniInchiAtom var63 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var64 = var63.getCharge();
    var63.setImplicitTritium(10);
    var63.setImplicitTritium(1);
    net.sf.jniinchi.INCHI_RADICAL var69 = var63.getRadical();
    net.sf.jniinchi.INCHI_RADICAL var70 = var63.getRadical();
    net.sf.jniinchi.JniInchiAtom var75 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var76 = var75.getCharge();
    var75.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var83 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var84 = var83.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var86 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var87 = var86.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var89 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var90 = new net.sf.jniinchi.JniInchiBond(var75, var83, var86, var89);
    net.sf.jniinchi.INCHI_BOND_STEREO var91 = var90.getBondStereo();
    net.sf.jniinchi.JniInchiAtom var92 = var90.getTargetAtom();
    net.sf.jniinchi.INCHI_BOND_STEREO var93 = var90.getBondStereo();
    int var94 = var93.getIndx();
    boolean var95 = var70.equals((java.lang.Object)var93);
    var48.setStereoDefinition(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var49.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var53.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP"+ "'", var58.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);

  }

  public void test373() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test373");


    net.sf.jniinchi.JniInchiInput var0 = new net.sf.jniinchi.JniInchiInput();
    int var1 = var0.getNumStereo0D();
    net.sf.jniinchi.JniInchiOutputStructure var9 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var10 = var9.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var11 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var9);
    java.lang.String var12 = var9.getLog();
    net.sf.jniinchi.JniInchiAtom var17 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var17.setImplicitProtium(1);
    int var20 = var17.getImplicitDeuterium();
    int var21 = var17.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var23 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var28 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var29 = var28.getCharge();
    var28.setImplicitTritium(10);
    double var32 = var28.getX();
    var28.setCharge(1);
    int var35 = var28.getIsotopicMass();
    int var36 = var28.getCharge();
    net.sf.jniinchi.JniInchiAtom var41 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var42 = var41.getCharge();
    var41.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var46 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var47 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var17, var23, var28, var41, var46);
    net.sf.jniinchi.JniInchiStereo0D var48 = var9.addStereo0D(var47);
    net.sf.jniinchi.JniInchiStereo0D var49 = var0.addStereo0D(var48);
    var48.debug();
    var48.debug();
    net.sf.jniinchi.JniInchiAtom var53 = var48.getNeighbor(1);
    net.sf.jniinchi.JniInchiAtom var54 = var48.getCentralAtom();
    java.lang.String var55 = var48.getDebugString();
    java.lang.String var56 = var48.getDebugString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD"+ "'", var55.equals("InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD"+ "'", var56.equals("InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD"));

  }

  public void test374() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test374");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var12 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var13 = var12.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var15 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var16 = var15.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var18 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var19 = new net.sf.jniinchi.JniInchiBond(var4, var12, var15, var18);
    var12.setIsotopicMass(100);
    double var22 = var12.getZ();
    double var23 = var12.getY();
    net.sf.jniinchi.INCHI_RADICAL var24 = var12.getRadical();
    double var25 = var12.getX();
    int var26 = var12.getIsotopicMass();
    net.sf.jniinchi.JniInchiAtom var31 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var31.setImplicitProtium(1);
    double var34 = var31.getY();
    var31.setImplicitProtium(0);
    var31.setIsotopicMassShift(0);
    net.sf.jniinchi.JniInchiAtom var43 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var43.setImplicitProtium(1);
    double var46 = var43.getY();
    net.sf.jniinchi.INCHI_RADICAL var47 = var43.getRadical();
    var31.setRadical(var47);
    var12.setRadical(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test375() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test375");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(10.0d, 10.0d, (-1.0d), "net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");
    var4.setImplicitDeuterium(10100);
    var4.setImplicitH(5);

  }

  public void test376() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test376");


    net.sf.jniinchi.JniInchiException var1 = new net.sf.jniinchi.JniInchiException("InChI_Output: WARNING///hi!/hi!");
    java.lang.String var2 = var1.toString();
    net.sf.jniinchi.LoadNativeLibraryException var3 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var1);
    java.lang.String var4 = var3.toString();
    java.lang.String var5 = var3.toString();
    net.sf.jniinchi.LoadNativeLibraryException var6 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var3);
    net.sf.jniinchi.LoadNativeLibraryException var7 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var6);
    net.sf.jniinchi.LoadNativeLibraryException var8 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var7);
    net.sf.jniinchi.JniInchiException var9 = new net.sf.jniinchi.JniInchiException((java.lang.Throwable)var7);
    net.sf.jniinchi.JniInchiException var10 = new net.sf.jniinchi.JniInchiException((java.lang.Throwable)var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var2.equals("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var4.equals("net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var5.equals("net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));

  }

  public void test377() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test377");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    java.lang.String var10 = var7.getLog();
    net.sf.jniinchi.JniInchiAtom var15 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var15.setImplicitProtium(1);
    int var18 = var15.getImplicitDeuterium();
    int var19 = var15.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var21 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var26 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var27 = var26.getCharge();
    var26.setImplicitTritium(10);
    double var30 = var26.getX();
    var26.setCharge(1);
    int var33 = var26.getIsotopicMass();
    int var34 = var26.getCharge();
    net.sf.jniinchi.JniInchiAtom var39 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var40 = var39.getCharge();
    var39.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var44 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var45 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var15, var21, var26, var39, var44);
    net.sf.jniinchi.JniInchiStereo0D var46 = var7.addStereo0D(var45);
    net.sf.jniinchi.JniInchiAtom var51 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var52 = var51.getCharge();
    var51.setImplicitTritium(10);
    var51.setImplicitTritium(1);
    net.sf.jniinchi.INCHI_RADICAL var57 = var51.getRadical();
    var51.setIsotopicMassShift(1);
    int var60 = var51.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var61 = var7.addAtom(var51);
    net.sf.jniinchi.JniInchiStereo0D var63 = var7.getStereo0D(0);
    java.lang.String var64 = var7.getLog();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "hi!"+ "'", var64.equals("hi!"));

  }

  public void test378() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test378");


    net.sf.jniinchi.INCHI_KEY var1 = net.sf.jniinchi.INCHI_KEY.getValue(0);
    net.sf.jniinchi.JniInchiOutputKey var3 = new net.sf.jniinchi.JniInchiOutputKey(var1, "InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiOutputKey var5 = new net.sf.jniinchi.JniInchiOutputKey(var1, "hi!");
    java.lang.String var6 = var5.getKey();
    java.lang.String var7 = var5.getKey();
    net.sf.jniinchi.INCHI_KEY var8 = var5.getReturnStatus();
    net.sf.jniinchi.INCHI_KEY var9 = var5.getReturnStatus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test379() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test379");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    net.sf.jniinchi.JniInchiAtom[] var10 = new net.sf.jniinchi.JniInchiAtom[] { };
    var9.addAtoms(var10);
    net.sf.jniinchi.JniInchiStructure var12 = new net.sf.jniinchi.JniInchiStructure();
    net.sf.jniinchi.JniInchiOutputStructure var20 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var21 = var20.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var22 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var20);
    net.sf.jniinchi.JniInchiAtom[] var23 = new net.sf.jniinchi.JniInchiAtom[] { };
    var22.addAtoms(var23);
    var12.addAtoms(var23);
    var9.addAtoms(var23);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiInput var28 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var9, "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");
      fail("Expected exception of type net.sf.jniinchi.JniInchiException");
    } catch (net.sf.jniinchi.JniInchiException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test380() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test380");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiInputData var1 = net.sf.jniinchi.JniInchiWrapper.getInputFromAuxInfo("net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.LoadNativeLibraryException: ");
      fail("Expected exception of type net.sf.jniinchi.LoadNativeLibraryException");
    } catch (net.sf.jniinchi.LoadNativeLibraryException e) {
      // Expected exception.
    }

  }

  public void test381() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test381");


    net.sf.jniinchi.INCHI_KEY var1 = net.sf.jniinchi.INCHI_KEY.getValue(0);
    boolean var3 = var1.equals((java.lang.Object)'a');
    int var4 = var1.getIndx();
    net.sf.jniinchi.JniInchiOutputKey var6 = new net.sf.jniinchi.JniInchiOutputKey(var1, "INVALID_VERSION");
    net.sf.jniinchi.INCHI_KEY var7 = var6.getReturnStatus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test382() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test382");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 0.0d, 1.0d, "net.sf.jniinchi.LoadNativeLibraryException: ");
    net.sf.jniinchi.JniInchiAtom var9 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var9.setImplicitProtium(1);
    int var12 = var9.getImplicitDeuterium();
    int var13 = var9.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var15 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var20 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var21 = var20.getCharge();
    var20.setImplicitTritium(10);
    double var24 = var20.getX();
    var20.setCharge(1);
    int var27 = var20.getIsotopicMass();
    int var28 = var20.getCharge();
    net.sf.jniinchi.JniInchiAtom var33 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var34 = var33.getCharge();
    var33.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var38 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var39 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var9, var15, var20, var33, var38);
    double var40 = var9.getY();
    net.sf.jniinchi.JniInchiAtom var45 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var46 = var45.getCharge();
    var45.setImplicitTritium(10);
    var45.setImplicitTritium(1);
    net.sf.jniinchi.JniInchiAtom var52 = new net.sf.jniinchi.JniInchiAtom("InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE");
    var52.setCharge(0);
    var52.setImplicitProtium(100);
    net.sf.jniinchi.INCHI_BOND_TYPE var58 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var59 = var58.ordinal();
    java.lang.String var60 = var58.name();
    net.sf.jniinchi.JniInchiBond var61 = new net.sf.jniinchi.JniInchiBond(var45, var52, var58);
    net.sf.jniinchi.JniInchiOutputStructure var69 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var70 = var69.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var71 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var69);
    long[][] var72 = var69.getWarningFlags();
    net.sf.jniinchi.JniInchiAtom var77 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var78 = var77.getCharge();
    var77.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var85 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var86 = var85.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var88 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var89 = var88.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var91 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var92 = new net.sf.jniinchi.JniInchiBond(var77, var85, var88, var91);
    net.sf.jniinchi.JniInchiBond var93 = var69.addBond(var92);
    net.sf.jniinchi.INCHI_BOND_STEREO var94 = var93.getBondStereo();
    net.sf.jniinchi.JniInchiBond var95 = new net.sf.jniinchi.JniInchiBond(var4, var9, var58, var94);
    net.sf.jniinchi.JniInchiAtom var96 = var95.getOriginAtom();
    int var97 = var96.getImplicitH();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "NONE"+ "'", var60.equals("NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == (-1));

  }

  public void test383() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test383");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput((-1), "hi!", "", "", "");
    java.lang.String var6 = var5.getAuxInfo();
    net.sf.jniinchi.INCHI_RET var7 = var5.getReturnStatus();
    net.sf.jniinchi.JniInchiOutput var12 = new net.sf.jniinchi.JniInchiOutput(var7, "OK", "", "InChI_Output: WARNING///hi!/hi!", "hi!");
    net.sf.jniinchi.JniInchiOutputStructure var13 = new net.sf.jniinchi.JniInchiOutputStructure(var7);
    java.lang.String var14 = var13.getLog();
    java.lang.String var15 = var13.getLog();
    net.sf.jniinchi.JniInchiAtom var20 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var21 = var20.getCharge();
    var20.setImplicitTritium(10);
    double var24 = var20.getX();
    var20.setCharge(1);
    var20.setImplicitDeuterium(100);
    int var29 = var20.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var34 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var35 = var34.getCharge();
    var34.setImplicitTritium(10);
    double var38 = var34.getX();
    var34.setCharge(1);
    var34.setImplicitDeuterium(100);
    int var43 = var34.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var45 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var46 = var45.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var54 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var55 = var54.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var56 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var54);
    net.sf.jniinchi.JniInchiAtom[] var57 = new net.sf.jniinchi.JniInchiAtom[] { };
    var56.addAtoms(var57);
    boolean var59 = var45.equals((java.lang.Object)var57);
    net.sf.jniinchi.JniInchiBond var60 = new net.sf.jniinchi.JniInchiBond(var20, var34, var45);
    net.sf.jniinchi.INCHI_BOND_TYPE var61 = var60.getBondType();
    net.sf.jniinchi.JniInchiBond var62 = var13.addBond(var60);
    int var63 = var13.getNumStereo0D();
    net.sf.jniinchi.JniInchiInput var65 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var13, "");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);

  }

  public void test384() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test384");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    java.lang.String var10 = var7.getLog();
    java.lang.String var11 = var7.getLog();
    long[][] var12 = var7.getWarningFlags();
    net.sf.jniinchi.JniInchiOutputStructure var20 = new net.sf.jniinchi.JniInchiOutputStructure(100, "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE", "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", 10L, (-1L), (-1L), 1L);
    int var21 = var20.getNumAtoms();
    int var22 = var20.getNumStereo0D();
    net.sf.jniinchi.JniInchiAtom var27 = new net.sf.jniinchi.JniInchiAtom(10.0d, 10.0d, 100.0d, "hi!");
    net.sf.jniinchi.JniInchiAtom var28 = var20.addAtom(var27);
    var7.setStructure((net.sf.jniinchi.JniInchiStructure)var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test385() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test385");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_PARITY var1 = net.sf.jniinchi.INCHI_PARITY.valueOf("InChI_Output: EOF/OKAY/net.sf.jniinchi.LoadNativeLibraryException: InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD/InChI Atom: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi! [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE/net.sf.jniinchi.JniInchiException: InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test386() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test386");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(100.0d, 100.0d, 100.0d, "hi!");
    int var5 = var4.getImplicitDeuterium();
    var4.setImplicitDeuterium(1);
    double var8 = var4.getX();
    var4.debug();
    int var10 = var4.getImplicitDeuterium();
    net.sf.jniinchi.JniInchiAtom var12 = new net.sf.jniinchi.JniInchiAtom("hi!");
    int var13 = var12.getImplicitProtium();
    int var14 = var12.getImplicitTritium();
    int var15 = var12.getImplicitTritium();
    net.sf.jniinchi.INCHI_RADICAL var16 = var12.getRadical();
    net.sf.jniinchi.JniInchiAtom var21 = new net.sf.jniinchi.JniInchiAtom(100.0d, 100.0d, 100.0d, "hi!");
    var21.setImplicitDeuterium(1);
    net.sf.jniinchi.JniInchiAtom var28 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var29 = var28.getCharge();
    var28.setImplicitTritium(10);
    var28.setImplicitTritium(1);
    net.sf.jniinchi.INCHI_RADICAL var34 = var28.getRadical();
    var28.setIsotopicMassShift(1);
    int var37 = var28.getImplicitProtium();
    var28.setIsotopicMassShift(1);
    java.lang.String var40 = var28.getElementType();
    net.sf.jniinchi.JniInchiOutputStructure var48 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var49 = var48.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var50 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var48);
    net.sf.jniinchi.JniInchiAtom var55 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var56 = var55.getCharge();
    var55.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var63 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var64 = var63.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var66 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var67 = var66.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var69 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var70 = new net.sf.jniinchi.JniInchiBond(var55, var63, var66, var69);
    net.sf.jniinchi.INCHI_BOND_STEREO var71 = var70.getBondStereo();
    net.sf.jniinchi.JniInchiAtom var72 = var70.getTargetAtom();
    net.sf.jniinchi.JniInchiBond var73 = var48.addBond(var70);
    net.sf.jniinchi.INCHI_BOND_TYPE var74 = var73.getBondType();
    net.sf.jniinchi.JniInchiBond var75 = new net.sf.jniinchi.JniInchiBond(var21, var28, var74);
    net.sf.jniinchi.JniInchiBond var76 = new net.sf.jniinchi.JniInchiBond(var4, var12, var74);
    net.sf.jniinchi.JniInchiAtom var77 = var76.getOriginAtom();
    net.sf.jniinchi.INCHI_BOND_STEREO var78 = var76.getBondStereo();
    int var79 = var78.getIndx();
    int var80 = var78.getIndx();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "hi!"+ "'", var40.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);

  }

  public void test387() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test387");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitTritium(10);
    double var8 = var4.getX();
    var4.setCharge(1);
    double var11 = var4.getZ();
    var4.setImplicitTritium((-1));
    net.sf.jniinchi.JniInchiAtom var18 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var19 = var18.getCharge();
    var18.setImplicitTritium(10);
    double var22 = var18.getX();
    java.lang.String var23 = var18.getElementType();
    var18.setCharge(10);
    net.sf.jniinchi.JniInchiAtom var30 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var31 = var30.getCharge();
    var30.setImplicitTritium(10);
    double var34 = var30.getX();
    var30.setCharge(1);
    var30.setImplicitDeuterium(100);
    int var39 = var30.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var44 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var45 = var44.getCharge();
    var44.setImplicitTritium(10);
    double var48 = var44.getX();
    var44.setCharge(1);
    var44.setImplicitDeuterium(100);
    int var53 = var44.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var55 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var56 = var55.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var64 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var65 = var64.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var66 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var64);
    net.sf.jniinchi.JniInchiAtom[] var67 = new net.sf.jniinchi.JniInchiAtom[] { };
    var66.addAtoms(var67);
    boolean var69 = var55.equals((java.lang.Object)var67);
    net.sf.jniinchi.JniInchiBond var70 = new net.sf.jniinchi.JniInchiBond(var30, var44, var55);
    net.sf.jniinchi.JniInchiAtom var72 = new net.sf.jniinchi.JniInchiAtom("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.INCHI_BOND_TYPE var74 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var75 = var74.ordinal();
    net.sf.jniinchi.INCHI_BOND_STEREO var77 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var78 = new net.sf.jniinchi.JniInchiBond(var44, var72, var74, var77);
    java.lang.String var79 = var74.toString();
    net.sf.jniinchi.JniInchiBond var80 = new net.sf.jniinchi.JniInchiBond(var4, var18, var74);
    var4.setImplicitTritium(1);
    double var83 = var4.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "hi!"+ "'", var23.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "NONE"+ "'", var79.equals("NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 1.0d);

  }

  public void test388() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test388");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput(1, "", "", "hi!", "hi!");
    java.lang.String var6 = var5.getAuxInfo();
    java.lang.String var7 = var5.toString();
    net.sf.jniinchi.INCHI_RET var8 = var5.getReturnStatus();
    net.sf.jniinchi.JniInchiOutputStructure var9 = new net.sf.jniinchi.JniInchiOutputStructure(var8);
    net.sf.jniinchi.JniInchiOutputStructure var10 = new net.sf.jniinchi.JniInchiOutputStructure(var8);
    long[][] var11 = var10.getWarningFlags();
    net.sf.jniinchi.JniInchiAtom var13 = new net.sf.jniinchi.JniInchiAtom("InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiAtom var14 = var10.addAtom(var13);
    var13.setImplicitTritium(6);
    var13.debug();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "InChI_Output: WARNING///hi!/hi!"+ "'", var7.equals("InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test389() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test389");


    net.sf.jniinchi.JniInchiOutputKey var2 = new net.sf.jniinchi.JniInchiOutputKey(0, "NONE");
    net.sf.jniinchi.INCHI_KEY var3 = var2.getReturnStatus();
    net.sf.jniinchi.JniInchiOutputKey var5 = new net.sf.jniinchi.JniInchiOutputKey(var3, "InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD");
    net.sf.jniinchi.INCHI_KEY var6 = var5.getReturnStatus();
    net.sf.jniinchi.JniInchiOutputKey var8 = new net.sf.jniinchi.JniInchiOutputKey(var6, "net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");
    int var9 = var6.getIndx();
    int var10 = var6.getIndx();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);

  }

  public void test390() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test390");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.INCHI_KEY var10 = net.sf.jniinchi.INCHI_KEY.getValue(0);
    net.sf.jniinchi.JniInchiOutputKey var12 = new net.sf.jniinchi.JniInchiOutputKey(var10, "InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiAtom var17 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var18 = var17.getCharge();
    var17.setImplicitTritium(10);
    double var21 = var17.getX();
    var17.setCharge(1);
    var17.setImplicitDeuterium(100);
    int var26 = var17.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var31 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var32 = var31.getCharge();
    var31.setImplicitTritium(10);
    double var35 = var31.getX();
    var31.setCharge(1);
    var31.setImplicitDeuterium(100);
    int var40 = var31.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var42 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var43 = var42.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var51 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var52 = var51.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var53 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var51);
    net.sf.jniinchi.JniInchiAtom[] var54 = new net.sf.jniinchi.JniInchiAtom[] { };
    var53.addAtoms(var54);
    boolean var56 = var42.equals((java.lang.Object)var54);
    net.sf.jniinchi.JniInchiBond var57 = new net.sf.jniinchi.JniInchiBond(var17, var31, var42);
    java.lang.String var58 = var57.getDebugString();
    boolean var59 = var10.equals((java.lang.Object)var57);
    net.sf.jniinchi.INCHI_BOND_TYPE var60 = var57.getBondType();
    net.sf.jniinchi.JniInchiAtom var61 = var57.getOriginAtom();
    net.sf.jniinchi.JniInchiBond var62 = var7.addBond(var57);
    int var63 = var7.getNumAtoms();
    net.sf.jniinchi.JniInchiOutput var69 = new net.sf.jniinchi.JniInchiOutput((-1), "hi!", "", "", "");
    net.sf.jniinchi.INCHI_RET var70 = var69.getReturnStatus();
    net.sf.jniinchi.JniInchiOutputStructure var71 = new net.sf.jniinchi.JniInchiOutputStructure(var70);
    net.sf.jniinchi.JniInchiOutputStructure var72 = new net.sf.jniinchi.JniInchiOutputStructure(var70);
    net.sf.jniinchi.JniInchiOutputStructure var80 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var81 = var80.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var82 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var80);
    net.sf.jniinchi.JniInchiBond[] var83 = new net.sf.jniinchi.JniInchiBond[] { };
    var82.addBonds(var83);
    var72.addBonds(var83);
    var7.setStructure((net.sf.jniinchi.JniInchiStructure)var72);
    net.sf.jniinchi.INCHI_RET var87 = var72.getReturnStatus();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiAtom var89 = var72.getAtom((-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var58.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test391() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test391");


    net.sf.jniinchi.JniInchiOutputKey var2 = new net.sf.jniinchi.JniInchiOutputKey(0, "NONE");
    net.sf.jniinchi.INCHI_KEY var3 = var2.getReturnStatus();
    java.lang.String var4 = var2.getKey();
    net.sf.jniinchi.INCHI_KEY var5 = var2.getReturnStatus();
    java.lang.String var6 = var2.getKey();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "NONE"+ "'", var4.equals("NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "NONE"+ "'", var6.equals("NONE"));

  }

  public void test392() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test392");


    net.sf.jniinchi.JniInchiAtom var1 = new net.sf.jniinchi.JniInchiAtom("hi!");
    int var2 = var1.getImplicitProtium();
    int var3 = var1.getImplicitTritium();
    int var4 = var1.getImplicitTritium();
    net.sf.jniinchi.JniInchiAtom var9 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var10 = var9.getCharge();
    var9.setImplicitProtium(1);
    var9.setImplicitDeuterium(10001);
    double var15 = var9.getZ();
    net.sf.jniinchi.JniInchiAtom var20 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var21 = var20.getCharge();
    var20.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var28 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var29 = var28.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var31 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var32 = var31.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var34 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var35 = new net.sf.jniinchi.JniInchiBond(var20, var28, var31, var34);
    net.sf.jniinchi.JniInchiBond var36 = new net.sf.jniinchi.JniInchiBond(var1, var9, var31);
    var1.setCharge((-1));
    int var39 = var1.getImplicitH();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));

  }

  public void test393() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test393");


    net.sf.jniinchi.INCHI_KEY var1 = net.sf.jniinchi.INCHI_KEY.getValue(0);
    net.sf.jniinchi.JniInchiOutputKey var3 = new net.sf.jniinchi.JniInchiOutputKey(var1, "InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiOutputKey var5 = new net.sf.jniinchi.JniInchiOutputKey(var1, "hi!");
    net.sf.jniinchi.INCHI_KEY var6 = var5.getReturnStatus();
    int var7 = var6.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);

  }

  public void test394() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test394");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_OPTION var1 = net.sf.jniinchi.INCHI_OPTION.valueOf("InChI_Output: WARNING/InChI_Output: EOF/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/SINGLE_1UP/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/NONE/InChI Atom: hi! [1.0,10.0,100.0] Charge:10 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:10 // Radical: NONE/InChI Stereo0D: - [,hi!,hi!,NONE] Type::DOUBLEBOND // Parity:NONE/InChI Atom: hi! [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test395() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test395");


    net.sf.jniinchi.JniInchiOutputStructure var8 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var8);
    net.sf.jniinchi.JniInchiInput var10 = new net.sf.jniinchi.JniInchiInput();
    var8.setStructure((net.sf.jniinchi.JniInchiStructure)var10);
    java.lang.String var12 = var10.getOptions();
    net.sf.jniinchi.JniInchiInput var13 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var10);
    net.sf.jniinchi.JniInchiInputData var16 = new net.sf.jniinchi.JniInchiInputData(10010, var13, 4, "InChI Stereo0D: - [hi!,hi!,InChI_Output: WARNING///hi!/hi!,hi!] Type::DOUBLEBOND // Parity:ODD");
    int var17 = var13.getNumAtoms();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + ""+ "'", var12.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);

  }

  public void test396() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test396");


    net.sf.jniinchi.JniInchiOutputKey var2 = new net.sf.jniinchi.JniInchiOutputKey(0, "NONE");
    net.sf.jniinchi.INCHI_KEY var3 = var2.getReturnStatus();
    java.lang.String var4 = var2.getKey();
    net.sf.jniinchi.INCHI_KEY var5 = var2.getReturnStatus();
    net.sf.jniinchi.JniInchiOutputKey var7 = new net.sf.jniinchi.JniInchiOutputKey(var5, "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:1 D:0 T:-1 // Radical: NONE");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "NONE"+ "'", var4.equals("NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test397() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test397");


    net.sf.jniinchi.JniInchiException var1 = new net.sf.jniinchi.JniInchiException("OK");
    net.sf.jniinchi.JniInchiException var2 = new net.sf.jniinchi.JniInchiException((java.lang.Throwable)var1);
    java.lang.String var3 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "net.sf.jniinchi.JniInchiException: OK"+ "'", var3.equals("net.sf.jniinchi.JniInchiException: OK"));

  }

  public void test398() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test398");


    net.sf.jniinchi.JniInchiException var1 = new net.sf.jniinchi.JniInchiException("InChI_Output: EOF/InChI Atom: hi! [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE/OK/InChI Atom: hi! [100.0,100.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE/net.sf.jniinchi.JniInchiException: OK");
    net.sf.jniinchi.LoadNativeLibraryException var2 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var1);
    java.lang.String var3 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "net.sf.jniinchi.JniInchiException: InChI_Output: EOF/InChI Atom: hi! [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE/OK/InChI Atom: hi! [100.0,100.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE/net.sf.jniinchi.JniInchiException: OK"+ "'", var3.equals("net.sf.jniinchi.JniInchiException: InChI_Output: EOF/InChI Atom: hi! [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE/OK/InChI Atom: hi! [100.0,100.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE/net.sf.jniinchi.JniInchiException: OK"));

  }

  public void test399() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test399");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_BOND_TYPE var1 = net.sf.jniinchi.INCHI_BOND_TYPE.valueOf("InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:100 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test400() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test400");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitTritium(10);
    var4.setImplicitTritium(1);
    net.sf.jniinchi.INCHI_RADICAL var10 = var4.getRadical();
    double var11 = var4.getX();
    var4.debug();
    int var13 = var4.getIsotopicMass();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);

  }

  public void test401() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test401");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(10010, "InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", "InChI Atom: hi! [1.0,10.0,100.0] Charge:10 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:10 // Radical: NONE", (-1L), 0L, 10L, 1L);
    net.sf.jniinchi.JniInchiOutputStructure var15 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var16 = var15.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var17 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var15);
    java.lang.String var18 = var15.getLog();
    net.sf.jniinchi.JniInchiAtom var23 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var23.setImplicitProtium(1);
    int var26 = var23.getImplicitDeuterium();
    int var27 = var23.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var29 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var34 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var35 = var34.getCharge();
    var34.setImplicitTritium(10);
    double var38 = var34.getX();
    var34.setCharge(1);
    int var41 = var34.getIsotopicMass();
    int var42 = var34.getCharge();
    net.sf.jniinchi.JniInchiAtom var47 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var48 = var47.getCharge();
    var47.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var52 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var53 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var23, var29, var34, var47, var52);
    net.sf.jniinchi.JniInchiStereo0D var54 = var15.addStereo0D(var53);
    net.sf.jniinchi.INCHI_PARITY var55 = var53.getDisconnectedParity();
    net.sf.jniinchi.JniInchiAtom var57 = var53.getNeighbor(0);
    net.sf.jniinchi.INCHI_PARITY var58 = var53.getParity();
    net.sf.jniinchi.INCHI_PARITY var59 = var53.getParity();
    var53.debug();
    net.sf.jniinchi.JniInchiAtom[] var61 = var53.getNeighbors();
    net.sf.jniinchi.JniInchiAtom var62 = var53.getCentralAtom();
    net.sf.jniinchi.INCHI_PARITY var63 = var53.getDisconnectedParity();
    net.sf.jniinchi.JniInchiStereo0D var64 = var7.addStereo0D(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "hi!"+ "'", var18.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test402() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test402");


    net.sf.jniinchi.JniInchiOutputKey var2 = new net.sf.jniinchi.JniInchiOutputKey(2, "InChI Stereo0D: hi! [InChI_Output: WARNING///hi!/hi!,NONE,hi!,hi!] Type::TETRAHEDRAL // Parity:ODD");

  }

  public void test403() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test403");


    net.sf.jniinchi.JniInchiOutputStructure var8 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var8);
    int var10 = var9.getNumBonds();
    net.sf.jniinchi.JniInchiInput var11 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var9);
    net.sf.jniinchi.JniInchiInput var12 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var9);
    net.sf.jniinchi.JniInchiInputData var15 = new net.sf.jniinchi.JniInchiInputData(10, var12, 9999, "net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiAtom var17 = var12.getAtom(0);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);

  }

  public void test404() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test404");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_STATUS var2 = net.sf.jniinchi.JniInchiWrapper.checkInchi("net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.LoadNativeLibraryException: ", true);
      fail("Expected exception of type net.sf.jniinchi.LoadNativeLibraryException");
    } catch (net.sf.jniinchi.LoadNativeLibraryException e) {
      // Expected exception.
    }

  }

  public void test405() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test405");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(5, "InChI Atom: hi! [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", "InChI Atom: hi! [10.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", 100L, 0L, 100L, (-1L));
    net.sf.jniinchi.INCHI_KEY var9 = net.sf.jniinchi.INCHI_KEY.getValue(0);
    net.sf.jniinchi.JniInchiOutputKey var11 = new net.sf.jniinchi.JniInchiOutputKey(var9, "InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiAtom var16 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var17 = var16.getCharge();
    var16.setImplicitTritium(10);
    double var20 = var16.getX();
    var16.setCharge(1);
    var16.setImplicitDeuterium(100);
    int var25 = var16.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var30 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var31 = var30.getCharge();
    var30.setImplicitTritium(10);
    double var34 = var30.getX();
    var30.setCharge(1);
    var30.setImplicitDeuterium(100);
    int var39 = var30.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var41 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var42 = var41.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var50 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var51 = var50.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var52 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var50);
    net.sf.jniinchi.JniInchiAtom[] var53 = new net.sf.jniinchi.JniInchiAtom[] { };
    var52.addAtoms(var53);
    boolean var55 = var41.equals((java.lang.Object)var53);
    net.sf.jniinchi.JniInchiBond var56 = new net.sf.jniinchi.JniInchiBond(var16, var30, var41);
    java.lang.String var57 = var56.getDebugString();
    boolean var58 = var9.equals((java.lang.Object)var56);
    net.sf.jniinchi.JniInchiAtom var59 = var56.getOriginAtom();
    net.sf.jniinchi.JniInchiAtom var60 = var56.getOriginAtom();
    net.sf.jniinchi.JniInchiBond var61 = var7.addBond(var56);
    net.sf.jniinchi.INCHI_RET var62 = var7.getReturnStatus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var57 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var57.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test406() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test406");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput(1, "", "", "hi!", "hi!");
    java.lang.String var6 = var5.getAuxInfo();
    java.lang.String var7 = var5.toString();
    net.sf.jniinchi.INCHI_RET var8 = var5.getReturnStatus();
    net.sf.jniinchi.JniInchiOutputStructure var9 = new net.sf.jniinchi.JniInchiOutputStructure(var8);
    net.sf.jniinchi.JniInchiOutputStructure var10 = new net.sf.jniinchi.JniInchiOutputStructure(var8);
    net.sf.jniinchi.JniInchiAtom var15 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    var15.setImplicitDeuterium((-1));
    net.sf.jniinchi.JniInchiAtom var22 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var23 = var22.getCharge();
    var22.setImplicitTritium(10);
    double var26 = var22.getX();
    int var27 = var22.getImplicitH();
    java.lang.String var28 = var22.getElementType();
    int var29 = var22.getImplicitProtium();
    var22.setIsotopicMass((-1));
    net.sf.jniinchi.INCHI_BOND_TYPE var33 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var34 = var33.getIndx();
    int var35 = var33.ordinal();
    net.sf.jniinchi.JniInchiBond var36 = new net.sf.jniinchi.JniInchiBond(var15, var22, var33);
    double var37 = var22.getX();
    double var38 = var22.getZ();
    var22.setImplicitTritium(10010);
    int var41 = var22.getCharge();
    net.sf.jniinchi.JniInchiAtom var42 = var10.addAtom(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "InChI_Output: WARNING///hi!/hi!"+ "'", var7.equals("InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi!"+ "'", var28.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test407() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test407");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(1, "net.sf.jniinchi.LoadNativeLibraryException: OK", "InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE", 1L, 100L, 100L, 0L);
    net.sf.jniinchi.JniInchiAtom var12 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var12.setImplicitProtium(1);
    int var15 = var12.getImplicitDeuterium();
    int var16 = var12.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var18 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var23 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var24 = var23.getCharge();
    var23.setImplicitTritium(10);
    double var27 = var23.getX();
    var23.setCharge(1);
    int var30 = var23.getIsotopicMass();
    int var31 = var23.getCharge();
    net.sf.jniinchi.JniInchiAtom var36 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var37 = var36.getCharge();
    var36.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var41 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var42 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var12, var18, var23, var36, var41);
    net.sf.jniinchi.INCHI_PARITY var44 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    var42.setDisconnectedParity(var44);
    net.sf.jniinchi.INCHI_PARITY var46 = var42.getParity();
    net.sf.jniinchi.INCHI_PARITY var47 = var42.getDisconnectedParity();
    java.lang.String var48 = var42.getDebugString();
    net.sf.jniinchi.JniInchiAtom[] var49 = var42.getNeighbors();
    var7.addAtoms(var49);
    net.sf.jniinchi.JniInchiOutputStructure var58 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var59 = var58.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var60 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var58);
    net.sf.jniinchi.JniInchiAtom[] var61 = new net.sf.jniinchi.JniInchiAtom[] { };
    var60.addAtoms(var61);
    net.sf.jniinchi.JniInchiOutputStructure var70 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var71 = var70.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var72 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var70);
    net.sf.jniinchi.JniInchiAtom[] var73 = new net.sf.jniinchi.JniInchiAtom[] { };
    var72.addAtoms(var73);
    var60.addAtoms(var73);
    var7.addAtoms(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD"+ "'", var48.equals("InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test408() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test408");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput((-1), "hi!", "", "", "");
    net.sf.jniinchi.INCHI_RET var6 = var5.getReturnStatus();
    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(var6);
    net.sf.jniinchi.JniInchiOutputStructure var8 = new net.sf.jniinchi.JniInchiOutputStructure(var6);
    net.sf.jniinchi.INCHI_RET var9 = var8.getReturnStatus();
    net.sf.jniinchi.INCHI_KEY var11 = net.sf.jniinchi.INCHI_KEY.getValue(0);
    net.sf.jniinchi.JniInchiOutputKey var13 = new net.sf.jniinchi.JniInchiOutputKey(var11, "InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiAtom var18 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var19 = var18.getCharge();
    var18.setImplicitTritium(10);
    double var22 = var18.getX();
    var18.setCharge(1);
    var18.setImplicitDeuterium(100);
    int var27 = var18.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var32 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var33 = var32.getCharge();
    var32.setImplicitTritium(10);
    double var36 = var32.getX();
    var32.setCharge(1);
    var32.setImplicitDeuterium(100);
    int var41 = var32.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var43 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var44 = var43.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var52 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var53 = var52.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var54 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var52);
    net.sf.jniinchi.JniInchiAtom[] var55 = new net.sf.jniinchi.JniInchiAtom[] { };
    var54.addAtoms(var55);
    boolean var57 = var43.equals((java.lang.Object)var55);
    net.sf.jniinchi.JniInchiBond var58 = new net.sf.jniinchi.JniInchiBond(var18, var32, var43);
    java.lang.String var59 = var58.getDebugString();
    boolean var60 = var11.equals((java.lang.Object)var58);
    net.sf.jniinchi.INCHI_BOND_TYPE var61 = var58.getBondType();
    net.sf.jniinchi.JniInchiAtom var62 = var58.getTargetAtom();
    var58.debug();
    java.lang.String var64 = var58.getDebugString();
    net.sf.jniinchi.JniInchiBond var65 = var8.addBond(var58);
    net.sf.jniinchi.INCHI_BOND_STEREO var66 = var65.getBondStereo();
    java.lang.String var67 = var66.name();
    int var68 = var66.getIndx();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var59.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var64.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "NONE"+ "'", var67.equals("NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);

  }

  public void test409() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test409");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var8 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput();
    var7.setStructure((net.sf.jniinchi.JniInchiStructure)var9);
    java.lang.String var11 = var9.getOptions();
    int var12 = var9.getNumBonds();
    net.sf.jniinchi.JniInchiOutput var18 = new net.sf.jniinchi.JniInchiOutput((-1), "hi!", "", "", "");
    net.sf.jniinchi.INCHI_RET var19 = var18.getReturnStatus();
    net.sf.jniinchi.JniInchiOutputStructure var20 = new net.sf.jniinchi.JniInchiOutputStructure(var19);
    net.sf.jniinchi.JniInchiOutputStructure var21 = new net.sf.jniinchi.JniInchiOutputStructure(var19);
    net.sf.jniinchi.INCHI_RET var22 = var21.getReturnStatus();
    var9.setStructure((net.sf.jniinchi.JniInchiStructure)var21);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiInput var25 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var9, "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:10 // Radical: NONE");
      fail("Expected exception of type net.sf.jniinchi.JniInchiException");
    } catch (net.sf.jniinchi.JniInchiException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test410() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test410");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_STEREOTYPE var1 = net.sf.jniinchi.INCHI_STEREOTYPE.valueOf("net.sf.jniinchi.JniInchiException: InChI_Output: EOF/InChI Atom: hi! [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE/OK/InChI Atom: hi! [100.0,100.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE/net.sf.jniinchi.JniInchiException: OK");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test411() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test411");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput(1, "", "", "hi!", "hi!");
    java.lang.String var6 = var5.getAuxInfo();
    java.lang.String var7 = var5.getLog();
    java.lang.String var8 = var5.toString();
    net.sf.jniinchi.INCHI_RET var9 = var5.getReturnStatus();
    net.sf.jniinchi.JniInchiAtom var14 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var15 = var14.getCharge();
    var14.setImplicitTritium(10);
    double var18 = var14.getX();
    var14.setCharge(1);
    var14.setImplicitDeuterium(100);
    int var23 = var14.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var28 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var29 = var28.getCharge();
    var28.setImplicitTritium(10);
    double var32 = var28.getX();
    var28.setCharge(1);
    var28.setImplicitDeuterium(100);
    int var37 = var28.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var39 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var40 = var39.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var48 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var49 = var48.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var50 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var48);
    net.sf.jniinchi.JniInchiAtom[] var51 = new net.sf.jniinchi.JniInchiAtom[] { };
    var50.addAtoms(var51);
    boolean var53 = var39.equals((java.lang.Object)var51);
    net.sf.jniinchi.JniInchiBond var54 = new net.sf.jniinchi.JniInchiBond(var14, var28, var39);
    net.sf.jniinchi.JniInchiAtom var56 = new net.sf.jniinchi.JniInchiAtom("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.INCHI_BOND_TYPE var58 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var59 = var58.ordinal();
    net.sf.jniinchi.INCHI_BOND_STEREO var61 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var62 = new net.sf.jniinchi.JniInchiBond(var28, var56, var58, var61);
    var56.setIsotopicMass(1);
    double var65 = var56.getY();
    boolean var66 = var9.equals((java.lang.Object)var65);
    net.sf.jniinchi.JniInchiOutputStructure var67 = new net.sf.jniinchi.JniInchiOutputStructure(var9);
    net.sf.jniinchi.JniInchiOutputStructure var68 = new net.sf.jniinchi.JniInchiOutputStructure(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "InChI_Output: WARNING///hi!/hi!"+ "'", var8.equals("InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);

  }

  public void test412() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test412");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_KEY var1 = net.sf.jniinchi.INCHI_KEY.valueOf("DOUBLET");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test413() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test413");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(10, "InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE", "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", 100L, 1L, (-1L), 100L);
    net.sf.jniinchi.JniInchiInput var8 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    net.sf.jniinchi.JniInchiOutputStructure var16 = new net.sf.jniinchi.JniInchiOutputStructure(10, "InChI_Output: null/InChI_Output: WARNING///hi!/hi!/InChI_Output: WARNING///hi!/hi!//hi!", "InChI_Output: WARNING/SINGLE_2UP/OK/InChI_Output: WARNING///hi!/hi!/InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP", (-1L), (-1L), 100L, (-1L));
    var7.setStructure((net.sf.jniinchi.JniInchiStructure)var16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiBond var19 = var16.getBond(5);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test414() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test414");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var8 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    net.sf.jniinchi.JniInchiOutputStructure var17 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var18 = var17.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var19 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var17);
    java.lang.String var20 = var19.getOptions();
    net.sf.jniinchi.JniInchiInput var21 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var19);
    net.sf.jniinchi.JniInchiAtom var26 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var27 = var26.getCharge();
    var26.setImplicitTritium(10);
    double var30 = var26.getX();
    var26.setCharge(1);
    var26.setImplicitDeuterium(100);
    int var35 = var26.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var40 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var41 = var40.getCharge();
    var40.setImplicitTritium(10);
    double var44 = var40.getX();
    var40.setCharge(1);
    var40.setImplicitDeuterium(100);
    int var49 = var40.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var51 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var52 = var51.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var60 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var61 = var60.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var62 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var60);
    net.sf.jniinchi.JniInchiAtom[] var63 = new net.sf.jniinchi.JniInchiAtom[] { };
    var62.addAtoms(var63);
    boolean var65 = var51.equals((java.lang.Object)var63);
    net.sf.jniinchi.JniInchiBond var66 = new net.sf.jniinchi.JniInchiBond(var26, var40, var51);
    java.lang.String var67 = var66.getDebugString();
    net.sf.jniinchi.JniInchiAtom var72 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var73 = var72.getCharge();
    var72.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var80 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var81 = var80.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var83 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var84 = var83.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var86 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var87 = new net.sf.jniinchi.JniInchiBond(var72, var80, var83, var86);
    net.sf.jniinchi.INCHI_BOND_STEREO var88 = var87.getBondStereo();
    var66.setStereoDefinition(var88);
    net.sf.jniinchi.JniInchiBond[] var90 = new net.sf.jniinchi.JniInchiBond[] { var66};
    var19.addBonds(var90);
    net.sf.jniinchi.JniInchiInputData var94 = new net.sf.jniinchi.JniInchiInputData(1, var19, 10, "hi!");
    var7.setStructure((net.sf.jniinchi.JniInchiStructure)var19);
    java.lang.String var96 = var19.getOptions();
    net.sf.jniinchi.JniInchiInput var97 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var19);
    int var98 = var97.getNumStereo0D();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + ""+ "'", var20.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var67.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var96 + "' != '" + ""+ "'", var96.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == 0);

  }

  public void test415() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test415");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_BOND_STEREO var1 = net.sf.jniinchi.INCHI_BOND_STEREO.valueOf("InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_2UP");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test416() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test416");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiInputInchi var2 = new net.sf.jniinchi.JniInchiInputInchi("InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", "InChI Atom: hi! [100.0,100.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:10100 // Radical: NONE");
      fail("Expected exception of type net.sf.jniinchi.JniInchiException");
    } catch (net.sf.jniinchi.JniInchiException e) {
      // Expected exception.
    }

  }

  public void test417() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test417");


    net.sf.jniinchi.JniInchiInputInchi var1 = new net.sf.jniinchi.JniInchiInputInchi("net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiOutput var2 = net.sf.jniinchi.JniInchiWrapper.getInchiFromInchi(var1);
      fail("Expected exception of type net.sf.jniinchi.LoadNativeLibraryException");
    } catch (net.sf.jniinchi.LoadNativeLibraryException e) {
      // Expected exception.
    }

  }

  public void test418() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test418");


    net.sf.jniinchi.JniInchiOutputStructure var8 = new net.sf.jniinchi.JniInchiOutputStructure(100, "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE", "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", 10L, (-1L), (-1L), 1L);
    int var9 = var8.getNumAtoms();
    int var10 = var8.getNumStereo0D();
    net.sf.jniinchi.JniInchiAtom var12 = new net.sf.jniinchi.JniInchiAtom("hi!");
    int var13 = var12.getImplicitProtium();
    var12.debug();
    net.sf.jniinchi.JniInchiAtom var15 = var8.addAtom(var12);
    int var16 = var8.getNumStereo0D();
    net.sf.jniinchi.JniInchiOutputStructure var25 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var26 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var25);
    net.sf.jniinchi.JniInchiInput var27 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var25);
    net.sf.jniinchi.JniInchiInputData var30 = new net.sf.jniinchi.JniInchiInputData(0, var27, 3, "NONE");
    var8.setStructure((net.sf.jniinchi.JniInchiStructure)var27);
    net.sf.jniinchi.JniInchiAtom var36 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var37 = var36.getCharge();
    var36.setImplicitTritium(10);
    double var40 = var36.getX();
    var36.setCharge(1);
    var36.setImplicitDeuterium(100);
    int var45 = var36.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var50 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var51 = var50.getCharge();
    var50.setImplicitTritium(10);
    double var54 = var50.getX();
    var50.setCharge(1);
    var50.setImplicitDeuterium(100);
    int var59 = var50.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var61 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var62 = var61.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var70 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var71 = var70.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var72 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var70);
    net.sf.jniinchi.JniInchiAtom[] var73 = new net.sf.jniinchi.JniInchiAtom[] { };
    var72.addAtoms(var73);
    boolean var75 = var61.equals((java.lang.Object)var73);
    net.sf.jniinchi.JniInchiBond var76 = new net.sf.jniinchi.JniInchiBond(var36, var50, var61);
    net.sf.jniinchi.INCHI_BOND_TYPE var77 = var76.getBondType();
    net.sf.jniinchi.INCHI_BOND_STEREO var78 = var76.getBondStereo();
    net.sf.jniinchi.JniInchiBond var79 = var27.addBond(var76);
    int var80 = var27.getNumStereo0D();
    net.sf.jniinchi.JniInchiInputData var83 = new net.sf.jniinchi.JniInchiInputData(5, var27, 10010, "hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);

  }

  public void test419() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test419");


    net.sf.jniinchi.INCHI_RET var1 = net.sf.jniinchi.INCHI_RET.getValue(3);
    int var2 = var1.getIndx();
    net.sf.jniinchi.JniInchiOutputStructure var3 = new net.sf.jniinchi.JniInchiOutputStructure(var1);
    int var4 = var1.getIndx();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 3);

  }

  public void test420() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test420");


    net.sf.jniinchi.JniInchiException var1 = new net.sf.jniinchi.JniInchiException("InChI_Output: WARNING///hi!/hi!");
    java.lang.String var2 = var1.toString();
    net.sf.jniinchi.JniInchiException var4 = new net.sf.jniinchi.JniInchiException("InChI_Output: WARNING///hi!/hi!");
    java.lang.String var5 = var4.toString();
    net.sf.jniinchi.LoadNativeLibraryException var6 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var4);
    var1.addSuppressed((java.lang.Throwable)var4);
    java.lang.String var8 = var1.toString();
    net.sf.jniinchi.JniInchiException var10 = new net.sf.jniinchi.JniInchiException("InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP");
    var1.addSuppressed((java.lang.Throwable)var10);
    net.sf.jniinchi.JniInchiException var13 = new net.sf.jniinchi.JniInchiException("InChI_Output: WARNING///hi!/hi!");
    java.lang.String var14 = var13.toString();
    var1.addSuppressed((java.lang.Throwable)var13);
    net.sf.jniinchi.JniInchiException var16 = new net.sf.jniinchi.JniInchiException((java.lang.Throwable)var13);
    java.lang.Throwable[] var17 = var16.getSuppressed();
    net.sf.jniinchi.LoadNativeLibraryException var18 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var2.equals("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var5.equals("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var8.equals("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var14.equals("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test421() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test421");


    net.sf.jniinchi.JniInchiAtom var1 = new net.sf.jniinchi.JniInchiAtom("InChI_Output: EOF/SINGLE_1UP/net.sf.jniinchi.LoadNativeLibraryException: /hi!/net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");
    var1.setImplicitDeuterium(4);
    int var4 = var1.getImplicitTritium();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test422() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test422");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_RADICAL var1 = net.sf.jniinchi.INCHI_RADICAL.valueOf("net.sf.jniinchi.JniInchiException: net.sf.jniinchi.JniInchiException: InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test423() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test423");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitTritium(10);
    var4.setImplicitTritium(1);
    net.sf.jniinchi.JniInchiAtom var11 = new net.sf.jniinchi.JniInchiAtom("InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE");
    var11.setCharge(0);
    var11.setImplicitProtium(100);
    net.sf.jniinchi.INCHI_BOND_TYPE var17 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var18 = var17.ordinal();
    java.lang.String var19 = var17.name();
    net.sf.jniinchi.JniInchiBond var20 = new net.sf.jniinchi.JniInchiBond(var4, var11, var17);
    int var21 = var11.getImplicitH();
    java.lang.String var22 = var11.getDebugString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "NONE"+ "'", var19.equals("NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "InChI Atom: InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:100 D:0 T:0 // Radical: NONE"+ "'", var22.equals("InChI Atom: InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:100 D:0 T:0 // Radical: NONE"));

  }

  public void test424() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test424");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitTritium(10);
    var4.setImplicitTritium(1);
    net.sf.jniinchi.INCHI_RADICAL var10 = var4.getRadical();
    var4.setIsotopicMassShift(1);
    int var13 = var4.getImplicitProtium();
    var4.setCharge(1);
    int var16 = var4.getIsotopicMass();
    java.lang.String var17 = var4.getDebugString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 10001);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "InChI Atom: hi! [1.0,10.0,100.0] Charge:1 // Iso Mass:10001 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE"+ "'", var17.equals("InChI Atom: hi! [1.0,10.0,100.0] Charge:1 // Iso Mass:10001 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE"));

  }

  public void test425() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test425");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_STATUS var2 = net.sf.jniinchi.JniInchiWrapper.checkInchi("OKAY", true);
      fail("Expected exception of type net.sf.jniinchi.LoadNativeLibraryException");
    } catch (net.sf.jniinchi.LoadNativeLibraryException e) {
      // Expected exception.
    }

  }

  public void test426() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test426");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput(4, "InChI_Output: null/InChI Atom: hi! [10.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE/InChI_Output: EOF/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/SINGLE_1UP/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/NONE/NONE/net.sf.jniinchi.JniInchiException", "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:10 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE", "InChI Atom: InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE [0.0,1.0,1.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:9999 T:0 // Radical: NONE", "InChI Atom: hi! [0.0,0.0,0.0] Charge:0 // Iso Mass:4 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE");

  }

  public void test427() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test427");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput(1, "", "", "hi!", "hi!");
    java.lang.String var6 = var5.getAuxInfo();
    java.lang.String var7 = var5.toString();
    net.sf.jniinchi.INCHI_RET var8 = var5.getReturnStatus();
    net.sf.jniinchi.JniInchiOutputStructure var9 = new net.sf.jniinchi.JniInchiOutputStructure(var8);
    int var10 = var9.getNumStereo0D();
    net.sf.jniinchi.JniInchiOutputStructure var18 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var19 = var18.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var20 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var18);
    java.lang.String var21 = var18.getLog();
    net.sf.jniinchi.JniInchiAtom var26 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var26.setImplicitProtium(1);
    int var29 = var26.getImplicitDeuterium();
    int var30 = var26.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var32 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var37 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var38 = var37.getCharge();
    var37.setImplicitTritium(10);
    double var41 = var37.getX();
    var37.setCharge(1);
    int var44 = var37.getIsotopicMass();
    int var45 = var37.getCharge();
    net.sf.jniinchi.JniInchiAtom var50 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var51 = var50.getCharge();
    var50.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var55 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var56 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var26, var32, var37, var50, var55);
    net.sf.jniinchi.JniInchiStereo0D var57 = var18.addStereo0D(var56);
    net.sf.jniinchi.INCHI_PARITY var58 = var56.getDisconnectedParity();
    net.sf.jniinchi.JniInchiAtom var60 = var56.getNeighbor(0);
    net.sf.jniinchi.INCHI_PARITY var61 = var56.getParity();
    net.sf.jniinchi.INCHI_STEREOTYPE var62 = var56.getStereoType();
    net.sf.jniinchi.INCHI_STEREOTYPE var63 = var56.getStereoType();
    net.sf.jniinchi.JniInchiAtom[] var64 = var56.getNeighbors();
    net.sf.jniinchi.JniInchiStereo0D var65 = var9.addStereo0D(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "InChI_Output: WARNING///hi!/hi!"+ "'", var7.equals("InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "hi!"+ "'", var21.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test428() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test428");


    net.sf.jniinchi.JniInchiInputInchi var1 = new net.sf.jniinchi.JniInchiInputInchi("InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_2UP");

  }

  public void test429() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test429");


    net.sf.jniinchi.JniInchiException var1 = new net.sf.jniinchi.JniInchiException("InChI_Output: null/InChI Atom: hi! [10.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE/InChI_Output: EOF/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/SINGLE_1UP/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/NONE/NONE/net.sf.jniinchi.JniInchiException");
    java.lang.Throwable[] var2 = var1.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test430() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test430");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 0.0d, 1.0d, "net.sf.jniinchi.LoadNativeLibraryException: ");
    net.sf.jniinchi.JniInchiAtom var9 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var9.setImplicitProtium(1);
    int var12 = var9.getImplicitDeuterium();
    int var13 = var9.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var15 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var20 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var21 = var20.getCharge();
    var20.setImplicitTritium(10);
    double var24 = var20.getX();
    var20.setCharge(1);
    int var27 = var20.getIsotopicMass();
    int var28 = var20.getCharge();
    net.sf.jniinchi.JniInchiAtom var33 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var34 = var33.getCharge();
    var33.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var38 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var39 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var9, var15, var20, var33, var38);
    double var40 = var9.getY();
    net.sf.jniinchi.JniInchiAtom var45 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var46 = var45.getCharge();
    var45.setImplicitTritium(10);
    var45.setImplicitTritium(1);
    net.sf.jniinchi.JniInchiAtom var52 = new net.sf.jniinchi.JniInchiAtom("InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE");
    var52.setCharge(0);
    var52.setImplicitProtium(100);
    net.sf.jniinchi.INCHI_BOND_TYPE var58 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var59 = var58.ordinal();
    java.lang.String var60 = var58.name();
    net.sf.jniinchi.JniInchiBond var61 = new net.sf.jniinchi.JniInchiBond(var45, var52, var58);
    net.sf.jniinchi.JniInchiOutputStructure var69 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var70 = var69.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var71 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var69);
    long[][] var72 = var69.getWarningFlags();
    net.sf.jniinchi.JniInchiAtom var77 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var78 = var77.getCharge();
    var77.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var85 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var86 = var85.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var88 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var89 = var88.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var91 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var92 = new net.sf.jniinchi.JniInchiBond(var77, var85, var88, var91);
    net.sf.jniinchi.JniInchiBond var93 = var69.addBond(var92);
    net.sf.jniinchi.INCHI_BOND_STEREO var94 = var93.getBondStereo();
    net.sf.jniinchi.JniInchiBond var95 = new net.sf.jniinchi.JniInchiBond(var4, var9, var58, var94);
    java.lang.String var96 = var58.toString();
    int var97 = var58.getIndx();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "NONE"+ "'", var60.equals("NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var96 + "' != '" + "NONE"+ "'", var96.equals("NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == 0);

  }

  public void test431() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test431");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var4.setImplicitProtium(1);
    int var7 = var4.getImplicitDeuterium();
    int var8 = var4.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var10 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var15 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var16 = var15.getCharge();
    var15.setImplicitTritium(10);
    double var19 = var15.getX();
    var15.setCharge(1);
    int var22 = var15.getIsotopicMass();
    int var23 = var15.getCharge();
    net.sf.jniinchi.JniInchiAtom var28 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var29 = var28.getCharge();
    var28.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var33 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var34 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var4, var10, var15, var28, var33);
    net.sf.jniinchi.INCHI_PARITY var36 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    var34.setDisconnectedParity(var36);
    net.sf.jniinchi.INCHI_PARITY var38 = var34.getParity();
    net.sf.jniinchi.INCHI_PARITY var40 = net.sf.jniinchi.INCHI_PARITY.getValue(0);
    var34.setDisconnectedParity(var40);
    net.sf.jniinchi.JniInchiOutputStructure var49 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var50 = var49.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var51 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var49);
    java.lang.String var52 = var49.getLog();
    net.sf.jniinchi.JniInchiAtom var57 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var57.setImplicitProtium(1);
    int var60 = var57.getImplicitDeuterium();
    int var61 = var57.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var63 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var68 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var69 = var68.getCharge();
    var68.setImplicitTritium(10);
    double var72 = var68.getX();
    var68.setCharge(1);
    int var75 = var68.getIsotopicMass();
    int var76 = var68.getCharge();
    net.sf.jniinchi.JniInchiAtom var81 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var82 = var81.getCharge();
    var81.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var86 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var87 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var57, var63, var68, var81, var86);
    net.sf.jniinchi.JniInchiStereo0D var88 = var49.addStereo0D(var87);
    net.sf.jniinchi.INCHI_PARITY var89 = var87.getDisconnectedParity();
    net.sf.jniinchi.JniInchiAtom var91 = var87.getNeighbor(0);
    java.lang.String var92 = var87.getDebugString();
    net.sf.jniinchi.JniInchiAtom[] var93 = var87.getNeighbors();
    net.sf.jniinchi.INCHI_PARITY var94 = var87.getDisconnectedParity();
    var34.setDisconnectedParity(var94);
    net.sf.jniinchi.INCHI_PARITY var96 = var34.getParity();
    net.sf.jniinchi.JniInchiAtom var97 = var34.getCentralAtom();
    net.sf.jniinchi.JniInchiAtom[] var98 = var34.getNeighbors();
    net.sf.jniinchi.JniInchiAtom[] var99 = var34.getNeighbors();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "hi!"+ "'", var52.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD"+ "'", var92.equals("InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test432() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test432");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitTritium(10);
    var4.setImplicitTritium(1);
    net.sf.jniinchi.INCHI_RADICAL var10 = var4.getRadical();
    net.sf.jniinchi.INCHI_RADICAL var11 = var4.getRadical();
    var4.setImplicitDeuterium(0);
    int var14 = var4.getImplicitTritium();
    net.sf.jniinchi.JniInchiAtom var19 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var19.setImplicitProtium(1);
    double var22 = var19.getY();
    net.sf.jniinchi.INCHI_RADICAL var23 = var19.getRadical();
    var4.setRadical(var23);
    net.sf.jniinchi.JniInchiOutput var30 = new net.sf.jniinchi.JniInchiOutput((-1), "hi!", "", "", "");
    net.sf.jniinchi.INCHI_RET var31 = var30.getReturnStatus();
    java.lang.String var32 = var30.toString();
    boolean var33 = var23.equals((java.lang.Object)var30);
    java.lang.String var34 = var30.getInchi();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "InChI_Output: EOF/hi!///"+ "'", var32.equals("InChI_Output: EOF/hi!///"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "hi!"+ "'", var34.equals("hi!"));

  }

  public void test433() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test433");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_KEY_STATUS var1 = net.sf.jniinchi.INCHI_KEY_STATUS.valueOf("net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.LoadNativeLibraryException: ");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test434() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test434");


    net.sf.jniinchi.JniInchiInputInchi var1 = new net.sf.jniinchi.JniInchiInputInchi("InChI Atom: hi! [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE");
    java.lang.String var2 = var1.getInchi();
    java.lang.String var3 = var1.getOptions();
    java.lang.String var4 = var1.getOptions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "InChI Atom: hi! [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE"+ "'", var2.equals("InChI Atom: hi! [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));

  }

  public void test435() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test435");


    net.sf.jniinchi.JniInchiOutputStructure var8 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var9 = var8.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var10 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var8);
    net.sf.jniinchi.JniInchiBond[] var11 = new net.sf.jniinchi.JniInchiBond[] { };
    var10.addBonds(var11);
    net.sf.jniinchi.JniInchiAtom var17 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var18 = var17.getCharge();
    var17.setImplicitTritium(10);
    double var21 = var17.getX();
    var17.setCharge(1);
    net.sf.jniinchi.JniInchiAtom var24 = var10.addAtom(var17);
    net.sf.jniinchi.JniInchiInputData var27 = new net.sf.jniinchi.JniInchiInputData(1, var10, 100, "InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP");
    java.lang.String var28 = var27.getErrorMessage();
    java.lang.String var29 = var27.getErrorMessage();
    net.sf.jniinchi.JniInchiInput var30 = var27.getInput();
    net.sf.jniinchi.JniInchiInput var31 = var27.getInput();
    net.sf.jniinchi.JniInchiInput var32 = var27.getInput();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP"+ "'", var28.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP"+ "'", var29.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test436() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test436");


    net.sf.jniinchi.JniInchiInput var0 = new net.sf.jniinchi.JniInchiInput();
    net.sf.jniinchi.JniInchiOutputStructure var8 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var9 = var8.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var10 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var8);
    var0.setStructure((net.sf.jniinchi.JniInchiStructure)var8);
    net.sf.jniinchi.JniInchiAtom var16 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var16.setImplicitProtium(1);
    int var19 = var16.getImplicitDeuterium();
    int var20 = var16.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var22 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var27 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var28 = var27.getCharge();
    var27.setImplicitTritium(10);
    double var31 = var27.getX();
    var27.setCharge(1);
    int var34 = var27.getIsotopicMass();
    int var35 = var27.getCharge();
    net.sf.jniinchi.JniInchiAtom var40 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var41 = var40.getCharge();
    var40.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var45 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var46 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var16, var22, var27, var40, var45);
    net.sf.jniinchi.INCHI_PARITY var48 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    var46.setDisconnectedParity(var48);
    net.sf.jniinchi.INCHI_PARITY var50 = var46.getParity();
    net.sf.jniinchi.INCHI_PARITY var51 = var46.getDisconnectedParity();
    java.lang.String var52 = var46.getDebugString();
    net.sf.jniinchi.JniInchiStereo0D var53 = var8.addStereo0D(var46);
    net.sf.jniinchi.INCHI_PARITY var54 = var46.getDisconnectedParity();
    net.sf.jniinchi.INCHI_PARITY var55 = var46.getDisconnectedParity();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD"+ "'", var52.equals("InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test437() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test437");


    net.sf.jniinchi.JniInchiOutputStructure var8 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var8);
    net.sf.jniinchi.JniInchiInput var10 = new net.sf.jniinchi.JniInchiInput();
    var8.setStructure((net.sf.jniinchi.JniInchiStructure)var10);
    net.sf.jniinchi.JniInchiOutputStructure var19 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var20 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var19);
    net.sf.jniinchi.JniInchiInput var21 = new net.sf.jniinchi.JniInchiInput();
    var19.setStructure((net.sf.jniinchi.JniInchiStructure)var21);
    java.lang.String var23 = var21.getOptions();
    var8.setStructure((net.sf.jniinchi.JniInchiStructure)var21);
    net.sf.jniinchi.JniInchiInputData var27 = new net.sf.jniinchi.JniInchiInputData(0, var21, 10, "InChI Atom: hi! [1.0,10.0,100.0] Charge:1 // Iso Mass:0 // Implicit H:10100 P:0 D:100 T:10 // Radical: NONE");
    java.lang.String var28 = var27.getErrorMessage();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + ""+ "'", var23.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "InChI Atom: hi! [1.0,10.0,100.0] Charge:1 // Iso Mass:0 // Implicit H:10100 P:0 D:100 T:10 // Radical: NONE"+ "'", var28.equals("InChI Atom: hi! [1.0,10.0,100.0] Charge:1 // Iso Mass:0 // Implicit H:10100 P:0 D:100 T:10 // Radical: NONE"));

  }

  public void test438() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test438");


    net.sf.jniinchi.JniInchiOutputStructure var8 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var9 = var8.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var10 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var8);
    net.sf.jniinchi.JniInchiBond[] var11 = new net.sf.jniinchi.JniInchiBond[] { };
    var10.addBonds(var11);
    net.sf.jniinchi.JniInchiAtom var17 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var18 = var17.getCharge();
    var17.setImplicitTritium(10);
    double var21 = var17.getX();
    var17.setCharge(1);
    net.sf.jniinchi.JniInchiAtom var24 = var10.addAtom(var17);
    net.sf.jniinchi.JniInchiInputData var27 = new net.sf.jniinchi.JniInchiInputData(1, var10, 100, "InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP");
    net.sf.jniinchi.JniInchiInput var28 = var27.getInput();
    net.sf.jniinchi.INCHI_RET var29 = var27.getReturnValue();
    java.lang.String var30 = var27.getErrorMessage();
    net.sf.jniinchi.INCHI_RET var31 = var27.getReturnValue();
    net.sf.jniinchi.INCHI_RET var32 = var27.getReturnValue();
    net.sf.jniinchi.JniInchiOutputStructure var33 = new net.sf.jniinchi.JniInchiOutputStructure(var32);
    net.sf.jniinchi.JniInchiOutputStructure var34 = new net.sf.jniinchi.JniInchiOutputStructure(var32);
    int var35 = var32.ordinal();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP"+ "'", var30.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 3);

  }

  public void test439() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test439");


    net.sf.jniinchi.JniInchiOutputKey var2 = new net.sf.jniinchi.JniInchiOutputKey(0, "NONE");
    java.lang.String var3 = var2.getKey();
    net.sf.jniinchi.INCHI_KEY var4 = var2.getReturnStatus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "NONE"+ "'", var3.equals("NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test440() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test440");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput(1, "SINGLE_2UP", "OK", "InChI_Output: WARNING///hi!/hi!", "InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP");
    net.sf.jniinchi.INCHI_RET var6 = var5.getReturnStatus();
    net.sf.jniinchi.JniInchiOutput var11 = new net.sf.jniinchi.JniInchiOutput(var6, "SINGLE_1UP", "InChI_Output: EOF/SINGLE_1UP/net.sf.jniinchi.LoadNativeLibraryException: /hi!/net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE", "InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE");
    int var12 = var6.ordinal();
    net.sf.jniinchi.JniInchiException var14 = new net.sf.jniinchi.JniInchiException("InChI_Output: WARNING///hi!/hi!");
    java.lang.String var15 = var14.toString();
    net.sf.jniinchi.JniInchiException var17 = new net.sf.jniinchi.JniInchiException("InChI_Output: WARNING///hi!/hi!");
    java.lang.String var18 = var17.toString();
    net.sf.jniinchi.LoadNativeLibraryException var19 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var17);
    var14.addSuppressed((java.lang.Throwable)var17);
    net.sf.jniinchi.LoadNativeLibraryException var21 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var17);
    net.sf.jniinchi.LoadNativeLibraryException var22 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var21);
    net.sf.jniinchi.JniInchiException var23 = new net.sf.jniinchi.JniInchiException((java.lang.Throwable)var22);
    boolean var24 = var6.equals((java.lang.Object)var23);
    net.sf.jniinchi.JniInchiOutputStructure var25 = new net.sf.jniinchi.JniInchiOutputStructure(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var15.equals("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var18.equals("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test441() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test441");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var12 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var13 = var12.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var15 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var16 = var15.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var18 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var19 = new net.sf.jniinchi.JniInchiBond(var4, var12, var15, var18);
    net.sf.jniinchi.INCHI_BOND_STEREO var20 = var19.getBondStereo();
    net.sf.jniinchi.JniInchiAtom var25 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var26 = var25.getCharge();
    var25.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var33 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var34 = var33.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var36 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var37 = var36.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var39 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var40 = new net.sf.jniinchi.JniInchiBond(var25, var33, var36, var39);
    net.sf.jniinchi.INCHI_BOND_STEREO var41 = var40.getBondStereo();
    net.sf.jniinchi.JniInchiAtom var42 = var40.getTargetAtom();
    net.sf.jniinchi.INCHI_BOND_STEREO var44 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    var40.setStereoDefinition(var44);
    var19.setStereoDefinition(var44);
    java.lang.String var47 = var44.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "SINGLE_1UP"+ "'", var47.equals("SINGLE_1UP"));

  }

  public void test442() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test442");


    net.sf.jniinchi.INCHI_KEY var1 = net.sf.jniinchi.INCHI_KEY.getValue(0);
    net.sf.jniinchi.JniInchiOutputKey var3 = new net.sf.jniinchi.JniInchiOutputKey(var1, "InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiAtom var8 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var9 = var8.getCharge();
    var8.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var16 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var17 = var16.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var19 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var20 = var19.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var22 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var23 = new net.sf.jniinchi.JniInchiBond(var8, var16, var19, var22);
    boolean var24 = var1.equals((java.lang.Object)var23);
    int var25 = var1.ordinal();
    net.sf.jniinchi.JniInchiOutputKey var27 = new net.sf.jniinchi.JniInchiOutputKey(var1, "net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);

  }

  public void test443() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test443");


    net.sf.jniinchi.LoadNativeLibraryException var1 = new net.sf.jniinchi.LoadNativeLibraryException("net.sf.jniinchi.JniInchiException: InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP");
    net.sf.jniinchi.LoadNativeLibraryException var2 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var1);
    net.sf.jniinchi.JniInchiException var4 = new net.sf.jniinchi.JniInchiException("InChI_Output: WARNING///hi!/hi!");
    java.lang.String var5 = var4.toString();
    net.sf.jniinchi.LoadNativeLibraryException var6 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var4);
    java.lang.String var7 = var6.toString();
    var1.addSuppressed((java.lang.Throwable)var6);
    net.sf.jniinchi.JniInchiException var9 = new net.sf.jniinchi.JniInchiException((java.lang.Throwable)var1);
    net.sf.jniinchi.LoadNativeLibraryException var10 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var5.equals("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var7.equals("net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));

  }

  public void test444() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test444");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput(100, "INVALID_LAYOUT", "InChI Atom: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi! [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", "net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", "net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.INCHI_RET var6 = var5.getReturnStatus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test445() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test445");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput((-1), "hi!", "", "", "");
    net.sf.jniinchi.INCHI_RET var6 = var5.getReturnStatus();
    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(var6);
    net.sf.jniinchi.JniInchiAtom var12 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var12.setImplicitProtium(1);
    double var15 = var12.getY();
    var12.setImplicitProtium(0);
    net.sf.jniinchi.INCHI_RADICAL var18 = var12.getRadical();
    int var19 = var12.getIsotopicMass();
    net.sf.jniinchi.JniInchiAtom var24 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var24.setImplicitProtium(1);
    double var27 = var24.getY();
    var24.setImplicitProtium(0);
    var24.setIsotopicMassShift(0);
    net.sf.jniinchi.JniInchiAtom var36 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var36.setImplicitProtium(1);
    double var39 = var36.getY();
    net.sf.jniinchi.INCHI_RADICAL var40 = var36.getRadical();
    var24.setRadical(var40);
    int var42 = var24.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var47 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var48 = var47.getCharge();
    var47.setImplicitTritium(10);
    var47.setImplicitTritium(1);
    net.sf.jniinchi.JniInchiAtom var54 = new net.sf.jniinchi.JniInchiAtom("InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE");
    var54.setCharge(0);
    var54.setImplicitProtium(100);
    net.sf.jniinchi.INCHI_BOND_TYPE var60 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var61 = var60.ordinal();
    java.lang.String var62 = var60.name();
    net.sf.jniinchi.JniInchiBond var63 = new net.sf.jniinchi.JniInchiBond(var47, var54, var60);
    net.sf.jniinchi.JniInchiBond var64 = new net.sf.jniinchi.JniInchiBond(var12, var24, var60);
    net.sf.jniinchi.JniInchiAtom var65 = var7.addAtom(var12);
    var12.setCharge(10001);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "NONE"+ "'", var62.equals("NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test446() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test446");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitTritium(10);
    var4.setImplicitTritium(1);
    net.sf.jniinchi.INCHI_RADICAL var10 = var4.getRadical();
    net.sf.jniinchi.INCHI_RADICAL var11 = var4.getRadical();
    var4.setImplicitDeuterium(0);
    int var14 = var4.getImplicitTritium();
    net.sf.jniinchi.JniInchiAtom var19 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var19.setImplicitProtium(1);
    double var22 = var19.getY();
    net.sf.jniinchi.INCHI_RADICAL var23 = var19.getRadical();
    var4.setRadical(var23);
    net.sf.jniinchi.JniInchiAtom var29 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var30 = var29.getCharge();
    var29.setImplicitTritium(10);
    double var33 = var29.getX();
    var29.setCharge(1);
    int var36 = var29.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var41 = new net.sf.jniinchi.JniInchiAtom((-1.0d), 1.0d, 0.0d, "InChI_Output: WARNING///hi!/hi!");
    java.lang.String var42 = var41.getElementType();
    net.sf.jniinchi.INCHI_RADICAL var43 = var41.getRadical();
    net.sf.jniinchi.JniInchiAtom var48 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    var48.setImplicitDeuterium(10);
    net.sf.jniinchi.JniInchiAtom var55 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var55.setImplicitProtium(1);
    int var58 = var55.getImplicitDeuterium();
    int var59 = var55.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var61 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var66 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var67 = var66.getCharge();
    var66.setImplicitTritium(10);
    double var70 = var66.getX();
    var66.setCharge(1);
    int var73 = var66.getIsotopicMass();
    int var74 = var66.getCharge();
    net.sf.jniinchi.JniInchiAtom var79 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var80 = var79.getCharge();
    var79.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var84 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var85 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var55, var61, var66, var79, var84);
    net.sf.jniinchi.INCHI_PARITY var87 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    var85.setDisconnectedParity(var87);
    net.sf.jniinchi.INCHI_PARITY var89 = var85.getParity();
    java.lang.String var90 = var89.toString();
    net.sf.jniinchi.JniInchiStereo0D var91 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var4, var29, var41, var48, var89);
    var91.debug();
    net.sf.jniinchi.INCHI_PARITY var94 = net.sf.jniinchi.INCHI_PARITY.getValue(0);
    java.lang.String var95 = var94.name();
    var91.setDisconnectedParity(var94);
    net.sf.jniinchi.INCHI_PARITY var97 = var91.getParity();
    net.sf.jniinchi.JniInchiAtom var98 = var91.getCentralAtom();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "InChI_Output: WARNING///hi!/hi!"+ "'", var42.equals("InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "ODD"+ "'", var90.equals("ODD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var95 + "' != '" + "NONE"+ "'", var95.equals("NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var98);

  }

  public void test447() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test447");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(10010, "InChI Atom: hi! [1.0,10.0,100.0] Charge:1 // Iso Mass:10001 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE", "InChI Atom: hi! [1.0,10.0,100.0] Charge:1 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:-1 // Radical: NONE", 1L, 100L, 1L, (-1L));

  }

  public void test448() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test448");


    net.sf.jniinchi.JniInchiOutputStructure var8 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var9 = var8.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var10 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var8);
    net.sf.jniinchi.JniInchiBond[] var11 = new net.sf.jniinchi.JniInchiBond[] { };
    var10.addBonds(var11);
    net.sf.jniinchi.JniInchiAtom var17 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var18 = var17.getCharge();
    var17.setImplicitTritium(10);
    double var21 = var17.getX();
    var17.setCharge(1);
    net.sf.jniinchi.JniInchiAtom var24 = var10.addAtom(var17);
    net.sf.jniinchi.JniInchiInputData var27 = new net.sf.jniinchi.JniInchiInputData(0, var10, 1, "InChI_Output: WARNING/SINGLE_2UP/OK/InChI_Output: WARNING///hi!/hi!/InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP");
    net.sf.jniinchi.JniInchiOutputStructure var35 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var36 = var35.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var37 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var35);
    java.lang.String var38 = var35.getLog();
    net.sf.jniinchi.JniInchiAtom var43 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var43.setImplicitProtium(1);
    int var46 = var43.getImplicitDeuterium();
    int var47 = var43.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var49 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var54 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var55 = var54.getCharge();
    var54.setImplicitTritium(10);
    double var58 = var54.getX();
    var54.setCharge(1);
    int var61 = var54.getIsotopicMass();
    int var62 = var54.getCharge();
    net.sf.jniinchi.JniInchiAtom var67 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var68 = var67.getCharge();
    var67.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var72 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var73 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var43, var49, var54, var67, var72);
    net.sf.jniinchi.JniInchiStereo0D var74 = var35.addStereo0D(var73);
    net.sf.jniinchi.INCHI_PARITY var75 = var73.getDisconnectedParity();
    net.sf.jniinchi.JniInchiAtom var77 = var73.getNeighbor(0);
    java.lang.String var78 = var73.getDebugString();
    net.sf.jniinchi.JniInchiStereo0D var79 = var10.addStereo0D(var73);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiOutput var80 = net.sf.jniinchi.JniInchiWrapper.getInchi(var10);
      fail("Expected exception of type net.sf.jniinchi.LoadNativeLibraryException");
    } catch (net.sf.jniinchi.LoadNativeLibraryException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "hi!"+ "'", var38.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD"+ "'", var78.equals("InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test449() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test449");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_BOND_TYPE var1 = net.sf.jniinchi.INCHI_BOND_TYPE.valueOf("InChI_Output: WARNING/InChI_Output: EOF/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/SINGLE_1UP/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/NONE/InChI Atom: hi! [1.0,10.0,100.0] Charge:10 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:10 // Radical: NONE/InChI Stereo0D: - [,hi!,hi!,NONE] Type::DOUBLEBOND // Parity:NONE/InChI Atom: hi! [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test450() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test450");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput((-1), "hi!", "", "", "");
    java.lang.String var6 = var5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "InChI_Output: EOF/hi!///"+ "'", var6.equals("InChI_Output: EOF/hi!///"));

  }

  public void test451() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test451");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiInputInchi var2 = new net.sf.jniinchi.JniInchiInputInchi("InChI Atom: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi! [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE", "InChI Atom: hi! [10.0,10.0,100.0] Charge:0 // Iso Mass:10010 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE");
      fail("Expected exception of type net.sf.jniinchi.JniInchiException");
    } catch (net.sf.jniinchi.JniInchiException e) {
      // Expected exception.
    }

  }

  public void test452() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test452");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    long[][] var10 = var7.getWarningFlags();
    net.sf.jniinchi.JniInchiAtom var15 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var16 = var15.getCharge();
    var15.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var23 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var24 = var23.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var26 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var27 = var26.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var29 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var30 = new net.sf.jniinchi.JniInchiBond(var15, var23, var26, var29);
    net.sf.jniinchi.JniInchiBond var31 = var7.addBond(var30);
    var31.debug();
    java.lang.String var33 = var31.getDebugString();
    net.sf.jniinchi.JniInchiAtom var34 = var31.getOriginAtom();
    var34.setImplicitProtium(2);
    java.lang.String var37 = var34.getDebugString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP"+ "'", var33.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:2 D:0 T:0 // Radical: NONE"+ "'", var37.equals("InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:2 D:0 T:0 // Radical: NONE"));

  }

  public void test453() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test453");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(100.0d, 100.0d, 100.0d, "hi!");
    int var5 = var4.getImplicitDeuterium();
    var4.setImplicitDeuterium(1);
    double var8 = var4.getX();
    var4.debug();
    int var10 = var4.getCharge();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);

  }

  public void test454() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test454");


    net.sf.jniinchi.LoadNativeLibraryException var1 = new net.sf.jniinchi.LoadNativeLibraryException("net.sf.jniinchi.LoadNativeLibraryException: OK");
    net.sf.jniinchi.JniInchiException var3 = new net.sf.jniinchi.JniInchiException("InChI_Output: WARNING///hi!/hi!");
    java.lang.String var4 = var3.toString();
    net.sf.jniinchi.JniInchiException var5 = new net.sf.jniinchi.JniInchiException((java.lang.Throwable)var3);
    var1.addSuppressed((java.lang.Throwable)var3);
    net.sf.jniinchi.JniInchiException var7 = new net.sf.jniinchi.JniInchiException((java.lang.Throwable)var3);
    net.sf.jniinchi.JniInchiException var8 = new net.sf.jniinchi.JniInchiException((java.lang.Throwable)var3);
    net.sf.jniinchi.JniInchiException var10 = new net.sf.jniinchi.JniInchiException("InChI_Output: WARNING///hi!/hi!");
    java.lang.String var11 = var10.toString();
    net.sf.jniinchi.LoadNativeLibraryException var12 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var10);
    java.lang.String var13 = var12.toString();
    java.lang.String var14 = var12.toString();
    net.sf.jniinchi.LoadNativeLibraryException var15 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var12);
    net.sf.jniinchi.JniInchiException var16 = new net.sf.jniinchi.JniInchiException((java.lang.Throwable)var15);
    net.sf.jniinchi.LoadNativeLibraryException var17 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var15);
    net.sf.jniinchi.LoadNativeLibraryException var18 = new net.sf.jniinchi.LoadNativeLibraryException((java.lang.Throwable)var17);
    var8.addSuppressed((java.lang.Throwable)var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var4.equals("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var11.equals("net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var13.equals("net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var14.equals("net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));

  }

  public void test455() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test455");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var8 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    net.sf.jniinchi.JniInchiAtom var13 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var13.setIsotopicMassShift(1);
    int var16 = var13.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var17 = var7.addAtom(var13);
    int var18 = var7.getNumAtoms();
    net.sf.jniinchi.JniInchiOutputStructure var26 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var27 = var26.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var28 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var26);
    long[][] var29 = var26.getWarningFlags();
    net.sf.jniinchi.JniInchiAtom var34 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var35 = var34.getCharge();
    var34.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var42 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var43 = var42.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var45 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var46 = var45.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var48 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var49 = new net.sf.jniinchi.JniInchiBond(var34, var42, var45, var48);
    net.sf.jniinchi.JniInchiBond var50 = var26.addBond(var49);
    net.sf.jniinchi.INCHI_BOND_TYPE var51 = var50.getBondType();
    var50.debug();
    net.sf.jniinchi.JniInchiBond var53 = var7.addBond(var50);
    var53.debug();
    net.sf.jniinchi.INCHI_BOND_STEREO var55 = var53.getBondStereo();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test456() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test456");


    net.sf.jniinchi.JniInchiOutputStructure var8 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var9 = var8.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var10 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var8);
    net.sf.jniinchi.JniInchiBond[] var11 = new net.sf.jniinchi.JniInchiBond[] { };
    var10.addBonds(var11);
    net.sf.jniinchi.JniInchiAtom var17 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var18 = var17.getCharge();
    var17.setImplicitTritium(10);
    double var21 = var17.getX();
    var17.setCharge(1);
    net.sf.jniinchi.JniInchiAtom var24 = var10.addAtom(var17);
    net.sf.jniinchi.JniInchiInputData var27 = new net.sf.jniinchi.JniInchiInputData(1, var10, 100, "InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP");
    java.lang.String var28 = var27.getErrorMessage();
    java.lang.String var29 = var27.getErrorMessage();
    net.sf.jniinchi.JniInchiInput var30 = var27.getInput();
    net.sf.jniinchi.JniInchiInput var31 = var27.getInput();
    net.sf.jniinchi.JniInchiOutputStructure var39 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var40 = var39.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var41 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var39);
    java.lang.String var42 = var39.getLog();
    net.sf.jniinchi.JniInchiAtom var47 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var47.setImplicitProtium(1);
    int var50 = var47.getImplicitDeuterium();
    int var51 = var47.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var53 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var58 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var59 = var58.getCharge();
    var58.setImplicitTritium(10);
    double var62 = var58.getX();
    var58.setCharge(1);
    int var65 = var58.getIsotopicMass();
    int var66 = var58.getCharge();
    net.sf.jniinchi.JniInchiAtom var71 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var72 = var71.getCharge();
    var71.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var76 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var77 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var47, var53, var58, var71, var76);
    net.sf.jniinchi.JniInchiStereo0D var78 = var39.addStereo0D(var77);
    net.sf.jniinchi.INCHI_PARITY var79 = var77.getDisconnectedParity();
    net.sf.jniinchi.JniInchiAtom var81 = var77.getNeighbor(0);
    net.sf.jniinchi.JniInchiAtom var83 = var77.getNeighbor(0);
    net.sf.jniinchi.JniInchiAtom var84 = var77.getCentralAtom();
    net.sf.jniinchi.JniInchiStereo0D var85 = var31.addStereo0D(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP"+ "'", var28.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP"+ "'", var29.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "hi!"+ "'", var42.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test457() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test457");


    net.sf.jniinchi.JniInchiInput var0 = new net.sf.jniinchi.JniInchiInput();
    net.sf.jniinchi.JniInchiInput var1 = new net.sf.jniinchi.JniInchiInput();
    net.sf.jniinchi.JniInchiOutputStructure var9 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var10 = var9.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var11 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var9);
    var1.setStructure((net.sf.jniinchi.JniInchiStructure)var9);
    net.sf.jniinchi.JniInchiAtom var17 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var17.setImplicitProtium(1);
    int var20 = var17.getImplicitDeuterium();
    int var21 = var17.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var23 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var28 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var29 = var28.getCharge();
    var28.setImplicitTritium(10);
    double var32 = var28.getX();
    var28.setCharge(1);
    int var35 = var28.getIsotopicMass();
    int var36 = var28.getCharge();
    net.sf.jniinchi.JniInchiAtom var41 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var42 = var41.getCharge();
    var41.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var46 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var47 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var17, var23, var28, var41, var46);
    net.sf.jniinchi.INCHI_PARITY var49 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    var47.setDisconnectedParity(var49);
    net.sf.jniinchi.INCHI_PARITY var51 = var47.getParity();
    net.sf.jniinchi.INCHI_PARITY var52 = var47.getDisconnectedParity();
    java.lang.String var53 = var47.getDebugString();
    net.sf.jniinchi.JniInchiStereo0D var54 = var9.addStereo0D(var47);
    net.sf.jniinchi.JniInchiAtom[] var55 = var47.getNeighbors();
    net.sf.jniinchi.INCHI_PARITY var56 = var47.getDisconnectedParity();
    net.sf.jniinchi.INCHI_PARITY var57 = var47.getDisconnectedParity();
    net.sf.jniinchi.JniInchiStereo0D var58 = var0.addStereo0D(var47);
    java.lang.String var59 = var0.getOptions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD"+ "'", var53.equals("InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + ""+ "'", var59.equals(""));

  }

  public void test458() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test458");


    net.sf.jniinchi.JniInchiOutput var6 = new net.sf.jniinchi.JniInchiOutput((-1), "hi!", "", "", "");
    net.sf.jniinchi.INCHI_RET var7 = var6.getReturnStatus();
    int var8 = var7.getIndx();
    net.sf.jniinchi.JniInchiOutput var13 = new net.sf.jniinchi.JniInchiOutput(var7, "", "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", "net.sf.jniinchi.LoadNativeLibraryException", "net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiOutputStructure var21 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var22 = var21.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var23 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var21);
    java.lang.String var24 = var23.getOptions();
    net.sf.jniinchi.JniInchiInput var25 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var23);
    net.sf.jniinchi.INCHI_KEY var27 = net.sf.jniinchi.INCHI_KEY.getValue(0);
    net.sf.jniinchi.JniInchiOutputKey var29 = new net.sf.jniinchi.JniInchiOutputKey(var27, "InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiAtom var34 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var35 = var34.getCharge();
    var34.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var42 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var43 = var42.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var45 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var46 = var45.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var48 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var49 = new net.sf.jniinchi.JniInchiBond(var34, var42, var45, var48);
    boolean var50 = var27.equals((java.lang.Object)var49);
    net.sf.jniinchi.JniInchiAtom var51 = var49.getOriginAtom();
    net.sf.jniinchi.JniInchiBond var52 = var23.addBond(var49);
    boolean var53 = var7.equals((java.lang.Object)var23);
    net.sf.jniinchi.JniInchiInputData var56 = new net.sf.jniinchi.JniInchiInputData(100, var23, 9999, "InChI Atom: hi! [1.0,10.0,100.0] Charge:1 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:10 // Radical: NONE");
    net.sf.jniinchi.JniInchiInput var57 = var56.getInput();
    java.lang.String var58 = var57.getOptions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + ""+ "'", var24.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + ""+ "'", var58.equals(""));

  }

  public void test459() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test459");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(0.0d, 1.0d, 0.0d, "");
    int var5 = var4.getImplicitProtium();
    var4.setImplicitH(10001);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);

  }

  public void test460() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test460");


    net.sf.jniinchi.JniInchiAtom var1 = new net.sf.jniinchi.JniInchiAtom("InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE");
    var1.setCharge(0);
    var1.setIsotopicMassShift(0);
    var1.setCharge(10001);
    int var8 = var1.getImplicitH();
    double var9 = var1.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.0d);

  }

  public void test461() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test461");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var8 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    net.sf.jniinchi.JniInchiAtom var13 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var13.setIsotopicMassShift(1);
    int var16 = var13.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var17 = var7.addAtom(var13);
    int var18 = var13.getCharge();
    net.sf.jniinchi.JniInchiAtom var23 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var24 = var23.getCharge();
    var23.setImplicitTritium(10);
    double var27 = var23.getX();
    var23.setCharge(1);
    double var30 = var23.getZ();
    var23.setIsotopicMassShift(100);
    net.sf.jniinchi.JniInchiAtom var37 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    var37.setImplicitDeuterium((-1));
    net.sf.jniinchi.JniInchiAtom var44 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var45 = var44.getCharge();
    var44.setImplicitTritium(10);
    double var48 = var44.getX();
    int var49 = var44.getImplicitH();
    java.lang.String var50 = var44.getElementType();
    int var51 = var44.getImplicitProtium();
    var44.setIsotopicMass((-1));
    net.sf.jniinchi.INCHI_BOND_TYPE var55 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var56 = var55.getIndx();
    int var57 = var55.ordinal();
    net.sf.jniinchi.JniInchiBond var58 = new net.sf.jniinchi.JniInchiBond(var37, var44, var55);
    int var59 = var55.getIndx();
    net.sf.jniinchi.JniInchiAtom var64 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var65 = var64.getCharge();
    var64.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var72 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var73 = var72.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var75 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var76 = var75.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var78 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var79 = new net.sf.jniinchi.JniInchiBond(var64, var72, var75, var78);
    net.sf.jniinchi.INCHI_BOND_STEREO var80 = var79.getBondStereo();
    int var81 = var80.ordinal();
    net.sf.jniinchi.JniInchiBond var82 = new net.sf.jniinchi.JniInchiBond(var13, var23, var55, var80);
    var13.debug();
    var13.debug();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "hi!"+ "'", var50.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 1);

  }

  public void test462() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test462");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_RADICAL var1 = net.sf.jniinchi.INCHI_RADICAL.valueOf("net.sf.jniinchi.LoadNativeLibraryException: OK");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test463() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test463");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitTritium(10);
    double var8 = var4.getX();
    var4.setCharge(1);
    var4.setImplicitDeuterium(100);
    int var13 = var4.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var18 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var19 = var18.getCharge();
    var18.setImplicitTritium(10);
    double var22 = var18.getX();
    var18.setCharge(1);
    var18.setImplicitDeuterium(100);
    int var27 = var18.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var29 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var30 = var29.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var38 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var39 = var38.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var40 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var38);
    net.sf.jniinchi.JniInchiAtom[] var41 = new net.sf.jniinchi.JniInchiAtom[] { };
    var40.addAtoms(var41);
    boolean var43 = var29.equals((java.lang.Object)var41);
    net.sf.jniinchi.JniInchiBond var44 = new net.sf.jniinchi.JniInchiBond(var4, var18, var29);
    net.sf.jniinchi.JniInchiAtom var45 = var44.getOriginAtom();
    net.sf.jniinchi.JniInchiAtom var50 = new net.sf.jniinchi.JniInchiAtom(0.0d, 100.0d, (-1.0d), "net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.INCHI_RADICAL var51 = var50.getRadical();
    var45.setRadical(var51);
    net.sf.jniinchi.JniInchiAtom var57 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var58 = var57.getCharge();
    var57.setImplicitTritium(10);
    var57.setImplicitTritium(1);
    net.sf.jniinchi.INCHI_RADICAL var63 = var57.getRadical();
    var57.setIsotopicMassShift(1);
    var57.setCharge(10);
    boolean var68 = var51.equals((java.lang.Object)var57);
    int var69 = var57.getImplicitProtium();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);

  }

  public void test464() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test464");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_BOND_STEREO var1 = net.sf.jniinchi.INCHI_BOND_STEREO.valueOf("net.sf.jniinchi.JniInchiException: InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:10001 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test465() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test465");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiInputInchi var2 = new net.sf.jniinchi.JniInchiInputInchi("InChI_Output: EOF/InChI Atom: hi! [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE/OK/InChI Atom: hi! [100.0,100.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE/net.sf.jniinchi.JniInchiException: OK", "net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException");
      fail("Expected exception of type net.sf.jniinchi.JniInchiException");
    } catch (net.sf.jniinchi.JniInchiException e) {
      // Expected exception.
    }

  }

  public void test466() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test466");


    net.sf.jniinchi.JniInchiAtom var1 = new net.sf.jniinchi.JniInchiAtom("net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");

  }

  public void test467() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test467");


    net.sf.jniinchi.JniInchiAtom var1 = new net.sf.jniinchi.JniInchiAtom("net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.LoadNativeLibraryException: ");

  }

  public void test468() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test468");


    net.sf.jniinchi.JniInchiOutputStructure var9 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var10 = var9.getNumAtoms();
    net.sf.jniinchi.INCHI_KEY var12 = net.sf.jniinchi.INCHI_KEY.getValue(0);
    net.sf.jniinchi.JniInchiOutputKey var14 = new net.sf.jniinchi.JniInchiOutputKey(var12, "InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiAtom var19 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var20 = var19.getCharge();
    var19.setImplicitTritium(10);
    double var23 = var19.getX();
    var19.setCharge(1);
    var19.setImplicitDeuterium(100);
    int var28 = var19.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var33 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var34 = var33.getCharge();
    var33.setImplicitTritium(10);
    double var37 = var33.getX();
    var33.setCharge(1);
    var33.setImplicitDeuterium(100);
    int var42 = var33.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var44 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var45 = var44.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var53 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var54 = var53.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var55 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var53);
    net.sf.jniinchi.JniInchiAtom[] var56 = new net.sf.jniinchi.JniInchiAtom[] { };
    var55.addAtoms(var56);
    boolean var58 = var44.equals((java.lang.Object)var56);
    net.sf.jniinchi.JniInchiBond var59 = new net.sf.jniinchi.JniInchiBond(var19, var33, var44);
    java.lang.String var60 = var59.getDebugString();
    boolean var61 = var12.equals((java.lang.Object)var59);
    net.sf.jniinchi.INCHI_BOND_TYPE var62 = var59.getBondType();
    net.sf.jniinchi.JniInchiAtom var63 = var59.getOriginAtom();
    net.sf.jniinchi.JniInchiBond var64 = var9.addBond(var59);
    int var65 = var9.getNumAtoms();
    long[][] var66 = var9.getWarningFlags();
    java.lang.String var67 = var9.getLog();
    net.sf.jniinchi.JniInchiOutputStructure var75 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var76 = var75.getNumAtoms();
    net.sf.jniinchi.JniInchiStructure var77 = new net.sf.jniinchi.JniInchiStructure();
    net.sf.jniinchi.JniInchiOutputStructure var85 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var86 = var85.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var87 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var85);
    net.sf.jniinchi.JniInchiAtom[] var88 = new net.sf.jniinchi.JniInchiAtom[] { };
    var87.addAtoms(var88);
    var77.addAtoms(var88);
    var75.setStructure(var77);
    net.sf.jniinchi.JniInchiInput var92 = new net.sf.jniinchi.JniInchiInput(var77);
    var9.setStructure((net.sf.jniinchi.JniInchiStructure)var92);
    net.sf.jniinchi.JniInchiInputData var96 = new net.sf.jniinchi.JniInchiInputData(3, var92, 10100, "InChI Atom: hi! [10.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE");
    net.sf.jniinchi.JniInchiInputData var99 = new net.sf.jniinchi.JniInchiInputData(10010, var92, 10000, "net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.LoadNativeLibraryException: ");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var60.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "hi!"+ "'", var67.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test469() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test469");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(0, "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", "", (-1L), 10L, 10L, 0L);
    long[][] var8 = var7.getWarningFlags();
    net.sf.jniinchi.JniInchiOutputStructure var16 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var17 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var16);
    net.sf.jniinchi.JniInchiAtom var22 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var23 = var22.getCharge();
    var22.setImplicitTritium(10);
    double var26 = var22.getX();
    var22.setCharge(1);
    var22.setImplicitDeuterium(100);
    int var31 = var22.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var36 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var37 = var36.getCharge();
    var36.setImplicitTritium(10);
    double var40 = var36.getX();
    var36.setCharge(1);
    var36.setImplicitDeuterium(100);
    int var45 = var36.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var47 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var48 = var47.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var56 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var57 = var56.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var58 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var56);
    net.sf.jniinchi.JniInchiAtom[] var59 = new net.sf.jniinchi.JniInchiAtom[] { };
    var58.addAtoms(var59);
    boolean var61 = var47.equals((java.lang.Object)var59);
    net.sf.jniinchi.JniInchiBond var62 = new net.sf.jniinchi.JniInchiBond(var22, var36, var47);
    net.sf.jniinchi.JniInchiBond var63 = var16.addBond(var62);
    var7.setStructure((net.sf.jniinchi.JniInchiStructure)var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test470() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test470");


    net.sf.jniinchi.INCHI_KEY var1 = net.sf.jniinchi.INCHI_KEY.getValue(0);
    net.sf.jniinchi.JniInchiOutputKey var3 = new net.sf.jniinchi.JniInchiOutputKey(var1, "InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiAtom var8 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var9 = var8.getCharge();
    var8.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var16 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var17 = var16.getCharge();
    net.sf.jniinchi.INCHI_BOND_TYPE var19 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    java.lang.Class var20 = var19.getDeclaringClass();
    net.sf.jniinchi.INCHI_BOND_STEREO var22 = net.sf.jniinchi.INCHI_BOND_STEREO.getValue(1);
    net.sf.jniinchi.JniInchiBond var23 = new net.sf.jniinchi.JniInchiBond(var8, var16, var19, var22);
    boolean var24 = var1.equals((java.lang.Object)var23);
    int var25 = var1.getIndx();
    net.sf.jniinchi.JniInchiOutputKey var27 = new net.sf.jniinchi.JniInchiOutputKey(var1, "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.INCHI_KEY var28 = var27.getReturnStatus();
    net.sf.jniinchi.JniInchiOutputKey var30 = new net.sf.jniinchi.JniInchiOutputKey(var28, "net.sf.jniinchi.JniInchiException: InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:10001 // Implicit H:-1 P:0 D:0 T:1 // Radical: NONE");
    net.sf.jniinchi.INCHI_KEY var31 = var30.getReturnStatus();
    net.sf.jniinchi.INCHI_KEY var32 = var30.getReturnStatus();
    java.lang.Class var33 = var32.getDeclaringClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Enum var35 = java.lang.Enum.<java.lang.Enum>valueOf(var33, "InChI Atom:  [0.0,1.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test471() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test471");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitTritium(10);
    double var8 = var4.getX();
    var4.setCharge(1);
    double var11 = var4.getZ();
    var4.setIsotopicMassShift(100);
    java.lang.String var14 = var4.getElementType();
    net.sf.jniinchi.JniInchiAtom var19 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var20 = var19.getCharge();
    var19.setImplicitTritium(10);
    var19.setImplicitTritium(1);
    net.sf.jniinchi.INCHI_RADICAL var25 = var19.getRadical();
    net.sf.jniinchi.INCHI_RADICAL var26 = var19.getRadical();
    var4.setRadical(var26);
    net.sf.jniinchi.INCHI_RADICAL var28 = var4.getRadical();
    int var29 = var28.getIndx();
    java.lang.String var30 = var28.name();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "hi!"+ "'", var14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "NONE"+ "'", var30.equals("NONE"));

  }

  public void test472() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test472");


    net.sf.jniinchi.JniInchiOutputStructure var9 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var10 = var9.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var11 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var9);
    net.sf.jniinchi.JniInchiBond[] var12 = new net.sf.jniinchi.JniInchiBond[] { };
    var11.addBonds(var12);
    net.sf.jniinchi.JniInchiAtom var18 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var19 = var18.getCharge();
    var18.setImplicitTritium(10);
    double var22 = var18.getX();
    var18.setCharge(1);
    net.sf.jniinchi.JniInchiAtom var25 = var11.addAtom(var18);
    net.sf.jniinchi.JniInchiInputData var28 = new net.sf.jniinchi.JniInchiInputData(1, var11, 100, "InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP");
    net.sf.jniinchi.JniInchiInput var29 = var28.getInput();
    net.sf.jniinchi.INCHI_RET var30 = var28.getReturnValue();
    java.lang.String var31 = var28.getErrorMessage();
    net.sf.jniinchi.INCHI_RET var32 = var28.getReturnValue();
    net.sf.jniinchi.INCHI_RET var33 = var28.getReturnValue();
    net.sf.jniinchi.JniInchiInput var34 = var28.getInput();
    java.lang.String var35 = var28.getErrorMessage();
    net.sf.jniinchi.JniInchiInput var36 = var28.getInput();
    net.sf.jniinchi.JniInchiInputData var39 = new net.sf.jniinchi.JniInchiInputData(0, var36, 1, "InChI Atom: hi! [0.0,0.0,0.0] Charge:0 // Iso Mass:10000 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE");
    net.sf.jniinchi.JniInchiInput var40 = var39.getInput();
    net.sf.jniinchi.INCHI_RET var41 = var39.getReturnValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP"+ "'", var31.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP"+ "'", var35.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test473() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test473");


    net.sf.jniinchi.JniInchiOutputKey var2 = new net.sf.jniinchi.JniInchiOutputKey(4, "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:1 D:0 T:0 // Radical: NONE");
    net.sf.jniinchi.INCHI_KEY var3 = var2.getReturnStatus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test474() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test474");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(0, "InChI_Output: null/InChI Atom: hi! [10.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE/InChI_Output: EOF/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/SINGLE_1UP/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/NONE/NONE/net.sf.jniinchi.JniInchiException", "net.sf.jniinchi.JniInchiException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", 100L, 1L, 1L, 10L);

  }

  public void test475() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test475");


    net.sf.jniinchi.INCHI_RET var1 = net.sf.jniinchi.INCHI_RET.getValue(3);
    net.sf.jniinchi.JniInchiOutput var6 = new net.sf.jniinchi.JniInchiOutput(var1, "InChI Atom: hi! [1.0,10.0,100.0] Charge:1 // Iso Mass:0 // Implicit H:-1 P:10 D:0 T:10 // Radical: NONE", "net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", "InChI_Output: null/InChI_Output: WARNING///hi!/hi!/InChI_Output: WARNING///hi!/hi!//hi!", "InChI_Output: null/InChI_Output: null/SINGLE_1UP/InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP/InChI Atom: NONE [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:0 // Radical: NONE/InChI_Output: null/InChI_Output: WARNING///hi!/hi!/InChI_Output: WARNING///hi!/hi!//hi!/InChI Atom: InChI_Output: EOF/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/SINGLE_1UP/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/NONE [1.0,-1.0,1.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/InChI Atom: hi! [10.0,10.0,100.0] Charge:0 // Iso Mass:10010 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE");
    java.lang.String var7 = var6.getAuxInfo();
    java.lang.String var8 = var6.getInchi();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"+ "'", var7.equals("net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "InChI Atom: hi! [1.0,10.0,100.0] Charge:1 // Iso Mass:0 // Implicit H:-1 P:10 D:0 T:10 // Radical: NONE"+ "'", var8.equals("InChI Atom: hi! [1.0,10.0,100.0] Charge:1 // Iso Mass:0 // Implicit H:-1 P:10 D:0 T:10 // Radical: NONE"));

  }

  public void test476() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test476");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_BOND_TYPE var1 = net.sf.jniinchi.INCHI_BOND_TYPE.valueOf("InChI Atom: hi! [1.0,10.0,100.0] Charge:1 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:-1 // Radical: NONE");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test477() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test477");


    net.sf.jniinchi.JniInchiInputInchi var1 = new net.sf.jniinchi.JniInchiInputInchi("InChI_Output: EOF/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/SINGLE_1UP/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/NONE");
    java.lang.String var2 = var1.getInchi();
    java.lang.String var3 = var1.getOptions();
    java.lang.String var4 = var1.getInchi();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiOutput var5 = net.sf.jniinchi.JniInchiWrapper.getInchiFromInchi(var1);
      fail("Expected exception of type net.sf.jniinchi.LoadNativeLibraryException");
    } catch (net.sf.jniinchi.LoadNativeLibraryException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "InChI_Output: EOF/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/SINGLE_1UP/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/NONE"+ "'", var2.equals("InChI_Output: EOF/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/SINGLE_1UP/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "InChI_Output: EOF/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/SINGLE_1UP/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/NONE"+ "'", var4.equals("InChI_Output: EOF/net.sf.jniinchi.JniInchiException: net.sf.jniinchi.LoadNativeLibraryException: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/SINGLE_1UP/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/NONE"));

  }

  public void test478() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test478");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(100.0d, (-1.0d), 1.0d, "net.sf.jniinchi.JniInchiException: InChI_Output: EOF/net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!/InChI Atom: hi! [1.0,10.0,100.0] Charge:1 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:10 // Radical: NONE/hi!/");

  }

  public void test479() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test479");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var4.setImplicitProtium(1);
    int var7 = var4.getImplicitDeuterium();
    int var8 = var4.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var10 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var15 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var16 = var15.getCharge();
    var15.setImplicitTritium(10);
    double var19 = var15.getX();
    var15.setCharge(1);
    int var22 = var15.getIsotopicMass();
    int var23 = var15.getCharge();
    net.sf.jniinchi.JniInchiAtom var28 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var29 = var28.getCharge();
    var28.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var33 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var34 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var4, var10, var15, var28, var33);
    net.sf.jniinchi.INCHI_PARITY var36 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    var34.setDisconnectedParity(var36);
    net.sf.jniinchi.INCHI_PARITY var38 = var34.getParity();
    net.sf.jniinchi.INCHI_PARITY var39 = var34.getDisconnectedParity();
    java.lang.String var40 = var34.getDebugString();
    net.sf.jniinchi.INCHI_PARITY var41 = var34.getParity();
    java.lang.String var42 = var41.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD"+ "'", var40.equals("InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "ODD"+ "'", var42.equals("ODD"));

  }

  public void test480() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test480");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(100.0d, 0.0d, 100.0d, "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE");
    var4.setImplicitProtium(0);
    java.lang.String var7 = var4.getDebugString();
    java.lang.String var8 = var4.getDebugString();
    var4.setCharge(6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "InChI Atom: InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE [100.0,0.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE"+ "'", var7.equals("InChI Atom: InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE [100.0,0.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "InChI Atom: InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE [100.0,0.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE"+ "'", var8.equals("InChI Atom: InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE [100.0,0.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:0 T:0 // Radical: NONE"));

  }

  public void test481() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test481");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_KEY_STATUS var1 = net.sf.jniinchi.INCHI_KEY_STATUS.valueOf("InChI_Output: EOF/net.sf.jniinchi.LoadNativeLibraryException: /InChI_Output: null/InChI_Output: WARNING///hi!/hi!/InChI_Output: WARNING///hi!/hi!//hi!/InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:1 // Radical: NONE/InChI_Output: null/InChI_Output: WARNING///hi!/hi!/InChI_Output: WARNING///hi!/hi!//hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test482() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test482");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    net.sf.jniinchi.JniInchiInput var8 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput();
    var7.setStructure((net.sf.jniinchi.JniInchiStructure)var9);
    net.sf.jniinchi.JniInchiOutput var16 = new net.sf.jniinchi.JniInchiOutput((-1), "hi!", "", "", "");
    net.sf.jniinchi.INCHI_RET var17 = var16.getReturnStatus();
    net.sf.jniinchi.JniInchiOutputStructure var18 = new net.sf.jniinchi.JniInchiOutputStructure(var17);
    net.sf.jniinchi.JniInchiOutputStructure var19 = new net.sf.jniinchi.JniInchiOutputStructure(var17);
    net.sf.jniinchi.INCHI_RET var20 = var19.getReturnStatus();
    int var21 = var19.getNumStereo0D();
    var9.setStructure((net.sf.jniinchi.JniInchiStructure)var19);
    int var23 = var9.getNumStereo0D();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);

  }

  public void test483() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test483");


    net.sf.jniinchi.JniInchiOutputStructure var8 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var9 = var8.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var10 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var8);
    net.sf.jniinchi.JniInchiBond[] var11 = new net.sf.jniinchi.JniInchiBond[] { };
    var10.addBonds(var11);
    net.sf.jniinchi.JniInchiAtom var17 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var18 = var17.getCharge();
    var17.setImplicitTritium(10);
    double var21 = var17.getX();
    var17.setCharge(1);
    net.sf.jniinchi.JniInchiAtom var24 = var10.addAtom(var17);
    net.sf.jniinchi.JniInchiInputData var27 = new net.sf.jniinchi.JniInchiInputData(1, var10, 100, "InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP");
    net.sf.jniinchi.INCHI_RET var28 = var27.getReturnValue();
    net.sf.jniinchi.JniInchiInput var29 = var27.getInput();
    net.sf.jniinchi.JniInchiInput var30 = var27.getInput();
    net.sf.jniinchi.INCHI_RET var31 = var27.getReturnValue();
    net.sf.jniinchi.JniInchiInput var32 = var27.getInput();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test484() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test484");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitTritium(10);
    double var8 = var4.getX();
    var4.setCharge(1);
    double var11 = var4.getZ();
    var4.setIsotopicMassShift(100);
    java.lang.String var14 = var4.getElementType();
    int var15 = var4.getImplicitProtium();
    int var16 = var4.getImplicitDeuterium();
    int var17 = var4.getIsotopicMass();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "hi!"+ "'", var14.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 10100);

  }

  public void test485() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test485");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput((-1), "hi!", "", "", "");
    java.lang.String var6 = var5.getAuxInfo();
    net.sf.jniinchi.INCHI_RET var7 = var5.getReturnStatus();
    net.sf.jniinchi.JniInchiOutput var12 = new net.sf.jniinchi.JniInchiOutput(var7, "OK", "", "InChI_Output: WARNING///hi!/hi!", "hi!");
    net.sf.jniinchi.JniInchiOutputStructure var13 = new net.sf.jniinchi.JniInchiOutputStructure(var7);
    java.lang.String var14 = var13.getLog();
    java.lang.String var15 = var13.getLog();
    net.sf.jniinchi.JniInchiAtom var20 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var21 = var20.getCharge();
    var20.setImplicitTritium(10);
    double var24 = var20.getX();
    var20.setCharge(1);
    var20.setImplicitDeuterium(100);
    int var29 = var20.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var34 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var35 = var34.getCharge();
    var34.setImplicitTritium(10);
    double var38 = var34.getX();
    var34.setCharge(1);
    var34.setImplicitDeuterium(100);
    int var43 = var34.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var45 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var46 = var45.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var54 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var55 = var54.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var56 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var54);
    net.sf.jniinchi.JniInchiAtom[] var57 = new net.sf.jniinchi.JniInchiAtom[] { };
    var56.addAtoms(var57);
    boolean var59 = var45.equals((java.lang.Object)var57);
    net.sf.jniinchi.JniInchiBond var60 = new net.sf.jniinchi.JniInchiBond(var20, var34, var45);
    net.sf.jniinchi.INCHI_BOND_TYPE var61 = var60.getBondType();
    net.sf.jniinchi.JniInchiBond var62 = var13.addBond(var60);
    net.sf.jniinchi.JniInchiAtom var63 = var62.getOriginAtom();
    net.sf.jniinchi.INCHI_RADICAL var64 = var63.getRadical();
    net.sf.jniinchi.INCHI_RADICAL var65 = var63.getRadical();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test486() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test486");


    net.sf.jniinchi.INCHI_KEY var1 = net.sf.jniinchi.INCHI_KEY.getValue(0);
    net.sf.jniinchi.JniInchiOutputKey var3 = new net.sf.jniinchi.JniInchiOutputKey(var1, "InChI_Output: WARNING///hi!/hi!");
    net.sf.jniinchi.JniInchiAtom var8 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var9 = var8.getCharge();
    var8.setImplicitTritium(10);
    double var12 = var8.getX();
    var8.setCharge(1);
    var8.setImplicitDeuterium(100);
    int var17 = var8.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var22 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var23 = var22.getCharge();
    var22.setImplicitTritium(10);
    double var26 = var22.getX();
    var22.setCharge(1);
    var22.setImplicitDeuterium(100);
    int var31 = var22.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var33 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var34 = var33.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var42 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var43 = var42.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var44 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var42);
    net.sf.jniinchi.JniInchiAtom[] var45 = new net.sf.jniinchi.JniInchiAtom[] { };
    var44.addAtoms(var45);
    boolean var47 = var33.equals((java.lang.Object)var45);
    net.sf.jniinchi.JniInchiBond var48 = new net.sf.jniinchi.JniInchiBond(var8, var22, var33);
    java.lang.String var49 = var48.getDebugString();
    boolean var50 = var1.equals((java.lang.Object)var48);
    net.sf.jniinchi.JniInchiOutputKey var52 = new net.sf.jniinchi.JniInchiOutputKey(var1, "InChI_Output: WARNING/SINGLE_2UP/OK/InChI_Output: WARNING///hi!/hi!/InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP");
    net.sf.jniinchi.INCHI_KEY var53 = var52.getReturnStatus();
    java.lang.String var54 = var52.getKey();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"+ "'", var49.equals("InChI Bond: hi!-hi! // Type: NONE // Stereo: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "InChI_Output: WARNING/SINGLE_2UP/OK/InChI_Output: WARNING///hi!/hi!/InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP"+ "'", var54.equals("InChI_Output: WARNING/SINGLE_2UP/OK/InChI_Output: WARNING///hi!/hi!/InChI Bond: hi!-hi! // Type: NONE // Stereo: SINGLE_1UP"));

  }

  public void test487() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test487");


    net.sf.jniinchi.JniInchiInputInchi var1 = new net.sf.jniinchi.JniInchiInputInchi("InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:-1 T:0 // Radical: NONE");
    java.lang.String var2 = var1.getInchi();
    java.lang.String var3 = var1.getInchi();
    java.lang.String var4 = var1.getInchi();
    java.lang.String var5 = var1.getOptions();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiOutputStructure var6 = net.sf.jniinchi.JniInchiWrapper.getStructureFromInchi(var1);
      fail("Expected exception of type net.sf.jniinchi.LoadNativeLibraryException");
    } catch (net.sf.jniinchi.LoadNativeLibraryException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:-1 T:0 // Radical: NONE"+ "'", var2.equals("InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:-1 T:0 // Radical: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:-1 T:0 // Radical: NONE"+ "'", var3.equals("InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:-1 T:0 // Radical: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:-1 T:0 // Radical: NONE"+ "'", var4.equals("InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:-1 T:0 // Radical: NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));

  }

  public void test488() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test488");


    net.sf.jniinchi.JniInchiInputInchi var1 = new net.sf.jniinchi.JniInchiInputInchi("InChI Atom: hi! [1.0,10.0,100.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:0 D:100 T:1 // Radical: NONE");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiOutput var2 = net.sf.jniinchi.JniInchiWrapper.getInchiFromInchi(var1);
      fail("Expected exception of type net.sf.jniinchi.LoadNativeLibraryException");
    } catch (net.sf.jniinchi.LoadNativeLibraryException e) {
      // Expected exception.
    }

  }

  public void test489() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test489");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var4.setImplicitProtium(1);
    double var7 = var4.getY();
    net.sf.jniinchi.INCHI_RADICAL var8 = var4.getRadical();
    var4.setIsotopicMass(10);
    double var11 = var4.getZ();
    int var12 = var4.getImplicitTritium();
    int var13 = var4.getIsotopicMass();
    var4.setImplicitH(4);
    var4.setImplicitDeuterium(3);
    java.lang.String var18 = var4.getDebugString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "InChI Atom: InChI_Output: WARNING///hi!/hi! [100.0,10.0,1.0] Charge:0 // Iso Mass:10 // Implicit H:4 P:1 D:3 T:0 // Radical: NONE"+ "'", var18.equals("InChI Atom: InChI_Output: WARNING///hi!/hi! [100.0,10.0,1.0] Charge:0 // Iso Mass:10 // Implicit H:4 P:1 D:3 T:0 // Radical: NONE"));

  }

  public void test490() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test490");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitTritium(10);
    var4.setImplicitTritium(1);
    net.sf.jniinchi.INCHI_RADICAL var10 = var4.getRadical();
    net.sf.jniinchi.INCHI_RADICAL var11 = var4.getRadical();
    var4.setImplicitDeuterium(0);
    int var14 = var4.getImplicitTritium();
    net.sf.jniinchi.JniInchiAtom var19 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var19.setImplicitProtium(1);
    double var22 = var19.getY();
    net.sf.jniinchi.INCHI_RADICAL var23 = var19.getRadical();
    var4.setRadical(var23);
    net.sf.jniinchi.JniInchiAtom var29 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var30 = var29.getCharge();
    var29.setImplicitTritium(10);
    double var33 = var29.getX();
    var29.setCharge(1);
    int var36 = var29.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var41 = new net.sf.jniinchi.JniInchiAtom((-1.0d), 1.0d, 0.0d, "InChI_Output: WARNING///hi!/hi!");
    java.lang.String var42 = var41.getElementType();
    net.sf.jniinchi.INCHI_RADICAL var43 = var41.getRadical();
    net.sf.jniinchi.JniInchiAtom var48 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    var48.setImplicitDeuterium(10);
    net.sf.jniinchi.JniInchiAtom var55 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var55.setImplicitProtium(1);
    int var58 = var55.getImplicitDeuterium();
    int var59 = var55.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var61 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var66 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var67 = var66.getCharge();
    var66.setImplicitTritium(10);
    double var70 = var66.getX();
    var66.setCharge(1);
    int var73 = var66.getIsotopicMass();
    int var74 = var66.getCharge();
    net.sf.jniinchi.JniInchiAtom var79 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var80 = var79.getCharge();
    var79.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var84 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var85 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var55, var61, var66, var79, var84);
    net.sf.jniinchi.INCHI_PARITY var87 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    var85.setDisconnectedParity(var87);
    net.sf.jniinchi.INCHI_PARITY var89 = var85.getParity();
    java.lang.String var90 = var89.toString();
    net.sf.jniinchi.JniInchiStereo0D var91 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var4, var29, var41, var48, var89);
    var91.debug();
    var91.debug();
    net.sf.jniinchi.INCHI_PARITY var94 = var91.getDisconnectedParity();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "InChI_Output: WARNING///hi!/hi!"+ "'", var42.equals("InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "ODD"+ "'", var90.equals("ODD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test491() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test491");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.INCHI_RET var9 = var7.getReturnStatus();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiBond var11 = var7.getBond(10010);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test492() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test492");


    net.sf.jniinchi.JniInchiAtom var1 = new net.sf.jniinchi.JniInchiAtom("hi!");
    var1.setCharge(0);
    net.sf.jniinchi.JniInchiAtom var8 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var8.setImplicitProtium(1);
    int var11 = var8.getImplicitDeuterium();
    int var12 = var8.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var14 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var19 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var20 = var19.getCharge();
    var19.setImplicitTritium(10);
    double var23 = var19.getX();
    var19.setCharge(1);
    int var26 = var19.getIsotopicMass();
    int var27 = var19.getCharge();
    net.sf.jniinchi.JniInchiAtom var32 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var33 = var32.getCharge();
    var32.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var37 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var38 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var8, var14, var19, var32, var37);
    net.sf.jniinchi.JniInchiAtom var43 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var44 = var43.getCharge();
    var43.setImplicitTritium(10);
    double var47 = var43.getX();
    var43.setCharge(1);
    var43.setImplicitDeuterium(100);
    int var52 = var43.getImplicitProtium();
    net.sf.jniinchi.JniInchiAtom var57 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var58 = var57.getCharge();
    var57.setImplicitTritium(10);
    double var61 = var57.getX();
    var57.setCharge(1);
    var57.setImplicitDeuterium(100);
    int var66 = var57.getImplicitProtium();
    net.sf.jniinchi.INCHI_BOND_TYPE var68 = net.sf.jniinchi.INCHI_BOND_TYPE.getValue(0);
    int var69 = var68.ordinal();
    net.sf.jniinchi.JniInchiOutputStructure var77 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var78 = var77.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var79 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var77);
    net.sf.jniinchi.JniInchiAtom[] var80 = new net.sf.jniinchi.JniInchiAtom[] { };
    var79.addAtoms(var80);
    boolean var82 = var68.equals((java.lang.Object)var80);
    net.sf.jniinchi.JniInchiBond var83 = new net.sf.jniinchi.JniInchiBond(var43, var57, var68);
    net.sf.jniinchi.INCHI_BOND_TYPE var84 = var83.getBondType();
    net.sf.jniinchi.JniInchiBond var85 = new net.sf.jniinchi.JniInchiBond(var1, var32, var84);
    int var86 = var1.getImplicitTritium();
    var1.debug();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0);

  }

  public void test493() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test493");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(10010, "EOF", "net.sf.jniinchi.JniInchiException: OK", 1L, 1L, 10L, 0L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7, "DOUBLEBOND");
      fail("Expected exception of type net.sf.jniinchi.JniInchiException");
    } catch (net.sf.jniinchi.JniInchiException e) {
      // Expected exception.
    }

  }

  public void test494() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test494");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(100.0d, 100.0d, 100.0d, "hi!");
    var4.setImplicitDeuterium(1);
    var4.setImplicitH(1);
    var4.setImplicitTritium(10000);

  }

  public void test495() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test495");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.INCHI_RADICAL var1 = net.sf.jniinchi.INCHI_RADICAL.valueOf("InChI Atom: net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi! [0.0,0.0,0.0] Charge:0 // Iso Mass:0 // Implicit H:-1 P:3 D:0 T:0 // Radical: NONE");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test496() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test496");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(0, "net.sf.jniinchi.JniInchiException: InChI_Output: WARNING///hi!/hi!", "", (-1L), 10L, 10L, 0L);
    java.lang.String var8 = var7.getLog();
    java.lang.String var9 = var7.getLog();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiAtom var11 = var7.getAtom(10000);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ""+ "'", var9.equals(""));

  }

  public void test497() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test497");


    net.sf.jniinchi.JniInchiOutputStructure var7 = new net.sf.jniinchi.JniInchiOutputStructure(100, "", "hi!", 100L, (-1L), (-1L), 10L);
    int var8 = var7.getNumAtoms();
    net.sf.jniinchi.JniInchiInput var9 = new net.sf.jniinchi.JniInchiInput((net.sf.jniinchi.JniInchiStructure)var7);
    java.lang.String var10 = var7.getLog();
    net.sf.jniinchi.JniInchiAtom var15 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var15.setImplicitProtium(1);
    int var18 = var15.getImplicitDeuterium();
    int var19 = var15.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var21 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var26 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var27 = var26.getCharge();
    var26.setImplicitTritium(10);
    double var30 = var26.getX();
    var26.setCharge(1);
    int var33 = var26.getIsotopicMass();
    int var34 = var26.getCharge();
    net.sf.jniinchi.JniInchiAtom var39 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var40 = var39.getCharge();
    var39.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var44 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var45 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var15, var21, var26, var39, var44);
    net.sf.jniinchi.JniInchiStereo0D var46 = var7.addStereo0D(var45);
    net.sf.jniinchi.INCHI_PARITY var47 = var45.getDisconnectedParity();
    net.sf.jniinchi.JniInchiAtom var49 = var45.getNeighbor(0);
    java.lang.String var50 = var45.getDebugString();
    net.sf.jniinchi.JniInchiAtom[] var51 = var45.getNeighbors();
    net.sf.jniinchi.INCHI_PARITY var52 = var45.getParity();
    java.lang.String var53 = var45.getDebugString();
    net.sf.jniinchi.INCHI_STEREOTYPE var54 = var45.getStereoType();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "hi!"+ "'", var10.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD"+ "'", var50.equals("InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD"+ "'", var53.equals("InChI Stereo0D: - [InChI_Output: WARNING///hi!/hi!,,hi!,hi!] Type::DOUBLEBOND // Parity:ODD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test498() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test498");


    net.sf.jniinchi.JniInchiAtom var4 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var5 = var4.getCharge();
    var4.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_RADICAL var8 = var4.getRadical();
    net.sf.jniinchi.JniInchiAtom var13 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var13.setIsotopicMassShift(1);
    int var16 = var13.getImplicitProtium();
    var13.setImplicitDeuterium(100);
    net.sf.jniinchi.JniInchiAtom var20 = new net.sf.jniinchi.JniInchiAtom("NONE");
    var20.setImplicitDeuterium(100);
    net.sf.jniinchi.JniInchiAtom var27 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var28 = var27.getCharge();
    var27.setImplicitProtium(1);
    net.sf.jniinchi.JniInchiAtom var35 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var36 = var35.getCharge();
    var35.setImplicitTritium(10);
    double var39 = var35.getX();
    var35.setCharge(1);
    double var42 = var35.getZ();
    var35.setImplicitTritium((-1));
    java.lang.String var45 = var35.getElementType();
    var35.setImplicitDeuterium((-1));
    var35.setIsotopicMassShift(1);
    net.sf.jniinchi.JniInchiAtom var54 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var54.setImplicitProtium(1);
    int var57 = var54.getImplicitDeuterium();
    int var58 = var54.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var60 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var65 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var66 = var65.getCharge();
    var65.setImplicitTritium(10);
    double var69 = var65.getX();
    var65.setCharge(1);
    int var72 = var65.getIsotopicMass();
    int var73 = var65.getCharge();
    net.sf.jniinchi.JniInchiAtom var78 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var79 = var78.getCharge();
    var78.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var83 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var84 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var54, var60, var65, var78, var83);
    net.sf.jniinchi.INCHI_PARITY var86 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    var84.setDisconnectedParity(var86);
    net.sf.jniinchi.INCHI_PARITY var88 = var84.getParity();
    net.sf.jniinchi.JniInchiAtom[] var89 = var84.getNeighbors();
    net.sf.jniinchi.JniInchiAtom var90 = var84.getCentralAtom();
    net.sf.jniinchi.INCHI_PARITY var91 = var84.getParity();
    net.sf.jniinchi.JniInchiStereo0D var92 = net.sf.jniinchi.JniInchiStereo0D.createNewTetrahedralStereo0D(var4, var13, var20, var27, var35, var91);
    var27.setImplicitTritium((-1));
    int var95 = var27.getIsotopicMass();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "hi!"+ "'", var45.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == 0);

  }

  public void test499() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test499");


    net.sf.jniinchi.JniInchiStructure var0 = net.sf.jniinchi.Main.getTestMolecule();
    net.sf.jniinchi.JniInchiAtom var5 = new net.sf.jniinchi.JniInchiAtom(100.0d, 10.0d, 1.0d, "InChI_Output: WARNING///hi!/hi!");
    var5.setImplicitProtium(1);
    int var8 = var5.getImplicitDeuterium();
    int var9 = var5.getImplicitH();
    net.sf.jniinchi.JniInchiAtom var11 = new net.sf.jniinchi.JniInchiAtom("");
    net.sf.jniinchi.JniInchiAtom var16 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var17 = var16.getCharge();
    var16.setImplicitTritium(10);
    double var20 = var16.getX();
    var16.setCharge(1);
    int var23 = var16.getIsotopicMass();
    int var24 = var16.getCharge();
    net.sf.jniinchi.JniInchiAtom var29 = new net.sf.jniinchi.JniInchiAtom(1.0d, 10.0d, 100.0d, "hi!");
    int var30 = var29.getCharge();
    var29.setImplicitProtium(1);
    net.sf.jniinchi.INCHI_PARITY var34 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    net.sf.jniinchi.JniInchiStereo0D var35 = net.sf.jniinchi.JniInchiStereo0D.createNewDoublebondStereo0D(var5, var11, var16, var29, var34);
    net.sf.jniinchi.INCHI_PARITY var37 = net.sf.jniinchi.INCHI_PARITY.getValue(1);
    var35.setDisconnectedParity(var37);
    net.sf.jniinchi.JniInchiStereo0D var39 = var0.addStereo0D(var35);
    net.sf.jniinchi.JniInchiAtom var40 = var35.getCentralAtom();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      net.sf.jniinchi.JniInchiAtom var42 = var35.getNeighbor(5);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);

  }

  public void test500() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test500");


    net.sf.jniinchi.JniInchiOutput var5 = new net.sf.jniinchi.JniInchiOutput(1, "", "", "hi!", "hi!");
    java.lang.String var6 = var5.getInchi();
    java.lang.String var7 = var5.toString();
    net.sf.jniinchi.INCHI_RET var8 = var5.getReturnStatus();
    java.lang.String var9 = var5.getLog();
    java.lang.String var10 = var5.getAuxInfo();
    java.lang.String var11 = var5.getLog();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + ""+ "'", var6.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "InChI_Output: WARNING///hi!/hi!"+ "'", var7.equals("InChI_Output: WARNING///hi!/hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + ""+ "'", var10.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));

  }

}
