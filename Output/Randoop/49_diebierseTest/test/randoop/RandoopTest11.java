package randoop;

import junit.framework.*;

public class RandoopTest11 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test1");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    var16.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var26 = var16.getPreferredSize();
    java.awt.Dimension var27 = var2.getSize(var26);
    java.awt.image.VolatileImage var30 = var2.createVolatileImage((-1), (-1));
    var2.repaint(100L);
    java.awt.ComponentOrientation var33 = var2.getComponentOrientation();
    java.awt.event.MouseMotionListener[] var34 = var2.getMouseMotionListeners();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    javax.swing.event.AncestorListener[] var45 = var37.getAncestorListeners();
    var37.enable(false);
    java.awt.Dimension var48 = var37.minimumSize();
    java.awt.Dimension var49 = var37.minimumSize();
    java.awt.dnd.DropTarget var50 = var37.getDropTarget();
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var54 = var53.isMaximumSizeSet();
    var53.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var53.invalidate();
    java.awt.Dimension var60 = var53.getPreferredSize();
    var53.show(false);
    boolean var63 = var53.isMaximumSizeSet();
    var53.firePropertyChange("PanelUI", 10L, 100L);
    boolean var68 = var53.isFocusTraversalPolicySet();
    boolean var69 = var53.requestFocusInWindow();
    javax.swing.InputVerifier var70 = var53.getInputVerifier();
    bierse.view.RunningMessagePanel var73 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var74 = var73.getPreferredSize();
    boolean var77 = var73.contains(10, 1);
    var73.setFocusTraversalPolicyProvider(false);
    float var80 = var73.getAlignmentX();
    java.awt.Component.BaselineResizeBehavior var81 = var73.getBaselineResizeBehavior();
    java.awt.dnd.DropTarget var82 = var73.getDropTarget();
    var73.layout();
    var73.setDebugGraphicsOptions(996);
    java.awt.Graphics var86 = var73.getGraphics();
    var53.update(var86);
    var37.paintComponents(var86);
    var2.paint(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test2() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test2");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    java.awt.Dimension var9 = var2.getPreferredSize();
    int var10 = var2.getWidth();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var14 = var13.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var17.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var24 = var17.location();
    java.awt.Component var25 = var13.findComponentAt(var24);
    var13.setEnabled(true);
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var30.transferFocus();
    var30.show();
    float var33 = var30.getAlignmentX();
    boolean var36 = var30.contains(0, 24);
    bierse.view.RunningMessagePanel var39 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var40 = var39.getPreferredSize();
    java.awt.Dimension var41 = var39.getMaximumSize();
    java.awt.event.FocusListener[] var42 = var39.getFocusListeners();
    bierse.view.RunningMessagePanel var45 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var46 = var45.getPreferredSize();
    boolean var49 = var45.contains(10, 1);
    java.awt.im.InputMethodRequests var50 = var45.getInputMethodRequests();
    java.awt.Font var51 = var45.getFont();
    var39.setFont(var51);
    java.awt.FontMetrics var53 = var30.getFontMetrics(var51);
    java.awt.FontMetrics var54 = var13.getFontMetrics(var51);
    int var55 = var13.getWidth();
    java.awt.Insets var56 = var13.getInsets();
    java.awt.Insets var57 = var2.getInsets(var56);
    java.awt.Container var58 = var2.getTopLevelAncestor();
    java.awt.Point var59 = var2.location();
    int var60 = var2.getHeight();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);

  }

  public void test3() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test3");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    java.awt.peer.ComponentPeer var6 = var2.getPeer();
    var2.transferFocusBackward();
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var11 = var10.getPreferredSize();
    boolean var14 = var10.contains(10, 1);
    java.awt.im.InputMethodRequests var15 = var10.getInputMethodRequests();
    boolean var16 = var10.getInheritsPopupMenu();
    java.lang.String var17 = var10.toString();
    boolean var18 = var10.getInheritsPopupMenu();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isMaximumSizeSet();
    var21.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var21.invalidate();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var31 = var30.isMaximumSizeSet();
    var30.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var39 = var38.isMaximumSizeSet();
    var38.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var44 = var38.getWidth();
    java.awt.Component[] var45 = var38.getComponents();
    var21.putClientProperty((java.lang.Object)var30, (java.lang.Object)var45);
    var30.transferFocus();
    var30.setToolTipText("");
    var30.show();
    int var51 = var30.getStringWidth();
    java.awt.Point var52 = var30.getLocation();
    java.awt.Point var53 = var10.getLocation(var52);
    java.awt.Component var54 = var2.findComponentAt(var53);
    boolean var55 = var2.isOptimizedDrawingEnabled();
    var2.list();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var17,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var17.equals("bierse.view.RunningMessagePanel[,0,0,0var17,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 996);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);

  }

  public void test4() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test4");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    java.lang.String var14 = var2.getName();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var18 = var17.getPreferredSize();
    boolean var19 = var17.isPreferredSizeSet();
    var17.enable();
    var17.transferFocusBackward();
    java.awt.event.MouseListener[] var22 = var17.getMouseListeners();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    var25.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var31 = var25.getTransferHandler();
    boolean var32 = var25.hasFocus();
    javax.swing.event.AncestorListener[] var33 = var25.getAncestorListeners();
    java.awt.Dimension var34 = var25.getMinimumSize();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var39 = var38.getPreferredSize();
    java.awt.Dimension var40 = var38.getMaximumSize();
    var38.disable();
    var25.putClientProperty((java.lang.Object)100, (java.lang.Object)var38);
    javax.swing.InputVerifier var43 = var38.getInputVerifier();
    boolean var44 = var38.getInheritsPopupMenu();
    var38.setLocation(0, 100);
    boolean var48 = var38.isFocusTraversalPolicyProvider();
    var38.list();
    javax.swing.event.AncestorListener[] var50 = var38.getAncestorListeners();
    java.awt.Cursor var51 = var38.getCursor();
    int var52 = var38.getY();
    bierse.view.RunningMessagePanel var55 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var55.transferFocus();
    var55.show();
    float var58 = var55.getAlignmentX();
    var55.repaint(0L, 10, 0, 10, (-1));
    boolean var65 = var55.isEnabled();
    bierse.view.RunningMessagePanel var68 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var69 = var68.getPreferredSize();
    javax.swing.JPopupMenu var70 = var68.getComponentPopupMenu();
    java.awt.Rectangle var71 = var68.bounds();
    java.awt.Rectangle var72 = var55.getBounds(var71);
    var38.setBounds(var72);
    java.awt.Rectangle var74 = var17.getBounds(var72);
    var2.computeVisibleRect(var74);
    boolean var76 = var2.isMaximumSizeSet();
    int var77 = var2.getHeight();
    java.awt.event.HierarchyBoundsListener[] var78 = var2.getHierarchyBoundsListeners();
    java.awt.Image var81 = var2.createImage(10, 12);
    java.awt.Component var84 = var2.findComponentAt(0, 24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);

  }

  public void test5() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test5");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    java.awt.peer.ComponentPeer var6 = var2.getPeer();
    var2.transferFocusDownCycle();
    var2.transferFocusUpCycle();
    var2.layout();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test6() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test6");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    java.awt.Font var9 = var2.getFont();
    java.beans.PropertyChangeListener[] var11 = var2.getPropertyChangeListeners("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    boolean var12 = var2.isValidateRoot();
    java.awt.Insets var13 = var2.insets();
    var2.transferFocusUpCycle();
    var2.requestFocus();
    var2.setDoubleBuffered(true);
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var21 = var20.isMaximumSizeSet();
    var20.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var26 = var20.getTransferHandler();
    boolean var27 = var20.hasFocus();
    var20.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var30 = var20.getPreferredSize();
    java.awt.ComponentOrientation var31 = var20.getComponentOrientation();
    java.lang.String var32 = var20.getName();
    java.awt.Font var33 = var20.getFont();
    java.awt.Rectangle var34 = var20.getVisibleRect();
    var2.computeVisibleRect(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test7() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test7");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.Insets var7 = var2.getInsets();
    javax.swing.JToolTip var8 = var2.createToolTip();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var17 = var11.getTransferHandler();
    boolean var18 = var11.hasFocus();
    javax.swing.event.AncestorListener[] var19 = var11.getAncestorListeners();
    var11.enable(false);
    int var22 = var8.getComponentZOrder((java.awt.Component)var11);
    boolean var23 = var8.requestFocusInWindow();
    var8.transferFocus();
    var8.setRequestFocusEnabled(false);
    boolean var27 = var8.isFocusTraversable();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var29 = var8.getComponent(100);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);

  }

  public void test8() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test8");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    int var12 = var2.getDebugGraphicsOptions();
    boolean var13 = var2.isEnabled();
    boolean var14 = var2.requestFocusInWindow();
    java.awt.Insets var15 = var2.insets();
    bierse.view.RunningMessagePanel var18 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var19 = var18.isMaximumSizeSet();
    var18.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var24 = var18.getTransferHandler();
    boolean var25 = var18.hasFocus();
    javax.swing.event.AncestorListener[] var26 = var18.getAncestorListeners();
    java.awt.Dimension var27 = var18.getMinimumSize();
    boolean var28 = var18.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var31 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var32 = var31.isMaximumSizeSet();
    var31.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var37 = var31.getTransferHandler();
    boolean var38 = var31.hasFocus();
    var31.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var41 = var31.getPreferredSize();
    java.awt.Dimension var42 = var18.getSize(var41);
    var2.setMaximumSize(var42);
    var2.setAlignmentY(0.0f);
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", false, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test9() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test9");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.setDoubleBuffered(false);
    java.awt.GraphicsConfiguration var7 = var2.getGraphicsConfiguration();
    java.awt.Component var10 = var2.locate((-1), (-1));
    java.awt.Font var11 = var2.getFont();
    javax.swing.KeyStroke[] var12 = var2.getRegisteredKeyStrokes();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var16 = var15.isLightweight();
    java.beans.VetoableChangeListener[] var17 = var15.getVetoableChangeListeners();
    float var18 = var15.getAlignmentY();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isMaximumSizeSet();
    var21.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var21.invalidate();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var31 = var30.isMaximumSizeSet();
    var30.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var39 = var38.isMaximumSizeSet();
    var38.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var44 = var38.getWidth();
    java.awt.Component[] var45 = var38.getComponents();
    var21.putClientProperty((java.lang.Object)var30, (java.lang.Object)var45);
    java.util.Locale var47 = var30.getLocale();
    javax.swing.JComponent.setDefaultLocale(var47);
    var15.setLocale(var47);
    var15.repaint();
    java.awt.Component var51 = var2.add((java.awt.Component)var15);
    var15.setFocusTraversalKeysEnabled(false);
    int var54 = var15.getHeight();
    var15.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=8,maximumSize=,minimumSize=,preferredSize=]", 1.0f, (-1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);

  }

  public void test10() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test10");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.setDoubleBuffered(false);
    java.awt.GraphicsConfiguration var7 = var2.getGraphicsConfiguration();
    java.beans.PropertyChangeListener[] var9 = var2.getPropertyChangeListeners("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=8,maximumSize=,minimumSize=,preferredSize=]");
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var13 = var12.getPreferredSize();
    boolean var16 = var12.contains(10, 1);
    java.awt.im.InputMethodRequests var17 = var12.getInputMethodRequests();
    var12.revalidate();
    var12.enable(true);
    java.awt.Point var21 = var12.location();
    java.awt.event.FocusListener[] var22 = var12.getFocusListeners();
    boolean var23 = var12.isCursorSet();
    var12.disable();
    var12.resize(0, 11);
    var2.remove((java.awt.Component)var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test11() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test11");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.Font var8 = var2.getFont();
    var2.disable();
    var2.removeAll();
    javax.swing.JToolTip var11 = var2.createToolTip();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test12() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test12");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var3 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var4 = var3.getPreferredSize();
    boolean var7 = var3.contains(10, 1);
    java.awt.im.InputMethodRequests var8 = var3.getInputMethodRequests();
    boolean var9 = var3.getInheritsPopupMenu();
    java.lang.String var10 = var3.toString();
    var3.enable();
    java.awt.Image var14 = var3.createImage(0, (-1));
    int var15 = var0.getIndexOf((java.lang.Object)(-1));
    java.lang.Object var16 = var0.getSelectedItem();
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var20 = var19.getPreferredSize();
    boolean var23 = var19.contains(10, 1);
    java.awt.Insets var24 = var19.getInsets();
    javax.swing.JToolTip var25 = var19.createToolTip();
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var29 = var28.isMaximumSizeSet();
    var28.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var34 = var28.getTransferHandler();
    boolean var35 = var28.hasFocus();
    javax.swing.event.AncestorListener[] var36 = var28.getAncestorListeners();
    var28.enable(false);
    int var39 = var25.getComponentZOrder((java.awt.Component)var28);
    boolean var40 = var25.requestFocusInWindow();
    java.awt.image.ColorModel var41 = var25.getColorModel();
    var0.removeElement((java.lang.Object)var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var10,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var10.equals("bierse.view.RunningMessagePanel[,0,0,0var10,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test13() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test13");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    java.awt.Component var11 = var2.getComponentAt(0, 0);
    java.awt.Dimension var12 = var2.minimumSize();
    float var13 = var2.getAlignmentY();
    java.util.Locale var14 = var2.getLocale();
    boolean var17 = var2.contains(11, 10);
    boolean var18 = var2.isMaximumSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test14() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test14");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    float var5 = var2.getAlignmentX();
    var2.repaint(0L, 10, 0, 10, (-1));
    boolean var12 = var2.isEnabled();
    java.lang.Object var13 = var2.getTreeLock();
    java.awt.event.HierarchyBoundsListener[] var14 = var2.getHierarchyBoundsListeners();
    boolean var15 = var2.requestFocusInWindow();
    var2.setLocation(32767, 11);
    java.awt.Cursor var19 = var2.getCursor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test15() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test15");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    javax.swing.InputMap var5 = var2.getInputMap();
    java.beans.PropertyChangeListener[] var7 = var2.getPropertyChangeListeners("");
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("", 12);
    java.util.Locale var11 = var10.getLocale();
    int var12 = var10.getHeight();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var16 = var15.isMaximumSizeSet();
    var15.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var21 = var15.getTransferHandler();
    boolean var22 = var15.hasFocus();
    javax.swing.event.AncestorListener[] var23 = var15.getAncestorListeners();
    java.awt.Dimension var24 = var15.getMinimumSize();
    boolean var25 = var15.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var29 = var28.isMaximumSizeSet();
    var28.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var34 = var28.getTransferHandler();
    boolean var35 = var28.hasFocus();
    var28.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var38 = var28.getPreferredSize();
    java.awt.Dimension var39 = var15.getSize(var38);
    java.awt.Dimension var40 = var10.getSize(var38);
    java.awt.Dimension var41 = var2.getSize(var40);
    boolean var42 = var2.isManagingFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test16() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test16");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    java.awt.Component[] var9 = var2.getComponents();
    var2.enable(true);
    var2.resetKeyboardActions();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var16 = var15.isMaximumSizeSet();
    var15.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var21 = var15.getTransferHandler();
    boolean var22 = var15.hasFocus();
    javax.swing.event.AncestorListener[] var23 = var15.getAncestorListeners();
    java.awt.Dimension var24 = var15.getMinimumSize();
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var29 = var28.getPreferredSize();
    java.awt.Dimension var30 = var28.getMaximumSize();
    var28.disable();
    var15.putClientProperty((java.lang.Object)100, (java.lang.Object)var28);
    javax.swing.InputVerifier var33 = var28.getInputVerifier();
    boolean var34 = var28.getInheritsPopupMenu();
    var28.setLocation(0, 100);
    boolean var38 = var28.isFocusTraversalPolicyProvider();
    var28.list();
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var42.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var49 = var42.location();
    java.awt.Font var50 = var42.getFont();
    var28.setFont(var50);
    var2.setFont(var50);
    bierse.view.RunningMessagePanel var55 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var56 = var55.isMaximumSizeSet();
    boolean var57 = var55.isOpaque();
    javax.swing.InputMap var58 = var55.getInputMap();
    java.beans.PropertyChangeListener[] var60 = var55.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var61 = var55.getComponentOrientation();
    java.awt.peer.ComponentPeer var62 = var55.getPeer();
    java.awt.Dimension var63 = var55.getMaximumSize();
    var55.setSpeed(13);
    int var66 = var2.getComponentZOrder((java.awt.Component)var55);
    java.awt.event.FocusListener[] var67 = var2.getFocusListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test17() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test17");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var10 = var9.getPreferredSize();
    java.awt.Point var11 = var9.getMousePosition();
    var9.setDoubleBuffered(false);
    java.awt.Dimension var14 = var9.minimumSize();
    var2.setMinimumSize(var14);
    boolean var16 = var2.getFocusTraversalKeysEnabled();
    var2.requestFocus();
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var21 = var20.isMaximumSizeSet();
    boolean var22 = var20.isOpaque();
    java.awt.event.HierarchyListener[] var23 = var20.getHierarchyListeners();
    java.awt.peer.ComponentPeer var24 = var20.getPeer();
    var20.transferFocusDownCycle();
    var20.transferFocusUpCycle();
    java.awt.Dimension var27 = var20.minimumSize();
    boolean var28 = var20.isVisible();
    bierse.view.RunningMessagePanel var31 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var31.transferFocus();
    var31.show();
    float var34 = var31.getAlignmentX();
    boolean var37 = var31.contains(0, 24);
    java.awt.Color var38 = var31.getForeground();
    var20.setForeground(var38);
    boolean var40 = var20.isShowing();
    int var41 = var20.getHeight();
    float var42 = var20.getAlignmentX();
    java.awt.Dimension var43 = var20.getMinimumSize();
    java.awt.Dimension var44 = var2.getSize(var43);
    float var45 = var2.getAlignmentY();
    boolean var46 = var2.isEnabled();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (short)10, (short)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);

  }

  public void test18() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test18");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    javax.swing.event.ListDataListener[] var1 = var0.getListDataListeners();
    bierse.view.RunningMessagePanel var4 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var4.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var11 = var4.location();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    var14.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var20 = var14.getTransferHandler();
    boolean var21 = var14.hasFocus();
    javax.swing.event.AncestorListener[] var22 = var14.getAncestorListeners();
    java.awt.Dimension var23 = var14.getMinimumSize();
    var4.resize(var23);
    int var25 = var0.getIndexOf((java.lang.Object)var23);
    int var26 = var0.getSize();
    bierse.view.RunningMessagePanel var29 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var30 = var29.isMaximumSizeSet();
    var29.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var35 = var29.getTransferHandler();
    boolean var36 = var29.hasFocus();
    var29.setVerifyInputWhenFocusTarget(false);
    int var39 = var29.getDebugGraphicsOptions();
    boolean var40 = var29.isEnabled();
    boolean var41 = var29.requestFocusInWindow();
    var0.removeElement((java.lang.Object)var41);
    int var43 = var0.getSize();
    java.lang.Object var45 = var0.getElementAt(11);
    int var46 = var0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 12);

  }

  public void test19() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test19");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var24 = var23.isMaximumSizeSet();
    var23.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var29 = var23.getTransferHandler();
    boolean var30 = var23.hasFocus();
    var23.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var33 = var23.getPreferredSize();
    java.awt.ComponentOrientation var34 = var23.getComponentOrientation();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    javax.swing.event.AncestorListener[] var45 = var37.getAncestorListeners();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var49 = var48.isMaximumSizeSet();
    var48.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var54 = var48.getTransferHandler();
    boolean var55 = var48.hasFocus();
    var48.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var58 = var48.getPreferredSize();
    java.awt.ComponentOrientation var59 = var48.getComponentOrientation();
    var23.add((java.awt.Component)var37, (java.lang.Object)var48);
    bierse.view.RunningMessagePanel var63 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var64 = var63.getPreferredSize();
    java.awt.Dimension var65 = var63.getMaximumSize();
    var48.resize(var65);
    var15.setNextFocusableComponent((java.awt.Component)var48);
    var15.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", ' ', 'a');
    var15.firePropertyChange("PanelUI", ' ', 'a');
    bierse.view.RunningMessagePanel var78 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var79 = var78.isMaximumSizeSet();
    boolean var80 = var78.isOpaque();
    java.awt.event.HierarchyListener[] var81 = var78.getHierarchyListeners();
    java.awt.peer.ComponentPeer var82 = var78.getPeer();
    var78.transferFocusDownCycle();
    var78.transferFocusUpCycle();
    java.awt.Dimension var85 = var78.minimumSize();
    var78.setVerifyInputWhenFocusTarget(true);
    java.awt.Dimension var88 = var78.size();
    java.awt.Color var89 = var78.getBackground();
    var15.setForeground(var89);
    boolean var91 = var15.isFocusable();
    java.awt.Point var92 = var15.getMousePosition();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);

  }

  public void test20() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test20");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    javax.swing.InputMap var5 = var2.getInputMap();
    java.lang.String var6 = var2.getName();
    var2.setFocusTraversalPolicyProvider(true);
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var11.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var18 = var11.location();
    java.awt.Component var19 = var2.findComponentAt(var18);
    java.awt.LayoutManager var20 = var2.getLayout();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var24 = var23.isMaximumSizeSet();
    boolean var25 = var23.isOpaque();
    javax.swing.InputMap var26 = var23.getInputMap();
    java.beans.PropertyChangeListener[] var28 = var23.getPropertyChangeListeners("");
    java.lang.String var29 = var23.toString();
    boolean var30 = var2.isFocusCycleRoot((java.awt.Container)var23);
    var23.revalidate();
    var23.updateUI();
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var36 = var35.getPreferredSize();
    java.awt.Dimension var37 = var35.getMaximumSize();
    java.awt.event.FocusListener[] var38 = var35.getFocusListeners();
    bierse.view.RunningMessagePanel var41 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var42 = var41.getPreferredSize();
    boolean var45 = var41.contains(10, 1);
    java.awt.im.InputMethodRequests var46 = var41.getInputMethodRequests();
    java.awt.Font var47 = var41.getFont();
    var35.setFont(var47);
    java.beans.VetoableChangeListener[] var49 = var35.getVetoableChangeListeners();
    boolean var50 = var35.isMaximumSizeSet();
    var35.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", (short)0, (short)10);
    java.awt.dnd.DropTarget var55 = var35.getDropTarget();
    java.awt.LayoutManager var56 = var35.getLayout();
    var23.setLayout(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var29,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]"+ "'", var29.equals("bierse.view.RunningMessagePanel[,0,0,0var29,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test21() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test21");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.event.HierarchyBoundsListener[] var7 = var2.getHierarchyBoundsListeners();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (short)(-1), (short)100);
    var2.invalidate();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    boolean var17 = var15.isPreferredSizeSet();
    var15.enable();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var22 = var21.getPreferredSize();
    boolean var23 = var21.isPreferredSizeSet();
    var21.enable();
    var21.transferFocusBackward();
    java.awt.Dimension var26 = var21.size();
    boolean var27 = var21.isFocusable();
    var21.enableInputMethods(false);
    java.awt.Cursor var30 = var21.getCursor();
    var2.putClientProperty((java.lang.Object)var15, (java.lang.Object)var30);
    java.beans.PropertyChangeListener[] var32 = var2.getPropertyChangeListeners();
    int var33 = var2.getStringWidth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 996);

  }

  public void test22() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test22");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    java.awt.peer.ComponentPeer var6 = var2.getPeer();
    var2.transferFocusDownCycle();
    var2.transferFocusUpCycle();
    javax.swing.JToolTip var9 = var2.createToolTip();
    java.awt.Component var10 = var9.getNextFocusableComponent();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var14 = var13.isMaximumSizeSet();
    boolean var15 = var13.isOpaque();
    java.awt.event.HierarchyListener[] var16 = var13.getHierarchyListeners();
    int var17 = var13.getWidth();
    int var18 = var13.countComponents();
    java.awt.Point var20 = var13.getMousePosition(true);
    var13.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    var13.requestFocus();
    var13.revalidate();
    java.awt.Component var25 = var9.add((java.awt.Component)var13);
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var29 = var28.isFocusTraversable();
    bierse.view.RunningMessagePanel var32 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var33 = var32.getPreferredSize();
    boolean var36 = var32.contains(10, 1);
    java.awt.im.InputMethodRequests var37 = var32.getInputMethodRequests();
    java.awt.event.FocusListener[] var38 = var32.getFocusListeners();
    java.awt.Font var39 = var32.getFont();
    java.beans.PropertyChangeListener[] var41 = var32.getPropertyChangeListeners("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    boolean var42 = var32.isValidateRoot();
    java.awt.Toolkit var43 = var32.getToolkit();
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var47 = var46.isMaximumSizeSet();
    var46.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var46.invalidate();
    java.awt.Dimension var53 = var46.getPreferredSize();
    var32.setMaximumSize(var53);
    var28.setSize(var53);
    bierse.view.RunningMessagePanel var58 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var59 = var58.isMaximumSizeSet();
    boolean var60 = var58.isOpaque();
    java.awt.event.HierarchyListener[] var61 = var58.getHierarchyListeners();
    int var62 = var58.getWidth();
    int var63 = var58.countComponents();
    var58.enable(false);
    bierse.view.RunningMessagePanel var68 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var69 = var68.getPreferredSize();
    java.awt.Dimension var70 = var68.getMaximumSize();
    var68.repaint();
    var68.disable();
    java.awt.Rectangle var73 = var68.getBounds();
    var58.paintImmediately(var73);
    java.awt.Rectangle var75 = var28.getBounds(var73);
    java.awt.Rectangle var76 = var13.getBounds(var75);
    bierse.view.RunningMessagePanel var79 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var80 = var79.getPreferredSize();
    boolean var83 = var79.contains(10, 1);
    java.awt.im.InputMethodRequests var84 = var79.getInputMethodRequests();
    var79.repaint((-1L), 1, (-1), 1, 24);
    java.awt.Container var91 = var79.getTopLevelAncestor();
    boolean var93 = var79.requestFocus(false);
    java.awt.Component var95 = var13.add((java.awt.Component)var79, 0);
    var95.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100L, 1L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test23() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test23");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    java.awt.peer.ComponentPeer var6 = var2.getPeer();
    var2.transferFocusDownCycle();
    var2.transferFocusUpCycle();
    java.awt.Dimension var9 = var2.minimumSize();
    boolean var10 = var2.isVisible();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var13.transferFocus();
    var13.show();
    float var16 = var13.getAlignmentX();
    boolean var19 = var13.contains(0, 24);
    java.awt.Color var20 = var13.getForeground();
    var2.setForeground(var20);
    boolean var22 = var2.isShowing();
    int var23 = var2.getHeight();
    float var24 = var2.getAlignmentX();
    java.awt.Dimension var25 = var2.getMinimumSize();
    int var28 = var2.getBaseline(13, 996);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));

  }

  public void test24() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test24");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    java.awt.Component[] var9 = var2.getComponents();
    var2.enable(true);
    var2.resetKeyboardActions();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var16 = var15.isMaximumSizeSet();
    var15.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var21 = var15.getTransferHandler();
    boolean var22 = var15.hasFocus();
    javax.swing.event.AncestorListener[] var23 = var15.getAncestorListeners();
    java.awt.Dimension var24 = var15.getMinimumSize();
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var29 = var28.getPreferredSize();
    java.awt.Dimension var30 = var28.getMaximumSize();
    var28.disable();
    var15.putClientProperty((java.lang.Object)100, (java.lang.Object)var28);
    javax.swing.InputVerifier var33 = var28.getInputVerifier();
    boolean var34 = var28.getInheritsPopupMenu();
    var28.setLocation(0, 100);
    boolean var38 = var28.isFocusTraversalPolicyProvider();
    var28.list();
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var42.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var49 = var42.location();
    java.awt.Font var50 = var42.getFont();
    var28.setFont(var50);
    var2.setFont(var50);
    bierse.view.RunningMessagePanel var55 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var56 = var55.isMaximumSizeSet();
    boolean var57 = var55.isOpaque();
    javax.swing.InputMap var58 = var55.getInputMap();
    java.beans.PropertyChangeListener[] var60 = var55.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var61 = var55.getComponentOrientation();
    java.awt.peer.ComponentPeer var62 = var55.getPeer();
    java.awt.Dimension var63 = var55.getMaximumSize();
    var55.setSpeed(13);
    int var66 = var2.getComponentZOrder((java.awt.Component)var55);
    bierse.view.RunningMessagePanel var69 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var70 = var69.isMaximumSizeSet();
    boolean var71 = var69.isOpaque();
    javax.swing.InputMap var72 = var69.getInputMap();
    java.beans.PropertyChangeListener[] var74 = var69.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var75 = var69.getComponentOrientation();
    java.awt.event.ContainerListener[] var76 = var69.getContainerListeners();
    java.awt.Toolkit var77 = var69.getToolkit();
    java.awt.Point var78 = var69.location();
    java.awt.Component var79 = var2.getComponentAt(var78);
    var2.move(11, 996);
    boolean var85 = var2.contains(0, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);

  }

  public void test25() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test25");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    java.awt.event.ContainerListener[] var7 = var2.getContainerListeners();
    java.awt.Dimension var8 = var2.getMaximumSize();
    boolean var9 = var2.isRequestFocusEnabled();
    boolean var10 = var2.hasFocus();
    int var11 = var2.getStringWidth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 996);

  }

  public void test26() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test26");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var9 = var2.location();
    var2.setAlignmentX(0.5f);
    var2.requestFocus();
    boolean var15 = var2.contains(24, 13);
    java.awt.event.HierarchyBoundsListener[] var16 = var2.getHierarchyBoundsListeners();
    boolean var17 = var2.isManagingFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test27() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test27");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    int var7 = var2.countComponents();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", (short)1, (short)10);
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var15 = var14.getPreferredSize();
    java.awt.Point var16 = var14.getMousePosition();
    var14.setDoubleBuffered(false);
    java.awt.GraphicsConfiguration var19 = var14.getGraphicsConfiguration();
    java.awt.Component var22 = var14.locate((-1), (-1));
    java.awt.Font var23 = var14.getFont();
    var2.setFont(var23);
    java.awt.Graphics var25 = var2.getGraphics();
    boolean var26 = var2.hasFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test28() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test28");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", 24);
    java.awt.LayoutManager var3 = var2.getLayout();
    var2.firePropertyChange("PanelUI", (short)10, (short)1);
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var10.transferFocus();
    var10.show();
    var10.disable();
    java.awt.Dimension var14 = var10.size();
    var2.setSize(var14);
    bierse.view.RunningMessagePanel var18 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var19 = var18.isMaximumSizeSet();
    boolean var20 = var18.isOpaque();
    java.beans.PropertyChangeListener[] var21 = var18.getPropertyChangeListeners();
    var18.setOpaque(true);
    java.awt.Insets var24 = var18.insets();
    boolean var25 = var18.isOptimizedDrawingEnabled();
    var18.disable();
    bierse.view.RunningMessagePanel var29 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var29.repaint(1L, (-1), (-1), 0, 100);
    boolean var36 = var29.isFocusTraversable();
    javax.swing.ActionMap var37 = var29.getActionMap();
    var18.setActionMap(var37);
    boolean var39 = var18.isMinimumSizeSet();
    java.awt.Container var40 = var18.getParent();
    java.awt.peer.ComponentPeer var41 = var18.getPeer();
    bierse.view.RunningMessagePanel var44 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var45 = var44.getPreferredSize();
    boolean var48 = var44.contains(10, 1);
    java.awt.im.InputMethodRequests var49 = var44.getInputMethodRequests();
    java.awt.event.FocusListener[] var50 = var44.getFocusListeners();
    java.awt.Font var51 = var44.getFont();
    java.beans.PropertyChangeListener[] var53 = var44.getPropertyChangeListeners("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    boolean var54 = var44.isValidateRoot();
    java.awt.Toolkit var55 = var44.getToolkit();
    bierse.view.RunningMessagePanel var58 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var59 = var58.isMaximumSizeSet();
    var58.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var58.invalidate();
    java.awt.Dimension var65 = var58.getPreferredSize();
    var44.setMaximumSize(var65);
    var18.setPreferredSize(var65);
    var2.resize(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test29() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test29");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var8 = var7.getPreferredSize();
    javax.swing.JPopupMenu var9 = var7.getComponentPopupMenu();
    java.awt.Rectangle var10 = var7.bounds();
    var2.computeVisibleRect(var10);
    java.awt.event.ComponentListener[] var12 = var2.getComponentListeners();
    java.awt.Insets var13 = var2.getInsets();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", '#', 'a');
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var20.transferFocus();
    java.awt.image.ColorModel var22 = var20.getColorModel();
    var20.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", (-1.0f), 0.5f);
    java.awt.event.MouseListener[] var27 = var20.getMouseListeners();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var31 = var30.getPreferredSize();
    boolean var32 = var30.isPreferredSizeSet();
    var30.enable();
    var30.transferFocusBackward();
    java.awt.event.MouseListener[] var35 = var30.getMouseListeners();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var39 = var38.isMaximumSizeSet();
    var38.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var44 = var38.getTransferHandler();
    boolean var45 = var38.hasFocus();
    javax.swing.event.AncestorListener[] var46 = var38.getAncestorListeners();
    java.awt.Dimension var47 = var38.getMinimumSize();
    bierse.view.RunningMessagePanel var51 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var52 = var51.getPreferredSize();
    java.awt.Dimension var53 = var51.getMaximumSize();
    var51.disable();
    var38.putClientProperty((java.lang.Object)100, (java.lang.Object)var51);
    javax.swing.InputVerifier var56 = var51.getInputVerifier();
    boolean var57 = var51.getInheritsPopupMenu();
    var51.setLocation(0, 100);
    boolean var61 = var51.isFocusTraversalPolicyProvider();
    var51.list();
    javax.swing.event.AncestorListener[] var63 = var51.getAncestorListeners();
    java.awt.Cursor var64 = var51.getCursor();
    int var65 = var51.getY();
    bierse.view.RunningMessagePanel var68 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var68.transferFocus();
    var68.show();
    float var71 = var68.getAlignmentX();
    var68.repaint(0L, 10, 0, 10, (-1));
    boolean var78 = var68.isEnabled();
    bierse.view.RunningMessagePanel var81 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var82 = var81.getPreferredSize();
    javax.swing.JPopupMenu var83 = var81.getComponentPopupMenu();
    java.awt.Rectangle var84 = var81.bounds();
    java.awt.Rectangle var85 = var68.getBounds(var84);
    var51.setBounds(var85);
    java.awt.Rectangle var87 = var30.getBounds(var85);
    java.awt.Rectangle var88 = var20.getBounds(var85);
    var2.paintImmediately(var88);
    java.lang.String var90 = var2.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);

  }

  public void test30() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test30");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var3 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var4 = var3.getPreferredSize();
    javax.swing.JPopupMenu var5 = var3.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var9 = var8.getPreferredSize();
    javax.swing.JPopupMenu var10 = var8.getComponentPopupMenu();
    java.awt.Rectangle var11 = var8.bounds();
    var3.computeVisibleRect(var11);
    int var13 = var0.getIndexOf((java.lang.Object)var3);
    var3.invalidate();
    java.awt.GraphicsConfiguration var15 = var3.getGraphicsConfiguration();
    javax.swing.JToolTip var16 = var3.createToolTip();
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var21 = var20.getPreferredSize();
    java.awt.Point var22 = var20.getMousePosition();
    var20.revalidate();
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var27 = var26.isMaximumSizeSet();
    var26.layout();
    var26.invalidate();
    var20.setNextFocusableComponent((java.awt.Component)var26);
    bierse.view.RunningMessagePanel var33 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var34 = var33.getPreferredSize();
    boolean var37 = var33.contains(10, 1);
    java.awt.Insets var38 = var33.getInsets();
    javax.swing.JToolTip var39 = var33.createToolTip();
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var43 = var42.isMaximumSizeSet();
    var42.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var48 = var42.getTransferHandler();
    boolean var49 = var42.hasFocus();
    var42.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var52 = var42.getPreferredSize();
    java.awt.ComponentOrientation var53 = var42.getComponentOrientation();
    bierse.view.RunningMessagePanel var56 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var57 = var56.isMaximumSizeSet();
    var56.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var62 = var56.getTransferHandler();
    boolean var63 = var56.hasFocus();
    javax.swing.event.AncestorListener[] var64 = var56.getAncestorListeners();
    bierse.view.RunningMessagePanel var67 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var68 = var67.isMaximumSizeSet();
    var67.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var73 = var67.getTransferHandler();
    boolean var74 = var67.hasFocus();
    var67.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var77 = var67.getPreferredSize();
    java.awt.ComponentOrientation var78 = var67.getComponentOrientation();
    var42.add((java.awt.Component)var56, (java.lang.Object)var67);
    bierse.view.RunningMessagePanel var82 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var83 = var82.getPreferredSize();
    java.awt.Dimension var84 = var82.getMaximumSize();
    var67.resize(var84);
    var39.setPreferredSize(var84);
    java.awt.Dimension var87 = var20.getSize(var84);
    boolean var88 = var20.isCursorSet();
    var20.setAlignmentY(1.0f);
    java.util.Set var92 = var20.getFocusTraversalKeys(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.setFocusTraversalKeys(24, var92);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test31() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test31");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    var16.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var26 = var16.getPreferredSize();
    java.awt.Dimension var27 = var2.getSize(var26);
    java.awt.image.VolatileImage var30 = var2.createVolatileImage((-1), (-1));
    var2.repaint(100L);
    java.awt.ComponentOrientation var33 = var2.getComponentOrientation();
    int var36 = var2.getBaseline(0, 996);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));

  }

  public void test32() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test32");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    int var20 = var2.getHeight();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var23.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var30 = var23.location();
    boolean var31 = var2.contains(var30);
    float var32 = var2.getAlignmentX();
    java.awt.Cursor var33 = var2.getCursor();
    java.awt.Dimension var34 = var2.getMaximumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test33() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test33");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.event.HierarchyBoundsListener[] var7 = var2.getHierarchyBoundsListeners();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (short)(-1), (short)100);
    boolean var12 = var2.requestDefaultFocus();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var15.transferFocus();
    var15.show();
    float var18 = var15.getAlignmentX();
    var15.repaint(0L, 10, 0, 10, (-1));
    boolean var25 = var15.isEnabled();
    java.lang.Object var26 = var15.getTreeLock();
    var15.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (byte)100, (byte)100);
    javax.swing.JPopupMenu var31 = var15.getComponentPopupMenu();
    java.awt.ComponentOrientation var32 = var15.getComponentOrientation();
    var2.applyComponentOrientation(var32);
    javax.swing.border.Border var34 = var2.getBorder();
    java.awt.Component var37 = var2.getComponentAt(10, 14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);

  }

  public void test34() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test34");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    int var20 = var2.getHeight();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var23.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var30 = var23.location();
    boolean var31 = var2.contains(var30);
    java.awt.event.InputMethodListener[] var32 = var2.getInputMethodListeners();
    var2.revalidate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test35() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test35");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    boolean var21 = var15.isValidateRoot();
    java.awt.Insets var22 = var15.getInsets();
    boolean var24 = var15.requestFocus(true);
    boolean var25 = var15.isShowing();
    var15.transferFocus();
    var15.list();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test36() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test36");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    java.awt.event.MouseListener[] var9 = var2.getMouseListeners();
    var2.paintImmediately(0, (-1), 12, 0);
    java.awt.Component var17 = var2.findComponentAt(12, 11);
    float var18 = var2.getAlignmentY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);

  }

  public void test37() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test37");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    boolean var16 = var14.isOpaque();
    javax.swing.InputMap var17 = var14.getInputMap();
    java.beans.PropertyChangeListener[] var19 = var14.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var20 = var14.getComponentOrientation();
    var2.applyComponentOrientation(var20);
    java.awt.Dimension var22 = var2.getMinimumSize();
    int var23 = var2.getY();
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var27 = var26.getPreferredSize();
    boolean var30 = var26.contains(10, 1);
    var26.setAlignmentX((-1.0f));
    java.awt.Point var33 = var26.getLocation();
    java.awt.Component var34 = var2.getComponentAt(var33);
    java.awt.Image var37 = var2.createImage((-1), 100);
    java.awt.Insets var38 = var2.insets();
    int var39 = var2.getHeight();
    int var40 = var2.getHeight();
    var2.disable();
    java.awt.Container var42 = var2.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);

  }

  public void test38() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test38");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    java.awt.Component[] var9 = var2.getComponents();
    var2.setRequestFocusEnabled(false);
    var2.setVisible(true);
    java.awt.Color var14 = var2.getBackground();
    boolean var15 = var2.isOptimizedDrawingEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);

  }

  public void test39() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test39");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    float var5 = var2.getAlignmentX();
    var2.repaint(0L, 10, 0, 10, (-1));
    java.awt.Insets var12 = var2.getInsets();
    boolean var13 = var2.isMaximumSizeSet();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var22 = var16.getWidth();
    java.awt.Image var25 = var16.createImage(24, 24);
    boolean var26 = var16.getInheritsPopupMenu();
    java.awt.image.ColorModel var27 = var16.getColorModel();
    java.lang.Object var28 = var2.getClientProperty((java.lang.Object)var27);
    boolean var29 = var2.isFontSet();
    int var30 = var2.getStringWidth();
    boolean var31 = var2.isDoubleBuffered();
    boolean var34 = var2.contains(996, 12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 996);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test40() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test40");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var3 = var2.getMouseWheelListeners();
    java.awt.Dimension var4 = var2.getPreferredSize();
    float var5 = var2.getAlignmentX();
    int var8 = var2.getBaseline(15, 12);
    java.awt.Container var9 = var2.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test41() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test41");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.beans.PropertyChangeListener[] var5 = var2.getPropertyChangeListeners();
    var2.setOpaque(true);
    java.awt.Insets var8 = var2.insets();
    boolean var9 = var2.isOptimizedDrawingEnabled();
    var2.list();
    java.awt.event.ContainerListener[] var11 = var2.getContainerListeners();
    java.awt.Dimension var12 = var2.getPreferredSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test42() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test42");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    int var7 = var2.countComponents();
    java.awt.Point var9 = var2.getMousePosition(true);
    var2.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var12 = var2.toString();
    java.awt.Font var13 = var2.getFont();
    javax.swing.plaf.PanelUI var14 = var2.getUI();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", (byte)(-1), (byte)(-1));
    var2.setAlignmentY(1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var12,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var12.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var12,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test43() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test43");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    var2.enable();
    javax.accessibility.AccessibleContext var6 = var2.getAccessibleContext();
    var2.setFocusable(false);
    var2.setIgnoreRepaint(false);
    boolean var11 = var2.isRequestFocusEnabled();
    java.awt.Component var14 = var2.getComponentAt(1, 10);
    javax.swing.JRootPane var15 = var2.getRootPane();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test44() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test44");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    var24.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var24.invalidate();
    java.awt.Dimension var31 = var24.getPreferredSize();
    int var32 = var24.getWidth();
    java.awt.Component var33 = var15.add("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var24);
    java.awt.Rectangle var34 = var24.getVisibleRect();
    var24.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    boolean var37 = var24.isRequestFocusEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);

  }

  public void test45() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test45");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    var2.setAlignmentY(10.0f);
    var2.setInheritsPopupMenu(false);
    javax.accessibility.AccessibleContext var18 = var2.getAccessibleContext();
    java.beans.PropertyChangeListener[] var19 = var2.getPropertyChangeListeners();
    java.awt.Dimension var20 = var2.minimumSize();
    var2.setSpeed(11);
    javax.swing.event.AncestorListener[] var23 = var2.getAncestorListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test46() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test46");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    javax.swing.event.ListDataListener[] var1 = var0.getListDataListeners();
    bierse.view.RunningMessagePanel var4 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var4.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var11 = var4.location();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    var14.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var20 = var14.getTransferHandler();
    boolean var21 = var14.hasFocus();
    javax.swing.event.AncestorListener[] var22 = var14.getAncestorListeners();
    java.awt.Dimension var23 = var14.getMinimumSize();
    var4.resize(var23);
    int var25 = var0.getIndexOf((java.lang.Object)var23);
    int var26 = var0.getSize();
    var0.removeAllElements();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var31 = var30.isMaximumSizeSet();
    var30.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var36 = var30.getTransferHandler();
    boolean var37 = var30.hasFocus();
    var30.setVerifyInputWhenFocusTarget(false);
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var43 = var42.isMaximumSizeSet();
    boolean var44 = var42.isOpaque();
    javax.swing.InputMap var45 = var42.getInputMap();
    java.beans.PropertyChangeListener[] var47 = var42.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var48 = var42.getComponentOrientation();
    var30.applyComponentOrientation(var48);
    java.awt.Dimension var50 = var30.getMinimumSize();
    int var51 = var30.getY();
    bierse.view.RunningMessagePanel var54 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var55 = var54.getPreferredSize();
    boolean var58 = var54.contains(10, 1);
    var54.setAlignmentX((-1.0f));
    java.awt.Point var61 = var54.getLocation();
    java.awt.Component var62 = var30.getComponentAt(var61);
    java.awt.Image var65 = var30.createImage((-1), 100);
    java.awt.Insets var66 = var30.insets();
    int var67 = var30.getHeight();
    boolean var69 = var30.requestFocus(true);
    var30.revalidate();
    var0.removeElement((java.lang.Object)var30);
    int var72 = var0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);

  }

  public void test47() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test47");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    var16.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var26 = var16.getPreferredSize();
    java.awt.Dimension var27 = var2.getSize(var26);
    var2.repaint(100L, 1, 0, 100, 24);
    var2.updateUI();
    javax.swing.TransferHandler var35 = var2.getTransferHandler();
    java.awt.Component.BaselineResizeBehavior var36 = var2.getBaselineResizeBehavior();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", 100L, 1L);
    java.awt.Dimension var41 = var2.getPreferredSize();
    boolean var42 = var2.isVisible();
    boolean var43 = var2.isFontSet();
    java.awt.Dimension var44 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var47 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var48 = var47.isMaximumSizeSet();
    var47.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var53 = var47.getTransferHandler();
    boolean var54 = var47.hasFocus();
    var47.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var57 = var47.getPreferredSize();
    java.awt.ComponentOrientation var58 = var47.getComponentOrientation();
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var62 = var61.isMaximumSizeSet();
    var61.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var67 = var61.getTransferHandler();
    boolean var68 = var61.hasFocus();
    var61.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var71 = var61.getPreferredSize();
    java.awt.Dimension var72 = var47.getSize(var71);
    var47.repaint(100L, 1, 0, 100, 24);
    var47.updateUI();
    javax.swing.TransferHandler var80 = var47.getTransferHandler();
    java.awt.Component.BaselineResizeBehavior var81 = var47.getBaselineResizeBehavior();
    var47.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", 100L, 1L);
    java.awt.Dimension var86 = var47.getPreferredSize();
    boolean var87 = var47.isVisible();
    boolean var88 = var47.isFontSet();
    java.awt.Point var89 = var47.getLocation();
    java.awt.Point var90 = var2.getLocation(var89);
    java.awt.Graphics var91 = var2.getGraphics();
    java.awt.Component var94 = var2.findComponentAt(13, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);

  }

  public void test48() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test48");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.Insets var7 = var2.getInsets();
    javax.swing.JToolTip var8 = var2.createToolTip();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var17 = var11.getTransferHandler();
    boolean var18 = var11.hasFocus();
    javax.swing.event.AncestorListener[] var19 = var11.getAncestorListeners();
    var11.enable(false);
    int var22 = var8.getComponentZOrder((java.awt.Component)var11);
    java.awt.Dimension var23 = var8.getMinimumSize();
    java.beans.PropertyChangeListener[] var25 = var8.getPropertyChangeListeners("");
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var29 = var28.getPreferredSize();
    java.awt.Dimension var30 = var28.getMaximumSize();
    var8.setPreferredSize(var30);
    javax.swing.TransferHandler var32 = var8.getTransferHandler();
    java.beans.VetoableChangeListener[] var33 = var8.getVetoableChangeListeners();
    boolean var34 = var8.isPreferredSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);

  }

  public void test49() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test49");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var8 = var2.isFocusTraversalPolicySet();
    java.awt.event.FocusListener[] var9 = var2.getFocusListeners();
    boolean var10 = var2.isFontSet();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var14 = var13.isMaximumSizeSet();
    boolean var15 = var13.isOpaque();
    java.awt.event.HierarchyListener[] var16 = var13.getHierarchyListeners();
    int var17 = var13.getWidth();
    int var18 = var13.countComponents();
    java.awt.Point var20 = var13.getMousePosition(true);
    var13.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var23 = var13.toString();
    java.awt.Font var24 = var13.getFont();
    java.awt.FontMetrics var25 = var2.getFontMetrics(var24);
    boolean var26 = var2.isDoubleBuffered();
    boolean var27 = var2.isFocusCycleRoot();
    var2.setDoubleBuffered(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var23,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var23.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var23,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test50() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test50");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    int var7 = var2.countComponents();
    java.awt.Point var9 = var2.getMousePosition(true);
    var2.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var12 = var2.toString();
    java.awt.Font var13 = var2.getFont();
    javax.swing.plaf.PanelUI var14 = var2.getUI();
    java.awt.Dimension var15 = var2.getPreferredSize();
    var2.firePropertyChange("", (-1), 1);
    int var22 = var2.getBaseline(1, 12);
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    var25.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var31 = var25.getTransferHandler();
    boolean var32 = var25.hasFocus();
    var25.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var35 = var25.getPreferredSize();
    java.awt.ComponentOrientation var36 = var25.getComponentOrientation();
    java.lang.String var37 = var25.getName();
    java.awt.Dimension var38 = var25.size();
    java.awt.Dimension var39 = var2.getSize(var38);
    boolean var41 = var2.requestFocus(false);
    var2.setEnabled(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var12,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var12.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var12,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test51() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test51");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    float var5 = var2.getAlignmentX();
    var2.move(100, 10);
    var2.setOpaque(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);

  }

  public void test52() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test52");


    bierse.view.MyKeyMap var2 = new bierse.view.MyKeyMap("hi!", 1);
    int var3 = var2.getCode();
    java.lang.String var4 = var2.toString();
    java.lang.String var5 = var2.getText();
    java.lang.String var6 = var2.getText();
    java.lang.String var7 = var2.getText();
    java.lang.String var8 = var2.getText();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));

  }

  public void test53() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test53");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var11 = var10.getPreferredSize();
    boolean var14 = var10.contains(10, 1);
    var10.setAlignmentX((-1.0f));
    java.awt.Point var17 = var10.getLocation();
    java.awt.Point var18 = var10.getLocation();
    boolean var19 = var2.contains(var18);
    var2.enable();
    boolean var21 = var2.isBackgroundSet();
    boolean var22 = var2.requestFocusInWindow();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test54() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test54");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    float var5 = var2.getAlignmentX();
    var2.repaint(0L, 10, 0, 10, (-1));
    boolean var12 = var2.isEnabled();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    javax.swing.JPopupMenu var17 = var15.getComponentPopupMenu();
    java.awt.Rectangle var18 = var15.bounds();
    java.awt.Rectangle var19 = var2.getBounds(var18);
    var2.setFocusable(false);
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var25 = var24.getPreferredSize();
    java.awt.Dimension var26 = var24.getMaximumSize();
    var2.setMinimumSize(var26);
    boolean var28 = var2.isForegroundSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);

  }

  public void test55() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test55");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    boolean var40 = var2.isDoubleBuffered();
    var2.addNotify();
    boolean var42 = var2.requestFocusInWindow();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test56() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test56");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    java.awt.Image var11 = var2.createImage(24, 24);
    boolean var12 = var2.getInheritsPopupMenu();
    boolean var13 = var2.isBackgroundSet();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.layout();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isMaximumSizeSet();
    boolean var23 = var21.isOpaque();
    java.awt.event.HierarchyListener[] var24 = var21.getHierarchyListeners();
    int var25 = var21.countComponents();
    java.awt.event.HierarchyBoundsListener[] var26 = var21.getHierarchyBoundsListeners();
    boolean var28 = var21.areFocusTraversalKeysSet(1);
    bierse.view.RunningMessagePanel var31 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var32 = var31.getPreferredSize();
    javax.swing.JPopupMenu var33 = var31.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var37 = var36.getPreferredSize();
    javax.swing.JPopupMenu var38 = var36.getComponentPopupMenu();
    java.awt.Rectangle var39 = var36.bounds();
    var31.computeVisibleRect(var39);
    var21.setBounds(var39);
    var16.repaint(var39);
    var2.paintImmediately(var39);
    java.util.Locale var44 = var2.getLocale();
    javax.swing.JComponent.setDefaultLocale(var44);
    javax.swing.JComponent.setDefaultLocale(var44);
    javax.swing.JComponent.setDefaultLocale(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test57() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test57");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.beans.PropertyChangeListener[] var5 = var2.getPropertyChangeListeners();
    var2.setOpaque(true);
    java.awt.Insets var8 = var2.insets();
    boolean var9 = var2.isOptimizedDrawingEnabled();
    boolean var10 = var2.isValidateRoot();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var14 = var13.isMaximumSizeSet();
    var13.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var19 = var13.getWidth();
    java.awt.Component[] var20 = var13.getComponents();
    var13.enable(true);
    var13.resetKeyboardActions();
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var27 = var26.isMaximumSizeSet();
    var26.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var32 = var26.getTransferHandler();
    boolean var33 = var26.hasFocus();
    javax.swing.event.AncestorListener[] var34 = var26.getAncestorListeners();
    java.awt.Dimension var35 = var26.getMinimumSize();
    bierse.view.RunningMessagePanel var39 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var40 = var39.getPreferredSize();
    java.awt.Dimension var41 = var39.getMaximumSize();
    var39.disable();
    var26.putClientProperty((java.lang.Object)100, (java.lang.Object)var39);
    javax.swing.InputVerifier var44 = var39.getInputVerifier();
    boolean var45 = var39.getInheritsPopupMenu();
    var39.setLocation(0, 100);
    boolean var49 = var39.isFocusTraversalPolicyProvider();
    var39.list();
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var53.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var60 = var53.location();
    java.awt.Font var61 = var53.getFont();
    var39.setFont(var61);
    var13.setFont(var61);
    java.awt.FontMetrics var64 = var2.getFontMetrics(var61);
    var2.removeNotify();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test58() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test58");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.Insets var7 = var2.getInsets();
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var11 = var10.isMaximumSizeSet();
    var10.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var16 = var10.getTransferHandler();
    boolean var17 = var10.hasFocus();
    var10.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var20 = var10.getPreferredSize();
    java.awt.ComponentOrientation var21 = var10.getComponentOrientation();
    var10.transferFocus();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    var25.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var31 = var25.getTransferHandler();
    boolean var32 = var25.hasFocus();
    javax.swing.event.AncestorListener[] var33 = var25.getAncestorListeners();
    java.awt.Dimension var34 = var25.getMinimumSize();
    boolean var35 = var25.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var39 = var38.isMaximumSizeSet();
    var38.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var44 = var38.getTransferHandler();
    boolean var45 = var38.hasFocus();
    var38.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var48 = var38.getPreferredSize();
    java.awt.Dimension var49 = var25.getSize(var48);
    var10.setSize(var48);
    var2.setSize(var48);
    bierse.view.RunningMessagePanel var55 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    javax.swing.InputVerifier var56 = var55.getInputVerifier();
    var55.removeAll();
    boolean var58 = var55.getFocusTraversalKeysEnabled();
    java.awt.Dimension var59 = var55.preferredSize();
    java.awt.Component var60 = var2.add("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var55);
    var55.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", (short)10, (short)10);
    var55.setAlignmentX((-1.0f));
    java.awt.Image var69 = var55.createImage(12, 13);
    java.awt.Container var70 = var55.getParent();
    boolean var71 = var70.isLightweight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);

  }

  public void test59() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test59");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    var11.setName("PanelUI");
    var11.enable(true);
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var35 = var34.isMaximumSizeSet();
    var34.layout();
    var34.invalidate();
    java.awt.event.FocusListener[] var38 = var34.getFocusListeners();
    javax.swing.plaf.PanelUI var39 = var34.getUI();
    var11.setUI(var39);
    bierse.view.RunningMessagePanel var43 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var44 = var43.isMaximumSizeSet();
    var43.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var49 = var43.getTransferHandler();
    boolean var50 = var43.hasFocus();
    var43.setVerifyInputWhenFocusTarget(false);
    bierse.view.RunningMessagePanel var55 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var56 = var55.isMaximumSizeSet();
    boolean var57 = var55.isOpaque();
    javax.swing.InputMap var58 = var55.getInputMap();
    java.beans.PropertyChangeListener[] var60 = var55.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var61 = var55.getComponentOrientation();
    var43.applyComponentOrientation(var61);
    var11.applyComponentOrientation(var61);
    var11.setEnabled(true);
    bierse.view.RunningMessagePanel var69 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var69.transferFocus();
    var69.show();
    float var72 = var69.getAlignmentX();
    var69.repaint(0L, 10, 0, 10, (-1));
    boolean var79 = var69.isEnabled();
    java.lang.Object var80 = var69.getTreeLock();
    java.lang.String var81 = var69.toString();
    java.beans.PropertyChangeListener[] var82 = var69.getPropertyChangeListeners();
    java.awt.Component var83 = var11.add("", (java.awt.Component)var69);
    var83.setEnabled(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var81,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var81.equals("bierse.view.RunningMessagePanel[,0,0,0var81,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test60() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test60");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    java.awt.image.VolatileImage var22 = var15.createVolatileImage(100, 24);
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var26 = var25.getPreferredSize();
    java.awt.Point var27 = var25.getMousePosition();
    var25.revalidate();
    var25.transferFocus();
    java.awt.Toolkit var30 = var25.getToolkit();
    boolean var31 = var25.isFocusTraversalPolicySet();
    var15.setNextFocusableComponent((java.awt.Component)var25);
    float var33 = var25.getAlignmentY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);

  }

  public void test61() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test61");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    float var5 = var2.getAlignmentX();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var9 = var8.getPreferredSize();
    boolean var10 = var8.isPreferredSizeSet();
    var8.enable();
    javax.accessibility.AccessibleContext var12 = var8.getAccessibleContext();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var15.transferFocus();
    var15.show();
    float var18 = var15.getAlignmentX();
    var15.repaint(0L, 10, 0, 10, (-1));
    boolean var25 = var15.isEnabled();
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var29 = var28.getPreferredSize();
    javax.swing.JPopupMenu var30 = var28.getComponentPopupMenu();
    java.awt.Rectangle var31 = var28.bounds();
    java.awt.Rectangle var32 = var15.getBounds(var31);
    var8.computeVisibleRect(var32);
    java.awt.Color var34 = var8.getForeground();
    var2.setForeground(var34);
    java.awt.Dimension var36 = var2.getMaximumSize();
    float var37 = var2.getAlignmentX();
    var2.setDebugGraphicsOptions(11);
    java.awt.Component var42 = var2.locate(996, 24);
    boolean var43 = var2.isFocusTraversalPolicyProvider();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);

  }

  public void test62() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test62");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    java.awt.Rectangle var5 = var2.bounds();
    var2.setSize(0, 24);
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var17 = var11.getTransferHandler();
    boolean var18 = var11.hasFocus();
    javax.swing.event.AncestorListener[] var19 = var11.getAncestorListeners();
    java.awt.Dimension var20 = var11.getMinimumSize();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var25 = var24.getPreferredSize();
    java.awt.Dimension var26 = var24.getMaximumSize();
    var24.disable();
    var11.putClientProperty((java.lang.Object)100, (java.lang.Object)var24);
    javax.swing.InputVerifier var29 = var24.getInputVerifier();
    boolean var30 = var24.getInheritsPopupMenu();
    var24.setLocation(0, 100);
    boolean var34 = var24.isFocusTraversalPolicyProvider();
    var24.list();
    javax.swing.event.AncestorListener[] var36 = var24.getAncestorListeners();
    var24.repaint(100L);
    int var39 = var2.getComponentZOrder((java.awt.Component)var24);
    java.awt.Toolkit var40 = var2.getToolkit();
    boolean var41 = var2.isDoubleBuffered();
    var2.setDoubleBuffered(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);

  }

  public void test63() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test63");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var8 = var7.getPreferredSize();
    javax.swing.JPopupMenu var9 = var7.getComponentPopupMenu();
    java.awt.Rectangle var10 = var7.bounds();
    var2.computeVisibleRect(var10);
    java.awt.event.ComponentListener[] var12 = var2.getComponentListeners();
    java.awt.Insets var13 = var2.getInsets();
    java.awt.Graphics var14 = var2.getGraphics();
    java.awt.event.MouseMotionListener[] var15 = var2.getMouseMotionListeners();
    java.awt.Container var16 = var2.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test64() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test64");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    var2.firePropertyChange("hi!", ' ', ' ');
    javax.accessibility.AccessibleContext var11 = var2.getAccessibleContext();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    boolean var16 = var14.isOpaque();
    java.awt.event.HierarchyListener[] var17 = var14.getHierarchyListeners();
    boolean var18 = var14.isValid();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isMaximumSizeSet();
    var21.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var27 = var21.getTransferHandler();
    boolean var28 = var21.hasFocus();
    javax.swing.event.AncestorListener[] var29 = var21.getAncestorListeners();
    var2.add((java.awt.Component)var14, (java.lang.Object)var29);
    boolean var31 = var2.isFontSet();
    var2.nextFocus();
    int var33 = var2.getY();
    boolean var34 = var2.isVisible();
    boolean var35 = var2.isDoubleBuffered();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);

  }

  public void test65() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test65");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    boolean var21 = var15.getInheritsPopupMenu();
    var15.setLocation(0, 100);
    javax.swing.plaf.PanelUI var25 = var15.getUI();
    java.awt.Rectangle var26 = var15.bounds();
    java.awt.FocusTraversalPolicy var27 = var15.getFocusTraversalPolicy();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test66() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test66");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    var2.setAlignmentY(10.0f);
    var2.setInheritsPopupMenu(false);
    boolean var18 = var2.requestDefaultFocus();
    var2.transferFocusBackward();
    javax.swing.JToolTip var20 = var2.createToolTip();
    var2.doLayout();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test67() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test67");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    boolean var21 = var15.isValidateRoot();
    java.awt.Insets var22 = var15.getInsets();
    boolean var24 = var15.requestFocus(true);
    boolean var25 = var15.isShowing();
    var15.transferFocus();
    java.awt.Dimension var27 = var15.preferredSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test68() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test68");


    bierse.view.MyKeyMap var2 = new bierse.view.MyKeyMap("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=8,maximumSize=,minimumSize=,preferredSize=]", 996);
    java.lang.String var3 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var3,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=8,maximumSize=,minimumSize=,preferredSize=]"+ "'", var3.equals("bierse.view.RunningMessagePanel[,0,0,0var3,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=8,maximumSize=,minimumSize=,preferredSize=]"));

  }

  public void test69() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test69");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    boolean var16 = var2.contains(1, 1);
    javax.swing.border.Border var17 = var2.getBorder();
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var21 = var20.isMaximumSizeSet();
    var20.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var26 = var20.getTransferHandler();
    boolean var27 = var20.hasFocus();
    javax.swing.event.AncestorListener[] var28 = var20.getAncestorListeners();
    java.awt.Dimension var29 = var20.getMinimumSize();
    bierse.view.RunningMessagePanel var33 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var34 = var33.getPreferredSize();
    java.awt.Dimension var35 = var33.getMaximumSize();
    var33.disable();
    var20.putClientProperty((java.lang.Object)100, (java.lang.Object)var33);
    javax.swing.InputVerifier var38 = var33.getInputVerifier();
    boolean var39 = var33.getInheritsPopupMenu();
    var33.setLocation(0, 100);
    bierse.view.RunningMessagePanel var45 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var46 = var45.isMaximumSizeSet();
    var45.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var51 = var45.getTransferHandler();
    boolean var52 = var45.hasFocus();
    javax.swing.event.AncestorListener[] var53 = var45.getAncestorListeners();
    java.awt.Dimension var54 = var45.getMinimumSize();
    boolean var55 = var45.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var58 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var59 = var58.isMaximumSizeSet();
    var58.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var64 = var58.getTransferHandler();
    boolean var65 = var58.hasFocus();
    var58.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var68 = var58.getPreferredSize();
    java.awt.Dimension var69 = var45.getSize(var68);
    var33.setPreferredSize(var69);
    java.awt.Component var71 = var2.add((java.awt.Component)var33);
    javax.swing.plaf.PanelUI var72 = var33.getUI();
    var33.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", 'a', '4');
    var33.setFocusTraversalPolicyProvider(true);
    java.awt.Point var79 = var33.getMousePosition();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var33.remove(10);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);

  }

  public void test70() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test70");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    java.awt.Container var7 = var2.getTopLevelAncestor();
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var11 = var10.isMaximumSizeSet();
    var10.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var10.invalidate();
    java.awt.Dimension var17 = var10.getPreferredSize();
    int var18 = var10.getWidth();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isMaximumSizeSet();
    var21.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var27 = var21.getTransferHandler();
    boolean var28 = var21.hasFocus();
    var21.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var31 = var21.getPreferredSize();
    java.awt.ComponentOrientation var32 = var21.getComponentOrientation();
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var36 = var35.isMaximumSizeSet();
    var35.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var41 = var35.getTransferHandler();
    boolean var42 = var35.hasFocus();
    javax.swing.event.AncestorListener[] var43 = var35.getAncestorListeners();
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var47 = var46.isMaximumSizeSet();
    var46.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var52 = var46.getTransferHandler();
    boolean var53 = var46.hasFocus();
    var46.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var56 = var46.getPreferredSize();
    java.awt.ComponentOrientation var57 = var46.getComponentOrientation();
    var21.add((java.awt.Component)var35, (java.lang.Object)var46);
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var62 = var61.getPreferredSize();
    java.awt.Dimension var63 = var61.getMaximumSize();
    var10.add((java.awt.Component)var35, (java.lang.Object)var61, (-1));
    bierse.view.RunningMessagePanel var68 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var68.transferFocus();
    var68.show();
    float var71 = var68.getAlignmentX();
    boolean var74 = var68.contains(0, 24);
    java.awt.Color var75 = var68.getForeground();
    var10.setForeground(var75);
    var2.setBackground(var75);
    int var80 = var2.getBaseline(100, 13);
    boolean var81 = var2.requestFocusInWindow();
    javax.swing.KeyStroke[] var82 = var2.getRegisteredKeyStrokes();
    var2.setDebugGraphicsOptions(14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test71() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test71");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var3 = var2.getMouseWheelListeners();
    boolean var4 = var2.isLightweight();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var8 = var7.getPreferredSize();
    javax.swing.JPopupMenu var9 = var7.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var13 = var12.getPreferredSize();
    javax.swing.JPopupMenu var14 = var12.getComponentPopupMenu();
    java.awt.Rectangle var15 = var12.bounds();
    var7.computeVisibleRect(var15);
    java.awt.event.ComponentListener[] var17 = var7.getComponentListeners();
    var7.setDebugGraphicsOptions(10);
    var7.setAlignmentY(0.5f);
    int var22 = var7.getWidth();
    int var23 = var2.getComponentZOrder((java.awt.Component)var7);
    var2.setBounds(12, 1, 1, 996);
    var2.setFocusCycleRoot(false);
    java.awt.im.InputMethodRequests var31 = var2.getInputMethodRequests();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);

  }

  public void test72() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test72");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.Insets var7 = var2.getInsets();
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var11 = var10.isMaximumSizeSet();
    var10.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var16 = var10.getTransferHandler();
    boolean var17 = var10.hasFocus();
    var10.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var20 = var10.getPreferredSize();
    java.awt.ComponentOrientation var21 = var10.getComponentOrientation();
    var10.transferFocus();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    var25.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var31 = var25.getTransferHandler();
    boolean var32 = var25.hasFocus();
    javax.swing.event.AncestorListener[] var33 = var25.getAncestorListeners();
    java.awt.Dimension var34 = var25.getMinimumSize();
    boolean var35 = var25.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var39 = var38.isMaximumSizeSet();
    var38.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var44 = var38.getTransferHandler();
    boolean var45 = var38.hasFocus();
    var38.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var48 = var38.getPreferredSize();
    java.awt.Dimension var49 = var25.getSize(var48);
    var10.setSize(var48);
    var2.setSize(var48);
    var2.transferFocusDownCycle();
    boolean var53 = var2.getIgnoreRepaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);

  }

  public void test73() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test73");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    int var12 = var2.getDebugGraphicsOptions();
    boolean var13 = var2.isEnabled();
    boolean var14 = var2.requestFocusInWindow();
    var2.repaint();
    var2.disable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test74() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test74");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var9 = var2.location();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var13 = var12.isMaximumSizeSet();
    var12.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var18 = var12.getTransferHandler();
    boolean var19 = var12.hasFocus();
    javax.swing.event.AncestorListener[] var20 = var12.getAncestorListeners();
    java.awt.Dimension var21 = var12.getMinimumSize();
    var2.resize(var21);
    var2.repaint(100L, 1, (-1), 100, 24);
    bierse.view.RunningMessagePanel var31 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var32 = var31.getPreferredSize();
    java.awt.Point var33 = var31.getMousePosition();
    var31.setDoubleBuffered(false);
    var31.setFocusTraversalKeysEnabled(false);
    java.awt.Point var39 = var31.getMousePosition(false);
    java.awt.Dimension var40 = var31.getMaximumSize();
    var2.setMaximumSize(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test75() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test75");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.revalidate();
    var2.revalidate();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var10 = var9.isMaximumSizeSet();
    var9.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var17.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var24 = var17.location();
    boolean var25 = var9.contains(var24);
    java.awt.Point var26 = var2.getLocation(var24);
    java.awt.Graphics var27 = var2.getGraphics();
    java.awt.im.InputMethodRequests var28 = var2.getInputMethodRequests();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test76() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test76");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var8 = var7.isMaximumSizeSet();
    var7.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var13 = var7.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var17 = var16.getPreferredSize();
    boolean var18 = var16.isPreferredSizeSet();
    var16.enable();
    var16.transferFocusBackward();
    int var21 = var7.getComponentZOrder((java.awt.Component)var16);
    var7.setEnabled(false);
    java.awt.Graphics var24 = var7.getGraphics();
    var2.remove((java.awt.Component)var7);
    var2.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (short)10, (short)0);
    var2.setName("PanelUI");
    boolean var33 = var2.requestFocus(false);
    var2.disable();
    java.awt.Cursor var35 = var2.getCursor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test77() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test77");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    javax.swing.JRootPane var13 = var2.getRootPane();
    var2.setRequestFocusEnabled(false);
    java.awt.Dimension var16 = var2.preferredSize();
    var2.setDebugGraphicsOptions((-1));
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isMaximumSizeSet();
    var21.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var27 = var21.getTransferHandler();
    boolean var28 = var21.hasFocus();
    var21.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var31 = var21.getPreferredSize();
    java.awt.ComponentOrientation var32 = var21.getComponentOrientation();
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var36 = var35.isMaximumSizeSet();
    var35.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var41 = var35.getTransferHandler();
    boolean var42 = var35.hasFocus();
    javax.swing.event.AncestorListener[] var43 = var35.getAncestorListeners();
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var47 = var46.isMaximumSizeSet();
    var46.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var52 = var46.getTransferHandler();
    boolean var53 = var46.hasFocus();
    var46.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var56 = var46.getPreferredSize();
    java.awt.ComponentOrientation var57 = var46.getComponentOrientation();
    var21.add((java.awt.Component)var35, (java.lang.Object)var46);
    java.awt.Component var60 = var2.add((java.awt.Component)var21, 0);
    java.awt.Rectangle var61 = var60.getBounds();
    java.awt.im.InputContext var62 = var60.getInputContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);

  }

  public void test78() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test78");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Dimension var4 = var2.getMaximumSize();
    var2.repaint();
    var2.disable();
    java.awt.Rectangle var7 = var2.getBounds();
    java.awt.Point var8 = var2.getMousePosition();
    int var9 = var2.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);

  }

  public void test79() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test79");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    boolean var13 = var11.isOpaque();
    java.awt.event.HierarchyListener[] var14 = var11.getHierarchyListeners();
    int var15 = var11.countComponents();
    java.awt.event.HierarchyBoundsListener[] var16 = var11.getHierarchyBoundsListeners();
    boolean var18 = var11.areFocusTraversalKeysSet(1);
    boolean var19 = var2.isAncestorOf((java.awt.Component)var11);
    var2.enable();
    var2.setInheritsPopupMenu(true);
    var2.hide();
    boolean var24 = var2.isPreferredSizeSet();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var27.invalidate();
    int var34 = var27.getHeight();
    java.awt.Container var35 = var27.getFocusCycleRootAncestor();
    boolean var36 = var27.isPreferredSizeSet();
    java.awt.Rectangle var37 = var27.bounds();
    var2.paintImmediately(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test80() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test80");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    float var5 = var2.getAlignmentX();
    var2.repaint(0L, 10, 0, 10, (-1));
    boolean var12 = var2.isEnabled();
    boolean var13 = var2.isPreferredSizeSet();
    boolean var14 = var2.isRequestFocusEnabled();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var18 = var17.isMaximumSizeSet();
    var17.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var17.invalidate();
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var27 = var26.isMaximumSizeSet();
    var26.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var35 = var34.isMaximumSizeSet();
    var34.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var40 = var34.getWidth();
    java.awt.Component[] var41 = var34.getComponents();
    var17.putClientProperty((java.lang.Object)var26, (java.lang.Object)var41);
    boolean var44 = var17.requestFocus(false);
    javax.swing.InputMap var45 = var17.getInputMap();
    var17.reshape(996, 100, 12, 996);
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var54 = var53.getPreferredSize();
    boolean var55 = var53.isPreferredSizeSet();
    var53.enable();
    javax.accessibility.AccessibleContext var57 = var53.getAccessibleContext();
    bierse.view.RunningMessagePanel var60 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var60.transferFocus();
    var60.show();
    float var63 = var60.getAlignmentX();
    var60.repaint(0L, 10, 0, 10, (-1));
    boolean var70 = var60.isEnabled();
    bierse.view.RunningMessagePanel var73 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var74 = var73.getPreferredSize();
    javax.swing.JPopupMenu var75 = var73.getComponentPopupMenu();
    java.awt.Rectangle var76 = var73.bounds();
    java.awt.Rectangle var77 = var60.getBounds(var76);
    var53.computeVisibleRect(var77);
    var17.computeVisibleRect(var77);
    var2.paintImmediately(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test81() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test81");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var24 = var23.isMaximumSizeSet();
    var23.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var29 = var23.getTransferHandler();
    boolean var30 = var23.hasFocus();
    var23.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var33 = var23.getPreferredSize();
    java.awt.ComponentOrientation var34 = var23.getComponentOrientation();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    javax.swing.event.AncestorListener[] var45 = var37.getAncestorListeners();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var49 = var48.isMaximumSizeSet();
    var48.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var54 = var48.getTransferHandler();
    boolean var55 = var48.hasFocus();
    var48.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var58 = var48.getPreferredSize();
    java.awt.ComponentOrientation var59 = var48.getComponentOrientation();
    var23.add((java.awt.Component)var37, (java.lang.Object)var48);
    bierse.view.RunningMessagePanel var63 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var64 = var63.getPreferredSize();
    java.awt.Dimension var65 = var63.getMaximumSize();
    var48.resize(var65);
    var15.setNextFocusableComponent((java.awt.Component)var48);
    java.lang.String var68 = var48.toString();
    javax.swing.JRootPane var69 = var48.getRootPane();
    bierse.view.RunningMessagePanel var72 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var72.setDebugGraphicsOptions(10);
    java.lang.Object var75 = var72.getTreeLock();
    int var76 = var72.getWidth();
    var72.layout();
    var48.setNextFocusableComponent((java.awt.Component)var72);
    java.awt.Dimension var79 = var72.getSize();
    boolean var80 = var72.isMaximumSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var68.equals("bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);

  }

  public void test82() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test82");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    boolean var40 = var2.getFocusTraversalKeysEnabled();
    var2.setAlignmentX(100.0f);
    var2.setMessage("");
    bierse.view.RunningMessagePanel var47 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var48 = var47.getPreferredSize();
    boolean var51 = var47.contains(10, 1);
    java.awt.im.InputMethodRequests var52 = var47.getInputMethodRequests();
    boolean var55 = var47.inside((-1), 100);
    bierse.view.RunningMessagePanel var58 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var59 = var58.getPreferredSize();
    boolean var62 = var58.contains(10, 1);
    var58.setAlignmentX((-1.0f));
    java.awt.Point var65 = var58.getLocation();
    java.awt.Point var66 = var47.getLocation(var65);
    java.awt.Component var67 = var2.findComponentAt(var65);
    int var68 = var2.getComponentCount();
    java.awt.Container var69 = var2.getParent();
    int var70 = var2.getStringHeight();
    var2.setFocusTraversalKeysEnabled(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 24);

  }

  public void test83() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test83");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var8 = var7.getPreferredSize();
    javax.swing.JPopupMenu var9 = var7.getComponentPopupMenu();
    java.awt.Rectangle var10 = var7.bounds();
    var2.computeVisibleRect(var10);
    var2.removeNotify();
    java.lang.String var13 = var2.getToolTipText();
    int var14 = var2.getY();
    var2.repaint(0, 996, 996, 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);

  }

  public void test84() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test84");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    int var7 = var2.countComponents();
    java.awt.Point var9 = var2.getMousePosition(true);
    var2.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var12 = var2.toString();
    java.awt.Font var13 = var2.getFont();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var17 = var16.getPreferredSize();
    boolean var20 = var16.contains(10, 1);
    java.awt.im.InputMethodRequests var21 = var16.getInputMethodRequests();
    boolean var22 = var16.getInheritsPopupMenu();
    java.lang.String var23 = var16.toString();
    java.awt.Rectangle var24 = var16.bounds();
    var2.setBounds(var24);
    var2.setSize(0, 13);
    int var29 = var2.getWidth();
    var2.setFocusable(false);
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=8,maximumSize=,minimumSize=,preferredSize=]", false, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var12,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var12.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var12,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var23,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var23.equals("bierse.view.RunningMessagePanel[,0,0,0var23,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);

  }

  public void test85() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test85");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var8 = var2.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var12 = var11.getPreferredSize();
    boolean var13 = var11.isPreferredSizeSet();
    var11.enable();
    var11.transferFocusBackward();
    int var16 = var2.getComponentZOrder((java.awt.Component)var11);
    var2.setEnabled(false);
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var22 = var21.getPreferredSize();
    java.awt.Dimension var23 = var21.getMaximumSize();
    java.awt.event.FocusListener[] var24 = var21.getFocusListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var28 = var27.getPreferredSize();
    boolean var31 = var27.contains(10, 1);
    java.awt.im.InputMethodRequests var32 = var27.getInputMethodRequests();
    java.awt.Font var33 = var27.getFont();
    var21.setFont(var33);
    java.beans.VetoableChangeListener[] var35 = var21.getVetoableChangeListeners();
    boolean var36 = var21.isMaximumSizeSet();
    javax.swing.plaf.PanelUI var37 = var21.getUI();
    var2.setUI(var37);
    var2.move(0, 24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test86() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test86");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    var2.setFocusTraversalPolicyProvider(false);
    float var9 = var2.getAlignmentX();
    var2.repaint((-1L));
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    var14.layout();
    var14.revalidate();
    boolean var18 = var14.isFocusOwner();
    float var19 = var14.getAlignmentX();
    java.awt.Color var20 = var14.getForeground();
    var14.firePropertyChange("", (-1L), 0L);
    boolean var25 = var14.isRequestFocusEnabled();
    var14.setFocusable(true);
    java.awt.Rectangle var28 = var14.bounds();
    bierse.view.RunningMessagePanel var31 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var32 = var31.getPreferredSize();
    boolean var35 = var31.contains(10, 1);
    var31.disable();
    boolean var37 = var31.isManagingFocus();
    var2.putClientProperty((java.lang.Object)var14, (java.lang.Object)var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test87() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test87");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    boolean var40 = var2.getFocusTraversalKeysEnabled();
    bierse.view.RunningMessagePanel var44 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var44.repaint(1L, (-1), (-1), 0, 100);
    boolean var51 = var44.isFocusTraversable();
    var44.show(false);
    java.awt.Dimension var54 = var44.preferredSize();
    java.awt.Component var55 = var2.add("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var44);
    boolean var56 = var44.isPaintingForPrint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);

  }

  public void test88() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test88");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.countComponents();
    java.awt.dnd.DropTarget var7 = var2.getDropTarget();
    var2.validate();
    var2.setToolTipText("hi!");
    java.awt.im.InputContext var11 = var2.getInputContext();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var15 = var14.getPreferredSize();
    javax.swing.JPopupMenu var16 = var14.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var20 = var19.getPreferredSize();
    javax.swing.JPopupMenu var21 = var19.getComponentPopupMenu();
    java.awt.Rectangle var22 = var19.bounds();
    var14.computeVisibleRect(var22);
    boolean var24 = var14.isManagingFocus();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.GraphicsConfiguration var38 = var27.getGraphicsConfiguration();
    bierse.view.RunningMessagePanel var41 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var42 = var41.isMaximumSizeSet();
    boolean var43 = var41.isOpaque();
    javax.swing.InputMap var44 = var41.getInputMap();
    java.beans.PropertyChangeListener[] var46 = var41.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var47 = var41.getComponentOrientation();
    var27.applyComponentOrientation(var47);
    var14.applyComponentOrientation(var47);
    var2.applyComponentOrientation(var47);
    var2.show();
    java.awt.Container var52 = var2.getFocusCycleRootAncestor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);

  }

  public void test89() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test89");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    java.awt.Component var11 = var2.getComponentAt(0, 0);
    java.awt.Dimension var12 = var2.minimumSize();
    boolean var13 = var2.isFocusable();
    var2.layout();
    var2.repaint(10, 996, 100, 24);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var20 = var2.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test90() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test90");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    boolean var13 = var11.isOpaque();
    java.awt.event.HierarchyListener[] var14 = var11.getHierarchyListeners();
    int var15 = var11.countComponents();
    java.awt.event.HierarchyBoundsListener[] var16 = var11.getHierarchyBoundsListeners();
    boolean var18 = var11.areFocusTraversalKeysSet(1);
    boolean var19 = var2.isAncestorOf((java.awt.Component)var11);
    var2.requestFocus();
    java.awt.FocusTraversalPolicy var21 = var2.getFocusTraversalPolicy();
    var2.setSpeed(13);
    java.awt.Component.BaselineResizeBehavior var24 = var2.getBaselineResizeBehavior();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test91() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test91");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    var2.invalidate();
    java.awt.event.FocusListener[] var6 = var2.getFocusListeners();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var10 = var9.isMaximumSizeSet();
    var9.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var15 = var9.getTransferHandler();
    boolean var16 = var9.hasFocus();
    var9.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var19 = var9.getPreferredSize();
    java.awt.ComponentOrientation var20 = var9.getComponentOrientation();
    var9.transferFocus();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    var24.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var30 = var24.getTransferHandler();
    boolean var31 = var24.hasFocus();
    javax.swing.event.AncestorListener[] var32 = var24.getAncestorListeners();
    java.awt.Dimension var33 = var24.getMinimumSize();
    boolean var34 = var24.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    var37.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var47 = var37.getPreferredSize();
    java.awt.Dimension var48 = var24.getSize(var47);
    var9.setSize(var47);
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var53 = var52.getPreferredSize();
    boolean var56 = var52.contains(10, 1);
    java.awt.Insets var57 = var52.getInsets();
    javax.swing.JToolTip var58 = var52.createToolTip();
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var62 = var61.isMaximumSizeSet();
    var61.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var67 = var61.getTransferHandler();
    boolean var68 = var61.hasFocus();
    javax.swing.event.AncestorListener[] var69 = var61.getAncestorListeners();
    var61.enable(false);
    int var72 = var58.getComponentZOrder((java.awt.Component)var61);
    boolean var73 = var58.requestFocusInWindow();
    boolean var74 = var58.isOptimizedDrawingEnabled();
    var2.add((java.awt.Component)var9, (java.lang.Object)var58);
    javax.swing.border.Border var76 = var9.getBorder();
    java.awt.Rectangle var77 = var9.bounds();
    boolean var78 = var9.requestFocusInWindow();
    var9.hide();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);

  }

  public void test92() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test92");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var8 = var7.isMaximumSizeSet();
    boolean var9 = var7.isOpaque();
    java.beans.PropertyChangeListener[] var10 = var7.getPropertyChangeListeners();
    var7.setOpaque(true);
    java.awt.Insets var13 = var7.insets();
    java.awt.Insets var14 = var2.getInsets(var13);
    var2.resetKeyboardActions();
    java.awt.event.ComponentListener[] var16 = var2.getComponentListeners();
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var20 = var19.getPreferredSize();
    java.awt.Point var21 = var19.getMousePosition();
    var19.revalidate();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    var25.layout();
    var25.invalidate();
    var19.setNextFocusableComponent((java.awt.Component)var25);
    bierse.view.RunningMessagePanel var32 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var33 = var32.getPreferredSize();
    boolean var36 = var32.contains(10, 1);
    java.awt.Insets var37 = var32.getInsets();
    javax.swing.JToolTip var38 = var32.createToolTip();
    bierse.view.RunningMessagePanel var41 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var42 = var41.isMaximumSizeSet();
    var41.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var47 = var41.getTransferHandler();
    boolean var48 = var41.hasFocus();
    var41.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var51 = var41.getPreferredSize();
    java.awt.ComponentOrientation var52 = var41.getComponentOrientation();
    bierse.view.RunningMessagePanel var55 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var56 = var55.isMaximumSizeSet();
    var55.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var61 = var55.getTransferHandler();
    boolean var62 = var55.hasFocus();
    javax.swing.event.AncestorListener[] var63 = var55.getAncestorListeners();
    bierse.view.RunningMessagePanel var66 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var67 = var66.isMaximumSizeSet();
    var66.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var72 = var66.getTransferHandler();
    boolean var73 = var66.hasFocus();
    var66.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var76 = var66.getPreferredSize();
    java.awt.ComponentOrientation var77 = var66.getComponentOrientation();
    var41.add((java.awt.Component)var55, (java.lang.Object)var66);
    bierse.view.RunningMessagePanel var81 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var82 = var81.getPreferredSize();
    java.awt.Dimension var83 = var81.getMaximumSize();
    var66.resize(var83);
    var38.setPreferredSize(var83);
    java.awt.Dimension var86 = var19.getSize(var83);
    var2.setMaximumSize(var83);
    boolean var88 = var2.isShowing();
    java.awt.Point var89 = var2.getLocation();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test93() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test93");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var8 = var2.isFocusTraversalPolicySet();
    var2.paintImmediately(10, 12, 10, 10);
    java.awt.Container var14 = var2.getFocusCycleRootAncestor();
    var2.transferFocusBackward();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test94() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test94");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var8 = var7.getPreferredSize();
    javax.swing.JPopupMenu var9 = var7.getComponentPopupMenu();
    java.awt.Rectangle var10 = var7.bounds();
    var2.computeVisibleRect(var10);
    var2.removeNotify();
    int var13 = var2.getHeight();
    float var14 = var2.getAlignmentY();
    java.awt.event.MouseMotionListener[] var15 = var2.getMouseMotionListeners();
    java.awt.GraphicsConfiguration var16 = var2.getGraphicsConfiguration();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test95() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test95");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    var16.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var26 = var16.getPreferredSize();
    java.awt.Dimension var27 = var2.getSize(var26);
    var2.repaint(100L, 1, 0, 100, 24);
    var2.updateUI();
    javax.swing.TransferHandler var35 = var2.getTransferHandler();
    java.awt.Component.BaselineResizeBehavior var36 = var2.getBaselineResizeBehavior();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", 100L, 1L);
    java.awt.Dimension var41 = var2.getPreferredSize();
    boolean var42 = var2.isVisible();
    var2.enableInputMethods(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);

  }

  public void test96() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test96");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    int var7 = var2.countComponents();
    var2.enable(false);
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var13 = var12.getPreferredSize();
    boolean var16 = var12.contains(10, 1);
    java.awt.Insets var17 = var12.getInsets();
    java.awt.Insets var18 = var2.getInsets(var17);
    var2.repaint();
    var2.addNotify();
    java.lang.String var21 = var2.toString();
    var2.repaint(10L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var21,invalid,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var21.equals("bierse.view.RunningMessagePanel[,0,0,0var21,invalid,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));

  }

  public void test97() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test97");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    var2.invalidate();
    java.awt.event.FocusListener[] var6 = var2.getFocusListeners();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var10 = var9.isMaximumSizeSet();
    var9.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var15 = var9.getTransferHandler();
    boolean var16 = var9.hasFocus();
    var9.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var19 = var9.getPreferredSize();
    java.awt.ComponentOrientation var20 = var9.getComponentOrientation();
    var9.transferFocus();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    var24.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var30 = var24.getTransferHandler();
    boolean var31 = var24.hasFocus();
    javax.swing.event.AncestorListener[] var32 = var24.getAncestorListeners();
    java.awt.Dimension var33 = var24.getMinimumSize();
    boolean var34 = var24.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    var37.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var47 = var37.getPreferredSize();
    java.awt.Dimension var48 = var24.getSize(var47);
    var9.setSize(var47);
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var53 = var52.getPreferredSize();
    boolean var56 = var52.contains(10, 1);
    java.awt.Insets var57 = var52.getInsets();
    javax.swing.JToolTip var58 = var52.createToolTip();
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var62 = var61.isMaximumSizeSet();
    var61.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var67 = var61.getTransferHandler();
    boolean var68 = var61.hasFocus();
    javax.swing.event.AncestorListener[] var69 = var61.getAncestorListeners();
    var61.enable(false);
    int var72 = var58.getComponentZOrder((java.awt.Component)var61);
    boolean var73 = var58.requestFocusInWindow();
    boolean var74 = var58.isOptimizedDrawingEnabled();
    var2.add((java.awt.Component)var9, (java.lang.Object)var58);
    var2.paintImmediately(24, (-1), 996, 10);
    java.awt.Dimension var81 = var2.minimumSize();
    var2.removeAll();
    java.awt.Dimension var83 = var2.getMaximumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test98() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test98");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    var16.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var26 = var16.getPreferredSize();
    java.awt.Dimension var27 = var2.getSize(var26);
    java.awt.image.VolatileImage var30 = var2.createVolatileImage((-1), (-1));
    java.awt.dnd.DropTarget var31 = var2.getDropTarget();
    java.awt.FocusTraversalPolicy var32 = var2.getFocusTraversalPolicy();
    java.beans.VetoableChangeListener[] var33 = var2.getVetoableChangeListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test99() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test99");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    boolean var40 = var2.getFocusTraversalKeysEnabled();
    var2.setAlignmentX(100.0f);
    var2.setMessage("");
    java.awt.Container var45 = var2.getFocusCycleRootAncestor();
    int var46 = var2.countComponents();
    bierse.view.RunningMessagePanel var49 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var50 = var49.getPreferredSize();
    boolean var53 = var49.contains(10, 1);
    java.awt.im.InputMethodRequests var54 = var49.getInputMethodRequests();
    boolean var57 = var49.inside((-1), 100);
    java.awt.Component var58 = var2.add((java.awt.Component)var49);
    boolean var59 = var49.requestDefaultFocus();
    bierse.view.RunningMessagePanel var62 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var62.transferFocus();
    var62.show();
    boolean var65 = var62.isValid();
    boolean var66 = var62.getAutoscrolls();
    java.awt.LayoutManager var67 = var62.getLayout();
    java.awt.Point var68 = var62.location();
    var49.setLocation(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test100() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test100");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Dimension var4 = var2.getMaximumSize();
    var2.disable();
    boolean var6 = var2.isEnabled();
    boolean var7 = var2.isFocusTraversalPolicyProvider();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test101() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test101");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isLightweight();
    java.awt.event.KeyListener[] var4 = var2.getKeyListeners();
    java.awt.event.MouseMotionListener[] var5 = var2.getMouseMotionListeners();
    boolean var6 = var2.isFocusOwner();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test102() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test102");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var9 = var2.location();
    var2.setAlignmentX(0.5f);
    var2.requestFocus();
    java.awt.Toolkit var13 = var2.getToolkit();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var22 = var16.getWidth();
    boolean var25 = var16.inside(24, 1);
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var29 = var28.isMaximumSizeSet();
    var28.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var34 = var28.getTransferHandler();
    boolean var35 = var28.hasFocus();
    var28.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var38 = var28.getPreferredSize();
    java.awt.ComponentOrientation var39 = var28.getComponentOrientation();
    var16.setComponentOrientation(var39);
    var2.applyComponentOrientation(var39);
    java.awt.Insets var42 = var2.getInsets();
    java.awt.Dimension var43 = var2.getSize();
    boolean var44 = var2.requestDefaultFocus();
    boolean var47 = var2.contains(15, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);

  }

  public void test103() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test103");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var24 = var23.isMaximumSizeSet();
    var23.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var29 = var23.getTransferHandler();
    boolean var30 = var23.hasFocus();
    var23.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var33 = var23.getPreferredSize();
    java.awt.ComponentOrientation var34 = var23.getComponentOrientation();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    javax.swing.event.AncestorListener[] var45 = var37.getAncestorListeners();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var49 = var48.isMaximumSizeSet();
    var48.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var54 = var48.getTransferHandler();
    boolean var55 = var48.hasFocus();
    var48.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var58 = var48.getPreferredSize();
    java.awt.ComponentOrientation var59 = var48.getComponentOrientation();
    var23.add((java.awt.Component)var37, (java.lang.Object)var48);
    bierse.view.RunningMessagePanel var63 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var64 = var63.getPreferredSize();
    java.awt.Dimension var65 = var63.getMaximumSize();
    var48.resize(var65);
    var15.setNextFocusableComponent((java.awt.Component)var48);
    var15.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", ' ', 'a');
    var15.firePropertyChange("PanelUI", ' ', 'a');
    java.awt.event.HierarchyListener[] var76 = var15.getHierarchyListeners();
    java.lang.String var77 = var15.toString();
    var15.setFocusable(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var77,invalid,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var77.equals("bierse.view.RunningMessagePanel[,0,0,0var77,invalid,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));

  }

  public void test104() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test104");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    int var7 = var2.countComponents();
    var2.enable(false);
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var13 = var12.isMaximumSizeSet();
    var12.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var18 = var12.getTransferHandler();
    boolean var19 = var12.hasFocus();
    var12.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var22 = var12.getPreferredSize();
    java.awt.ComponentOrientation var23 = var12.getComponentOrientation();
    java.lang.String var24 = var12.getName();
    var12.repaint();
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var29 = var28.isMaximumSizeSet();
    var28.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var34 = var28.getTransferHandler();
    boolean var35 = var28.hasFocus();
    var28.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var38 = var28.getPreferredSize();
    java.awt.GraphicsConfiguration var39 = var28.getGraphicsConfiguration();
    var28.firePropertyChange("", 1L, 10L);
    java.awt.Component var46 = var28.findComponentAt((-1), 996);
    java.awt.Point var47 = var28.getLocation();
    var12.setLocation(var47);
    var2.setLocation(var47);
    java.awt.Toolkit var50 = var2.getToolkit();
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var54 = var53.isMaximumSizeSet();
    var53.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var59 = var53.getTransferHandler();
    boolean var60 = var53.hasFocus();
    javax.swing.event.AncestorListener[] var61 = var53.getAncestorListeners();
    java.awt.Dimension var62 = var53.getMinimumSize();
    bierse.view.RunningMessagePanel var66 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var67 = var66.getPreferredSize();
    java.awt.Dimension var68 = var66.getMaximumSize();
    var66.disable();
    var53.putClientProperty((java.lang.Object)100, (java.lang.Object)var66);
    java.awt.image.VolatileImage var73 = var66.createVolatileImage(100, 24);
    bierse.view.RunningMessagePanel var76 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var77 = var76.getPreferredSize();
    var66.setMinimumSize(var77);
    java.awt.Font var79 = var66.getFont();
    java.awt.FontMetrics var80 = var2.getFontMetrics(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test105() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test105");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    boolean var13 = var11.isOpaque();
    java.awt.event.HierarchyListener[] var14 = var11.getHierarchyListeners();
    int var15 = var11.countComponents();
    java.awt.event.HierarchyBoundsListener[] var16 = var11.getHierarchyBoundsListeners();
    boolean var18 = var11.areFocusTraversalKeysSet(1);
    boolean var19 = var2.isAncestorOf((java.awt.Component)var11);
    var2.requestFocus();
    java.awt.Dimension var21 = var2.getMinimumSize();
    var2.requestFocus();
    java.awt.Dimension var23 = var2.getPreferredSize();
    boolean var24 = var2.isFocusTraversable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);

  }

  public void test106() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test106");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    float var12 = var2.getAlignmentX();
    boolean var13 = var2.isMinimumSizeSet();
    boolean var14 = var2.isPaintingForPrint();
    bierse.view.RunningMessagePanel var18 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var19 = var18.isMaximumSizeSet();
    boolean var20 = var18.isOpaque();
    java.awt.event.HierarchyListener[] var21 = var18.getHierarchyListeners();
    int var22 = var18.getWidth();
    java.awt.event.ContainerListener[] var23 = var18.getContainerListeners();
    java.awt.Dimension var24 = var18.getMaximumSize();
    boolean var25 = var18.isRequestFocusEnabled();
    var18.setBounds(0, 24, 24, (-1));
    boolean var31 = var18.isDoubleBuffered();
    boolean var32 = var18.isValid();
    int var33 = var18.getHeight();
    java.awt.Component var34 = var2.add("PanelUI", (java.awt.Component)var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test107() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test107");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    var2.invalidate();
    java.awt.event.FocusListener[] var6 = var2.getFocusListeners();
    boolean var7 = var2.isPaintingForPrint();
    var2.setFocusTraversalKeysEnabled(true);
    var2.setEnabled(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test108() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test108");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    bierse.view.RunningMessagePanel var6 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var7 = var6.isMaximumSizeSet();
    boolean var8 = var6.isOpaque();
    java.awt.event.HierarchyListener[] var9 = var6.getHierarchyListeners();
    int var10 = var6.countComponents();
    java.awt.event.HierarchyBoundsListener[] var11 = var6.getHierarchyBoundsListeners();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    boolean var16 = var14.isOpaque();
    java.awt.event.HierarchyListener[] var17 = var14.getHierarchyListeners();
    int var18 = var14.getWidth();
    java.awt.event.ContainerListener[] var19 = var14.getContainerListeners();
    java.awt.Dimension var20 = var14.getMaximumSize();
    var6.setMinimumSize(var20);
    java.awt.Dimension var22 = var2.getSize(var20);
    boolean var23 = var2.requestFocusInWindow();
    boolean var24 = var2.getIgnoreRepaint();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var28 = var27.getPreferredSize();
    boolean var31 = var27.contains(10, 1);
    java.awt.Insets var32 = var27.getInsets();
    javax.swing.JToolTip var33 = var27.createToolTip();
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var37 = var36.isMaximumSizeSet();
    var36.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var42 = var36.getTransferHandler();
    boolean var43 = var36.hasFocus();
    javax.swing.event.AncestorListener[] var44 = var36.getAncestorListeners();
    var36.enable(false);
    int var47 = var33.getComponentZOrder((java.awt.Component)var36);
    java.awt.Dimension var48 = var33.getMinimumSize();
    var2.setMinimumSize(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test109() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test109");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    var16.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var26 = var16.getPreferredSize();
    java.awt.Dimension var27 = var2.getSize(var26);
    var2.repaint(100L, 1, 0, 100, 24);
    var2.updateUI();
    javax.swing.TransferHandler var35 = var2.getTransferHandler();
    java.util.Locale var36 = var2.getLocale();
    java.awt.dnd.DropTarget var37 = var2.getDropTarget();
    boolean var40 = var2.contains((-1), 100);
    var2.show(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test110() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test110");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    boolean var5 = var2.isEnabled();
    javax.swing.JRootPane var6 = var2.getRootPane();
    boolean var7 = var2.isLightweight();
    java.awt.Insets var8 = var2.insets();
    boolean var9 = var2.isFocusCycleRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test111() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test111");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Container var4 = var2.getParent();
    float var5 = var2.getAlignmentY();
    boolean var6 = var2.isManagingFocus();
    var2.disable();
    var2.grabFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test112() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test112");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    var2.setAlignmentX(10.0f);
    var2.removeAll();
    java.awt.Point var15 = var2.location();
    java.awt.Dimension var16 = var2.getMinimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test113() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test113");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    java.awt.Font var9 = var2.getFont();
    java.beans.PropertyChangeListener[] var11 = var2.getPropertyChangeListeners("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    boolean var12 = var2.isValidateRoot();
    java.awt.Toolkit var13 = var2.getToolkit();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var16.invalidate();
    java.awt.Dimension var23 = var16.getPreferredSize();
    var2.setMaximumSize(var23);
    java.awt.event.HierarchyBoundsListener[] var25 = var2.getHierarchyBoundsListeners();
    java.awt.Point var26 = var2.location();
    var2.setAutoscrolls(true);
    boolean var30 = var2.requestFocus(false);
    java.awt.event.MouseMotionListener[] var31 = var2.getMouseMotionListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test114() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test114");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    bierse.view.RunningMessagePanel var6 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var7 = var6.isMaximumSizeSet();
    boolean var8 = var6.isOpaque();
    java.awt.event.HierarchyListener[] var9 = var6.getHierarchyListeners();
    int var10 = var6.countComponents();
    java.awt.event.HierarchyBoundsListener[] var11 = var6.getHierarchyBoundsListeners();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    boolean var16 = var14.isOpaque();
    java.awt.event.HierarchyListener[] var17 = var14.getHierarchyListeners();
    int var18 = var14.getWidth();
    java.awt.event.ContainerListener[] var19 = var14.getContainerListeners();
    java.awt.Dimension var20 = var14.getMaximumSize();
    var6.setMinimumSize(var20);
    java.awt.Dimension var22 = var2.getSize(var20);
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var25.repaint(1L, (-1), (-1), 0, 100);
    boolean var32 = var25.isFocusTraversable();
    javax.swing.ActionMap var33 = var25.getActionMap();
    var2.setActionMap(var33);
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var37.invalidate();
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var47 = var46.isMaximumSizeSet();
    var46.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var54 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var55 = var54.isMaximumSizeSet();
    var54.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var60 = var54.getWidth();
    java.awt.Component[] var61 = var54.getComponents();
    var37.putClientProperty((java.lang.Object)var46, (java.lang.Object)var61);
    boolean var64 = var37.requestFocus(false);
    javax.swing.InputMap var65 = var37.getInputMap();
    var37.reshape(996, 100, 12, 996);
    int var71 = var2.getComponentZOrder((java.awt.Component)var37);
    var2.grabFocus();
    var2.list();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == (-1));

  }

  public void test115() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test115");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.countComponents();
    java.awt.dnd.DropTarget var7 = var2.getDropTarget();
    boolean var8 = var2.hasFocus();
    var2.setAlignmentX(1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test116() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test116");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var8 = var7.getPreferredSize();
    boolean var11 = var7.contains(10, 1);
    java.awt.im.InputMethodRequests var12 = var7.getInputMethodRequests();
    java.awt.Font var13 = var7.getFont();
    var2.setFont(var13);
    java.awt.Dimension var15 = var2.minimumSize();
    java.awt.im.InputContext var16 = var2.getInputContext();
    var2.requestFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test117() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test117");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    boolean var8 = var2.getInheritsPopupMenu();
    java.lang.String var9 = var2.toString();
    java.awt.Rectangle var10 = var2.bounds();
    java.awt.GraphicsConfiguration var11 = var2.getGraphicsConfiguration();
    var2.enableInputMethods(false);
    javax.swing.JToolTip var14 = var2.createToolTip();
    boolean var17 = var14.contains(13, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var9,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var9.equals("bierse.view.RunningMessagePanel[,0,0,0var9,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test118() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test118");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.repaint(1L, (-1), (-1), 0, 100);
    boolean var9 = var2.isFocusTraversable();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var13 = var12.getPreferredSize();
    boolean var16 = var12.contains(10, 1);
    java.awt.im.InputMethodRequests var17 = var12.getInputMethodRequests();
    var12.revalidate();
    var12.firePropertyChange("hi!", (short)100, (short)0);
    var2.setNextFocusableComponent((java.awt.Component)var12);
    boolean var24 = var2.isFocusable();
    var2.setAutoscrolls(true);
    var2.setAlignmentY(100.0f);
    var2.setVerifyInputWhenFocusTarget(true);
    bierse.view.RunningMessagePanel var33 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var34 = var33.isMaximumSizeSet();
    boolean var35 = var33.isOpaque();
    java.awt.event.HierarchyListener[] var36 = var33.getHierarchyListeners();
    int var37 = var33.countComponents();
    java.awt.dnd.DropTarget var38 = var33.getDropTarget();
    boolean var39 = var33.isMinimumSizeSet();
    java.awt.Dimension var40 = var33.getSize();
    java.awt.Dimension var41 = var2.getSize(var40);
    bierse.view.RunningMessagePanel var44 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var45 = var44.isMaximumSizeSet();
    boolean var46 = var44.isOpaque();
    java.awt.event.HierarchyListener[] var47 = var44.getHierarchyListeners();
    int var48 = var44.countComponents();
    java.awt.event.HierarchyBoundsListener[] var49 = var44.getHierarchyBoundsListeners();
    boolean var51 = var44.areFocusTraversalKeysSet(1);
    bierse.view.RunningMessagePanel var54 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var55 = var54.getPreferredSize();
    javax.swing.JPopupMenu var56 = var54.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var59 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var60 = var59.getPreferredSize();
    javax.swing.JPopupMenu var61 = var59.getComponentPopupMenu();
    java.awt.Rectangle var62 = var59.bounds();
    var54.computeVisibleRect(var62);
    var44.setBounds(var62);
    java.awt.Rectangle var65 = var2.getBounds(var62);
    boolean var66 = var2.isDoubleBuffered();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);

  }

  public void test119() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test119");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var10 = var9.isMaximumSizeSet();
    var9.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var9.invalidate();
    bierse.view.RunningMessagePanel var18 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var19 = var18.isMaximumSizeSet();
    var18.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var27 = var26.isMaximumSizeSet();
    var26.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var32 = var26.getWidth();
    java.awt.Component[] var33 = var26.getComponents();
    var9.putClientProperty((java.lang.Object)var18, (java.lang.Object)var33);
    java.util.Locale var35 = var18.getLocale();
    javax.swing.JComponent.setDefaultLocale(var35);
    javax.swing.JComponent.setDefaultLocale(var35);
    javax.swing.JComponent.setDefaultLocale(var35);
    javax.swing.JComponent.setDefaultLocale(var35);
    javax.swing.JComponent.setDefaultLocale(var35);
    var2.setLocale(var35);
    java.awt.Component[] var42 = var2.getComponents();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", (-1.0f), 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test120() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test120");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    int var7 = var2.countComponents();
    java.awt.Point var9 = var2.getMousePosition(true);
    var2.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var12 = var2.toString();
    java.awt.Font var13 = var2.getFont();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var17 = var16.getPreferredSize();
    boolean var20 = var16.contains(10, 1);
    java.awt.im.InputMethodRequests var21 = var16.getInputMethodRequests();
    boolean var22 = var16.getInheritsPopupMenu();
    java.lang.String var23 = var16.toString();
    java.awt.Rectangle var24 = var16.bounds();
    var2.setBounds(var24);
    boolean var26 = var2.isPaintingTile();
    boolean var27 = var2.requestFocusInWindow();
    java.awt.Image var30 = var2.createImage((-1), 996);
    int var31 = var2.getWidth();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var35 = var34.getPreferredSize();
    boolean var38 = var34.contains(10, 1);
    java.awt.im.InputMethodRequests var39 = var34.getInputMethodRequests();
    java.awt.Font var40 = var34.getFont();
    java.awt.Dimension var41 = var34.minimumSize();
    bierse.view.RunningMessagePanel var44 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var45 = var44.isMaximumSizeSet();
    boolean var46 = var44.isOpaque();
    javax.swing.InputMap var47 = var44.getInputMap();
    java.beans.PropertyChangeListener[] var49 = var44.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var50 = var44.getComponentOrientation();
    java.awt.peer.ComponentPeer var51 = var44.getPeer();
    var44.transferFocusDownCycle();
    bierse.view.RunningMessagePanel var55 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var56 = var55.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var59 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var59.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var66 = var59.location();
    java.awt.Component var67 = var55.findComponentAt(var66);
    bierse.view.RunningMessagePanel var70 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var70.transferFocus();
    var70.show();
    bierse.view.RunningMessagePanel var75 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var76 = var75.getPreferredSize();
    boolean var79 = var75.contains(10, 1);
    java.awt.im.InputMethodRequests var80 = var75.getInputMethodRequests();
    java.awt.Font var81 = var75.getFont();
    var70.setFont(var81);
    var55.setFont(var81);
    var44.setFont(var81);
    var34.setFont(var81);
    java.awt.FontMetrics var86 = var2.getFontMetrics(var81);
    boolean var87 = var2.isMinimumSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var12,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var12.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var12,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var23,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var23.equals("bierse.view.RunningMessagePanel[,0,0,0var23,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);

  }

  public void test121() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test121");


    bierse.view.MyKeyMap var2 = new bierse.view.MyKeyMap("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", 12);
    java.lang.String var3 = var2.getText();
    java.lang.String var4 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var3,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var3.equals("bierse.view.RunningMessagePanel[,0,0,0var3,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var4,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var4.equals("bierse.view.RunningMessagePanel[,0,0,0var4,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));

  }

  public void test122() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test122");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var9 = var2.location();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", ' ', 'a');
    java.awt.image.ColorModel var14 = var2.getColorModel();
    int var17 = var2.getBaseline(12, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1));

  }

  public void test123() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test123");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    var2.setAlignmentY(10.0f);
    var2.setInheritsPopupMenu(false);
    javax.accessibility.AccessibleContext var18 = var2.getAccessibleContext();
    boolean var19 = var2.isEnabled();
    java.awt.Dimension var20 = var2.getMinimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test124() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test124");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    var2.revalidate();
    java.awt.event.HierarchyListener[] var9 = var2.getHierarchyListeners();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var13 = var12.isMaximumSizeSet();
    boolean var14 = var12.isOpaque();
    java.awt.event.HierarchyListener[] var15 = var12.getHierarchyListeners();
    java.awt.peer.ComponentPeer var16 = var12.getPeer();
    var12.transferFocusDownCycle();
    var12.transferFocusUpCycle();
    java.awt.Dimension var19 = var12.minimumSize();
    var2.setPreferredSize(var19);
    java.awt.event.MouseWheelListener[] var21 = var2.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var24.repaint(1L, (-1), (-1), 0, 100);
    boolean var31 = var24.isFocusTraversable();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var35 = var34.getPreferredSize();
    boolean var38 = var34.contains(10, 1);
    java.awt.im.InputMethodRequests var39 = var34.getInputMethodRequests();
    var34.revalidate();
    var34.firePropertyChange("hi!", (short)100, (short)0);
    var24.setNextFocusableComponent((java.awt.Component)var34);
    java.awt.event.HierarchyBoundsListener[] var46 = var34.getHierarchyBoundsListeners();
    boolean var47 = var34.isCursorSet();
    java.awt.Point var48 = var34.getLocation();
    java.awt.Point var49 = var2.getLocation(var48);
    boolean var50 = var2.isDoubleBuffered();
    int var51 = var2.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);

  }

  public void test125() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test125");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    var11.transferFocus();
    var11.setToolTipText("");
    var11.show();
    boolean var32 = var11.isMaximumSizeSet();
    boolean var33 = var11.isFocusTraversalPolicySet();
    boolean var34 = var11.getInheritsPopupMenu();
    float var35 = var11.getAlignmentY();
    int var36 = var11.getY();
    bierse.view.RunningMessagePanel var39 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var40 = var39.isMaximumSizeSet();
    boolean var41 = var39.isOpaque();
    java.awt.event.HierarchyListener[] var42 = var39.getHierarchyListeners();
    var39.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", 0.0f, 100.0f);
    java.beans.PropertyChangeListener[] var48 = var39.getPropertyChangeListeners("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]");
    java.awt.Dimension var49 = var39.getSize();
    java.lang.Object var50 = var11.getClientProperty((java.lang.Object)var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);

  }

  public void test126() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test126");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    java.awt.Image var11 = var2.createImage(24, 24);
    boolean var12 = var2.getInheritsPopupMenu();
    boolean var13 = var2.isBackgroundSet();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.layout();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isMaximumSizeSet();
    boolean var23 = var21.isOpaque();
    java.awt.event.HierarchyListener[] var24 = var21.getHierarchyListeners();
    int var25 = var21.countComponents();
    java.awt.event.HierarchyBoundsListener[] var26 = var21.getHierarchyBoundsListeners();
    boolean var28 = var21.areFocusTraversalKeysSet(1);
    bierse.view.RunningMessagePanel var31 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var32 = var31.getPreferredSize();
    javax.swing.JPopupMenu var33 = var31.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var37 = var36.getPreferredSize();
    javax.swing.JPopupMenu var38 = var36.getComponentPopupMenu();
    java.awt.Rectangle var39 = var36.bounds();
    var31.computeVisibleRect(var39);
    var21.setBounds(var39);
    var16.repaint(var39);
    var2.paintImmediately(var39);
    java.util.Locale var44 = var2.getLocale();
    java.awt.Insets var45 = var2.getInsets();
    var2.setEnabled(true);
    java.awt.im.InputContext var48 = var2.getInputContext();
    var2.enableInputMethods(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);

  }

  public void test127() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test127");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    var2.revalidate();
    java.awt.event.HierarchyListener[] var9 = var2.getHierarchyListeners();
    var2.invalidate();
    java.awt.LayoutManager var11 = var2.getLayout();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    boolean var16 = var14.isOpaque();
    java.awt.event.HierarchyListener[] var17 = var14.getHierarchyListeners();
    int var18 = var14.countComponents();
    java.awt.event.HierarchyBoundsListener[] var19 = var14.getHierarchyBoundsListeners();
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var23 = var22.getPreferredSize();
    boolean var24 = var22.isPreferredSizeSet();
    var22.enable();
    javax.accessibility.AccessibleContext var26 = var22.getAccessibleContext();
    bierse.view.RunningMessagePanel var29 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var29.transferFocus();
    var29.show();
    float var32 = var29.getAlignmentX();
    var29.repaint(0L, 10, 0, 10, (-1));
    boolean var39 = var29.isEnabled();
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var43 = var42.getPreferredSize();
    javax.swing.JPopupMenu var44 = var42.getComponentPopupMenu();
    java.awt.Rectangle var45 = var42.bounds();
    java.awt.Rectangle var46 = var29.getBounds(var45);
    var22.computeVisibleRect(var46);
    var14.scrollRectToVisible(var46);
    var2.scrollRectToVisible(var46);
    var2.setAlignmentX(100.0f);
    java.awt.Container var52 = var2.getFocusCycleRootAncestor();
    int var53 = var2.getY();
    var2.requestFocus();
    bierse.view.RunningMessagePanel var57 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var58 = var57.isMaximumSizeSet();
    var57.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var63 = var57.getTransferHandler();
    boolean var64 = var57.hasFocus();
    javax.swing.event.AncestorListener[] var65 = var57.getAncestorListeners();
    java.awt.Dimension var66 = var57.getMinimumSize();
    bierse.view.RunningMessagePanel var70 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var71 = var70.getPreferredSize();
    java.awt.Dimension var72 = var70.getMaximumSize();
    var70.disable();
    var57.putClientProperty((java.lang.Object)100, (java.lang.Object)var70);
    int var75 = var57.getHeight();
    bierse.view.RunningMessagePanel var78 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var78.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var85 = var78.location();
    boolean var86 = var57.contains(var85);
    java.awt.Point var87 = var2.getLocation(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test128() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test128");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    java.awt.Container var7 = var2.getTopLevelAncestor();
    var2.nextFocus();
    boolean var9 = var2.isBackgroundSet();
    java.awt.Point var11 = var2.getMousePosition(true);
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    boolean var16 = var14.isOpaque();
    java.awt.event.HierarchyListener[] var17 = var14.getHierarchyListeners();
    java.awt.peer.ComponentPeer var18 = var14.getPeer();
    var14.transferFocus();
    java.lang.String var20 = var14.getToolTipText();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var24 = var23.isMaximumSizeSet();
    boolean var25 = var23.isOpaque();
    java.beans.PropertyChangeListener[] var26 = var23.getPropertyChangeListeners();
    var23.setOpaque(true);
    java.awt.Insets var29 = var23.insets();
    bierse.view.RunningMessagePanel var32 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var33 = var32.isMaximumSizeSet();
    var32.layout();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var43 = var37.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var47 = var46.getPreferredSize();
    boolean var48 = var46.isPreferredSizeSet();
    var46.enable();
    var46.transferFocusBackward();
    int var51 = var37.getComponentZOrder((java.awt.Component)var46);
    var37.setEnabled(false);
    java.awt.Graphics var54 = var37.getGraphics();
    var32.remove((java.awt.Component)var37);
    bierse.view.RunningMessagePanel var58 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var59 = var58.getPreferredSize();
    boolean var62 = var58.contains(10, 1);
    java.awt.Insets var63 = var58.getInsets();
    javax.swing.JToolTip var64 = var58.createToolTip();
    var58.invalidate();
    var32.remove((java.awt.Component)var58);
    var14.putClientProperty((java.lang.Object)var23, (java.lang.Object)var58);
    java.awt.Component var68 = var2.add((java.awt.Component)var23);
    int var69 = var23.getX();
    javax.swing.plaf.PanelUI var70 = var23.getUI();
    boolean var71 = var23.isPreferredSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);

  }

  public void test129() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test129");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    var2.invalidate();
    java.awt.event.FocusListener[] var6 = var2.getFocusListeners();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var10 = var9.isMaximumSizeSet();
    var9.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var15 = var9.getTransferHandler();
    boolean var16 = var9.hasFocus();
    var9.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var19 = var9.getPreferredSize();
    java.awt.ComponentOrientation var20 = var9.getComponentOrientation();
    var9.transferFocus();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    var24.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var30 = var24.getTransferHandler();
    boolean var31 = var24.hasFocus();
    javax.swing.event.AncestorListener[] var32 = var24.getAncestorListeners();
    java.awt.Dimension var33 = var24.getMinimumSize();
    boolean var34 = var24.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    var37.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var47 = var37.getPreferredSize();
    java.awt.Dimension var48 = var24.getSize(var47);
    var9.setSize(var47);
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var53 = var52.getPreferredSize();
    boolean var56 = var52.contains(10, 1);
    java.awt.Insets var57 = var52.getInsets();
    javax.swing.JToolTip var58 = var52.createToolTip();
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var62 = var61.isMaximumSizeSet();
    var61.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var67 = var61.getTransferHandler();
    boolean var68 = var61.hasFocus();
    javax.swing.event.AncestorListener[] var69 = var61.getAncestorListeners();
    var61.enable(false);
    int var72 = var58.getComponentZOrder((java.awt.Component)var61);
    boolean var73 = var58.requestFocusInWindow();
    boolean var74 = var58.isOptimizedDrawingEnabled();
    var2.add((java.awt.Component)var9, (java.lang.Object)var58);
    java.beans.PropertyChangeListener[] var77 = var58.getPropertyChangeListeners("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    boolean var78 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var58);
    java.awt.Insets var79 = var58.insets();
    boolean var80 = var58.isRequestFocusEnabled();
    java.awt.event.MouseListener[] var81 = var58.getMouseListeners();
    java.awt.Component.BaselineResizeBehavior var82 = var58.getBaselineResizeBehavior();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test130() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test130");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.revalidate();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var9 = var8.isMaximumSizeSet();
    var8.layout();
    var8.invalidate();
    var2.setNextFocusableComponent((java.awt.Component)var8);
    boolean var13 = var2.isValidateRoot();
    var2.show();
    var2.layout();
    javax.swing.JPopupMenu var16 = var2.getComponentPopupMenu();
    java.awt.Dimension var17 = var2.getMinimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test131() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test131");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    boolean var12 = var2.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var16 = var15.isMaximumSizeSet();
    var15.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var21 = var15.getTransferHandler();
    boolean var22 = var15.hasFocus();
    var15.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var25 = var15.getPreferredSize();
    java.awt.Dimension var26 = var2.getSize(var25);
    javax.swing.JRootPane var27 = var2.getRootPane();
    int var28 = var2.getHeight();
    java.awt.Insets var29 = var2.getInsets();
    int var30 = var2.countComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);

  }

  public void test132() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test132");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var43 = var42.getPreferredSize();
    java.awt.Dimension var44 = var42.getMaximumSize();
    var27.resize(var44);
    var27.transferFocusDownCycle();
    boolean var49 = var27.inside(24, 1);
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var53 = var52.isMaximumSizeSet();
    boolean var54 = var52.isOpaque();
    javax.swing.InputMap var55 = var52.getInputMap();
    java.lang.String var56 = var52.getName();
    var52.setFocusTraversalPolicyProvider(true);
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var61.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var68 = var61.location();
    java.awt.Component var69 = var52.findComponentAt(var68);
    java.awt.LayoutManager var70 = var52.getLayout();
    var27.setLayout(var70);
    var27.validate();
    var27.setDoubleBuffered(true);
    java.beans.VetoableChangeListener[] var75 = var27.getVetoableChangeListeners();
    var27.setLocation(10, 996);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test133() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test133");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    java.awt.peer.ComponentPeer var6 = var2.getPeer();
    var2.transferFocusDownCycle();
    var2.transferFocusUpCycle();
    javax.swing.JToolTip var9 = var2.createToolTip();
    var9.show(true);
    var9.removeAll();
    int var13 = var9.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);

  }

  public void test134() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test134");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    javax.swing.event.ListDataListener[] var1 = var0.getListDataListeners();
    bierse.view.RunningMessagePanel var4 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var5 = var4.isMaximumSizeSet();
    var4.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var10 = var4.getTransferHandler();
    boolean var11 = var4.hasFocus();
    var4.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var14 = var4.getPreferredSize();
    java.awt.ComponentOrientation var15 = var4.getComponentOrientation();
    var4.setAlignmentY(10.0f);
    var4.setInheritsPopupMenu(false);
    javax.accessibility.AccessibleContext var20 = var4.getAccessibleContext();
    java.beans.PropertyChangeListener[] var21 = var4.getPropertyChangeListeners();
    var4.disable();
    var0.removeElement((java.lang.Object)var4);
    var4.requestFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test135() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test135");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.setDoubleBuffered(false);
    java.awt.GraphicsConfiguration var7 = var2.getGraphicsConfiguration();
    java.awt.Component var10 = var2.locate((-1), (-1));
    var2.setAlignmentX(100.0f);
    javax.swing.InputVerifier var13 = var2.getInputVerifier();
    boolean var14 = var2.getInheritsPopupMenu();
    var2.setFocusTraversalPolicyProvider(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test136() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test136");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    boolean var40 = var2.getFocusTraversalKeysEnabled();
    var2.setAlignmentX(100.0f);
    bierse.view.RunningMessagePanel var45 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var46 = var45.getPreferredSize();
    javax.swing.JPopupMenu var47 = var45.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var50 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var51 = var50.getPreferredSize();
    javax.swing.JPopupMenu var52 = var50.getComponentPopupMenu();
    java.awt.Rectangle var53 = var50.bounds();
    var45.computeVisibleRect(var53);
    java.awt.Rectangle var55 = var2.getBounds(var53);
    bierse.view.RunningMessagePanel var58 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var59 = var58.isMaximumSizeSet();
    var58.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var64 = var58.getTransferHandler();
    boolean var65 = var58.hasFocus();
    var58.setVerifyInputWhenFocusTarget(false);
    int var68 = var58.getDebugGraphicsOptions();
    bierse.view.RunningMessagePanel var71 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var72 = var71.isMaximumSizeSet();
    var71.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var77 = var71.getTransferHandler();
    boolean var78 = var71.hasFocus();
    javax.swing.event.AncestorListener[] var79 = var71.getAncestorListeners();
    java.awt.Dimension var80 = var71.getMinimumSize();
    bierse.view.RunningMessagePanel var84 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var85 = var84.getPreferredSize();
    java.awt.Dimension var86 = var84.getMaximumSize();
    var84.disable();
    var71.putClientProperty((java.lang.Object)100, (java.lang.Object)var84);
    javax.swing.InputVerifier var89 = var84.getInputVerifier();
    java.awt.dnd.DropTarget var90 = var84.getDropTarget();
    java.awt.Dimension var91 = var84.getMinimumSize();
    var84.disable();
    var2.add((java.awt.Component)var58, (java.lang.Object)var84, 1);
    java.awt.Dimension var95 = var2.getPreferredSize();
    boolean var96 = var2.isDisplayable();
    var2.invalidate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);

  }

  public void test137() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test137");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Component.BaselineResizeBehavior var3 = var2.getBaselineResizeBehavior();
    bierse.view.RunningMessagePanel var6 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var7 = var6.getPreferredSize();
    java.awt.Point var8 = var6.getMousePosition();
    var6.revalidate();
    var6.invalidate();
    java.awt.Insets var11 = var6.insets();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    var14.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var14.invalidate();
    java.awt.Dimension var21 = var14.getPreferredSize();
    int var22 = var14.getWidth();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    var25.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var31 = var25.getTransferHandler();
    boolean var32 = var25.hasFocus();
    var25.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var35 = var25.getPreferredSize();
    java.awt.ComponentOrientation var36 = var25.getComponentOrientation();
    bierse.view.RunningMessagePanel var39 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var40 = var39.isMaximumSizeSet();
    var39.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var45 = var39.getTransferHandler();
    boolean var46 = var39.hasFocus();
    javax.swing.event.AncestorListener[] var47 = var39.getAncestorListeners();
    bierse.view.RunningMessagePanel var50 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var51 = var50.isMaximumSizeSet();
    var50.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var56 = var50.getTransferHandler();
    boolean var57 = var50.hasFocus();
    var50.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var60 = var50.getPreferredSize();
    java.awt.ComponentOrientation var61 = var50.getComponentOrientation();
    var25.add((java.awt.Component)var39, (java.lang.Object)var50);
    bierse.view.RunningMessagePanel var65 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var66 = var65.getPreferredSize();
    java.awt.Dimension var67 = var65.getMaximumSize();
    var14.add((java.awt.Component)var39, (java.lang.Object)var65, (-1));
    bierse.view.RunningMessagePanel var72 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var72.transferFocus();
    var72.show();
    float var75 = var72.getAlignmentX();
    boolean var78 = var72.contains(0, 24);
    java.awt.Color var79 = var72.getForeground();
    var14.setForeground(var79);
    var6.setBackground(var79);
    var2.setForeground(var79);
    var2.firePropertyChange("hi!", 100.0f, 100.0f);
    var2.layout();
    boolean var88 = var2.isMinimumSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);

  }

  public void test138() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test138");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    int var7 = var2.countComponents();
    java.awt.Point var9 = var2.getMousePosition(true);
    var2.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var12 = var2.toString();
    java.awt.Font var13 = var2.getFont();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var17 = var16.getPreferredSize();
    boolean var20 = var16.contains(10, 1);
    java.awt.im.InputMethodRequests var21 = var16.getInputMethodRequests();
    boolean var22 = var16.getInheritsPopupMenu();
    java.lang.String var23 = var16.toString();
    java.awt.Rectangle var24 = var16.bounds();
    var2.setBounds(var24);
    boolean var26 = var2.isPaintingTile();
    boolean var27 = var2.requestFocusInWindow();
    java.awt.Image var30 = var2.createImage((-1), 996);
    var2.setEnabled(false);
    int var35 = var2.getBaseline(996, 996);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var12,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var12.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var12,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var23,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var23.equals("bierse.view.RunningMessagePanel[,0,0,0var23,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == (-1));

  }

  public void test139() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test139");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Dimension var4 = var2.getMaximumSize();
    var2.disable();
    var2.transferFocusDownCycle();
    java.awt.Dimension var7 = var2.getPreferredSize();
    java.awt.Color var8 = var2.getForeground();
    var2.disable();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var14 = var13.isMaximumSizeSet();
    var13.layout();
    var13.invalidate();
    java.awt.event.FocusListener[] var17 = var13.getFocusListeners();
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var21 = var20.isMaximumSizeSet();
    var20.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var26 = var20.getTransferHandler();
    boolean var27 = var20.hasFocus();
    var20.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var30 = var20.getPreferredSize();
    java.awt.ComponentOrientation var31 = var20.getComponentOrientation();
    var20.transferFocus();
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var36 = var35.isMaximumSizeSet();
    var35.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var41 = var35.getTransferHandler();
    boolean var42 = var35.hasFocus();
    javax.swing.event.AncestorListener[] var43 = var35.getAncestorListeners();
    java.awt.Dimension var44 = var35.getMinimumSize();
    boolean var45 = var35.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var49 = var48.isMaximumSizeSet();
    var48.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var54 = var48.getTransferHandler();
    boolean var55 = var48.hasFocus();
    var48.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var58 = var48.getPreferredSize();
    java.awt.Dimension var59 = var35.getSize(var58);
    var20.setSize(var58);
    bierse.view.RunningMessagePanel var63 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var64 = var63.getPreferredSize();
    boolean var67 = var63.contains(10, 1);
    java.awt.Insets var68 = var63.getInsets();
    javax.swing.JToolTip var69 = var63.createToolTip();
    bierse.view.RunningMessagePanel var72 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var73 = var72.isMaximumSizeSet();
    var72.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var78 = var72.getTransferHandler();
    boolean var79 = var72.hasFocus();
    javax.swing.event.AncestorListener[] var80 = var72.getAncestorListeners();
    var72.enable(false);
    int var83 = var69.getComponentZOrder((java.awt.Component)var72);
    boolean var84 = var69.requestFocusInWindow();
    boolean var85 = var69.isOptimizedDrawingEnabled();
    var13.add((java.awt.Component)var20, (java.lang.Object)var69);
    float var87 = var69.getAlignmentY();
    boolean var88 = var69.getIgnoreRepaint();
    java.awt.Component var89 = var2.add("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var69);
    java.awt.Container var90 = var69.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test140() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test140");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    java.awt.Dimension var9 = var2.getPreferredSize();
    int var10 = var2.getWidth();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var14 = var13.isMaximumSizeSet();
    var13.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var19 = var13.getTransferHandler();
    boolean var20 = var13.hasFocus();
    var13.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var23 = var13.getPreferredSize();
    java.awt.ComponentOrientation var24 = var13.getComponentOrientation();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    javax.swing.event.AncestorListener[] var35 = var27.getAncestorListeners();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var39 = var38.isMaximumSizeSet();
    var38.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var44 = var38.getTransferHandler();
    boolean var45 = var38.hasFocus();
    var38.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var48 = var38.getPreferredSize();
    java.awt.ComponentOrientation var49 = var38.getComponentOrientation();
    var13.add((java.awt.Component)var27, (java.lang.Object)var38);
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var54 = var53.getPreferredSize();
    java.awt.Dimension var55 = var53.getMaximumSize();
    var2.add((java.awt.Component)var27, (java.lang.Object)var53, (-1));
    boolean var58 = var2.isShowing();
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var62 = var61.isMaximumSizeSet();
    var61.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var67 = var61.getTransferHandler();
    boolean var68 = var61.hasFocus();
    var61.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var71 = var61.getPreferredSize();
    java.awt.ComponentOrientation var72 = var61.getComponentOrientation();
    bierse.view.RunningMessagePanel var75 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var76 = var75.isMaximumSizeSet();
    var75.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var81 = var75.getTransferHandler();
    boolean var82 = var75.hasFocus();
    var75.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var85 = var75.getPreferredSize();
    java.awt.Dimension var86 = var61.getSize(var85);
    var61.repaint(100L, 1, 0, 100, 24);
    var61.updateUI();
    var61.removeNotify();
    javax.swing.plaf.PanelUI var95 = var61.getUI();
    java.lang.Object var96 = var2.getClientProperty((java.lang.Object)var95);
    javax.swing.InputMap var97 = var2.getInputMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test141() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test141");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    java.awt.Font var9 = var2.getFont();
    var2.enable();
    boolean var11 = var2.getIgnoreRepaint();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", 10, 11);
    bierse.view.RunningMessagePanel var18 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var19 = var18.isMaximumSizeSet();
    var18.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var24 = var18.getTransferHandler();
    boolean var25 = var18.hasFocus();
    var18.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var28 = var18.getPreferredSize();
    java.awt.ComponentOrientation var29 = var18.getComponentOrientation();
    bierse.view.RunningMessagePanel var32 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var33 = var32.isMaximumSizeSet();
    var32.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var38 = var32.getTransferHandler();
    boolean var39 = var32.hasFocus();
    javax.swing.event.AncestorListener[] var40 = var32.getAncestorListeners();
    bierse.view.RunningMessagePanel var43 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var44 = var43.isMaximumSizeSet();
    var43.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var49 = var43.getTransferHandler();
    boolean var50 = var43.hasFocus();
    var43.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var53 = var43.getPreferredSize();
    java.awt.ComponentOrientation var54 = var43.getComponentOrientation();
    var18.add((java.awt.Component)var32, (java.lang.Object)var43);
    bierse.view.RunningMessagePanel var58 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var59 = var58.getPreferredSize();
    boolean var62 = var58.contains(10, 1);
    java.awt.im.InputMethodRequests var63 = var58.getInputMethodRequests();
    var58.revalidate();
    var58.enable(true);
    java.awt.Point var67 = var58.location();
    java.awt.Component var68 = var32.getComponentAt(var67);
    javax.swing.JRootPane var69 = var32.getRootPane();
    var32.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", false, true);
    java.lang.Object var74 = var2.getClientProperty((java.lang.Object)var32);
    var32.setFocusCycleRoot(true);
    java.awt.event.InputMethodListener[] var77 = var32.getInputMethodListeners();
    java.lang.String var78 = var32.getUIClassID();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "PanelUI"+ "'", var78.equals("PanelUI"));

  }

  public void test142() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test142");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.setDoubleBuffered(false);
    java.awt.Dimension var7 = var2.minimumSize();
    boolean var8 = var2.isValidateRoot();
    java.awt.event.FocusListener[] var9 = var2.getFocusListeners();
    boolean var10 = var2.isShowing();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test143() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test143");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    javax.swing.InputMap var5 = var2.getInputMap();
    java.lang.String var6 = var2.getName();
    boolean var7 = var2.isFocusCycleRoot();
    java.awt.Font var8 = var2.getFont();
    var2.repaint(10L);
    javax.swing.JToolTip var11 = var2.createToolTip();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test144() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test144");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    int var20 = var2.getHeight();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var23.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var30 = var23.location();
    boolean var31 = var2.contains(var30);
    float var32 = var2.getAlignmentX();
    var2.grabFocus();
    boolean var34 = var2.getAutoscrolls();
    int var35 = var2.getWidth();
    java.awt.Dimension var36 = var2.getMaximumSize();
    bierse.view.RunningMessagePanel var39 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var40 = var39.isMaximumSizeSet();
    var39.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var45 = var39.getTransferHandler();
    boolean var46 = var39.hasFocus();
    javax.swing.event.AncestorListener[] var47 = var39.getAncestorListeners();
    java.awt.Dimension var48 = var39.getMinimumSize();
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var53 = var52.getPreferredSize();
    java.awt.Dimension var54 = var52.getMaximumSize();
    var52.disable();
    var39.putClientProperty((java.lang.Object)100, (java.lang.Object)var52);
    javax.swing.InputVerifier var57 = var52.getInputVerifier();
    java.awt.dnd.DropTarget var58 = var52.getDropTarget();
    java.awt.FocusTraversalPolicy var59 = var52.getFocusTraversalPolicy();
    var52.list();
    var52.setToolTipText("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    var52.disable();
    java.lang.String var64 = var52.toString();
    java.awt.Dimension var65 = var52.getPreferredSize();
    boolean var67 = var52.requestFocus(false);
    java.awt.Rectangle var68 = var52.getBounds();
    var2.setBounds(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var64,invalid,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var64.equals("bierse.view.RunningMessagePanel[,0,0,0var64,invalid,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test145() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test145");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    boolean var21 = var15.isValidateRoot();
    java.awt.Insets var22 = var15.getInsets();
    boolean var24 = var15.requestFocus(true);
    java.awt.Insets var25 = var15.getInsets();
    var15.setAlignmentY((-1.0f));
    boolean var28 = var15.isFontSet();
    java.awt.Dimension var29 = var15.getMinimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test146() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test146");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    boolean var11 = var2.inside(24, 1);
    java.awt.image.VolatileImage var14 = var2.createVolatileImage(0, 1);
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", 10, 100);
    java.awt.Image var21 = var2.createImage(10, 100);
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var25 = var24.getPreferredSize();
    boolean var28 = var24.contains(10, 1);
    var24.disable();
    java.awt.Container var30 = var24.getFocusCycleRootAncestor();
    javax.swing.InputMap var31 = var24.getInputMap();
    boolean var32 = var2.isFocusCycleRoot((java.awt.Container)var24);
    java.awt.Toolkit var33 = var2.getToolkit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test147() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test147");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var24 = var23.isMaximumSizeSet();
    var23.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var29 = var23.getTransferHandler();
    boolean var30 = var23.hasFocus();
    var23.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var33 = var23.getPreferredSize();
    java.awt.ComponentOrientation var34 = var23.getComponentOrientation();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    javax.swing.event.AncestorListener[] var45 = var37.getAncestorListeners();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var49 = var48.isMaximumSizeSet();
    var48.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var54 = var48.getTransferHandler();
    boolean var55 = var48.hasFocus();
    var48.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var58 = var48.getPreferredSize();
    java.awt.ComponentOrientation var59 = var48.getComponentOrientation();
    var23.add((java.awt.Component)var37, (java.lang.Object)var48);
    bierse.view.RunningMessagePanel var63 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var64 = var63.getPreferredSize();
    java.awt.Dimension var65 = var63.getMaximumSize();
    var48.resize(var65);
    var15.setNextFocusableComponent((java.awt.Component)var48);
    var15.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", ' ', 'a');
    var15.firePropertyChange("PanelUI", ' ', 'a');
    var15.revalidate();
    var15.move(11, 24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test148() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test148");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    var2.disable();
    java.awt.Container var8 = var2.getFocusCycleRootAncestor();
    javax.swing.ActionMap var9 = var2.getActionMap();
    java.lang.Object var10 = var2.getTreeLock();
    boolean var11 = var2.isCursorSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test149() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test149");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.setDoubleBuffered(false);
    java.awt.GraphicsConfiguration var7 = var2.getGraphicsConfiguration();
    java.awt.Component var10 = var2.locate((-1), (-1));
    java.awt.Font var11 = var2.getFont();
    java.awt.Dimension var12 = var2.getMaximumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var15.setDebugGraphicsOptions(10);
    java.lang.Object var18 = var15.getTreeLock();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isMaximumSizeSet();
    var21.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var27 = var21.getTransferHandler();
    boolean var28 = var21.hasFocus();
    javax.swing.event.AncestorListener[] var29 = var21.getAncestorListeners();
    java.awt.Dimension var30 = var21.getMinimumSize();
    var15.setPreferredSize(var30);
    boolean var32 = var2.isFocusCycleRoot((java.awt.Container)var15);
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var36 = var35.isMaximumSizeSet();
    var35.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var41 = var35.getWidth();
    java.awt.Image var44 = var35.createImage(24, 24);
    var35.repaint(0, 24, 10, (-1));
    int var50 = var35.getY();
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var54 = var53.isMaximumSizeSet();
    boolean var55 = var53.isOpaque();
    javax.swing.InputMap var56 = var53.getInputMap();
    java.lang.String var57 = var53.getName();
    var53.setFocusTraversalPolicyProvider(true);
    bierse.view.RunningMessagePanel var62 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var62.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var69 = var62.location();
    java.awt.Component var70 = var53.findComponentAt(var69);
    java.awt.LayoutManager var71 = var53.getLayout();
    var35.setLayout(var71);
    var2.setLayout(var71);
    java.awt.Dimension var74 = var2.getSize();
    bierse.view.RunningMessagePanel var77 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var77.repaint(1L, (-1), (-1), 0, 100);
    boolean var84 = var77.isFocusTraversable();
    var77.setName("PanelUI");
    var77.transferFocusDownCycle();
    java.lang.Object var88 = var2.getClientProperty((java.lang.Object)var77);
    var2.setSpeed(13);
    var2.transferFocusUpCycle();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);

  }

  public void test150() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test150");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    float var5 = var2.getAlignmentX();
    var2.repaint(0L, 10, 0, 10, (-1));
    boolean var12 = var2.isEnabled();
    var2.firePropertyChange("PanelUI", true, true);
    java.beans.PropertyChangeListener[] var18 = var2.getPropertyChangeListeners("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]");
    boolean var19 = var2.getAutoscrolls();
    var2.transferFocusDownCycle();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    boolean var26 = var24.isOpaque();
    java.awt.event.HierarchyListener[] var27 = var24.getHierarchyListeners();
    var24.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", 0.0f, 100.0f);
    java.awt.Component var32 = var2.add("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var24);
    boolean var33 = var32.isMinimumSizeSet();
    java.awt.Image var36 = var32.createImage(15, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);

  }

  public void test151() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test151");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var8 = var7.isMaximumSizeSet();
    boolean var9 = var7.isOpaque();
    java.awt.event.HierarchyListener[] var10 = var7.getHierarchyListeners();
    int var11 = var7.countComponents();
    java.awt.event.HierarchyBoundsListener[] var12 = var7.getHierarchyBoundsListeners();
    boolean var14 = var7.areFocusTraversalKeysSet(1);
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var18 = var17.getPreferredSize();
    javax.swing.JPopupMenu var19 = var17.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var23 = var22.getPreferredSize();
    javax.swing.JPopupMenu var24 = var22.getComponentPopupMenu();
    java.awt.Rectangle var25 = var22.bounds();
    var17.computeVisibleRect(var25);
    var7.setBounds(var25);
    var2.repaint(var25);
    java.awt.Component var31 = var2.getComponentAt(1, 100);
    int var32 = var2.getY();
    java.awt.Toolkit var33 = var2.getToolkit();
    var2.requestFocus();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var38 = var37.getPreferredSize();
    java.awt.Dimension var39 = var37.getMaximumSize();
    java.awt.event.FocusListener[] var40 = var37.getFocusListeners();
    bierse.view.RunningMessagePanel var43 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var44 = var43.getPreferredSize();
    boolean var47 = var43.contains(10, 1);
    java.awt.im.InputMethodRequests var48 = var43.getInputMethodRequests();
    java.awt.Font var49 = var43.getFont();
    var37.setFont(var49);
    java.beans.VetoableChangeListener[] var51 = var37.getVetoableChangeListeners();
    boolean var52 = var37.isMaximumSizeSet();
    boolean var53 = var37.requestFocusInWindow();
    var37.repaint();
    bierse.view.RunningMessagePanel var57 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var57.transferFocus();
    var57.show();
    float var60 = var57.getAlignmentX();
    var57.repaint(0L, 10, 0, 10, (-1));
    boolean var67 = var57.isEnabled();
    java.lang.Object var68 = var57.getTreeLock();
    var57.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (byte)100, (byte)100);
    javax.swing.JPopupMenu var73 = var57.getComponentPopupMenu();
    java.awt.ComponentOrientation var74 = var57.getComponentOrientation();
    var57.setEnabled(false);
    var57.repaint((-1L), (-1), 32767, 13, 100);
    bierse.view.RunningMessagePanel var85 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var86 = var85.isMaximumSizeSet();
    var85.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var85.invalidate();
    java.awt.Dimension var92 = var85.getPreferredSize();
    java.awt.Component var93 = var85.getNextFocusableComponent();
    var85.setDoubleBuffered(false);
    java.awt.ComponentOrientation var96 = var85.getComponentOrientation();
    var57.setComponentOrientation(var96);
    var37.applyComponentOrientation(var96);
    var2.setComponentOrientation(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test152() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test152");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    var2.revalidate();
    boolean var6 = var2.isFocusOwner();
    float var7 = var2.getAlignmentX();
    java.awt.Color var8 = var2.getForeground();
    boolean var9 = var2.isPaintingTile();
    var2.revalidate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test153() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test153");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    float var5 = var2.getAlignmentX();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var9 = var8.getPreferredSize();
    boolean var10 = var8.isPreferredSizeSet();
    var8.enable();
    javax.accessibility.AccessibleContext var12 = var8.getAccessibleContext();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var15.transferFocus();
    var15.show();
    float var18 = var15.getAlignmentX();
    var15.repaint(0L, 10, 0, 10, (-1));
    boolean var25 = var15.isEnabled();
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var29 = var28.getPreferredSize();
    javax.swing.JPopupMenu var30 = var28.getComponentPopupMenu();
    java.awt.Rectangle var31 = var28.bounds();
    java.awt.Rectangle var32 = var15.getBounds(var31);
    var8.computeVisibleRect(var32);
    java.awt.Color var34 = var8.getForeground();
    var2.setForeground(var34);
    java.awt.Dimension var36 = var2.getMaximumSize();
    var2.repaint();
    boolean var38 = var2.isLightweight();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test154() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test154");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    var24.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var24.invalidate();
    java.awt.Dimension var31 = var24.getPreferredSize();
    int var32 = var24.getWidth();
    java.awt.Component var33 = var15.add("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var24);
    java.awt.Rectangle var34 = var24.getVisibleRect();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    javax.swing.event.AncestorListener[] var45 = var37.getAncestorListeners();
    var37.enable(false);
    java.awt.Dimension var48 = var37.minimumSize();
    java.awt.GraphicsConfiguration var49 = var37.getGraphicsConfiguration();
    java.awt.event.MouseMotionListener[] var50 = var37.getMouseMotionListeners();
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var54 = var53.isMaximumSizeSet();
    boolean var55 = var53.isOpaque();
    java.awt.event.HierarchyListener[] var56 = var53.getHierarchyListeners();
    int var57 = var53.getWidth();
    int var58 = var53.countComponents();
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var62 = var61.getPreferredSize();
    boolean var65 = var61.contains(10, 1);
    java.awt.im.InputMethodRequests var66 = var61.getInputMethodRequests();
    boolean var69 = var61.inside((-1), 100);
    bierse.view.RunningMessagePanel var72 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var73 = var72.getPreferredSize();
    boolean var76 = var72.contains(10, 1);
    var72.setAlignmentX((-1.0f));
    java.awt.Point var79 = var72.getLocation();
    java.awt.Point var80 = var61.getLocation(var79);
    boolean var81 = var53.contains(var80);
    java.awt.Component var82 = var37.getComponentAt(var80);
    var24.setNextFocusableComponent((java.awt.Component)var37);
    var24.enable();
    boolean var85 = var24.isFontSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);

  }

  public void test155() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test155");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    boolean var10 = var2.inside((-1), 100);
    java.beans.PropertyChangeListener[] var12 = var2.getPropertyChangeListeners("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    var2.transferFocusUpCycle();
    java.awt.event.HierarchyListener[] var14 = var2.getHierarchyListeners();
    java.beans.VetoableChangeListener[] var15 = var2.getVetoableChangeListeners();
    java.awt.Container var16 = var2.getFocusCycleRootAncestor();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test156() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test156");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    java.awt.event.ContainerListener[] var7 = var2.getContainerListeners();
    java.awt.Dimension var8 = var2.getMaximumSize();
    boolean var9 = var2.isRequestFocusEnabled();
    boolean var10 = var2.requestDefaultFocus();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var14 = var13.getPreferredSize();
    java.awt.Point var15 = var13.getMousePosition();
    var13.revalidate();
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.layout();
    var19.invalidate();
    var13.setNextFocusableComponent((java.awt.Component)var19);
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var27 = var26.getPreferredSize();
    boolean var30 = var26.contains(10, 1);
    java.awt.Insets var31 = var26.getInsets();
    javax.swing.JToolTip var32 = var26.createToolTip();
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var36 = var35.isMaximumSizeSet();
    var35.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var41 = var35.getTransferHandler();
    boolean var42 = var35.hasFocus();
    var35.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var45 = var35.getPreferredSize();
    java.awt.ComponentOrientation var46 = var35.getComponentOrientation();
    bierse.view.RunningMessagePanel var49 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var50 = var49.isMaximumSizeSet();
    var49.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var55 = var49.getTransferHandler();
    boolean var56 = var49.hasFocus();
    javax.swing.event.AncestorListener[] var57 = var49.getAncestorListeners();
    bierse.view.RunningMessagePanel var60 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var61 = var60.isMaximumSizeSet();
    var60.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var66 = var60.getTransferHandler();
    boolean var67 = var60.hasFocus();
    var60.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var70 = var60.getPreferredSize();
    java.awt.ComponentOrientation var71 = var60.getComponentOrientation();
    var35.add((java.awt.Component)var49, (java.lang.Object)var60);
    bierse.view.RunningMessagePanel var75 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var76 = var75.getPreferredSize();
    java.awt.Dimension var77 = var75.getMaximumSize();
    var60.resize(var77);
    var32.setPreferredSize(var77);
    java.awt.Dimension var80 = var13.getSize(var77);
    var2.setPreferredSize(var77);
    java.util.Set var83 = var2.getFocusTraversalKeys(0);
    var2.grabFocus();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.5,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", 100.0d, 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test157() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test157");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var3 = var2.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var6 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var6.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var13 = var6.location();
    java.awt.Component var14 = var2.findComponentAt(var13);
    var2.setEnabled(true);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var19.transferFocus();
    var19.show();
    float var22 = var19.getAlignmentX();
    boolean var25 = var19.contains(0, 24);
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var29 = var28.getPreferredSize();
    java.awt.Dimension var30 = var28.getMaximumSize();
    java.awt.event.FocusListener[] var31 = var28.getFocusListeners();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var35 = var34.getPreferredSize();
    boolean var38 = var34.contains(10, 1);
    java.awt.im.InputMethodRequests var39 = var34.getInputMethodRequests();
    java.awt.Font var40 = var34.getFont();
    var28.setFont(var40);
    java.awt.FontMetrics var42 = var19.getFontMetrics(var40);
    java.awt.FontMetrics var43 = var2.getFontMetrics(var40);
    int var44 = var2.getWidth();
    var2.setOpaque(false);
    bierse.view.RunningMessagePanel var49 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var50 = var49.getPreferredSize();
    java.awt.Point var51 = var49.getMousePosition();
    var49.revalidate();
    var49.transferFocus();
    java.awt.Toolkit var54 = var49.getToolkit();
    boolean var55 = var49.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var58 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var59 = var58.isMaximumSizeSet();
    var58.layout();
    var58.revalidate();
    boolean var62 = var58.isFocusOwner();
    float var63 = var58.getAlignmentX();
    java.awt.Color var64 = var58.getForeground();
    var58.firePropertyChange("", (-1L), 0L);
    boolean var69 = var58.isRequestFocusEnabled();
    var2.add((java.awt.Component)var49, (java.lang.Object)var58);
    java.awt.Component.BaselineResizeBehavior var71 = var2.getBaselineResizeBehavior();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test158() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test158");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isLightweight();
    java.awt.event.KeyListener[] var4 = var2.getKeyListeners();
    var2.enable(true);
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var10 = var9.isMaximumSizeSet();
    boolean var11 = var9.isOpaque();
    java.beans.PropertyChangeListener[] var12 = var9.getPropertyChangeListeners();
    var9.setOpaque(true);
    java.awt.Insets var15 = var9.insets();
    boolean var16 = var9.isOptimizedDrawingEnabled();
    var9.setEnabled(true);
    java.awt.ComponentOrientation var19 = var9.getComponentOrientation();
    var2.applyComponentOrientation(var19);
    var2.doLayout();
    java.lang.String var22 = var2.getUIClassID();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "PanelUI"+ "'", var22.equals("PanelUI"));

  }

  public void test159() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test159");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    java.beans.VetoableChangeListener[] var28 = var11.getVetoableChangeListeners();
    boolean var29 = var11.getFocusTraversalKeysEnabled();
    var11.show(false);
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var35 = var34.isMaximumSizeSet();
    var34.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var34.invalidate();
    bierse.view.RunningMessagePanel var44 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var45 = var44.getPreferredSize();
    java.awt.Point var46 = var44.getMousePosition();
    var44.revalidate();
    var44.transferFocus();
    java.awt.Toolkit var49 = var44.getToolkit();
    boolean var50 = var44.isFocusTraversalPolicySet();
    java.awt.Component var51 = var34.add("PanelUI", (java.awt.Component)var44);
    bierse.view.RunningMessagePanel var54 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var54.transferFocus();
    var54.show();
    var54.disable();
    java.awt.Dimension var58 = var54.size();
    var34.setPreferredSize(var58);
    var11.setPreferredSize(var58);
    java.awt.Dimension var61 = var11.getSize();
    boolean var64 = var11.contains(11, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test160() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test160");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.Insets var7 = var2.getInsets();
    javax.swing.JToolTip var8 = var2.createToolTip();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var17 = var11.getTransferHandler();
    boolean var18 = var11.hasFocus();
    javax.swing.event.AncestorListener[] var19 = var11.getAncestorListeners();
    var11.enable(false);
    int var22 = var8.getComponentZOrder((java.awt.Component)var11);
    java.awt.Container var23 = var11.getFocusCycleRootAncestor();
    javax.swing.plaf.PanelUI var24 = var11.getUI();
    java.awt.image.VolatileImage var27 = var11.createVolatileImage(0, 24);
    java.awt.LayoutManager var28 = var11.getLayout();
    javax.swing.JRootPane var29 = var11.getRootPane();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test161() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test161");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    var2.setFocusTraversalPolicyProvider(false);
    float var9 = var2.getAlignmentX();
    var2.repaint((-1L));
    int var12 = var2.getHeight();
    boolean var13 = var2.getInheritsPopupMenu();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    boolean var18 = var16.isOpaque();
    java.awt.event.HierarchyListener[] var19 = var16.getHierarchyListeners();
    int var20 = var16.countComponents();
    java.awt.event.HierarchyBoundsListener[] var21 = var16.getHierarchyBoundsListeners();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    boolean var26 = var24.isOpaque();
    java.awt.event.HierarchyListener[] var27 = var24.getHierarchyListeners();
    int var28 = var24.getWidth();
    java.awt.event.ContainerListener[] var29 = var24.getContainerListeners();
    java.awt.Dimension var30 = var24.getMaximumSize();
    var16.setMinimumSize(var30);
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var35 = var34.isMaximumSizeSet();
    var34.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var40 = var34.getWidth();
    java.awt.Image var43 = var34.createImage(24, 24);
    var34.setAlignmentX((-1.0f));
    boolean var46 = var34.isFocusOwner();
    bierse.view.RunningMessagePanel var49 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var50 = var49.isMaximumSizeSet();
    var49.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var55 = var49.getTransferHandler();
    boolean var56 = var49.hasFocus();
    javax.swing.event.AncestorListener[] var57 = var49.getAncestorListeners();
    java.awt.Dimension var58 = var49.getMinimumSize();
    bierse.view.RunningMessagePanel var62 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var63 = var62.getPreferredSize();
    java.awt.Dimension var64 = var62.getMaximumSize();
    var62.disable();
    var49.putClientProperty((java.lang.Object)100, (java.lang.Object)var62);
    java.awt.image.VolatileImage var69 = var62.createVolatileImage(100, 24);
    bierse.view.RunningMessagePanel var72 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var73 = var72.getPreferredSize();
    var62.setMinimumSize(var73);
    java.awt.Font var75 = var62.getFont();
    java.awt.FontMetrics var76 = var34.getFontMetrics(var75);
    bierse.view.RunningMessagePanel var79 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var80 = var79.isFocusTraversable();
    var79.setOpaque(true);
    java.awt.Dimension var83 = var79.getSize();
    java.awt.Dimension var84 = var34.getSize(var83);
    java.awt.Dimension var85 = var16.getSize(var83);
    var2.setPreferredSize(var85);
    float var87 = var2.getAlignmentX();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0.5f);

  }

  public void test162() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test162");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.Insets var7 = var2.getInsets();
    javax.swing.JToolTip var8 = var2.createToolTip();
    int var9 = var8.getDebugGraphicsOptions();
    float var10 = var8.getAlignmentX();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    var14.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var20 = var14.getTransferHandler();
    boolean var21 = var14.hasFocus();
    var14.setVerifyInputWhenFocusTarget(false);
    var14.move(11, 0);
    javax.swing.InputMap var27 = var14.getInputMap();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var8.setInputMap((-1), var27);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test163() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test163");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    var2.revalidate();
    boolean var9 = var2.isBackgroundSet();
    java.awt.Component[] var10 = var2.getComponents();
    java.awt.GraphicsConfiguration var11 = var2.getGraphicsConfiguration();
    java.awt.im.InputContext var12 = var2.getInputContext();
    int var13 = var2.getWidth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);

  }

  public void test164() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test164");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    javax.swing.InputMap var5 = var2.getInputMap();
    java.beans.PropertyChangeListener[] var7 = var2.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var8 = var2.getComponentOrientation();
    java.awt.event.ContainerListener[] var9 = var2.getContainerListeners();
    java.awt.Toolkit var10 = var2.getToolkit();
    javax.swing.InputVerifier var11 = var2.getInputVerifier();
    var2.move(10, 12);
    boolean var15 = var2.isPaintingTile();
    var2.hide();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test165() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test165");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var3 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var4 = var3.getPreferredSize();
    javax.swing.JPopupMenu var5 = var3.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var9 = var8.getPreferredSize();
    javax.swing.JPopupMenu var10 = var8.getComponentPopupMenu();
    java.awt.Rectangle var11 = var8.bounds();
    var3.computeVisibleRect(var11);
    int var13 = var0.getIndexOf((java.lang.Object)var3);
    var0.removeElementAt(0);
    java.lang.Object var16 = var0.getSelectedItem();
    int var17 = var0.getSize();
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var21 = var20.isMaximumSizeSet();
    boolean var22 = var20.isOpaque();
    java.awt.event.HierarchyListener[] var23 = var20.getHierarchyListeners();
    java.awt.peer.ComponentPeer var24 = var20.getPeer();
    var20.transferFocus();
    java.lang.String var26 = var20.getToolTipText();
    bierse.view.RunningMessagePanel var29 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var30 = var29.isMaximumSizeSet();
    boolean var31 = var29.isOpaque();
    java.beans.PropertyChangeListener[] var32 = var29.getPropertyChangeListeners();
    var29.setOpaque(true);
    java.awt.Insets var35 = var29.insets();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var39 = var38.isMaximumSizeSet();
    var38.layout();
    bierse.view.RunningMessagePanel var43 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var44 = var43.isMaximumSizeSet();
    var43.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var49 = var43.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var53 = var52.getPreferredSize();
    boolean var54 = var52.isPreferredSizeSet();
    var52.enable();
    var52.transferFocusBackward();
    int var57 = var43.getComponentZOrder((java.awt.Component)var52);
    var43.setEnabled(false);
    java.awt.Graphics var60 = var43.getGraphics();
    var38.remove((java.awt.Component)var43);
    bierse.view.RunningMessagePanel var64 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var65 = var64.getPreferredSize();
    boolean var68 = var64.contains(10, 1);
    java.awt.Insets var69 = var64.getInsets();
    javax.swing.JToolTip var70 = var64.createToolTip();
    var64.invalidate();
    var38.remove((java.awt.Component)var64);
    var20.putClientProperty((java.lang.Object)var29, (java.lang.Object)var64);
    boolean var74 = var20.isValid();
    int var75 = var20.getWidth();
    boolean var76 = var20.isFocusCycleRoot();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.insertElementAt((java.lang.Object)var76, 996);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);

  }

  public void test166() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test166");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    var11.transferFocus();
    var11.setToolTipText("");
    var11.show();
    int var32 = var11.getStringWidth();
    java.awt.event.MouseMotionListener[] var33 = var11.getMouseMotionListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 996);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test167() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test167");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.Insets var7 = var2.getInsets();
    javax.swing.JToolTip var8 = var2.createToolTip();
    var2.invalidate();
    java.awt.Dimension var10 = var2.getPreferredSize();
    var2.firePropertyChange("PanelUI", '#', '4');
    boolean var15 = var2.isPreferredSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test168() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test168");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.setDoubleBuffered(false);
    java.awt.Dimension var7 = var2.minimumSize();
    bierse.view.KeyMapComboBoxModel var8 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    boolean var13 = var11.isOpaque();
    java.beans.PropertyChangeListener[] var14 = var11.getPropertyChangeListeners();
    var11.setOpaque(true);
    var11.setRequestFocusEnabled(false);
    var8.insertElementAt((java.lang.Object)var11, 1);
    java.lang.Object var21 = var2.getClientProperty((java.lang.Object)var11);
    int var22 = var2.getStringWidth();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    var25.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var31 = var25.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var35 = var34.getPreferredSize();
    boolean var36 = var34.isPreferredSizeSet();
    var34.enable();
    var34.transferFocusBackward();
    int var39 = var25.getComponentZOrder((java.awt.Component)var34);
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var42.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var49 = var42.location();
    boolean var50 = var34.contains(var49);
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var54 = var53.getPreferredSize();
    bierse.view.RunningMessagePanel var57 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var58 = var57.isMaximumSizeSet();
    var57.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var57.invalidate();
    java.awt.Dimension var64 = var57.getPreferredSize();
    var53.setPreferredSize(var64);
    var34.setPreferredSize(var64);
    var34.setVisible(false);
    java.awt.Dimension var69 = var34.getSize();
    java.awt.Font var70 = var34.getFont();
    java.awt.FontMetrics var71 = var2.getFontMetrics(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 996);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test169() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test169");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    javax.swing.InputMap var5 = var2.getInputMap();
    java.beans.PropertyChangeListener[] var7 = var2.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var8 = var2.getComponentOrientation();
    java.awt.peer.ComponentPeer var9 = var2.getPeer();
    var2.transferFocusDownCycle();
    java.awt.Dimension var11 = var2.getPreferredSize();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var15 = var14.getPreferredSize();
    javax.swing.JPopupMenu var16 = var14.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var20 = var19.getPreferredSize();
    javax.swing.JPopupMenu var21 = var19.getComponentPopupMenu();
    java.awt.Rectangle var22 = var19.bounds();
    var14.computeVisibleRect(var22);
    boolean var24 = var14.isManagingFocus();
    int var25 = var14.getHeight();
    var14.firePropertyChange("", ' ', ' ');
    boolean var30 = var14.isPaintingTile();
    javax.swing.event.AncestorListener[] var31 = var14.getAncestorListeners();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var35 = var34.isMaximumSizeSet();
    boolean var36 = var34.isOpaque();
    java.awt.event.HierarchyListener[] var37 = var34.getHierarchyListeners();
    int var38 = var34.getWidth();
    int var39 = var34.countComponents();
    java.awt.Point var41 = var34.getMousePosition(true);
    var34.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var44 = var34.toString();
    java.awt.Font var45 = var34.getFont();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var49 = var48.getPreferredSize();
    boolean var52 = var48.contains(10, 1);
    java.awt.im.InputMethodRequests var53 = var48.getInputMethodRequests();
    boolean var54 = var48.getInheritsPopupMenu();
    java.lang.String var55 = var48.toString();
    java.awt.Rectangle var56 = var48.bounds();
    var34.setBounds(var56);
    bierse.view.RunningMessagePanel var60 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var61 = var60.isMaximumSizeSet();
    var60.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var66 = var60.getTransferHandler();
    boolean var67 = var60.hasFocus();
    javax.swing.event.AncestorListener[] var68 = var60.getAncestorListeners();
    java.awt.Dimension var69 = var60.getMinimumSize();
    bierse.view.RunningMessagePanel var73 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var74 = var73.getPreferredSize();
    java.awt.Dimension var75 = var73.getMaximumSize();
    var73.disable();
    var60.putClientProperty((java.lang.Object)100, (java.lang.Object)var73);
    javax.swing.InputVerifier var78 = var73.getInputVerifier();
    boolean var79 = var73.getInheritsPopupMenu();
    var73.setLocation(0, 100);
    javax.swing.plaf.PanelUI var83 = var73.getUI();
    var34.setUI(var83);
    java.awt.Rectangle var85 = var34.getVisibleRect();
    var14.repaint(var85);
    java.util.Locale var87 = var14.getLocale();
    var2.setLocale(var87);
    javax.swing.JComponent.setDefaultLocale(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var44,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var44.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var44,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var55,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var55.equals("bierse.view.RunningMessagePanel[,0,0,0var55,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test170() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test170");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    var2.setAlignmentY(10.0f);
    java.awt.Container var16 = var2.getFocusCycleRootAncestor();
    java.beans.VetoableChangeListener[] var17 = var2.getVetoableChangeListeners();
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var21 = var20.getPreferredSize();
    boolean var24 = var20.contains(10, 1);
    java.awt.im.InputMethodRequests var25 = var20.getInputMethodRequests();
    boolean var26 = var20.getInheritsPopupMenu();
    java.lang.String var27 = var20.toString();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var31 = var30.isMaximumSizeSet();
    boolean var32 = var30.isOpaque();
    java.awt.event.HierarchyListener[] var33 = var30.getHierarchyListeners();
    int var34 = var30.getWidth();
    int var35 = var30.countComponents();
    var30.enable(false);
    bierse.view.RunningMessagePanel var40 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var41 = var40.getPreferredSize();
    boolean var44 = var40.contains(10, 1);
    java.awt.Insets var45 = var40.getInsets();
    java.awt.Insets var46 = var30.getInsets(var45);
    java.awt.Insets var47 = var20.getInsets(var45);
    java.awt.Insets var48 = var2.getInsets(var45);
    var2.setOpaque(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var27,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var27.equals("bierse.view.RunningMessagePanel[,0,0,0var27,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test171() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test171");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var3 = var2.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var6 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var6.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var13 = var6.location();
    java.awt.Component var14 = var2.findComponentAt(var13);
    var2.setEnabled(true);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var19.transferFocus();
    var19.show();
    float var22 = var19.getAlignmentX();
    boolean var25 = var19.contains(0, 24);
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var29 = var28.getPreferredSize();
    java.awt.Dimension var30 = var28.getMaximumSize();
    java.awt.event.FocusListener[] var31 = var28.getFocusListeners();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var35 = var34.getPreferredSize();
    boolean var38 = var34.contains(10, 1);
    java.awt.im.InputMethodRequests var39 = var34.getInputMethodRequests();
    java.awt.Font var40 = var34.getFont();
    var28.setFont(var40);
    java.awt.FontMetrics var42 = var19.getFontMetrics(var40);
    java.awt.FontMetrics var43 = var2.getFontMetrics(var40);
    java.awt.FocusTraversalPolicy var44 = var2.getFocusTraversalPolicy();
    boolean var45 = var2.getIgnoreRepaint();
    java.awt.Component var48 = var2.getComponentAt(0, (-1));
    java.awt.FocusTraversalPolicy var49 = var2.getFocusTraversalPolicy();
    boolean var50 = var2.isLightweight();
    boolean var51 = var2.isMaximumSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test172() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test172");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    float var5 = var2.getAlignmentX();
    var2.repaint(0L, 10, 0, 10, (-1));
    boolean var12 = var2.isEnabled();
    java.lang.Object var13 = var2.getTreeLock();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (byte)100, (byte)100);
    javax.swing.JPopupMenu var18 = var2.getComponentPopupMenu();
    var2.setMessage("PanelUI");
    java.awt.Component var23 = var2.getComponentAt(12, 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test173() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test173");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    var24.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var24.invalidate();
    java.awt.Dimension var31 = var24.getPreferredSize();
    int var32 = var24.getWidth();
    java.awt.Component var33 = var15.add("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var24);
    var24.setDebugGraphicsOptions(996);
    int var36 = var24.getX();
    int var37 = var24.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);

  }

  public void test174() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test174");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    var2.revalidate();
    var2.enable(true);
    java.awt.Point var11 = var2.location();
    java.awt.Rectangle var12 = var2.bounds();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var16 = var15.isMaximumSizeSet();
    var15.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var21 = var15.getTransferHandler();
    boolean var22 = var15.hasFocus();
    javax.swing.event.AncestorListener[] var23 = var15.getAncestorListeners();
    java.awt.Dimension var24 = var15.getMinimumSize();
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var29 = var28.getPreferredSize();
    java.awt.Dimension var30 = var28.getMaximumSize();
    var28.disable();
    var15.putClientProperty((java.lang.Object)100, (java.lang.Object)var28);
    java.awt.image.VolatileImage var35 = var28.createVolatileImage(100, 24);
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var39 = var38.getPreferredSize();
    java.awt.Point var40 = var38.getMousePosition();
    var38.revalidate();
    var38.transferFocus();
    java.awt.Toolkit var43 = var38.getToolkit();
    boolean var44 = var38.isFocusTraversalPolicySet();
    var28.setNextFocusableComponent((java.awt.Component)var38);
    java.awt.ComponentOrientation var46 = var38.getComponentOrientation();
    var2.setComponentOrientation(var46);
    boolean var48 = var2.requestFocusInWindow();
    bierse.view.RunningMessagePanel var51 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var52 = var51.getPreferredSize();
    boolean var55 = var51.contains(10, 1);
    java.awt.im.InputMethodRequests var56 = var51.getInputMethodRequests();
    var51.revalidate();
    var51.firePropertyChange("hi!", (short)100, (short)0);
    var51.resize(10, 10);
    java.awt.image.ColorModel var65 = var51.getColorModel();
    boolean var66 = var51.isCursorSet();
    bierse.view.RunningMessagePanel var69 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var70 = var69.getPreferredSize();
    java.awt.Dimension var71 = var69.getMaximumSize();
    var69.repaint();
    var69.disable();
    var69.enable();
    java.lang.String var75 = var69.getUIClassID();
    java.awt.event.InputMethodListener[] var76 = var69.getInputMethodListeners();
    var69.enable();
    java.awt.Dimension var78 = var69.getMinimumSize();
    var51.setMaximumSize(var78);
    var2.setPreferredSize(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "PanelUI"+ "'", var75.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test175() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test175");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    java.awt.Dimension var9 = var2.getPreferredSize();
    var2.show(false);
    boolean var12 = var2.isMaximumSizeSet();
    var2.setFocusTraversalKeysEnabled(true);
    var2.paintImmediately(13, 100, (-1), 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test176() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test176");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    var2.revalidate();
    boolean var6 = var2.isFocusOwner();
    float var7 = var2.getAlignmentX();
    java.beans.VetoableChangeListener[] var8 = var2.getVetoableChangeListeners();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var17 = var11.getTransferHandler();
    boolean var18 = var11.hasFocus();
    javax.swing.event.AncestorListener[] var19 = var11.getAncestorListeners();
    java.awt.Dimension var20 = var11.getMinimumSize();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var25 = var24.getPreferredSize();
    java.awt.Dimension var26 = var24.getMaximumSize();
    var24.disable();
    var11.putClientProperty((java.lang.Object)100, (java.lang.Object)var24);
    javax.swing.InputVerifier var29 = var24.getInputVerifier();
    boolean var30 = var24.getInheritsPopupMenu();
    boolean var31 = var24.isFocusCycleRoot();
    int var32 = var24.getY();
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var35.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var42 = var35.location();
    bierse.view.RunningMessagePanel var45 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var46 = var45.isMaximumSizeSet();
    var45.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var51 = var45.getTransferHandler();
    boolean var52 = var45.hasFocus();
    javax.swing.event.AncestorListener[] var53 = var45.getAncestorListeners();
    java.awt.Dimension var54 = var45.getMinimumSize();
    var35.resize(var54);
    var35.repaint(100L, 1, (-1), 100, 24);
    java.awt.event.HierarchyBoundsListener[] var62 = var35.getHierarchyBoundsListeners();
    java.awt.Color var63 = var35.getBackground();
    var24.setBackground(var63);
    boolean var65 = var2.isAncestorOf((java.awt.Component)var24);
    int var66 = var2.getDebugGraphicsOptions();
    var2.setMessage("bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);

  }

  public void test177() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test177");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    java.awt.Container var7 = var2.getTopLevelAncestor();
    int var8 = var2.getWidth();
    java.awt.event.InputMethodListener[] var9 = var2.getInputMethodListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test178() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test178");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    boolean var29 = var2.requestFocus(false);
    javax.swing.InputMap var30 = var2.getInputMap();
    var2.reshape(996, 100, 12, 996);
    java.awt.Color var36 = var2.getBackground();
    java.awt.Component var39 = var2.getComponentAt(0, 12);
    var39.setName("bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    var39.firePropertyChange("PanelUI", 100L, (-1L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test179() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test179");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    boolean var10 = var2.inside((-1), 100);
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var14 = var13.getPreferredSize();
    boolean var17 = var13.contains(10, 1);
    var13.setAlignmentX((-1.0f));
    java.awt.Point var20 = var13.getLocation();
    java.awt.Point var21 = var2.getLocation(var20);
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    boolean var26 = var24.isOpaque();
    java.awt.event.HierarchyListener[] var27 = var24.getHierarchyListeners();
    int var28 = var24.getWidth();
    int var29 = var24.countComponents();
    java.awt.Point var31 = var24.getMousePosition(true);
    var24.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var34 = var24.toString();
    java.awt.Font var35 = var24.getFont();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var39 = var38.getPreferredSize();
    boolean var42 = var38.contains(10, 1);
    java.awt.im.InputMethodRequests var43 = var38.getInputMethodRequests();
    boolean var44 = var38.getInheritsPopupMenu();
    java.lang.String var45 = var38.toString();
    java.awt.Rectangle var46 = var38.bounds();
    var24.setBounds(var46);
    java.awt.Rectangle var48 = var2.getBounds(var46);
    bierse.view.RunningMessagePanel var51 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var52 = var51.isMaximumSizeSet();
    boolean var53 = var51.isOpaque();
    java.awt.event.HierarchyListener[] var54 = var51.getHierarchyListeners();
    int var55 = var51.getWidth();
    java.awt.event.ContainerListener[] var56 = var51.getContainerListeners();
    java.awt.Dimension var57 = var51.getMaximumSize();
    boolean var58 = var51.isRequestFocusEnabled();
    var51.transferFocus();
    bierse.view.RunningMessagePanel var62 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var63 = var62.getPreferredSize();
    java.awt.Point var64 = var62.getMousePosition();
    var62.setDoubleBuffered(false);
    java.awt.GraphicsConfiguration var67 = var62.getGraphicsConfiguration();
    java.awt.Component var70 = var62.locate((-1), (-1));
    java.awt.Font var71 = var62.getFont();
    java.awt.FontMetrics var72 = var51.getFontMetrics(var71);
    var2.setFont(var71);
    bierse.view.RunningMessagePanel var77 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var78 = var77.isMaximumSizeSet();
    var77.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var77.invalidate();
    bierse.view.RunningMessagePanel var86 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var87 = var86.isMaximumSizeSet();
    boolean var88 = var86.isOpaque();
    java.awt.event.HierarchyListener[] var89 = var86.getHierarchyListeners();
    int var90 = var86.countComponents();
    java.awt.event.HierarchyBoundsListener[] var91 = var86.getHierarchyBoundsListeners();
    boolean var93 = var86.areFocusTraversalKeysSet(1);
    boolean var94 = var77.isAncestorOf((java.awt.Component)var86);
    var77.enable();
    var77.setEnabled(false);
    java.awt.Component var98 = var2.add("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", (java.awt.Component)var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var34,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var34.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var34,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var45,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var45.equals("bierse.view.RunningMessagePanel[,0,0,0var45,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test180() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test180");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    java.awt.peer.ComponentPeer var6 = var2.getPeer();
    var2.transferFocus();
    java.lang.String var8 = var2.getToolTipText();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    boolean var13 = var11.isOpaque();
    java.beans.PropertyChangeListener[] var14 = var11.getPropertyChangeListeners();
    var11.setOpaque(true);
    java.awt.Insets var17 = var11.insets();
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var21 = var20.isMaximumSizeSet();
    var20.layout();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    var25.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var31 = var25.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var35 = var34.getPreferredSize();
    boolean var36 = var34.isPreferredSizeSet();
    var34.enable();
    var34.transferFocusBackward();
    int var39 = var25.getComponentZOrder((java.awt.Component)var34);
    var25.setEnabled(false);
    java.awt.Graphics var42 = var25.getGraphics();
    var20.remove((java.awt.Component)var25);
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var47 = var46.getPreferredSize();
    boolean var50 = var46.contains(10, 1);
    java.awt.Insets var51 = var46.getInsets();
    javax.swing.JToolTip var52 = var46.createToolTip();
    var46.invalidate();
    var20.remove((java.awt.Component)var46);
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var46);
    boolean var56 = var2.isValid();
    int var57 = var2.getWidth();
    bierse.view.RunningMessagePanel var60 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var60.repaint(1L, (-1), (-1), 0, 100);
    boolean var67 = var60.isFocusTraversable();
    bierse.view.RunningMessagePanel var70 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var71 = var70.getPreferredSize();
    boolean var74 = var70.contains(10, 1);
    java.awt.im.InputMethodRequests var75 = var70.getInputMethodRequests();
    var70.revalidate();
    var70.firePropertyChange("hi!", (short)100, (short)0);
    var60.setNextFocusableComponent((java.awt.Component)var70);
    var2.setNextFocusableComponent((java.awt.Component)var60);
    java.awt.event.MouseWheelListener[] var83 = var60.getMouseWheelListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test181() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test181");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    boolean var21 = var15.isValidateRoot();
    java.awt.Insets var22 = var15.getInsets();
    var15.disable();
    boolean var24 = var15.isShowing();
    boolean var25 = var15.isFocusTraversable();
    java.awt.Component[] var26 = var15.getComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test182() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test182");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    boolean var13 = var11.isOpaque();
    java.awt.event.HierarchyListener[] var14 = var11.getHierarchyListeners();
    int var15 = var11.countComponents();
    java.awt.event.HierarchyBoundsListener[] var16 = var11.getHierarchyBoundsListeners();
    boolean var18 = var11.areFocusTraversalKeysSet(1);
    boolean var19 = var2.isAncestorOf((java.awt.Component)var11);
    var2.requestFocus();
    boolean var23 = var2.contains(100, 15);
    java.awt.event.HierarchyListener[] var24 = var2.getHierarchyListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test183() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test183");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    var15.setEnabled(false);
    java.lang.String var22 = var15.getUIClassID();
    java.awt.im.InputMethodRequests var23 = var15.getInputMethodRequests();
    boolean var24 = var15.isRequestFocusEnabled();
    javax.swing.InputVerifier var25 = var15.getInputVerifier();
    var15.move(11, 1);
    boolean var29 = var15.isMaximumSizeSet();
    java.awt.Image var32 = var15.createImage(13, (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "PanelUI"+ "'", var22.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);

  }

  public void test184() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test184");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    var2.firePropertyChange("hi!", 100.0f, (-1.0f));
    java.awt.Cursor var13 = var2.getCursor();
    int var14 = var2.getComponentCount();
    java.awt.GraphicsConfiguration var15 = var2.getGraphicsConfiguration();
    boolean var16 = var2.isPaintingForPrint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test185() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test185");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    var2.enable();
    var2.transferFocusBackward();
    java.awt.event.MouseListener[] var7 = var2.getMouseListeners();
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var11 = var10.isMaximumSizeSet();
    var10.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var16 = var10.getTransferHandler();
    boolean var17 = var10.hasFocus();
    javax.swing.event.AncestorListener[] var18 = var10.getAncestorListeners();
    java.awt.Dimension var19 = var10.getMinimumSize();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var24 = var23.getPreferredSize();
    java.awt.Dimension var25 = var23.getMaximumSize();
    var23.disable();
    var10.putClientProperty((java.lang.Object)100, (java.lang.Object)var23);
    javax.swing.InputVerifier var28 = var23.getInputVerifier();
    boolean var29 = var23.getInheritsPopupMenu();
    var23.setLocation(0, 100);
    boolean var33 = var23.isFocusTraversalPolicyProvider();
    var23.list();
    javax.swing.event.AncestorListener[] var35 = var23.getAncestorListeners();
    java.awt.Cursor var36 = var23.getCursor();
    int var37 = var23.getY();
    bierse.view.RunningMessagePanel var40 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var40.transferFocus();
    var40.show();
    float var43 = var40.getAlignmentX();
    var40.repaint(0L, 10, 0, 10, (-1));
    boolean var50 = var40.isEnabled();
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var54 = var53.getPreferredSize();
    javax.swing.JPopupMenu var55 = var53.getComponentPopupMenu();
    java.awt.Rectangle var56 = var53.bounds();
    java.awt.Rectangle var57 = var40.getBounds(var56);
    var23.setBounds(var57);
    java.awt.Rectangle var59 = var2.getBounds(var57);
    javax.swing.JToolTip var60 = var2.createToolTip();
    java.awt.Dimension var61 = var2.getMinimumSize();
    int var64 = var2.getBaseline(996, 11);
    var2.invalidate();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var67 = var2.getFocusTraversalKeys(12);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == (-1));

  }

  public void test186() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test186");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    javax.swing.JRootPane var13 = var2.getRootPane();
    var2.setRequestFocusEnabled(false);
    java.awt.Dimension var16 = var2.preferredSize();
    var2.setDebugGraphicsOptions((-1));
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isMaximumSizeSet();
    var21.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var27 = var21.getTransferHandler();
    boolean var28 = var21.hasFocus();
    var21.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var31 = var21.getPreferredSize();
    java.awt.ComponentOrientation var32 = var21.getComponentOrientation();
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var36 = var35.isMaximumSizeSet();
    var35.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var41 = var35.getTransferHandler();
    boolean var42 = var35.hasFocus();
    javax.swing.event.AncestorListener[] var43 = var35.getAncestorListeners();
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var47 = var46.isMaximumSizeSet();
    var46.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var52 = var46.getTransferHandler();
    boolean var53 = var46.hasFocus();
    var46.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var56 = var46.getPreferredSize();
    java.awt.ComponentOrientation var57 = var46.getComponentOrientation();
    var21.add((java.awt.Component)var35, (java.lang.Object)var46);
    java.awt.Component var60 = var2.add((java.awt.Component)var21, 0);
    var60.transferFocus();
    boolean var62 = var60.isMaximumSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test187() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test187");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    java.awt.Dimension var9 = var2.getPreferredSize();
    int var10 = var2.getWidth();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var14 = var13.isMaximumSizeSet();
    var13.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var19 = var13.getTransferHandler();
    boolean var20 = var13.hasFocus();
    var13.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var23 = var13.getPreferredSize();
    java.awt.ComponentOrientation var24 = var13.getComponentOrientation();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    javax.swing.event.AncestorListener[] var35 = var27.getAncestorListeners();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var39 = var38.isMaximumSizeSet();
    var38.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var44 = var38.getTransferHandler();
    boolean var45 = var38.hasFocus();
    var38.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var48 = var38.getPreferredSize();
    java.awt.ComponentOrientation var49 = var38.getComponentOrientation();
    var13.add((java.awt.Component)var27, (java.lang.Object)var38);
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var54 = var53.getPreferredSize();
    java.awt.Dimension var55 = var53.getMaximumSize();
    var2.add((java.awt.Component)var27, (java.lang.Object)var53, (-1));
    java.awt.Dimension var58 = var2.getSize();
    java.awt.im.InputContext var59 = var2.getInputContext();
    var2.disable();
    boolean var61 = var2.getAutoscrolls();
    var2.setFocusCycleRoot(false);
    java.awt.Component.BaselineResizeBehavior var64 = var2.getBaselineResizeBehavior();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test188() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test188");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    int var12 = var2.getDebugGraphicsOptions();
    java.awt.Component var15 = var2.locate(24, 100);
    bierse.view.RunningMessagePanel var18 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var19 = var18.isMaximumSizeSet();
    var18.layout();
    var18.revalidate();
    boolean var22 = var18.isFocusOwner();
    float var23 = var18.getAlignmentX();
    java.awt.Color var24 = var18.getForeground();
    var2.setForeground(var24);
    java.awt.Point var27 = var2.getMousePosition(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test189() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test189");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    var2.setAlignmentY(10.0f);
    var2.setInheritsPopupMenu(false);
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var20.transferFocus();
    var20.show();
    float var23 = var20.getAlignmentX();
    var20.repaint(0L, 10, 0, 10, (-1));
    boolean var30 = var20.isEnabled();
    java.lang.Object var31 = var20.getTreeLock();
    int var32 = var2.getComponentZOrder((java.awt.Component)var20);
    java.awt.Dimension var33 = var2.getPreferredSize();
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var37 = var36.isMaximumSizeSet();
    var36.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var36.invalidate();
    java.awt.Dimension var43 = var36.getPreferredSize();
    var36.show(false);
    boolean var46 = var36.isMaximumSizeSet();
    bierse.view.RunningMessagePanel var49 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var50 = var49.isMaximumSizeSet();
    var49.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var55 = var49.getTransferHandler();
    boolean var56 = var49.hasFocus();
    javax.swing.event.AncestorListener[] var57 = var49.getAncestorListeners();
    var49.enable(false);
    java.awt.Dimension var60 = var49.minimumSize();
    java.awt.Dimension var61 = var49.minimumSize();
    java.awt.Dimension var62 = var36.getSize(var61);
    bierse.view.RunningMessagePanel var65 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var66 = var65.isMaximumSizeSet();
    boolean var67 = var65.isOpaque();
    java.awt.event.HierarchyListener[] var68 = var65.getHierarchyListeners();
    int var69 = var65.getWidth();
    int var70 = var65.countComponents();
    java.awt.Point var72 = var65.getMousePosition(true);
    var65.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var75 = var65.toString();
    java.awt.Font var76 = var65.getFont();
    javax.swing.plaf.PanelUI var77 = var65.getUI();
    java.awt.Dimension var78 = var65.getPreferredSize();
    var36.setPreferredSize(var78);
    var2.setPreferredSize(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var75,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var75.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var75,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test190() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test190");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    boolean var40 = var2.getFocusTraversalKeysEnabled();
    var2.setAlignmentX(100.0f);
    var2.setMessage("");
    java.awt.Container var45 = var2.getFocusCycleRootAncestor();
    int var46 = var2.countComponents();
    bierse.view.RunningMessagePanel var49 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var50 = var49.getPreferredSize();
    boolean var53 = var49.contains(10, 1);
    java.awt.im.InputMethodRequests var54 = var49.getInputMethodRequests();
    boolean var57 = var49.inside((-1), 100);
    java.awt.Component var58 = var2.add((java.awt.Component)var49);
    boolean var59 = var49.requestDefaultFocus();
    java.awt.Dimension var60 = var49.getMinimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test191() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test191");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.setDoubleBuffered(false);
    java.awt.GraphicsConfiguration var7 = var2.getGraphicsConfiguration();
    java.awt.Component var10 = var2.locate((-1), (-1));
    java.awt.Font var11 = var2.getFont();
    java.awt.Dimension var12 = var2.getMaximumSize();
    var2.setFocusTraversalKeysEnabled(true);
    var2.setOpaque(false);
    boolean var17 = var2.getInheritsPopupMenu();
    boolean var18 = var2.isMaximumSizeSet();
    boolean var19 = var2.isValidateRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test192() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test192");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    javax.swing.InputMap var5 = var2.getInputMap();
    java.beans.PropertyChangeListener[] var7 = var2.getPropertyChangeListeners("");
    java.lang.String var8 = var2.toString();
    boolean var11 = var2.contains(996, 13);
    boolean var12 = var2.isMaximumSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var8,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]"+ "'", var8.equals("bierse.view.RunningMessagePanel[,0,0,0var8,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test193() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test193");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    javax.swing.InputMap var5 = var2.getInputMap();
    java.beans.PropertyChangeListener[] var7 = var2.getPropertyChangeListeners("");
    boolean var10 = var2.contains(11, 13);
    javax.swing.event.AncestorListener[] var11 = var2.getAncestorListeners();
    boolean var12 = var2.getFocusTraversalKeysEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test194() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test194");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    var2.invalidate();
    java.awt.event.FocusListener[] var6 = var2.getFocusListeners();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var10 = var9.isMaximumSizeSet();
    var9.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var15 = var9.getTransferHandler();
    boolean var16 = var9.hasFocus();
    var9.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var19 = var9.getPreferredSize();
    java.awt.ComponentOrientation var20 = var9.getComponentOrientation();
    var9.transferFocus();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    var24.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var30 = var24.getTransferHandler();
    boolean var31 = var24.hasFocus();
    javax.swing.event.AncestorListener[] var32 = var24.getAncestorListeners();
    java.awt.Dimension var33 = var24.getMinimumSize();
    boolean var34 = var24.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    var37.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var47 = var37.getPreferredSize();
    java.awt.Dimension var48 = var24.getSize(var47);
    var9.setSize(var47);
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var53 = var52.getPreferredSize();
    boolean var56 = var52.contains(10, 1);
    java.awt.Insets var57 = var52.getInsets();
    javax.swing.JToolTip var58 = var52.createToolTip();
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var62 = var61.isMaximumSizeSet();
    var61.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var67 = var61.getTransferHandler();
    boolean var68 = var61.hasFocus();
    javax.swing.event.AncestorListener[] var69 = var61.getAncestorListeners();
    var61.enable(false);
    int var72 = var58.getComponentZOrder((java.awt.Component)var61);
    boolean var73 = var58.requestFocusInWindow();
    boolean var74 = var58.isOptimizedDrawingEnabled();
    var2.add((java.awt.Component)var9, (java.lang.Object)var58);
    java.beans.PropertyChangeListener[] var77 = var58.getPropertyChangeListeners("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    boolean var78 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var58);
    java.awt.Insets var79 = var58.insets();
    boolean var80 = var58.isRequestFocusEnabled();
    var58.transferFocusDownCycle();
    var58.repaint(13, 996, 15, 0);
    java.awt.Point var88 = var58.getMousePosition(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);

  }

  public void test195() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test195");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    java.awt.Component var11 = var2.getComponentAt(0, 0);
    int var12 = var2.getDebugGraphicsOptions();
    java.awt.image.VolatileImage var15 = var2.createVolatileImage(13, 11);
    var2.firePropertyChange("", 'a', '4');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test196() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test196");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    boolean var11 = var2.inside(24, 1);
    java.awt.image.VolatileImage var14 = var2.createVolatileImage(0, 1);
    java.lang.String var15 = var2.getUIClassID();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", '4', '4');
    java.awt.Dimension var20 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var24 = var23.getPreferredSize();
    boolean var25 = var23.isPreferredSizeSet();
    var23.enable();
    int var27 = var23.getY();
    java.awt.Insets var28 = var23.insets();
    var23.setOpaque(false);
    var23.revalidate();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var35 = var34.getPreferredSize();
    boolean var38 = var34.contains(10, 1);
    java.awt.event.HierarchyBoundsListener[] var39 = var34.getHierarchyBoundsListeners();
    var34.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (short)(-1), (short)100);
    boolean var44 = var34.requestDefaultFocus();
    bierse.view.RunningMessagePanel var47 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var47.transferFocus();
    var47.show();
    float var50 = var47.getAlignmentX();
    var47.repaint(0L, 10, 0, 10, (-1));
    boolean var57 = var47.isEnabled();
    java.lang.Object var58 = var47.getTreeLock();
    var47.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (byte)100, (byte)100);
    javax.swing.JPopupMenu var63 = var47.getComponentPopupMenu();
    java.awt.ComponentOrientation var64 = var47.getComponentOrientation();
    var34.applyComponentOrientation(var64);
    var23.applyComponentOrientation(var64);
    var2.setComponentOrientation(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "PanelUI"+ "'", var15.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test197() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test197");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    float var12 = var2.getAlignmentX();
    boolean var13 = var2.isMinimumSizeSet();
    var2.list();
    var2.setDebugGraphicsOptions(100);
    boolean var19 = var2.contains(100, 12);
    java.lang.Object var20 = var2.getTreeLock();
    boolean var21 = var2.isForegroundSet();
    java.awt.Container var22 = var2.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test198() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test198");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    var2.setAlignmentX((-1.0f));
    boolean var11 = var2.inside(100, 10);
    java.awt.dnd.DropTarget var12 = var2.getDropTarget();
    java.awt.event.ComponentListener[] var13 = var2.getComponentListeners();
    boolean var14 = var2.isDoubleBuffered();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test199() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test199");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var24 = var23.isMaximumSizeSet();
    var23.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var29 = var23.getTransferHandler();
    boolean var30 = var23.hasFocus();
    var23.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var33 = var23.getPreferredSize();
    java.awt.ComponentOrientation var34 = var23.getComponentOrientation();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    javax.swing.event.AncestorListener[] var45 = var37.getAncestorListeners();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var49 = var48.isMaximumSizeSet();
    var48.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var54 = var48.getTransferHandler();
    boolean var55 = var48.hasFocus();
    var48.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var58 = var48.getPreferredSize();
    java.awt.ComponentOrientation var59 = var48.getComponentOrientation();
    var23.add((java.awt.Component)var37, (java.lang.Object)var48);
    bierse.view.RunningMessagePanel var63 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var64 = var63.getPreferredSize();
    java.awt.Dimension var65 = var63.getMaximumSize();
    var48.resize(var65);
    var15.setNextFocusableComponent((java.awt.Component)var48);
    java.awt.Component var70 = var15.locate(24, 996);
    java.awt.Toolkit var71 = var15.getToolkit();
    bierse.view.RunningMessagePanel var74 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var75 = var74.getPreferredSize();
    boolean var76 = var74.isPreferredSizeSet();
    var74.enable();
    var74.transferFocusBackward();
    java.awt.Dimension var79 = var74.size();
    boolean var80 = var74.isFocusable();
    var74.enableInputMethods(false);
    java.awt.Cursor var83 = var74.getCursor();
    var15.setCursor(var83);
    boolean var85 = var15.isFontSet();
    java.awt.ComponentOrientation var86 = var15.getComponentOrientation();
    var15.disable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test200() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test200");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    javax.accessibility.AccessibleContext var11 = var2.getAccessibleContext();
    int var12 = var2.getHeight();
    java.awt.Image var15 = var2.createImage(12, 24);
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", (byte)(-1), (byte)100);
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var23 = var22.isMaximumSizeSet();
    var22.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var28 = var22.getTransferHandler();
    boolean var29 = var22.hasFocus();
    javax.swing.event.AncestorListener[] var30 = var22.getAncestorListeners();
    var22.enable(false);
    java.awt.Dimension var33 = var22.minimumSize();
    var2.setPreferredSize(var33);
    java.awt.Rectangle var35 = var2.getVisibleRect();
    boolean var36 = var2.requestFocusInWindow();
    boolean var37 = var2.requestFocusInWindow();
    bierse.view.RunningMessagePanel var40 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var41 = var40.isMaximumSizeSet();
    var40.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var46 = var40.getTransferHandler();
    boolean var47 = var40.requestFocusInWindow();
    boolean var50 = var40.contains(12, 12);
    boolean var51 = var2.isFocusCycleRoot((java.awt.Container)var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test201() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test201");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    boolean var8 = var2.getInheritsPopupMenu();
    java.lang.String var9 = var2.toString();
    boolean var10 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var9,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var9.equals("bierse.view.RunningMessagePanel[,0,0,0var9,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test202() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test202");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    boolean var5 = var2.isMaximumSizeSet();
    java.awt.Dimension var6 = var2.preferredSize();
    var2.setDebugGraphicsOptions(1);
    var2.setIgnoreRepaint(false);
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var14 = var13.getPreferredSize();
    boolean var15 = var13.isPreferredSizeSet();
    var13.enable();
    javax.accessibility.AccessibleContext var17 = var13.getAccessibleContext();
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var20.transferFocus();
    var20.show();
    float var23 = var20.getAlignmentX();
    var20.repaint(0L, 10, 0, 10, (-1));
    boolean var30 = var20.isEnabled();
    bierse.view.RunningMessagePanel var33 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var34 = var33.getPreferredSize();
    javax.swing.JPopupMenu var35 = var33.getComponentPopupMenu();
    java.awt.Rectangle var36 = var33.bounds();
    java.awt.Rectangle var37 = var20.getBounds(var36);
    var13.computeVisibleRect(var37);
    boolean var40 = var13.requestFocus(false);
    bierse.view.RunningMessagePanel var43 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var44 = var43.getPreferredSize();
    boolean var47 = var43.contains(10, 1);
    java.awt.im.InputMethodRequests var48 = var43.getInputMethodRequests();
    boolean var51 = var43.inside((-1), 100);
    bierse.view.RunningMessagePanel var54 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var55 = var54.getPreferredSize();
    boolean var58 = var54.contains(10, 1);
    var54.setAlignmentX((-1.0f));
    java.awt.Point var61 = var54.getLocation();
    java.awt.Point var62 = var43.getLocation(var61);
    bierse.view.RunningMessagePanel var65 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var66 = var65.isMaximumSizeSet();
    boolean var67 = var65.isOpaque();
    java.awt.event.HierarchyListener[] var68 = var65.getHierarchyListeners();
    int var69 = var65.getWidth();
    int var70 = var65.countComponents();
    java.awt.Point var72 = var65.getMousePosition(true);
    var65.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var75 = var65.toString();
    java.awt.Font var76 = var65.getFont();
    bierse.view.RunningMessagePanel var79 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var80 = var79.getPreferredSize();
    boolean var83 = var79.contains(10, 1);
    java.awt.im.InputMethodRequests var84 = var79.getInputMethodRequests();
    boolean var85 = var79.getInheritsPopupMenu();
    java.lang.String var86 = var79.toString();
    java.awt.Rectangle var87 = var79.bounds();
    var65.setBounds(var87);
    java.awt.Rectangle var89 = var43.getBounds(var87);
    java.awt.Rectangle var90 = var13.getBounds(var87);
    var2.repaint(var90);
    java.awt.Dimension var92 = var2.getPreferredSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var75,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var75.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var75,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var86,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var86.equals("bierse.view.RunningMessagePanel[,0,0,0var86,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test203() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test203");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    boolean var16 = var14.isOpaque();
    javax.swing.InputMap var17 = var14.getInputMap();
    java.beans.PropertyChangeListener[] var19 = var14.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var20 = var14.getComponentOrientation();
    var2.applyComponentOrientation(var20);
    java.awt.Dimension var22 = var2.getMinimumSize();
    java.awt.Component var25 = var2.findComponentAt(24, 12);
    boolean var26 = var2.isFocusTraversalPolicyProvider();
    var2.setInheritsPopupMenu(true);
    java.beans.PropertyChangeListener[] var30 = var2.getPropertyChangeListeners("bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test204() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test204");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    java.awt.Font var9 = var2.getFont();
    var2.enable();
    int var11 = var2.getY();
    boolean var14 = var2.contains(996, 0);
    javax.accessibility.AccessibleContext var15 = var2.getAccessibleContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test205() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test205");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.Insets var7 = var2.getInsets();
    javax.swing.JToolTip var8 = var2.createToolTip();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var17 = var11.getTransferHandler();
    boolean var18 = var11.hasFocus();
    javax.swing.event.AncestorListener[] var19 = var11.getAncestorListeners();
    var11.enable(false);
    int var22 = var8.getComponentZOrder((java.awt.Component)var11);
    boolean var23 = var8.requestFocusInWindow();
    int var24 = var8.getHeight();
    boolean var25 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var8);
    var8.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (-1.0d), 1.0d);
    var8.setFocusCycleRoot(false);
    var8.setVerifyInputWhenFocusTarget(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test206() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test206");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    var24.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var24.invalidate();
    java.awt.Dimension var31 = var24.getPreferredSize();
    int var32 = var24.getWidth();
    java.awt.Component var33 = var15.add("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var24);
    var33.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", (byte)(-1), (byte)1);
    java.lang.Object var38 = var33.getTreeLock();
    bierse.view.RunningMessagePanel var41 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var42 = var41.isMaximumSizeSet();
    var41.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var47 = var41.getTransferHandler();
    boolean var48 = var41.hasFocus();
    var41.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var51 = var41.getPreferredSize();
    java.awt.ComponentOrientation var52 = var41.getComponentOrientation();
    bierse.view.RunningMessagePanel var55 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var56 = var55.isMaximumSizeSet();
    var55.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var61 = var55.getTransferHandler();
    boolean var62 = var55.hasFocus();
    javax.swing.event.AncestorListener[] var63 = var55.getAncestorListeners();
    bierse.view.RunningMessagePanel var66 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var67 = var66.isMaximumSizeSet();
    var66.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var72 = var66.getTransferHandler();
    boolean var73 = var66.hasFocus();
    var66.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var76 = var66.getPreferredSize();
    java.awt.ComponentOrientation var77 = var66.getComponentOrientation();
    var41.add((java.awt.Component)var55, (java.lang.Object)var66);
    boolean var79 = var41.getFocusTraversalKeysEnabled();
    var41.setAlignmentX(100.0f);
    var41.setMessage("");
    java.awt.Container var84 = var41.getFocusCycleRootAncestor();
    int var85 = var41.countComponents();
    javax.swing.TransferHandler var86 = var41.getTransferHandler();
    java.awt.Dimension var87 = var41.getMaximumSize();
    var33.setPreferredSize(var87);
    java.awt.Toolkit var89 = var33.getToolkit();
    java.awt.Color var90 = var33.getForeground();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test207() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test207");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.Insets var7 = var2.getInsets();
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var11 = var10.isMaximumSizeSet();
    var10.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var16 = var10.getTransferHandler();
    boolean var17 = var10.hasFocus();
    var10.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var20 = var10.getPreferredSize();
    java.awt.ComponentOrientation var21 = var10.getComponentOrientation();
    var10.transferFocus();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    var25.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var31 = var25.getTransferHandler();
    boolean var32 = var25.hasFocus();
    javax.swing.event.AncestorListener[] var33 = var25.getAncestorListeners();
    java.awt.Dimension var34 = var25.getMinimumSize();
    boolean var35 = var25.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var39 = var38.isMaximumSizeSet();
    var38.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var44 = var38.getTransferHandler();
    boolean var45 = var38.hasFocus();
    var38.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var48 = var38.getPreferredSize();
    java.awt.Dimension var49 = var25.getSize(var48);
    var10.setSize(var48);
    var2.setSize(var48);
    int var52 = var2.getHeight();
    var2.disable();
    bierse.view.RunningMessagePanel var56 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var57 = var56.getPreferredSize();
    java.awt.Point var58 = var56.getMousePosition();
    var56.revalidate();
    bierse.view.RunningMessagePanel var62 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var63 = var62.isMaximumSizeSet();
    var62.layout();
    var62.invalidate();
    var56.setNextFocusableComponent((java.awt.Component)var62);
    boolean var67 = var56.isValidateRoot();
    var56.transferFocus();
    var2.remove((java.awt.Component)var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);

  }

  public void test208() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test208");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    boolean var40 = var27.isDoubleBuffered();
    var27.repaint((-1L), 12, 996, (-1), 14);
    var27.repaint(1L);
    boolean var49 = var27.isFocusTraversable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);

  }

  public void test209() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test209");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    var2.disable();
    var2.setBounds(0, (-1), 10, 24);
    java.awt.Dimension var15 = var2.getMaximumSize();
    int var16 = var2.getX();
    java.awt.event.ComponentListener[] var17 = var2.getComponentListeners();
    java.awt.Cursor var18 = var2.getCursor();
    boolean var19 = var2.isBackgroundSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);

  }

  public void test210() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test210");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    int var12 = var2.getDebugGraphicsOptions();
    boolean var13 = var2.isEnabled();
    javax.swing.JToolTip var14 = var2.createToolTip();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var18 = var17.isMaximumSizeSet();
    var17.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var23 = var17.getTransferHandler();
    boolean var24 = var17.hasFocus();
    var17.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var27 = var17.getPreferredSize();
    java.awt.ComponentOrientation var28 = var17.getComponentOrientation();
    bierse.view.RunningMessagePanel var31 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var32 = var31.isMaximumSizeSet();
    var31.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var37 = var31.getTransferHandler();
    boolean var38 = var31.hasFocus();
    javax.swing.event.AncestorListener[] var39 = var31.getAncestorListeners();
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var43 = var42.isMaximumSizeSet();
    var42.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var48 = var42.getTransferHandler();
    boolean var49 = var42.hasFocus();
    var42.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var52 = var42.getPreferredSize();
    java.awt.ComponentOrientation var53 = var42.getComponentOrientation();
    var17.add((java.awt.Component)var31, (java.lang.Object)var42);
    boolean var55 = var17.getFocusTraversalKeysEnabled();
    var17.setAlignmentX(100.0f);
    var17.setMessage("");
    java.awt.Container var60 = var17.getFocusCycleRootAncestor();
    int var61 = var17.countComponents();
    javax.swing.TransferHandler var62 = var17.getTransferHandler();
    var17.transferFocusBackward();
    java.awt.Point var64 = var17.location();
    java.awt.Point var65 = var14.getLocation(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test211() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test211");


    bierse.view.MyKeyMap var2 = new bierse.view.MyKeyMap("bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (-1));
    int var3 = var2.getCode();
    java.lang.String var4 = var2.getText();
    java.lang.String var5 = var2.toString();
    int var6 = var2.getCode();
    java.lang.String var7 = var2.getText();
    java.lang.String var8 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var4.equals("bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var5.equals("bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var7.equals("bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var8.equals("bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));

  }

  public void test212() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test212");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.Insets var7 = var2.getInsets();
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var11 = var10.isMaximumSizeSet();
    var10.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var16 = var10.getTransferHandler();
    boolean var17 = var10.hasFocus();
    var10.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var20 = var10.getPreferredSize();
    java.awt.ComponentOrientation var21 = var10.getComponentOrientation();
    var10.transferFocus();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    var25.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var31 = var25.getTransferHandler();
    boolean var32 = var25.hasFocus();
    javax.swing.event.AncestorListener[] var33 = var25.getAncestorListeners();
    java.awt.Dimension var34 = var25.getMinimumSize();
    boolean var35 = var25.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var39 = var38.isMaximumSizeSet();
    var38.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var44 = var38.getTransferHandler();
    boolean var45 = var38.hasFocus();
    var38.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var48 = var38.getPreferredSize();
    java.awt.Dimension var49 = var25.getSize(var48);
    var10.setSize(var48);
    var2.setSize(var48);
    bierse.view.RunningMessagePanel var55 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    javax.swing.InputVerifier var56 = var55.getInputVerifier();
    var55.removeAll();
    boolean var58 = var55.getFocusTraversalKeysEnabled();
    java.awt.Dimension var59 = var55.preferredSize();
    java.awt.Component var60 = var2.add("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var55);
    var55.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", (short)10, (short)10);
    var55.setAlignmentX((-1.0f));
    bierse.view.RunningMessagePanel var69 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var70 = var69.getPreferredSize();
    boolean var73 = var69.contains(10, 1);
    var69.disable();
    java.awt.Container var75 = var69.getFocusCycleRootAncestor();
    javax.swing.InputMap var76 = var69.getInputMap();
    java.awt.Dimension var77 = var69.getPreferredSize();
    var55.setMaximumSize(var77);
    boolean var79 = var55.isCursorSet();
    var55.list();
    java.awt.event.MouseWheelListener[] var81 = var55.getMouseWheelListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test213() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test213");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var10 = var9.getPreferredSize();
    java.awt.Point var11 = var9.getMousePosition();
    var9.setDoubleBuffered(false);
    java.awt.Dimension var14 = var9.minimumSize();
    var2.setMinimumSize(var14);
    boolean var16 = var2.getFocusTraversalKeysEnabled();
    var2.requestFocus();
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var21 = var20.isMaximumSizeSet();
    boolean var22 = var20.isOpaque();
    java.awt.event.HierarchyListener[] var23 = var20.getHierarchyListeners();
    java.awt.peer.ComponentPeer var24 = var20.getPeer();
    var20.transferFocusDownCycle();
    var20.transferFocusUpCycle();
    java.awt.Dimension var27 = var20.minimumSize();
    boolean var28 = var20.isVisible();
    bierse.view.RunningMessagePanel var31 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var31.transferFocus();
    var31.show();
    float var34 = var31.getAlignmentX();
    boolean var37 = var31.contains(0, 24);
    java.awt.Color var38 = var31.getForeground();
    var20.setForeground(var38);
    boolean var40 = var20.isShowing();
    int var41 = var20.getHeight();
    float var42 = var20.getAlignmentX();
    java.awt.Dimension var43 = var20.getMinimumSize();
    java.awt.Dimension var44 = var2.getSize(var43);
    java.awt.event.MouseWheelListener[] var45 = var2.getMouseWheelListeners();
    int var46 = var2.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);

  }

  public void test214() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test214");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    java.awt.Insets var40 = var16.getInsets();
    bierse.view.RunningMessagePanel var43 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var44 = var43.isMaximumSizeSet();
    var43.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var49 = var43.getTransferHandler();
    boolean var50 = var43.hasFocus();
    var43.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var53 = var43.getPreferredSize();
    java.awt.ComponentOrientation var54 = var43.getComponentOrientation();
    java.lang.String var55 = var43.getName();
    var16.setNextFocusableComponent((java.awt.Component)var43);
    boolean var57 = var16.getFocusTraversalKeysEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);

  }

  public void test215() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test215");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var8 = var7.getPreferredSize();
    javax.swing.JPopupMenu var9 = var7.getComponentPopupMenu();
    java.awt.Rectangle var10 = var7.bounds();
    var2.computeVisibleRect(var10);
    var2.removeNotify();
    int var13 = var2.getHeight();
    float var14 = var2.getAlignmentY();
    int var17 = var2.getBaseline(10, 10);
    boolean var18 = var2.isPaintingTile();
    var2.resize(24, 996);
    java.awt.peer.ComponentPeer var22 = var2.getPeer();
    var2.move(14, (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test216() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test216");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    java.awt.peer.ComponentPeer var6 = var2.getPeer();
    var2.transferFocus();
    java.lang.String var8 = var2.getToolTipText();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var17 = var11.getTransferHandler();
    boolean var18 = var11.hasFocus();
    var11.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var21 = var11.getPreferredSize();
    java.awt.GraphicsConfiguration var22 = var11.getGraphicsConfiguration();
    var11.firePropertyChange("", 1L, 10L);
    java.awt.Component var29 = var11.findComponentAt((-1), 996);
    java.awt.Point var30 = var11.getLocation();
    java.awt.Component var31 = var2.getComponentAt(var30);
    java.awt.Dimension var32 = var2.getMinimumSize();
    boolean var33 = var2.isValid();
    java.awt.Component.BaselineResizeBehavior var34 = var2.getBaselineResizeBehavior();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test217() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test217");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var8 = var7.isMaximumSizeSet();
    var7.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var13 = var7.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var17 = var16.getPreferredSize();
    boolean var18 = var16.isPreferredSizeSet();
    var16.enable();
    var16.transferFocusBackward();
    int var21 = var7.getComponentZOrder((java.awt.Component)var16);
    var7.setEnabled(false);
    java.awt.Graphics var24 = var7.getGraphics();
    var2.remove((java.awt.Component)var7);
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var29 = var28.getPreferredSize();
    boolean var32 = var28.contains(10, 1);
    java.awt.Insets var33 = var28.getInsets();
    javax.swing.JToolTip var34 = var28.createToolTip();
    var28.invalidate();
    var2.remove((java.awt.Component)var28);
    bierse.view.RunningMessagePanel var39 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var40 = var39.getPreferredSize();
    boolean var43 = var39.contains(10, 1);
    java.awt.Insets var44 = var39.getInsets();
    javax.swing.JToolTip var45 = var39.createToolTip();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var49 = var48.isMaximumSizeSet();
    var48.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var54 = var48.getTransferHandler();
    boolean var55 = var48.hasFocus();
    javax.swing.event.AncestorListener[] var56 = var48.getAncestorListeners();
    var48.enable(false);
    int var59 = var45.getComponentZOrder((java.awt.Component)var48);
    bierse.view.RunningMessagePanel var62 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var63 = var62.isMaximumSizeSet();
    var62.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var68 = var62.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var71 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var72 = var71.getPreferredSize();
    boolean var73 = var71.isPreferredSizeSet();
    var71.enable();
    var71.transferFocusBackward();
    int var76 = var62.getComponentZOrder((java.awt.Component)var71);
    bierse.view.RunningMessagePanel var79 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var79.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var86 = var79.location();
    boolean var87 = var71.contains(var86);
    java.awt.Component var88 = var48.getComponentAt(var86);
    var28.setLocation(var86);
    boolean var90 = var28.isValid();
    boolean var92 = var28.requestFocus(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);

  }

  public void test218() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test218");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    boolean var40 = var2.getFocusTraversalKeysEnabled();
    var2.doLayout();
    java.lang.String var42 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var42,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var42.equals("bierse.view.RunningMessagePanel[,0,0,0var42,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));

  }

  public void test219() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test219");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    boolean var11 = var2.inside(24, 1);
    java.awt.image.VolatileImage var14 = var2.createVolatileImage(0, 1);
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", 10, 100);
    boolean var21 = var2.contains((-1), 1);
    var2.doLayout();
    int var23 = var2.getX();
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var27 = var26.isMaximumSizeSet();
    var26.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var32 = var26.getTransferHandler();
    boolean var33 = var26.hasFocus();
    var26.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var36 = var26.getPreferredSize();
    java.awt.ComponentOrientation var37 = var26.getComponentOrientation();
    bierse.view.RunningMessagePanel var40 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var41 = var40.isMaximumSizeSet();
    var40.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var46 = var40.getTransferHandler();
    boolean var47 = var40.hasFocus();
    javax.swing.event.AncestorListener[] var48 = var40.getAncestorListeners();
    bierse.view.RunningMessagePanel var51 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var52 = var51.isMaximumSizeSet();
    var51.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var57 = var51.getTransferHandler();
    boolean var58 = var51.hasFocus();
    var51.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var61 = var51.getPreferredSize();
    java.awt.ComponentOrientation var62 = var51.getComponentOrientation();
    var26.add((java.awt.Component)var40, (java.lang.Object)var51);
    boolean var64 = var26.getFocusTraversalKeysEnabled();
    var26.setAlignmentX(100.0f);
    var26.setMessage("");
    java.awt.Container var69 = var26.getFocusCycleRootAncestor();
    int var70 = var26.countComponents();
    javax.swing.TransferHandler var71 = var26.getTransferHandler();
    java.awt.Rectangle var72 = var26.getBounds();
    java.awt.Cursor var73 = var26.getCursor();
    var2.setCursor(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test220() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test220");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    int var7 = var2.countComponents();
    java.awt.Point var9 = var2.getMousePosition(true);
    var2.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    var2.requestFocus();
    java.awt.Color var13 = var2.getForeground();
    var2.addNotify();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test221() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test221");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    boolean var10 = var2.inside((-1), 100);
    java.beans.PropertyChangeListener[] var12 = var2.getPropertyChangeListeners("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    boolean var13 = var2.isCursorSet();
    var2.invalidate();
    boolean var15 = var2.isEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);

  }

  public void test222() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test222");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var8 = var7.isMaximumSizeSet();
    boolean var9 = var7.isOpaque();
    java.beans.PropertyChangeListener[] var10 = var7.getPropertyChangeListeners();
    var7.setOpaque(true);
    java.awt.Insets var13 = var7.insets();
    java.awt.Insets var14 = var2.getInsets(var13);
    var2.show();
    var2.setLocation(0, 100);
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isFocusTraversable();
    var21.setOpaque(true);
    java.awt.Dimension var25 = var21.getSize();
    boolean var26 = var2.isAncestorOf((java.awt.Component)var21);
    bierse.view.RunningMessagePanel var29 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var30 = var29.isMaximumSizeSet();
    var29.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var35 = var29.getTransferHandler();
    boolean var36 = var29.hasFocus();
    javax.swing.event.AncestorListener[] var37 = var29.getAncestorListeners();
    java.awt.Dimension var38 = var29.getMinimumSize();
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var43 = var42.getPreferredSize();
    java.awt.Dimension var44 = var42.getMaximumSize();
    var42.disable();
    var29.putClientProperty((java.lang.Object)100, (java.lang.Object)var42);
    java.awt.image.VolatileImage var49 = var42.createVolatileImage(100, 24);
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var53 = var52.getPreferredSize();
    var42.setMinimumSize(var53);
    boolean var55 = var42.isValid();
    javax.accessibility.AccessibleContext var56 = var42.getAccessibleContext();
    java.awt.image.ColorModel var57 = var42.getColorModel();
    java.awt.Rectangle var58 = var42.getBounds();
    var21.paintImmediately(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test223() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test223");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    boolean var21 = var15.isValidateRoot();
    java.awt.Insets var22 = var15.getInsets();
    java.awt.Image var25 = var15.createImage(100, 996);
    javax.accessibility.AccessibleContext var26 = var15.getAccessibleContext();
    boolean var27 = var15.isShowing();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var31 = var30.isMaximumSizeSet();
    var30.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var36 = var30.getTransferHandler();
    boolean var37 = var30.hasFocus();
    javax.swing.event.AncestorListener[] var38 = var30.getAncestorListeners();
    java.awt.Dimension var39 = var30.getMinimumSize();
    bierse.view.RunningMessagePanel var43 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var44 = var43.getPreferredSize();
    java.awt.Dimension var45 = var43.getMaximumSize();
    var43.disable();
    var30.putClientProperty((java.lang.Object)100, (java.lang.Object)var43);
    int var48 = var30.getHeight();
    bierse.view.RunningMessagePanel var51 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var51.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var58 = var51.location();
    boolean var59 = var30.contains(var58);
    float var60 = var30.getAlignmentX();
    var30.grabFocus();
    boolean var62 = var30.getAutoscrolls();
    java.awt.Insets var63 = var30.getInsets();
    float var64 = var30.getAlignmentX();
    java.awt.Component.BaselineResizeBehavior var65 = var30.getBaselineResizeBehavior();
    bierse.view.RunningMessagePanel var68 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var69 = var68.getPreferredSize();
    boolean var70 = var68.isPreferredSizeSet();
    var68.enable();
    javax.accessibility.AccessibleContext var72 = var68.getAccessibleContext();
    var68.setFocusable(false);
    var68.setIgnoreRepaint(false);
    java.awt.event.MouseWheelListener[] var77 = var68.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var80 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var81 = var80.getPreferredSize();
    boolean var84 = var80.contains(10, 1);
    var80.setFocusTraversalPolicyProvider(false);
    float var87 = var80.getAlignmentX();
    java.awt.Component.BaselineResizeBehavior var88 = var80.getBaselineResizeBehavior();
    java.awt.dnd.DropTarget var89 = var80.getDropTarget();
    var80.layout();
    var80.setDebugGraphicsOptions(996);
    java.awt.Graphics var93 = var80.getGraphics();
    var68.printAll(var93);
    var30.paintAll(var93);
    var15.update(var93);
    var15.setOpaque(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);

  }

  public void test224() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test224");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var9 = var2.location();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var13 = var12.isMaximumSizeSet();
    var12.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var18 = var12.getTransferHandler();
    boolean var19 = var12.hasFocus();
    javax.swing.event.AncestorListener[] var20 = var12.getAncestorListeners();
    java.awt.Dimension var21 = var12.getMinimumSize();
    var2.resize(var21);
    var2.repaint(100L, 1, (-1), 100, 24);
    javax.swing.ActionMap var29 = var2.getActionMap();
    var2.repaint(100L);
    boolean var32 = var2.isFocusCycleRoot();
    var2.reshape(24, 13, 1, 12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test225() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test225");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Dimension var4 = var2.getMaximumSize();
    var2.repaint();
    var2.disable();
    java.awt.Rectangle var7 = var2.getBounds();
    java.awt.Point var8 = var2.getMousePosition();
    java.awt.Color var9 = var2.getForeground();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var12.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var19 = var12.location();
    java.awt.Font var20 = var12.getFont();
    boolean var21 = var12.requestFocusInWindow();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    var24.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var30 = var24.getTransferHandler();
    boolean var31 = var24.hasFocus();
    javax.swing.event.AncestorListener[] var32 = var24.getAncestorListeners();
    java.awt.Dimension var33 = var24.getMinimumSize();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var38 = var37.getPreferredSize();
    java.awt.Dimension var39 = var37.getMaximumSize();
    var37.disable();
    var24.putClientProperty((java.lang.Object)100, (java.lang.Object)var37);
    int var42 = var24.getHeight();
    bierse.view.RunningMessagePanel var45 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var45.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var52 = var45.location();
    boolean var53 = var24.contains(var52);
    java.awt.Component var54 = var12.getComponentAt(var52);
    var2.setLocation(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);

  }

  public void test226() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test226");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    java.awt.peer.ComponentPeer var6 = var2.getPeer();
    var2.transferFocusDownCycle();
    var2.transferFocusUpCycle();
    javax.swing.JToolTip var9 = var2.createToolTip();
    boolean var10 = var2.getIgnoreRepaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test227() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test227");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.countComponents();
    java.awt.dnd.DropTarget var7 = var2.getDropTarget();
    var2.validate();
    java.awt.Component var11 = var2.findComponentAt(0, 12);
    var2.transferFocusDownCycle();
    var2.setInheritsPopupMenu(true);
    boolean var17 = var2.contains(11, 12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test228() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test228");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    int var7 = var2.countComponents();
    java.awt.Point var9 = var2.getMousePosition(true);
    var2.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    var2.requestFocus();
    var2.revalidate();
    var2.removeAll();
    java.awt.Dimension var15 = var2.getSize();
    java.awt.Rectangle var16 = var2.getBounds();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test229() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test229");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    boolean var5 = var2.isMaximumSizeSet();
    var2.setLocation(996, 12);
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (short)1, (short)1);
    boolean var13 = var2.isForegroundSet();
    var2.setToolTipText("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test230() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test230");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    var2.disable();
    var2.enable();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var10 = var9.isMaximumSizeSet();
    boolean var11 = var9.isOpaque();
    javax.swing.InputMap var12 = var9.getInputMap();
    java.beans.PropertyChangeListener[] var14 = var9.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var15 = var9.getComponentOrientation();
    java.awt.peer.ComponentPeer var16 = var9.getPeer();
    var9.transferFocusDownCycle();
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var21 = var20.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var24.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var31 = var24.location();
    java.awt.Component var32 = var20.findComponentAt(var31);
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var35.transferFocus();
    var35.show();
    bierse.view.RunningMessagePanel var40 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var41 = var40.getPreferredSize();
    boolean var44 = var40.contains(10, 1);
    java.awt.im.InputMethodRequests var45 = var40.getInputMethodRequests();
    java.awt.Font var46 = var40.getFont();
    var35.setFont(var46);
    var20.setFont(var46);
    var9.setFont(var46);
    var2.setFont(var46);
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var54 = var53.isMaximumSizeSet();
    var53.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var53.invalidate();
    java.awt.Dimension var60 = var53.getPreferredSize();
    var53.show(false);
    boolean var63 = var53.isMaximumSizeSet();
    bierse.view.RunningMessagePanel var66 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var67 = var66.isMaximumSizeSet();
    var66.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var72 = var66.getTransferHandler();
    boolean var73 = var66.hasFocus();
    javax.swing.event.AncestorListener[] var74 = var66.getAncestorListeners();
    var66.enable(false);
    java.awt.Dimension var77 = var66.minimumSize();
    java.awt.Dimension var78 = var66.minimumSize();
    java.awt.Dimension var79 = var53.getSize(var78);
    java.awt.event.ComponentListener[] var80 = var53.getComponentListeners();
    java.awt.image.VolatileImage var83 = var53.createVolatileImage(1, 100);
    bierse.view.RunningMessagePanel var86 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var87 = var86.getPreferredSize();
    javax.swing.JPopupMenu var88 = var86.getComponentPopupMenu();
    java.awt.Rectangle var89 = var86.bounds();
    java.awt.Insets var90 = var86.insets();
    java.awt.Insets var91 = var53.getInsets(var90);
    java.awt.Insets var92 = var2.getInsets(var90);
    java.awt.Component var95 = var2.getComponentAt(0, 996);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var95);

  }

  public void test231() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test231");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.Insets var7 = var2.getInsets();
    javax.swing.JToolTip var8 = var2.createToolTip();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var17 = var11.getTransferHandler();
    boolean var18 = var11.hasFocus();
    javax.swing.event.AncestorListener[] var19 = var11.getAncestorListeners();
    var11.enable(false);
    int var22 = var8.getComponentZOrder((java.awt.Component)var11);
    boolean var23 = var8.requestFocusInWindow();
    boolean var24 = var8.isOptimizedDrawingEnabled();
    var8.transferFocusDownCycle();
    var8.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", (byte)10, (byte)1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);

  }

  public void test232() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test232");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    java.awt.dnd.DropTarget var21 = var15.getDropTarget();
    boolean var22 = var15.isFocusTraversable();
    var15.setToolTipText("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    var15.setAlignmentY(10.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);

  }

  public void test233() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test233");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    var2.revalidate();
    java.awt.event.HierarchyListener[] var9 = var2.getHierarchyListeners();
    var2.invalidate();
    java.awt.LayoutManager var11 = var2.getLayout();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    boolean var16 = var14.isOpaque();
    java.awt.event.HierarchyListener[] var17 = var14.getHierarchyListeners();
    int var18 = var14.countComponents();
    java.awt.event.HierarchyBoundsListener[] var19 = var14.getHierarchyBoundsListeners();
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var23 = var22.getPreferredSize();
    boolean var24 = var22.isPreferredSizeSet();
    var22.enable();
    javax.accessibility.AccessibleContext var26 = var22.getAccessibleContext();
    bierse.view.RunningMessagePanel var29 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var29.transferFocus();
    var29.show();
    float var32 = var29.getAlignmentX();
    var29.repaint(0L, 10, 0, 10, (-1));
    boolean var39 = var29.isEnabled();
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var43 = var42.getPreferredSize();
    javax.swing.JPopupMenu var44 = var42.getComponentPopupMenu();
    java.awt.Rectangle var45 = var42.bounds();
    java.awt.Rectangle var46 = var29.getBounds(var45);
    var22.computeVisibleRect(var46);
    var14.scrollRectToVisible(var46);
    var2.scrollRectToVisible(var46);
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var53 = var52.isMaximumSizeSet();
    boolean var54 = var52.isOpaque();
    java.awt.event.HierarchyListener[] var55 = var52.getHierarchyListeners();
    int var56 = var52.getWidth();
    int var57 = var52.countComponents();
    var52.enable(false);
    var2.setNextFocusableComponent((java.awt.Component)var52);
    boolean var62 = var52.areFocusTraversalKeysSet(0);
    java.awt.image.ColorModel var63 = var52.getColorModel();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test234() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test234");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    java.awt.peer.ComponentPeer var6 = var2.getPeer();
    var2.transferFocusDownCycle();
    var2.transferFocusUpCycle();
    java.awt.Dimension var9 = var2.minimumSize();
    var2.setVerifyInputWhenFocusTarget(true);
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    var14.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var20 = var14.getTransferHandler();
    boolean var21 = var14.hasFocus();
    var14.setVerifyInputWhenFocusTarget(false);
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var27 = var26.isMaximumSizeSet();
    boolean var28 = var26.isOpaque();
    javax.swing.InputMap var29 = var26.getInputMap();
    java.beans.PropertyChangeListener[] var31 = var26.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var32 = var26.getComponentOrientation();
    var14.applyComponentOrientation(var32);
    java.awt.Dimension var34 = var14.getMinimumSize();
    int var35 = var14.getY();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var39 = var38.getPreferredSize();
    boolean var42 = var38.contains(10, 1);
    var38.setAlignmentX((-1.0f));
    java.awt.Point var45 = var38.getLocation();
    java.awt.Component var46 = var14.getComponentAt(var45);
    java.awt.Image var49 = var14.createImage((-1), 100);
    java.awt.Insets var50 = var14.insets();
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var54 = var53.isMaximumSizeSet();
    var53.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var59 = var53.getWidth();
    java.awt.Image var62 = var53.createImage(24, 24);
    bierse.view.RunningMessagePanel var65 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var66 = var65.getPreferredSize();
    java.awt.Dimension var67 = var65.getMaximumSize();
    var65.repaint();
    var65.disable();
    java.awt.Rectangle var70 = var65.getBounds();
    java.awt.Rectangle var71 = var53.getBounds(var70);
    var53.removeAll();
    bierse.view.RunningMessagePanel var75 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var76 = var75.getPreferredSize();
    boolean var79 = var75.contains(10, 1);
    var75.setAlignmentX((-1.0f));
    java.awt.Point var82 = var75.getLocation();
    java.awt.Point var83 = var75.getLocation();
    boolean var84 = var53.contains(var83);
    int var85 = var14.getComponentZOrder((java.awt.Component)var53);
    java.awt.Dimension var86 = var14.getPreferredSize();
    var2.setPreferredSize(var86);
    java.beans.PropertyChangeListener[] var89 = var2.getPropertyChangeListeners("bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test235() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test235");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    float var5 = var2.getAlignmentX();
    var2.repaint(0L, 10, 0, 10, (-1));
    boolean var12 = var2.isEnabled();
    var2.firePropertyChange("PanelUI", true, true);
    java.beans.PropertyChangeListener[] var18 = var2.getPropertyChangeListeners("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]");
    boolean var19 = var2.getAutoscrolls();
    var2.transferFocusDownCycle();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    boolean var26 = var24.isOpaque();
    java.awt.event.HierarchyListener[] var27 = var24.getHierarchyListeners();
    var24.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", 0.0f, 100.0f);
    java.awt.Component var32 = var2.add("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var24);
    boolean var33 = var2.requestFocusInWindow();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test236() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test236");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var3 = var2.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var6 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var6.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var13 = var6.location();
    java.awt.Component var14 = var2.findComponentAt(var13);
    var2.setEnabled(true);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var19.transferFocus();
    var19.show();
    float var22 = var19.getAlignmentX();
    boolean var25 = var19.contains(0, 24);
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var29 = var28.getPreferredSize();
    java.awt.Dimension var30 = var28.getMaximumSize();
    java.awt.event.FocusListener[] var31 = var28.getFocusListeners();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var35 = var34.getPreferredSize();
    boolean var38 = var34.contains(10, 1);
    java.awt.im.InputMethodRequests var39 = var34.getInputMethodRequests();
    java.awt.Font var40 = var34.getFont();
    var28.setFont(var40);
    java.awt.FontMetrics var42 = var19.getFontMetrics(var40);
    java.awt.FontMetrics var43 = var2.getFontMetrics(var40);
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var47 = var46.getPreferredSize();
    boolean var50 = var46.contains(10, 1);
    java.awt.im.InputMethodRequests var51 = var46.getInputMethodRequests();
    boolean var54 = var46.inside((-1), 100);
    bierse.view.RunningMessagePanel var57 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var58 = var57.getPreferredSize();
    boolean var61 = var57.contains(10, 1);
    var57.setAlignmentX((-1.0f));
    java.awt.Point var64 = var57.getLocation();
    java.awt.Point var65 = var46.getLocation(var64);
    boolean var68 = var46.contains(100, 0);
    int var69 = var46.countComponents();
    boolean var70 = var2.isAncestorOf((java.awt.Component)var46);
    java.awt.im.InputMethodRequests var71 = var46.getInputMethodRequests();
    var46.enable(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);

  }

  public void test237() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test237");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    var2.revalidate();
    var2.enable(true);
    java.awt.image.VolatileImage var13 = var2.createVolatileImage(13, 100);
    boolean var14 = var2.isForegroundSet();
    var2.removeAll();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test238() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test238");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.countComponents();
    java.awt.dnd.DropTarget var7 = var2.getDropTarget();
    var2.validate();
    java.awt.im.InputMethodRequests var9 = var2.getInputMethodRequests();
    var2.disable();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", 0.5f, 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test239() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test239");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    java.awt.Font var9 = var2.getFont();
    var2.enable();
    int var11 = var2.getY();
    int var12 = var2.getX();
    var2.setName("bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var18 = var17.isMaximumSizeSet();
    var17.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var23 = var17.getWidth();
    boolean var26 = var17.inside(24, 1);
    java.awt.image.VolatileImage var29 = var17.createVolatileImage(0, 1);
    var17.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", 10, 100);
    java.awt.Component.BaselineResizeBehavior var34 = var17.getBaselineResizeBehavior();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setComponentZOrder((java.awt.Component)var17, 1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test240() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test240");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    var11.transferFocus();
    var11.setToolTipText("");
    var11.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (byte)0, (byte)1);
    boolean var35 = var11.isValidateRoot();
    var11.setDoubleBuffered(false);
    bierse.view.RunningMessagePanel var40 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var41 = var40.isMaximumSizeSet();
    var40.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var46 = var40.getTransferHandler();
    boolean var47 = var40.hasFocus();
    var40.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var50 = var40.getPreferredSize();
    java.awt.GraphicsConfiguration var51 = var40.getGraphicsConfiguration();
    float var52 = var40.getAlignmentY();
    java.lang.String var53 = var40.getUIClassID();
    bierse.view.RunningMessagePanel var56 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var57 = var56.isMaximumSizeSet();
    var56.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var62 = var56.getWidth();
    java.awt.Component[] var63 = var56.getComponents();
    var56.enable(true);
    var56.revalidate();
    java.lang.String var67 = var56.toString();
    java.awt.Dimension var68 = var56.getMinimumSize();
    java.awt.Dimension var69 = var40.getSize(var68);
    var11.setPreferredSize(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "PanelUI"+ "'", var53.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var67,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var67.equals("bierse.view.RunningMessagePanel[,0,0,0var67,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test241() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test241");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    var2.setOpaque(true);
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var10 = var9.isMaximumSizeSet();
    var9.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var15 = var9.getTransferHandler();
    boolean var16 = var9.hasFocus();
    javax.swing.event.AncestorListener[] var17 = var9.getAncestorListeners();
    java.awt.Dimension var18 = var9.getMinimumSize();
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var23 = var22.getPreferredSize();
    java.awt.Dimension var24 = var22.getMaximumSize();
    var22.disable();
    var9.putClientProperty((java.lang.Object)100, (java.lang.Object)var22);
    javax.swing.InputVerifier var27 = var22.getInputVerifier();
    boolean var28 = var22.getInheritsPopupMenu();
    var22.setLocation(0, 100);
    boolean var32 = var22.isFocusTraversalPolicyProvider();
    var22.list();
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var36.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var43 = var36.location();
    java.awt.Font var44 = var36.getFont();
    var22.setFont(var44);
    java.awt.FontMetrics var46 = var2.getFontMetrics(var44);
    boolean var47 = var2.getAutoscrolls();
    var2.setOpaque(true);
    var2.disable();
    var2.enable(true);
    bierse.view.RunningMessagePanel var55 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var56 = var55.isMaximumSizeSet();
    var55.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var61 = var55.getWidth();
    boolean var64 = var55.inside(24, 1);
    java.awt.image.VolatileImage var67 = var55.createVolatileImage(0, 1);
    bierse.view.RunningMessagePanel var70 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var71 = var70.getPreferredSize();
    boolean var74 = var70.contains(10, 1);
    var70.setAlignmentX((-1.0f));
    java.awt.Dimension var77 = var70.getMaximumSize();
    java.awt.Dimension var78 = var55.getSize(var77);
    var2.setMaximumSize(var78);
    javax.swing.JPopupMenu var80 = var2.getComponentPopupMenu();
    boolean var81 = var2.isFocusOwner();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);

  }

  public void test242() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test242");


    bierse.view.MyKeyMap var2 = new bierse.view.MyKeyMap("hi!", 1);
    int var3 = var2.getCode();
    java.lang.String var4 = var2.toString();
    java.lang.String var5 = var2.getText();
    java.lang.String var6 = var2.toString();
    java.lang.String var7 = var2.toString();
    java.lang.String var8 = var2.toString();
    java.lang.String var9 = var2.getText();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!"+ "'", var7.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!"+ "'", var9.equals("hi!"));

  }

  public void test243() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test243");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    java.awt.Image var11 = var2.createImage(24, 24);
    boolean var12 = var2.getInheritsPopupMenu();
    boolean var13 = var2.isBackgroundSet();
    boolean var14 = var2.isValidateRoot();
    var2.transferFocus();
    var2.enable(false);
    boolean var18 = var2.isPaintingForPrint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test244() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test244");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    boolean var40 = var27.isDoubleBuffered();
    bierse.view.RunningMessagePanel var43 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var43.transferFocus();
    var43.show();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var49 = var48.getPreferredSize();
    boolean var52 = var48.contains(10, 1);
    java.awt.im.InputMethodRequests var53 = var48.getInputMethodRequests();
    java.awt.Font var54 = var48.getFont();
    var43.setFont(var54);
    var27.setFont(var54);
    var27.setDoubleBuffered(false);
    java.awt.Component var61 = var27.findComponentAt(12, 11);
    javax.accessibility.AccessibleContext var62 = var27.getAccessibleContext();
    int var63 = var27.countComponents();
    var27.enable(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);

  }

  public void test245() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test245");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    boolean var21 = var15.getInheritsPopupMenu();
    var15.setLocation(0, 100);
    boolean var25 = var15.isFocusTraversalPolicyProvider();
    var15.list();
    javax.swing.event.AncestorListener[] var27 = var15.getAncestorListeners();
    java.awt.Cursor var28 = var15.getCursor();
    var15.removeNotify();
    var15.removeAll();
    int var31 = var15.getWidth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);

  }

  public void test246() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test246");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isFocusTraversable();
    java.awt.event.HierarchyListener[] var4 = var2.getHierarchyListeners();
    var2.firePropertyChange("hi!", true, true);
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var11.setDebugGraphicsOptions(10);
    java.lang.Object var14 = var11.getTreeLock();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var18 = var17.isMaximumSizeSet();
    var17.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var23 = var17.getTransferHandler();
    boolean var24 = var17.hasFocus();
    javax.swing.event.AncestorListener[] var25 = var17.getAncestorListeners();
    java.awt.Dimension var26 = var17.getMinimumSize();
    var11.setPreferredSize(var26);
    var11.setAutoscrolls(false);
    bierse.view.RunningMessagePanel var32 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var33 = var32.getPreferredSize();
    boolean var36 = var32.contains(10, 1);
    java.awt.im.InputMethodRequests var37 = var32.getInputMethodRequests();
    java.awt.event.FocusListener[] var38 = var32.getFocusListeners();
    var32.disable();
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var43 = var42.isMaximumSizeSet();
    boolean var44 = var42.isOpaque();
    java.beans.PropertyChangeListener[] var45 = var42.getPropertyChangeListeners();
    var42.setOpaque(true);
    java.awt.Insets var48 = var42.insets();
    boolean var49 = var42.isOptimizedDrawingEnabled();
    var42.disable();
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var53.repaint(1L, (-1), (-1), 0, 100);
    boolean var60 = var53.isFocusTraversable();
    javax.swing.ActionMap var61 = var53.getActionMap();
    var42.setActionMap(var61);
    var32.setActionMap(var61);
    java.awt.Dimension var64 = var32.getMaximumSize();
    var11.setPreferredSize(var64);
    var2.setMaximumSize(var64);
    bierse.view.RunningMessagePanel var69 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var69.transferFocus();
    var69.show();
    float var72 = var69.getAlignmentX();
    var69.repaint(0L, 10, 0, 10, (-1));
    boolean var79 = var69.isEnabled();
    java.lang.Object var80 = var69.getTreeLock();
    java.awt.Insets var81 = var69.insets();
    bierse.view.RunningMessagePanel var84 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var85 = var84.isMaximumSizeSet();
    var84.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var84.invalidate();
    java.awt.Dimension var91 = var84.getPreferredSize();
    java.awt.Component var92 = var84.getNextFocusableComponent();
    var84.setDoubleBuffered(false);
    java.awt.ComponentOrientation var95 = var84.getComponentOrientation();
    var69.applyComponentOrientation(var95);
    var2.applyComponentOrientation(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test247() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test247");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    var16.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var26 = var16.getPreferredSize();
    java.awt.Dimension var27 = var2.getSize(var26);
    java.awt.image.VolatileImage var30 = var2.createVolatileImage((-1), (-1));
    var2.repaint(100L);
    boolean var33 = var2.hasFocus();
    boolean var34 = var2.isLightweight();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test248() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test248");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    var11.transferFocus();
    var11.show(true);
    var11.list();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test249() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test249");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    javax.swing.InputMap var5 = var2.getInputMap();
    java.beans.PropertyChangeListener[] var7 = var2.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var8 = var2.getComponentOrientation();
    java.awt.peer.ComponentPeer var9 = var2.getPeer();
    var2.transferFocusDownCycle();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var14 = var13.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var17.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var24 = var17.location();
    java.awt.Component var25 = var13.findComponentAt(var24);
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var28.transferFocus();
    var28.show();
    bierse.view.RunningMessagePanel var33 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var34 = var33.getPreferredSize();
    boolean var37 = var33.contains(10, 1);
    java.awt.im.InputMethodRequests var38 = var33.getInputMethodRequests();
    java.awt.Font var39 = var33.getFont();
    var28.setFont(var39);
    var13.setFont(var39);
    var2.setFont(var39);
    var2.setLocation(996, 0);
    java.awt.event.MouseWheelListener[] var46 = var2.getMouseWheelListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test250() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test250");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var8 = var7.getPreferredSize();
    javax.swing.JPopupMenu var9 = var7.getComponentPopupMenu();
    java.awt.Rectangle var10 = var7.bounds();
    var2.computeVisibleRect(var10);
    java.awt.event.ComponentListener[] var12 = var2.getComponentListeners();
    var2.setDebugGraphicsOptions(10);
    var2.setAlignmentY(0.5f);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var19.repaint(1L, (-1), (-1), 0, 100);
    boolean var26 = var19.isFocusTraversable();
    bierse.view.RunningMessagePanel var29 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var30 = var29.isMaximumSizeSet();
    boolean var31 = var29.isOpaque();
    java.awt.event.HierarchyListener[] var32 = var29.getHierarchyListeners();
    boolean var33 = var29.isValid();
    var2.add((java.awt.Component)var19, (java.lang.Object)var33, 0);
    var2.transferFocusUpCycle();
    bierse.view.RunningMessagePanel var39 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var40 = var39.getPreferredSize();
    boolean var43 = var39.contains(10, 1);
    java.awt.im.InputMethodRequests var44 = var39.getInputMethodRequests();
    java.awt.event.FocusListener[] var45 = var39.getFocusListeners();
    java.awt.Font var46 = var39.getFont();
    var39.enable();
    boolean var48 = var39.getIgnoreRepaint();
    boolean var49 = var39.requestFocusInWindow();
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var53 = var52.getPreferredSize();
    boolean var56 = var52.contains(10, 1);
    java.awt.im.InputMethodRequests var57 = var52.getInputMethodRequests();
    boolean var58 = var52.getInheritsPopupMenu();
    java.lang.String var59 = var52.toString();
    java.awt.Rectangle var60 = var52.bounds();
    bierse.view.RunningMessagePanel var63 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var64 = var63.getPreferredSize();
    boolean var67 = var63.contains(10, 1);
    java.awt.im.InputMethodRequests var68 = var63.getInputMethodRequests();
    boolean var69 = var63.getInheritsPopupMenu();
    java.lang.String var70 = var63.toString();
    java.awt.Rectangle var71 = var63.bounds();
    java.awt.Rectangle var72 = var52.getBounds(var71);
    var39.repaint(var72);
    var2.setNextFocusableComponent((java.awt.Component)var39);
    javax.swing.KeyStroke[] var75 = var2.getRegisteredKeyStrokes();
    var2.list();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var59,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var59.equals("bierse.view.RunningMessagePanel[,0,0,0var59,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var70,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var70.equals("bierse.view.RunningMessagePanel[,0,0,0var70,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test251() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test251");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    java.awt.Component var11 = var2.getComponentAt(0, 0);
    int var12 = var2.getDebugGraphicsOptions();
    java.awt.Graphics var13 = var2.getGraphics();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var15 = var2.getFocusTraversalKeys(13);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test252() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test252");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    var2.repaint((-1L), 1, (-1), 1, 24);
    java.awt.Container var14 = var2.getTopLevelAncestor();
    boolean var15 = var2.requestDefaultFocus();
    boolean var16 = var2.isPaintingTile();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=8,maximumSize=,minimumSize=,preferredSize=]", (-1.0f), 10.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test253() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test253");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    var2.firePropertyChange("hi!", ' ', ' ');
    javax.accessibility.AccessibleContext var11 = var2.getAccessibleContext();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    boolean var16 = var14.isOpaque();
    java.awt.event.HierarchyListener[] var17 = var14.getHierarchyListeners();
    boolean var18 = var14.isValid();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isMaximumSizeSet();
    var21.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var27 = var21.getTransferHandler();
    boolean var28 = var21.hasFocus();
    javax.swing.event.AncestorListener[] var29 = var21.getAncestorListeners();
    var2.add((java.awt.Component)var14, (java.lang.Object)var29);
    var14.requestFocus();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var35 = var34.isMaximumSizeSet();
    boolean var36 = var34.isOpaque();
    java.awt.event.HierarchyListener[] var37 = var34.getHierarchyListeners();
    int var38 = var34.getWidth();
    int var39 = var34.countComponents();
    java.awt.Point var41 = var34.getMousePosition(true);
    var34.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    var34.requestFocus();
    java.awt.Color var45 = var34.getForeground();
    var14.setForeground(var45);
    javax.swing.JRootPane var47 = var14.getRootPane();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);

  }

  public void test254() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test254");


    bierse.view.MyKeyMap var2 = new bierse.view.MyKeyMap("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", 12);
    java.lang.String var3 = var2.getText();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var3,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var3.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var3,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));

  }

  public void test255() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test255");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    var2.invalidate();
    java.awt.event.FocusListener[] var6 = var2.getFocusListeners();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var10 = var9.isMaximumSizeSet();
    var9.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var15 = var9.getTransferHandler();
    boolean var16 = var9.hasFocus();
    var9.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var19 = var9.getPreferredSize();
    java.awt.ComponentOrientation var20 = var9.getComponentOrientation();
    var9.transferFocus();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    var24.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var30 = var24.getTransferHandler();
    boolean var31 = var24.hasFocus();
    javax.swing.event.AncestorListener[] var32 = var24.getAncestorListeners();
    java.awt.Dimension var33 = var24.getMinimumSize();
    boolean var34 = var24.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    var37.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var47 = var37.getPreferredSize();
    java.awt.Dimension var48 = var24.getSize(var47);
    var9.setSize(var47);
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var53 = var52.getPreferredSize();
    boolean var56 = var52.contains(10, 1);
    java.awt.Insets var57 = var52.getInsets();
    javax.swing.JToolTip var58 = var52.createToolTip();
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var62 = var61.isMaximumSizeSet();
    var61.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var67 = var61.getTransferHandler();
    boolean var68 = var61.hasFocus();
    javax.swing.event.AncestorListener[] var69 = var61.getAncestorListeners();
    var61.enable(false);
    int var72 = var58.getComponentZOrder((java.awt.Component)var61);
    boolean var73 = var58.requestFocusInWindow();
    boolean var74 = var58.isOptimizedDrawingEnabled();
    var2.add((java.awt.Component)var9, (java.lang.Object)var58);
    boolean var76 = var58.requestFocusInWindow();
    var58.setVisible(true);
    boolean var79 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);

  }

  public void test256() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test256");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    java.awt.Component var30 = var11.locate(24, 1);
    var11.setVisible(true);
    java.awt.event.MouseMotionListener[] var33 = var11.getMouseMotionListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test257() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test257");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.revalidate();
    var2.invalidate();
    java.awt.Insets var7 = var2.insets();
    javax.swing.JRootPane var8 = var2.getRootPane();
    float var9 = var2.getAlignmentX();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var12.transferFocus();
    var12.show();
    float var15 = var12.getAlignmentX();
    int var16 = var2.getComponentZOrder((java.awt.Component)var12);
    var2.paintImmediately(13, 1, 10, 24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1));

  }

  public void test258() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test258");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    var2.invalidate();
    java.awt.event.FocusListener[] var6 = var2.getFocusListeners();
    var2.setAlignmentX((-1.0f));
    java.awt.ComponentOrientation var9 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var13 = var12.getPreferredSize();
    boolean var16 = var12.contains(10, 1);
    java.awt.event.HierarchyBoundsListener[] var17 = var12.getHierarchyBoundsListeners();
    var12.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (short)(-1), (short)100);
    var12.invalidate();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var26 = var25.getPreferredSize();
    boolean var27 = var25.isPreferredSizeSet();
    var25.enable();
    bierse.view.RunningMessagePanel var31 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var32 = var31.getPreferredSize();
    boolean var33 = var31.isPreferredSizeSet();
    var31.enable();
    var31.transferFocusBackward();
    java.awt.Dimension var36 = var31.size();
    boolean var37 = var31.isFocusable();
    var31.enableInputMethods(false);
    java.awt.Cursor var40 = var31.getCursor();
    var12.putClientProperty((java.lang.Object)var25, (java.lang.Object)var40);
    var25.show(false);
    boolean var44 = var2.isFocusCycleRoot((java.awt.Container)var25);
    int var45 = var2.getWidth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);

  }

  public void test259() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test259");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    var2.disable();
    var2.enable();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var10 = var9.isMaximumSizeSet();
    boolean var11 = var9.isOpaque();
    javax.swing.InputMap var12 = var9.getInputMap();
    java.beans.PropertyChangeListener[] var14 = var9.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var15 = var9.getComponentOrientation();
    java.awt.peer.ComponentPeer var16 = var9.getPeer();
    var9.transferFocusDownCycle();
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var21 = var20.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var24.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var31 = var24.location();
    java.awt.Component var32 = var20.findComponentAt(var31);
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var35.transferFocus();
    var35.show();
    bierse.view.RunningMessagePanel var40 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var41 = var40.getPreferredSize();
    boolean var44 = var40.contains(10, 1);
    java.awt.im.InputMethodRequests var45 = var40.getInputMethodRequests();
    java.awt.Font var46 = var40.getFont();
    var35.setFont(var46);
    var20.setFont(var46);
    var9.setFont(var46);
    var2.setFont(var46);
    int var51 = var2.getY();
    var2.setSize(10, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);

  }

  public void test260() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test260");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var24 = var23.isMaximumSizeSet();
    var23.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var29 = var23.getTransferHandler();
    boolean var30 = var23.hasFocus();
    var23.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var33 = var23.getPreferredSize();
    java.awt.ComponentOrientation var34 = var23.getComponentOrientation();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    javax.swing.event.AncestorListener[] var45 = var37.getAncestorListeners();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var49 = var48.isMaximumSizeSet();
    var48.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var54 = var48.getTransferHandler();
    boolean var55 = var48.hasFocus();
    var48.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var58 = var48.getPreferredSize();
    java.awt.ComponentOrientation var59 = var48.getComponentOrientation();
    var23.add((java.awt.Component)var37, (java.lang.Object)var48);
    bierse.view.RunningMessagePanel var63 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var64 = var63.getPreferredSize();
    java.awt.Dimension var65 = var63.getMaximumSize();
    var48.resize(var65);
    var15.setNextFocusableComponent((java.awt.Component)var48);
    java.awt.Component var70 = var15.locate(24, 996);
    boolean var71 = var15.isManagingFocus();
    var15.resetKeyboardActions();
    javax.swing.plaf.PanelUI var73 = var15.getUI();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test261() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test261");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var8 = var7.isMaximumSizeSet();
    boolean var9 = var7.isOpaque();
    java.awt.event.HierarchyListener[] var10 = var7.getHierarchyListeners();
    int var11 = var7.countComponents();
    java.awt.event.HierarchyBoundsListener[] var12 = var7.getHierarchyBoundsListeners();
    boolean var14 = var7.areFocusTraversalKeysSet(1);
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var18 = var17.getPreferredSize();
    javax.swing.JPopupMenu var19 = var17.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var23 = var22.getPreferredSize();
    javax.swing.JPopupMenu var24 = var22.getComponentPopupMenu();
    java.awt.Rectangle var25 = var22.bounds();
    var17.computeVisibleRect(var25);
    var7.setBounds(var25);
    var2.repaint(var25);
    java.awt.Component var31 = var2.getComponentAt(1, 100);
    int var32 = var2.getY();
    java.awt.Toolkit var33 = var2.getToolkit();
    java.awt.Container var34 = var2.getParent();
    int var35 = var2.getStringHeight();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var39 = var38.getPreferredSize();
    boolean var42 = var38.contains(10, 1);
    java.awt.im.InputMethodRequests var43 = var38.getInputMethodRequests();
    var38.revalidate();
    var38.firePropertyChange("hi!", (short)100, (short)0);
    java.awt.Component var51 = var38.getComponentAt(0, (-1));
    int var52 = var38.getY();
    var38.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", '#', '4');
    java.awt.Dimension var57 = var38.getMinimumSize();
    var2.setSize(var57);
    var2.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", 11, 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test262() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test262");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.beans.PropertyChangeListener[] var5 = var2.getPropertyChangeListeners();
    var2.setOpaque(true);
    java.awt.Insets var8 = var2.insets();
    boolean var9 = var2.isOptimizedDrawingEnabled();
    java.awt.event.ComponentListener[] var10 = var2.getComponentListeners();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var14 = var13.isMaximumSizeSet();
    boolean var15 = var13.isOpaque();
    java.beans.PropertyChangeListener[] var16 = var13.getPropertyChangeListeners();
    var13.setOpaque(true);
    java.awt.Insets var19 = var13.insets();
    boolean var20 = var13.isOptimizedDrawingEnabled();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var24 = var23.getPreferredSize();
    boolean var27 = var23.contains(10, 1);
    java.awt.im.InputMethodRequests var28 = var23.getInputMethodRequests();
    var23.repaint((-1L), 1, (-1), 1, 24);
    java.awt.Container var35 = var23.getTopLevelAncestor();
    java.awt.Container var36 = var23.getTopLevelAncestor();
    var23.paintImmediately((-1), 12, 0, 100);
    java.awt.Rectangle var42 = var23.getBounds();
    java.awt.Rectangle var43 = var13.getBounds(var42);
    java.awt.Rectangle var44 = var2.getBounds(var42);
    var2.updateUI();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test263() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test263");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    var2.revalidate();
    var2.firePropertyChange("hi!", (short)100, (short)0);
    java.awt.Component var15 = var2.getComponentAt(0, (-1));
    java.awt.Point var17 = var2.getMousePosition(false);
    java.awt.Dimension var18 = var2.getMaximumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test264() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test264");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    var2.setAlignmentX((-1.0f));
    java.awt.Point var9 = var2.getLocation();
    float var10 = var2.getAlignmentX();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.0f);

  }

  public void test265() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test265");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    var2.disable();
    var2.setFocusTraversalKeysEnabled(false);
    java.awt.Dimension var8 = var2.getMinimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test266() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test266");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    java.awt.peer.ComponentPeer var6 = var2.getPeer();
    var2.transferFocusDownCycle();
    var2.transferFocusUpCycle();
    boolean var9 = var2.isOpaque();
    var2.setFocusTraversalKeysEnabled(false);
    java.lang.String var12 = var2.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test267() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test267");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    var2.transferFocus();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var18 = var17.isMaximumSizeSet();
    var17.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var23 = var17.getTransferHandler();
    boolean var24 = var17.hasFocus();
    javax.swing.event.AncestorListener[] var25 = var17.getAncestorListeners();
    java.awt.Dimension var26 = var17.getMinimumSize();
    boolean var27 = var17.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var31 = var30.isMaximumSizeSet();
    var30.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var36 = var30.getTransferHandler();
    boolean var37 = var30.hasFocus();
    var30.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var40 = var30.getPreferredSize();
    java.awt.Dimension var41 = var17.getSize(var40);
    var2.setSize(var40);
    var2.nextFocus();
    boolean var44 = var2.isManagingFocus();
    var2.show(false);
    bierse.view.RunningMessagePanel var49 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var50 = var49.getPreferredSize();
    boolean var51 = var49.isPreferredSizeSet();
    bierse.view.RunningMessagePanel var54 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var55 = var54.isMaximumSizeSet();
    boolean var56 = var54.isOpaque();
    java.beans.PropertyChangeListener[] var57 = var54.getPropertyChangeListeners();
    var54.setOpaque(true);
    java.awt.Insets var60 = var54.insets();
    java.awt.Insets var61 = var49.getInsets(var60);
    var49.resetKeyboardActions();
    java.awt.im.InputContext var63 = var49.getInputContext();
    java.awt.Component var64 = var2.add((java.awt.Component)var49);
    java.awt.Toolkit var65 = var2.getToolkit();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", true, false);
    java.awt.event.MouseWheelListener[] var70 = var2.getMouseWheelListeners();
    boolean var71 = var2.isValid();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var72 = var2.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);

  }

  public void test268() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test268");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.setDoubleBuffered(false);
    java.awt.GraphicsConfiguration var7 = var2.getGraphicsConfiguration();
    java.awt.Component var10 = var2.locate((-1), (-1));
    java.awt.Font var11 = var2.getFont();
    java.awt.Dimension var12 = var2.getMaximumSize();
    var2.setFocusTraversalKeysEnabled(true);
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var18 = var17.isMaximumSizeSet();
    var17.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var23 = var17.getWidth();
    boolean var26 = var17.inside(24, 1);
    java.awt.image.VolatileImage var29 = var17.createVolatileImage(0, 1);
    java.lang.String var30 = var17.getUIClassID();
    java.awt.Toolkit var31 = var17.getToolkit();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var35 = var34.isMaximumSizeSet();
    boolean var36 = var34.isOpaque();
    java.awt.event.HierarchyListener[] var37 = var34.getHierarchyListeners();
    int var38 = var34.getWidth();
    int var39 = var34.countComponents();
    java.awt.Point var41 = var34.getMousePosition(true);
    var34.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var44 = var34.toString();
    java.awt.Font var45 = var34.getFont();
    javax.swing.plaf.PanelUI var46 = var34.getUI();
    java.awt.Dimension var47 = var34.getPreferredSize();
    var34.firePropertyChange("", (-1), 1);
    java.awt.Rectangle var52 = var34.getBounds();
    var17.computeVisibleRect(var52);
    var2.setBounds(var52);
    bierse.view.RunningMessagePanel var57 = new bierse.view.RunningMessagePanel("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", 24);
    var57.setFocusTraversalPolicyProvider(true);
    bierse.view.RunningMessagePanel var62 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var63 = var62.isMaximumSizeSet();
    var62.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var62.invalidate();
    java.awt.Dimension var69 = var62.getPreferredSize();
    bierse.view.RunningMessagePanel var72 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var72.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var79 = var72.location();
    java.awt.Point var80 = var62.getLocation(var79);
    var62.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", 1L, 0L);
    java.awt.Dimension var85 = var62.getSize();
    java.awt.Dimension var86 = var57.getSize(var85);
    java.awt.Dimension var87 = var2.getSize(var86);
    var2.setBounds(32767, 100, 14, 32767);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "PanelUI"+ "'", var30.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var44,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var44.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var44,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test269() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test269");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    boolean var29 = var2.requestFocus(false);
    var2.removeNotify();
    java.awt.ComponentOrientation var31 = var2.getComponentOrientation();
    int var32 = var2.getHeight();
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var36 = var35.isMaximumSizeSet();
    var35.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var41 = var35.getTransferHandler();
    boolean var42 = var35.hasFocus();
    javax.swing.event.AncestorListener[] var43 = var35.getAncestorListeners();
    java.awt.Dimension var44 = var35.getMinimumSize();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var49 = var48.getPreferredSize();
    java.awt.Dimension var50 = var48.getMaximumSize();
    var48.disable();
    var35.putClientProperty((java.lang.Object)100, (java.lang.Object)var48);
    int var53 = var35.getHeight();
    bierse.view.RunningMessagePanel var56 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var56.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var63 = var56.location();
    boolean var64 = var35.contains(var63);
    float var65 = var35.getAlignmentX();
    java.awt.Font var66 = var35.getFont();
    java.awt.FontMetrics var67 = var2.getFontMetrics(var66);
    var2.setAlignmentX(1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test270() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test270");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.revalidate();
    var2.transferFocus();
    var2.repaint(100L);
    boolean var9 = var2.isPreferredSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test271() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test271");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    var11.transferFocus();
    var11.setToolTipText("");
    var11.show();
    boolean var32 = var11.isMaximumSizeSet();
    java.awt.Dimension var33 = var11.getMinimumSize();
    java.awt.Dimension var34 = var11.getMinimumSize();
    java.awt.Dimension var35 = var11.getMinimumSize();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var37 = var11.getFocusTraversalKeys(15);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test272() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test272");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    java.awt.dnd.DropTarget var21 = var15.getDropTarget();
    java.awt.FocusTraversalPolicy var22 = var15.getFocusTraversalPolicy();
    var15.list();
    var15.setAlignmentX((-1.0f));
    java.awt.Rectangle var26 = var15.getBounds();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test273() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test273");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    javax.swing.JRootPane var13 = var2.getRootPane();
    var2.setRequestFocusEnabled(false);
    java.awt.Dimension var16 = var2.preferredSize();
    java.awt.Dimension var17 = var2.getPreferredSize();
    var2.addNotify();
    java.awt.event.MouseMotionListener[] var19 = var2.getMouseMotionListeners();
    javax.swing.plaf.PanelUI var20 = var2.getUI();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test274() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test274");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    var16.removeAll();
    var16.hide();
    boolean var42 = var16.isFocusTraversalPolicyProvider();
    int var43 = var16.countComponents();
    java.awt.Component var46 = var16.getComponentAt(996, 100);
    boolean var47 = var16.isForegroundSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);

  }

  public void test275() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test275");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    boolean var6 = var2.isValidateRoot();
    java.awt.event.MouseMotionListener[] var7 = var2.getMouseMotionListeners();
    var2.doLayout();
    int var9 = var2.getHeight();
    boolean var12 = var2.inside(0, 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test276() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test276");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    java.awt.Insets var40 = var16.getInsets();
    bierse.view.RunningMessagePanel var43 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var44 = var43.isMaximumSizeSet();
    boolean var45 = var43.isOpaque();
    java.awt.event.HierarchyListener[] var46 = var43.getHierarchyListeners();
    int var47 = var43.countComponents();
    java.awt.dnd.DropTarget var48 = var43.getDropTarget();
    var43.validate();
    java.awt.Component var52 = var43.findComponentAt(0, 12);
    var43.transferFocusDownCycle();
    var43.setInheritsPopupMenu(true);
    int var56 = var16.getComponentZOrder((java.awt.Component)var43);
    java.awt.Point var57 = var43.getLocation();
    java.awt.Component var58 = var43.getNextFocusableComponent();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);

  }

  public void test277() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test277");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    boolean var16 = var2.contains(1, 1);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var20 = var19.getPreferredSize();
    javax.swing.JPopupMenu var21 = var19.getComponentPopupMenu();
    java.awt.Rectangle var22 = var19.bounds();
    var19.setSize(0, 24);
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var29 = var28.isMaximumSizeSet();
    var28.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var34 = var28.getTransferHandler();
    boolean var35 = var28.hasFocus();
    javax.swing.event.AncestorListener[] var36 = var28.getAncestorListeners();
    java.awt.Dimension var37 = var28.getMinimumSize();
    bierse.view.RunningMessagePanel var41 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var42 = var41.getPreferredSize();
    java.awt.Dimension var43 = var41.getMaximumSize();
    var41.disable();
    var28.putClientProperty((java.lang.Object)100, (java.lang.Object)var41);
    javax.swing.InputVerifier var46 = var41.getInputVerifier();
    boolean var47 = var41.getInheritsPopupMenu();
    var41.setLocation(0, 100);
    boolean var51 = var41.isFocusTraversalPolicyProvider();
    var41.list();
    javax.swing.event.AncestorListener[] var53 = var41.getAncestorListeners();
    var41.repaint(100L);
    int var56 = var19.getComponentZOrder((java.awt.Component)var41);
    bierse.view.RunningMessagePanel var59 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var59.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var66 = var59.location();
    java.awt.Font var67 = var59.getFont();
    java.awt.FontMetrics var68 = var41.getFontMetrics(var67);
    java.awt.FontMetrics var69 = var2.getFontMetrics(var67);
    java.awt.event.MouseMotionListener[] var70 = var2.getMouseMotionListeners();
    int var71 = var2.getX();
    boolean var72 = var2.requestFocusInWindow();
    var2.repaint(996, 15, 11, 12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);

  }

  public void test278() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test278");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    java.lang.String var14 = var2.getName();
    var2.repaint();
    java.beans.PropertyChangeListener[] var16 = var2.getPropertyChangeListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test279() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test279");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    boolean var29 = var2.requestFocus(false);
    var2.removeNotify();
    java.awt.ComponentOrientation var31 = var2.getComponentOrientation();
    java.awt.event.InputMethodListener[] var32 = var2.getInputMethodListeners();
    boolean var33 = var2.isManagingFocus();
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var37 = var36.isMaximumSizeSet();
    var36.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var42 = var36.getTransferHandler();
    boolean var43 = var36.hasFocus();
    javax.swing.event.AncestorListener[] var44 = var36.getAncestorListeners();
    java.awt.Dimension var45 = var36.getMinimumSize();
    var36.setAlignmentX(10.0f);
    var36.removeAll();
    java.awt.Point var49 = var36.location();
    int var50 = var36.getX();
    var36.invalidate();
    bierse.view.RunningMessagePanel var54 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var55 = var54.isMaximumSizeSet();
    boolean var56 = var54.isOpaque();
    javax.swing.InputMap var57 = var54.getInputMap();
    java.lang.String var58 = var54.getName();
    var54.setFocusTraversalPolicyProvider(true);
    bierse.view.RunningMessagePanel var63 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var63.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var70 = var63.location();
    java.awt.Component var71 = var54.findComponentAt(var70);
    java.awt.LayoutManager var72 = var54.getLayout();
    bierse.view.RunningMessagePanel var75 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var76 = var75.isMaximumSizeSet();
    boolean var77 = var75.isOpaque();
    javax.swing.InputMap var78 = var75.getInputMap();
    java.beans.PropertyChangeListener[] var80 = var75.getPropertyChangeListeners("");
    java.lang.String var81 = var75.toString();
    boolean var82 = var54.isFocusCycleRoot((java.awt.Container)var75);
    boolean var83 = var54.getInheritsPopupMenu();
    java.awt.Container var84 = var54.getTopLevelAncestor();
    var2.putClientProperty((java.lang.Object)var36, (java.lang.Object)var54);
    var54.repaint((-1L), 12, 15, 14, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var81,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]"+ "'", var81.equals("bierse.view.RunningMessagePanel[,0,0,0var81,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);

  }

  public void test280() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test280");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var3 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var4 = var3.isMaximumSizeSet();
    boolean var5 = var3.isOpaque();
    java.beans.PropertyChangeListener[] var6 = var3.getPropertyChangeListeners();
    var3.setOpaque(true);
    var3.setRequestFocusEnabled(false);
    var0.insertElementAt((java.lang.Object)var3, 1);
    javax.swing.event.ListDataListener[] var13 = var0.getListDataListeners();
    var0.removeAllElements();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var18 = var17.isMaximumSizeSet();
    var17.layout();
    var17.disable();
    var17.invalidate();
    int var24 = var17.getBaseline(10, 10);
    int var25 = var17.getHeight();
    int var26 = var0.getIndexOf((java.lang.Object)var17);
    java.lang.Object var28 = var0.getElementAt(10);
    bierse.view.RunningMessagePanel var31 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var32 = var31.isMaximumSizeSet();
    var31.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var37 = var31.getTransferHandler();
    boolean var38 = var31.hasFocus();
    var31.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var41 = var31.getPreferredSize();
    javax.swing.JRootPane var42 = var31.getRootPane();
    var31.setRequestFocusEnabled(false);
    java.awt.Dimension var45 = var31.preferredSize();
    java.awt.Dimension var46 = var31.getPreferredSize();
    var31.addNotify();
    bierse.view.RunningMessagePanel var50 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var50.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var57 = var50.location();
    java.awt.Font var58 = var50.getFont();
    boolean var59 = var50.requestFocusInWindow();
    bierse.view.RunningMessagePanel var62 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var63 = var62.isMaximumSizeSet();
    var62.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var68 = var62.getTransferHandler();
    boolean var69 = var62.hasFocus();
    javax.swing.event.AncestorListener[] var70 = var62.getAncestorListeners();
    java.awt.Dimension var71 = var62.getMinimumSize();
    bierse.view.RunningMessagePanel var75 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var76 = var75.getPreferredSize();
    java.awt.Dimension var77 = var75.getMaximumSize();
    var75.disable();
    var62.putClientProperty((java.lang.Object)100, (java.lang.Object)var75);
    int var80 = var62.getHeight();
    bierse.view.RunningMessagePanel var83 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var83.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var90 = var83.location();
    boolean var91 = var62.contains(var90);
    java.awt.Component var92 = var50.getComponentAt(var90);
    var31.setLocation(var90);
    var0.setSelectedItem((java.lang.Object)var90);
    var0.removeAllElements();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.removeElementAt(1);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);

  }

  public void test281() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test281");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.revalidate();
    var2.invalidate();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var10 = var9.isMaximumSizeSet();
    var9.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var15 = var9.getTransferHandler();
    boolean var16 = var9.hasFocus();
    javax.swing.event.AncestorListener[] var17 = var9.getAncestorListeners();
    java.awt.Dimension var18 = var9.getMinimumSize();
    boolean var19 = var9.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var23 = var22.isMaximumSizeSet();
    var22.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var28 = var22.getTransferHandler();
    boolean var29 = var22.hasFocus();
    var22.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var32 = var22.getPreferredSize();
    java.awt.Dimension var33 = var9.getSize(var32);
    java.awt.event.ComponentListener[] var34 = var9.getComponentListeners();
    java.beans.PropertyChangeListener[] var35 = var9.getPropertyChangeListeners();
    java.awt.image.ColorModel var36 = var9.getColorModel();
    boolean var37 = var2.isAncestorOf((java.awt.Component)var9);
    java.awt.im.InputContext var38 = var9.getInputContext();
    var9.setBounds(1, 12, 12, 0);
    java.awt.Dimension var44 = var9.preferredSize();
    boolean var45 = var9.hasFocus();
    javax.swing.InputVerifier var46 = var9.getInputVerifier();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);

  }

  public void test282() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test282");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    var2.revalidate();
    var2.enable(true);
    boolean var11 = var2.getVerifyInputWhenFocusTarget();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    boolean var16 = var14.isOpaque();
    java.awt.event.HierarchyListener[] var17 = var14.getHierarchyListeners();
    int var18 = var14.getWidth();
    java.awt.Container var19 = var14.getTopLevelAncestor();
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var23 = var22.isMaximumSizeSet();
    var22.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var22.invalidate();
    java.awt.Dimension var29 = var22.getPreferredSize();
    int var30 = var22.getWidth();
    bierse.view.RunningMessagePanel var33 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var34 = var33.isMaximumSizeSet();
    var33.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var39 = var33.getTransferHandler();
    boolean var40 = var33.hasFocus();
    var33.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var43 = var33.getPreferredSize();
    java.awt.ComponentOrientation var44 = var33.getComponentOrientation();
    bierse.view.RunningMessagePanel var47 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var48 = var47.isMaximumSizeSet();
    var47.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var53 = var47.getTransferHandler();
    boolean var54 = var47.hasFocus();
    javax.swing.event.AncestorListener[] var55 = var47.getAncestorListeners();
    bierse.view.RunningMessagePanel var58 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var59 = var58.isMaximumSizeSet();
    var58.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var64 = var58.getTransferHandler();
    boolean var65 = var58.hasFocus();
    var58.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var68 = var58.getPreferredSize();
    java.awt.ComponentOrientation var69 = var58.getComponentOrientation();
    var33.add((java.awt.Component)var47, (java.lang.Object)var58);
    bierse.view.RunningMessagePanel var73 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var74 = var73.getPreferredSize();
    java.awt.Dimension var75 = var73.getMaximumSize();
    var22.add((java.awt.Component)var47, (java.lang.Object)var73, (-1));
    bierse.view.RunningMessagePanel var80 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var80.transferFocus();
    var80.show();
    float var83 = var80.getAlignmentX();
    boolean var86 = var80.contains(0, 24);
    java.awt.Color var87 = var80.getForeground();
    var22.setForeground(var87);
    var14.setBackground(var87);
    var2.setForeground(var87);
    var2.setName("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]");
    var2.repaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test283() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test283");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    java.awt.Container var7 = var2.getTopLevelAncestor();
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var11 = var10.isMaximumSizeSet();
    var10.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var10.invalidate();
    java.awt.Dimension var17 = var10.getPreferredSize();
    int var18 = var10.getWidth();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isMaximumSizeSet();
    var21.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var27 = var21.getTransferHandler();
    boolean var28 = var21.hasFocus();
    var21.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var31 = var21.getPreferredSize();
    java.awt.ComponentOrientation var32 = var21.getComponentOrientation();
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var36 = var35.isMaximumSizeSet();
    var35.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var41 = var35.getTransferHandler();
    boolean var42 = var35.hasFocus();
    javax.swing.event.AncestorListener[] var43 = var35.getAncestorListeners();
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var47 = var46.isMaximumSizeSet();
    var46.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var52 = var46.getTransferHandler();
    boolean var53 = var46.hasFocus();
    var46.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var56 = var46.getPreferredSize();
    java.awt.ComponentOrientation var57 = var46.getComponentOrientation();
    var21.add((java.awt.Component)var35, (java.lang.Object)var46);
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var62 = var61.getPreferredSize();
    java.awt.Dimension var63 = var61.getMaximumSize();
    var10.add((java.awt.Component)var35, (java.lang.Object)var61, (-1));
    bierse.view.RunningMessagePanel var68 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var68.transferFocus();
    var68.show();
    float var71 = var68.getAlignmentX();
    boolean var74 = var68.contains(0, 24);
    java.awt.Color var75 = var68.getForeground();
    var10.setForeground(var75);
    var2.setBackground(var75);
    boolean var78 = var2.isFocusOwner();
    javax.swing.border.Border var79 = var2.getBorder();
    java.awt.FocusTraversalPolicy var80 = var2.getFocusTraversalPolicy();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);

  }

  public void test284() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test284");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    boolean var5 = var2.isEnabled();
    var2.paintImmediately(1, 996, 100, 100);
    boolean var11 = var2.isFontSet();
    var2.paintImmediately((-1), 13, 24, 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test285() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test285");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    int var12 = var2.getDebugGraphicsOptions();
    java.awt.event.FocusListener[] var13 = var2.getFocusListeners();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var16.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var23 = var16.location();
    boolean var24 = var2.contains(var23);
    var2.setFocusable(true);
    boolean var27 = var2.isCursorSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test286() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test286");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    boolean var40 = var27.isDoubleBuffered();
    bierse.view.RunningMessagePanel var43 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var43.transferFocus();
    var43.show();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var49 = var48.getPreferredSize();
    boolean var52 = var48.contains(10, 1);
    java.awt.im.InputMethodRequests var53 = var48.getInputMethodRequests();
    java.awt.Font var54 = var48.getFont();
    var43.setFont(var54);
    var27.setFont(var54);
    var27.setDoubleBuffered(false);
    var27.setBounds(1, 0, 12, (-1));
    bierse.view.RunningMessagePanel var66 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var67 = var66.isMaximumSizeSet();
    var66.layout();
    var66.invalidate();
    java.awt.event.FocusListener[] var70 = var66.getFocusListeners();
    var66.setAlignmentX((-1.0f));
    java.awt.ComponentOrientation var73 = var66.getComponentOrientation();
    var27.setComponentOrientation(var73);
    var27.doLayout();
    var27.setVerifyInputWhenFocusTarget(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test287() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test287");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    boolean var40 = var2.isDoubleBuffered();
    int var41 = var2.getHeight();
    boolean var42 = var2.isCursorSet();
    var2.setEnabled(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test288() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test288");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    var2.revalidate();
    var2.firePropertyChange("hi!", (short)100, (short)0);
    java.awt.Component var15 = var2.getComponentAt(0, (-1));
    boolean var16 = var2.isDoubleBuffered();
    java.awt.Rectangle var17 = var2.getVisibleRect();
    java.awt.Dimension var18 = var2.size();
    var2.setName("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test289() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test289");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.Insets var7 = var2.getInsets();
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var11 = var10.isMaximumSizeSet();
    var10.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var16 = var10.getTransferHandler();
    boolean var17 = var10.hasFocus();
    var10.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var20 = var10.getPreferredSize();
    java.awt.ComponentOrientation var21 = var10.getComponentOrientation();
    var10.transferFocus();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    var25.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var31 = var25.getTransferHandler();
    boolean var32 = var25.hasFocus();
    javax.swing.event.AncestorListener[] var33 = var25.getAncestorListeners();
    java.awt.Dimension var34 = var25.getMinimumSize();
    boolean var35 = var25.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var39 = var38.isMaximumSizeSet();
    var38.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var44 = var38.getTransferHandler();
    boolean var45 = var38.hasFocus();
    var38.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var48 = var38.getPreferredSize();
    java.awt.Dimension var49 = var25.getSize(var48);
    var10.setSize(var48);
    var2.setSize(var48);
    int var52 = var2.getHeight();
    var2.disable();
    boolean var54 = var2.isPaintingForPrint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);

  }

  public void test290() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test290");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    var16.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var26 = var16.getPreferredSize();
    java.awt.Dimension var27 = var2.getSize(var26);
    var2.repaint(100L, 1, 0, 100, 24);
    var2.updateUI();
    javax.swing.TransferHandler var35 = var2.getTransferHandler();
    java.util.Locale var36 = var2.getLocale();
    java.awt.dnd.DropTarget var37 = var2.getDropTarget();
    boolean var40 = var2.contains((-1), 100);
    java.awt.Point var41 = var2.getMousePosition();
    boolean var42 = var2.isFocusTraversable();
    java.awt.Color var43 = var2.getBackground();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test291() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test291");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    int var12 = var2.getDebugGraphicsOptions();
    java.awt.event.FocusListener[] var13 = var2.getFocusListeners();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var16.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var23 = var16.location();
    boolean var24 = var2.contains(var23);
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var28 = var27.getPreferredSize();
    java.awt.Point var29 = var27.getMousePosition();
    var27.revalidate();
    java.awt.Dimension var31 = var27.getMaximumSize();
    var2.setPreferredSize(var31);
    java.awt.Toolkit var33 = var2.getToolkit();
    java.awt.Font var34 = var2.getFont();
    var2.transferFocusUpCycle();
    boolean var36 = var2.getVerifyInputWhenFocusTarget();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test292() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test292");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    boolean var5 = var2.isMaximumSizeSet();
    var2.setDoubleBuffered(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var9 = var2.areFocusTraversalKeysSet(32767);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test293() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test293");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    java.awt.Font var9 = var2.getFont();
    var2.enable();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var14 = var13.isMaximumSizeSet();
    var13.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var19 = var13.getTransferHandler();
    boolean var20 = var13.hasFocus();
    javax.swing.event.AncestorListener[] var21 = var13.getAncestorListeners();
    java.awt.Dimension var22 = var13.getMinimumSize();
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var27 = var26.getPreferredSize();
    java.awt.Dimension var28 = var26.getMaximumSize();
    var26.disable();
    var13.putClientProperty((java.lang.Object)100, (java.lang.Object)var26);
    java.awt.image.VolatileImage var33 = var26.createVolatileImage(100, 24);
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var37 = var36.getPreferredSize();
    var26.setMinimumSize(var37);
    boolean var39 = var26.isValid();
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var43 = var42.getPreferredSize();
    boolean var46 = var42.contains(10, 1);
    java.awt.im.InputMethodRequests var47 = var42.getInputMethodRequests();
    boolean var50 = var42.inside((-1), 100);
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var54 = var53.getPreferredSize();
    boolean var57 = var53.contains(10, 1);
    var53.setAlignmentX((-1.0f));
    java.awt.Point var60 = var53.getLocation();
    java.awt.Point var61 = var42.getLocation(var60);
    boolean var64 = var42.contains(100, 0);
    var2.add((java.awt.Component)var26, (java.lang.Object)var42);
    boolean var66 = var42.getVerifyInputWhenFocusTarget();
    boolean var67 = var42.getAutoscrolls();
    java.awt.image.VolatileImage var70 = var42.createVolatileImage(12, 12);
    var42.setFocusable(true);
    java.awt.Dimension var73 = var42.getPreferredSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test294() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test294");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var3 = var2.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var6 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var6.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var13 = var6.location();
    java.awt.Component var14 = var2.findComponentAt(var13);
    var2.setEnabled(true);
    var2.show();
    java.awt.Rectangle var18 = var2.getVisibleRect();
    java.awt.event.MouseMotionListener[] var19 = var2.getMouseMotionListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test295() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test295");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    boolean var16 = var14.isOpaque();
    javax.swing.InputMap var17 = var14.getInputMap();
    java.beans.PropertyChangeListener[] var19 = var14.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var20 = var14.getComponentOrientation();
    var2.applyComponentOrientation(var20);
    java.awt.Dimension var22 = var2.getMinimumSize();
    int var23 = var2.getY();
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var27 = var26.getPreferredSize();
    boolean var30 = var26.contains(10, 1);
    var26.setAlignmentX((-1.0f));
    java.awt.Point var33 = var26.getLocation();
    java.awt.Component var34 = var2.getComponentAt(var33);
    java.awt.Image var37 = var2.createImage((-1), 100);
    java.awt.Insets var38 = var2.insets();
    int var39 = var2.getHeight();
    boolean var41 = var2.requestFocus(true);
    javax.swing.JToolTip var42 = var2.createToolTip();
    var2.setAlignmentX(10.0f);
    int var45 = var2.getStringHeight();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 24);

  }

  public void test296() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test296");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    javax.swing.event.ListDataListener[] var1 = var0.getListDataListeners();
    bierse.view.RunningMessagePanel var4 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var4.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var11 = var4.location();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    var14.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var20 = var14.getTransferHandler();
    boolean var21 = var14.hasFocus();
    javax.swing.event.AncestorListener[] var22 = var14.getAncestorListeners();
    java.awt.Dimension var23 = var14.getMinimumSize();
    var4.resize(var23);
    int var25 = var0.getIndexOf((java.lang.Object)var23);
    java.lang.Object var27 = var0.getElementAt(996);
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var31 = var30.getPreferredSize();
    boolean var34 = var30.contains(10, 1);
    java.awt.im.InputMethodRequests var35 = var30.getInputMethodRequests();
    var30.revalidate();
    var30.firePropertyChange("hi!", (short)100, (short)0);
    java.awt.Component var43 = var30.getComponentAt(0, (-1));
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var47 = var46.isMaximumSizeSet();
    var46.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var52 = var46.getTransferHandler();
    boolean var53 = var46.hasFocus();
    javax.swing.event.AncestorListener[] var54 = var46.getAncestorListeners();
    java.awt.Dimension var55 = var46.getMinimumSize();
    bierse.view.RunningMessagePanel var59 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var60 = var59.getPreferredSize();
    java.awt.Dimension var61 = var59.getMaximumSize();
    var59.disable();
    var46.putClientProperty((java.lang.Object)100, (java.lang.Object)var59);
    javax.swing.InputVerifier var64 = var59.getInputVerifier();
    boolean var65 = var59.getInheritsPopupMenu();
    var59.setLocation(0, 100);
    boolean var69 = var59.isFocusTraversalPolicyProvider();
    var59.list();
    javax.swing.event.AncestorListener[] var71 = var59.getAncestorListeners();
    java.awt.Cursor var72 = var59.getCursor();
    var30.setCursor(var72);
    var30.transferFocusUpCycle();
    var30.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (short)(-1), (short)0);
    java.awt.Dimension var79 = var30.getSize();
    var0.insertElementAt((java.lang.Object)var79, 10);
    int var82 = var0.getSize();
    java.lang.Object var84 = var0.getElementAt(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test297() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test297");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    var2.enable();
    javax.accessibility.AccessibleContext var6 = var2.getAccessibleContext();
    var2.setOpaque(false);
    var2.setRequestFocusEnabled(true);
    var2.enable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test298() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test298");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.setDoubleBuffered(false);
    java.awt.GraphicsConfiguration var7 = var2.getGraphicsConfiguration();
    java.awt.Component var10 = var2.locate((-1), (-1));
    java.awt.Font var11 = var2.getFont();
    java.awt.Dimension var12 = var2.getMaximumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var15.setDebugGraphicsOptions(10);
    java.lang.Object var18 = var15.getTreeLock();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isMaximumSizeSet();
    var21.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var27 = var21.getTransferHandler();
    boolean var28 = var21.hasFocus();
    javax.swing.event.AncestorListener[] var29 = var21.getAncestorListeners();
    java.awt.Dimension var30 = var21.getMinimumSize();
    var15.setPreferredSize(var30);
    boolean var32 = var2.isFocusCycleRoot((java.awt.Container)var15);
    var15.setRequestFocusEnabled(false);
    boolean var35 = var15.isDisplayable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test299() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test299");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var17 = var11.getTransferHandler();
    boolean var18 = var11.requestFocusInWindow();
    var2.remove((java.awt.Component)var11);
    var2.setDoubleBuffered(true);
    java.util.Locale var22 = var2.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test300() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test300");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isLightweight();
    java.beans.VetoableChangeListener[] var4 = var2.getVetoableChangeListeners();
    float var5 = var2.getAlignmentY();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var9 = var8.isMaximumSizeSet();
    var8.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var8.invalidate();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var18 = var17.isMaximumSizeSet();
    var17.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    var25.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var31 = var25.getWidth();
    java.awt.Component[] var32 = var25.getComponents();
    var8.putClientProperty((java.lang.Object)var17, (java.lang.Object)var32);
    java.util.Locale var34 = var17.getLocale();
    javax.swing.JComponent.setDefaultLocale(var34);
    var2.setLocale(var34);
    var2.repaint();
    var2.enable();
    java.awt.event.ComponentListener[] var39 = var2.getComponentListeners();
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var43 = var42.isMaximumSizeSet();
    var42.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var48 = var42.getTransferHandler();
    boolean var49 = var42.hasFocus();
    var42.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var52 = var42.getPreferredSize();
    java.awt.ComponentOrientation var53 = var42.getComponentOrientation();
    java.lang.String var54 = var42.getName();
    java.awt.Font var55 = var42.getFont();
    javax.swing.ActionMap var56 = var42.getActionMap();
    java.awt.Insets var57 = var42.getInsets();
    java.awt.Rectangle var58 = var42.getBounds();
    java.awt.Rectangle var59 = var2.getBounds(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test301() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test301");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("", 12);
    java.util.Locale var3 = var2.getLocale();
    int var4 = var2.getHeight();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var8 = var7.isMaximumSizeSet();
    var7.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var13 = var7.getTransferHandler();
    boolean var14 = var7.hasFocus();
    javax.swing.event.AncestorListener[] var15 = var7.getAncestorListeners();
    java.awt.Dimension var16 = var7.getMinimumSize();
    boolean var17 = var7.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var21 = var20.isMaximumSizeSet();
    var20.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var26 = var20.getTransferHandler();
    boolean var27 = var20.hasFocus();
    var20.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var30 = var20.getPreferredSize();
    java.awt.Dimension var31 = var7.getSize(var30);
    java.awt.Dimension var32 = var2.getSize(var30);
    java.awt.GraphicsConfiguration var33 = var2.getGraphicsConfiguration();
    boolean var36 = var2.inside(15, 14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test302() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test302");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    boolean var5 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var2);
    java.beans.PropertyChangeListener[] var7 = var2.getPropertyChangeListeners("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]");
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var11 = var10.isMaximumSizeSet();
    var10.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var16 = var10.getTransferHandler();
    boolean var17 = var10.hasFocus();
    var10.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var20 = var10.getPreferredSize();
    java.awt.GraphicsConfiguration var21 = var10.getGraphicsConfiguration();
    var10.firePropertyChange("", 1L, 10L);
    java.awt.Component var28 = var10.findComponentAt((-1), 996);
    java.awt.Point var29 = var10.getLocation();
    boolean var30 = var2.contains(var29);
    java.awt.event.ContainerListener[] var31 = var2.getContainerListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test303() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test303");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("PanelUI", 11);

  }

  public void test304() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test304");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    javax.swing.event.ListDataListener[] var1 = var0.getListDataListeners();
    bierse.view.RunningMessagePanel var4 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var4.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var11 = var4.location();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    var14.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var20 = var14.getTransferHandler();
    boolean var21 = var14.hasFocus();
    javax.swing.event.AncestorListener[] var22 = var14.getAncestorListeners();
    java.awt.Dimension var23 = var14.getMinimumSize();
    var4.resize(var23);
    int var25 = var0.getIndexOf((java.lang.Object)var23);
    int var26 = var0.getSize();
    var0.removeAllElements();
    java.lang.Object var29 = var0.getElementAt(996);
    java.lang.Object var30 = var0.getSelectedItem();
    java.lang.Object var31 = var0.getSelectedItem();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);

  }

  public void test305() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test305");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    int var12 = var2.getDebugGraphicsOptions();
    java.awt.Component var15 = var2.locate(24, 100);
    bierse.view.RunningMessagePanel var18 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var19 = var18.getPreferredSize();
    boolean var22 = var18.contains(10, 1);
    java.awt.im.InputMethodRequests var23 = var18.getInputMethodRequests();
    java.awt.event.FocusListener[] var24 = var18.getFocusListeners();
    java.awt.Font var25 = var18.getFont();
    javax.swing.plaf.PanelUI var26 = var18.getUI();
    var2.setUI(var26);
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var31 = var30.isMaximumSizeSet();
    boolean var32 = var30.isOpaque();
    java.awt.event.HierarchyListener[] var33 = var30.getHierarchyListeners();
    int var34 = var30.getWidth();
    int var35 = var30.countComponents();
    java.awt.Point var37 = var30.getMousePosition(true);
    var30.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var40 = var30.toString();
    java.awt.Font var41 = var30.getFont();
    bierse.view.RunningMessagePanel var44 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var45 = var44.getPreferredSize();
    boolean var48 = var44.contains(10, 1);
    java.awt.im.InputMethodRequests var49 = var44.getInputMethodRequests();
    boolean var50 = var44.getInheritsPopupMenu();
    java.lang.String var51 = var44.toString();
    java.awt.Rectangle var52 = var44.bounds();
    var30.setBounds(var52);
    var2.paintImmediately(var52);
    var2.firePropertyChange("hi!", 10.0f, 0.0f);
    boolean var59 = var2.getIgnoreRepaint();
    var2.setFocusCycleRoot(true);
    java.awt.Container var62 = var2.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var40,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var40.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var40,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var51,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var51.equals("bierse.view.RunningMessagePanel[,0,0,0var51,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);

  }

  public void test306() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test306");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.Insets var7 = var2.getInsets();
    javax.swing.JToolTip var8 = var2.createToolTip();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var17 = var11.getTransferHandler();
    boolean var18 = var11.hasFocus();
    javax.swing.event.AncestorListener[] var19 = var11.getAncestorListeners();
    var11.enable(false);
    int var22 = var8.getComponentZOrder((java.awt.Component)var11);
    boolean var23 = var8.requestFocusInWindow();
    var8.transferFocus();
    int var25 = var8.getX();
    boolean var26 = var8.isEnabled();
    int var27 = var8.getWidth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);

  }

  public void test307() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test307");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    var2.invalidate();
    java.awt.event.FocusListener[] var6 = var2.getFocusListeners();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var10 = var9.isMaximumSizeSet();
    var9.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var15 = var9.getTransferHandler();
    boolean var16 = var9.hasFocus();
    var9.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var19 = var9.getPreferredSize();
    java.awt.ComponentOrientation var20 = var9.getComponentOrientation();
    var9.transferFocus();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    var24.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var30 = var24.getTransferHandler();
    boolean var31 = var24.hasFocus();
    javax.swing.event.AncestorListener[] var32 = var24.getAncestorListeners();
    java.awt.Dimension var33 = var24.getMinimumSize();
    boolean var34 = var24.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    var37.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var47 = var37.getPreferredSize();
    java.awt.Dimension var48 = var24.getSize(var47);
    var9.setSize(var47);
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var53 = var52.getPreferredSize();
    boolean var56 = var52.contains(10, 1);
    java.awt.Insets var57 = var52.getInsets();
    javax.swing.JToolTip var58 = var52.createToolTip();
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var62 = var61.isMaximumSizeSet();
    var61.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var67 = var61.getTransferHandler();
    boolean var68 = var61.hasFocus();
    javax.swing.event.AncestorListener[] var69 = var61.getAncestorListeners();
    var61.enable(false);
    int var72 = var58.getComponentZOrder((java.awt.Component)var61);
    boolean var73 = var58.requestFocusInWindow();
    boolean var74 = var58.isOptimizedDrawingEnabled();
    var2.add((java.awt.Component)var9, (java.lang.Object)var58);
    boolean var76 = var58.isShowing();
    java.awt.Dimension var77 = var58.getMaximumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test308() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test308");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var8 = var7.getPreferredSize();
    javax.swing.JPopupMenu var9 = var7.getComponentPopupMenu();
    java.awt.Rectangle var10 = var7.bounds();
    var2.computeVisibleRect(var10);
    java.awt.event.ComponentListener[] var12 = var2.getComponentListeners();
    java.awt.Insets var13 = var2.getInsets();
    java.awt.Graphics var14 = var2.getGraphics();
    float var15 = var2.getAlignmentX();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);

  }

  public void test309() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test309");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.setDoubleBuffered(false);
    java.awt.GraphicsConfiguration var7 = var2.getGraphicsConfiguration();
    java.awt.Component var10 = var2.locate((-1), (-1));
    java.awt.Font var11 = var2.getFont();
    java.awt.Dimension var12 = var2.getMaximumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var15.setDebugGraphicsOptions(10);
    java.lang.Object var18 = var15.getTreeLock();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isMaximumSizeSet();
    var21.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var27 = var21.getTransferHandler();
    boolean var28 = var21.hasFocus();
    javax.swing.event.AncestorListener[] var29 = var21.getAncestorListeners();
    java.awt.Dimension var30 = var21.getMinimumSize();
    var15.setPreferredSize(var30);
    boolean var32 = var2.isFocusCycleRoot((java.awt.Container)var15);
    boolean var33 = var15.getVerifyInputWhenFocusTarget();
    var15.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", '#', 'a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);

  }

  public void test310() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test310");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var8 = var7.isMaximumSizeSet();
    var7.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var13 = var7.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var17 = var16.getPreferredSize();
    boolean var18 = var16.isPreferredSizeSet();
    var16.enable();
    var16.transferFocusBackward();
    int var21 = var7.getComponentZOrder((java.awt.Component)var16);
    var7.setEnabled(false);
    java.awt.Graphics var24 = var7.getGraphics();
    var2.remove((java.awt.Component)var7);
    var2.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (short)10, (short)0);
    var2.setName("PanelUI");
    boolean var33 = var2.requestFocus(false);
    var2.disable();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    javax.swing.event.AncestorListener[] var45 = var37.getAncestorListeners();
    java.awt.Dimension var46 = var37.getMinimumSize();
    bierse.view.RunningMessagePanel var50 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var51 = var50.getPreferredSize();
    java.awt.Dimension var52 = var50.getMaximumSize();
    var50.disable();
    var37.putClientProperty((java.lang.Object)100, (java.lang.Object)var50);
    javax.swing.InputVerifier var55 = var50.getInputVerifier();
    bierse.view.RunningMessagePanel var59 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var60 = var59.isMaximumSizeSet();
    var59.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var59.invalidate();
    java.awt.Dimension var66 = var59.getPreferredSize();
    int var67 = var59.getWidth();
    java.awt.Component var68 = var50.add("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var59);
    var59.enable();
    java.awt.event.HierarchyListener[] var70 = var59.getHierarchyListeners();
    boolean var71 = var2.isAncestorOf((java.awt.Component)var59);
    var2.layout();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);

  }

  public void test311() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test311");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    var2.disable();
    boolean var6 = var2.isFocusOwner();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test312() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test312");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.beans.PropertyChangeListener[] var5 = var2.getPropertyChangeListeners();
    var2.setOpaque(true);
    java.awt.Insets var8 = var2.insets();
    boolean var9 = var2.isOptimizedDrawingEnabled();
    javax.swing.InputVerifier var10 = var2.getInputVerifier();
    var2.requestFocus();
    java.awt.Component var14 = var2.findComponentAt((-1), 100);
    var2.setMessage("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    float var17 = var2.getAlignmentY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);

  }

  public void test313() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test313");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    java.awt.Component var11 = var2.getComponentAt(0, 0);
    java.awt.Dimension var12 = var2.minimumSize();
    boolean var13 = var2.isFocusable();
    var2.disable();
    boolean var15 = var2.isOpaque();
    var2.setName("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);

  }

  public void test314() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test314");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    java.awt.Dimension var9 = var2.getPreferredSize();
    var2.show(false);
    boolean var12 = var2.isMaximumSizeSet();
    var2.reshape(100, 24, 10, 24);
    var2.move(10, 24);
    java.awt.Dimension var21 = var2.getMinimumSize();
    var2.setFocusTraversalPolicyProvider(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test315() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test315");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var9 = var2.location();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var13 = var12.isMaximumSizeSet();
    var12.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var18 = var12.getTransferHandler();
    boolean var19 = var12.hasFocus();
    javax.swing.event.AncestorListener[] var20 = var12.getAncestorListeners();
    java.awt.Dimension var21 = var12.getMinimumSize();
    var2.resize(var21);
    var2.repaint(100L, 1, (-1), 100, 24);
    java.awt.LayoutManager var29 = var2.getLayout();
    var2.repaint((-1), 0, 12, 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test316() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test316");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    int var7 = var2.countComponents();
    java.awt.Point var9 = var2.getMousePosition(true);
    var2.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var12 = var2.toString();
    java.awt.Font var13 = var2.getFont();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    java.awt.Dimension var25 = var16.getMinimumSize();
    boolean var26 = var2.isAncestorOf((java.awt.Component)var16);
    boolean var27 = var2.requestFocusInWindow();
    java.awt.Component[] var28 = var2.getComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var12,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var12.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var12,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test317() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test317");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var3 = var2.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var6 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var6.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var13 = var6.location();
    java.awt.Component var14 = var2.findComponentAt(var13);
    var2.firePropertyChange("hi!", '#', '#');
    javax.swing.JPopupMenu var19 = var2.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var23 = var22.isMaximumSizeSet();
    var22.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var28 = var22.getTransferHandler();
    boolean var29 = var22.hasFocus();
    javax.swing.event.AncestorListener[] var30 = var22.getAncestorListeners();
    java.awt.Dimension var31 = var22.getMinimumSize();
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var36 = var35.getPreferredSize();
    java.awt.Dimension var37 = var35.getMaximumSize();
    var35.disable();
    var22.putClientProperty((java.lang.Object)100, (java.lang.Object)var35);
    javax.swing.InputVerifier var40 = var35.getInputVerifier();
    boolean var41 = var35.getInheritsPopupMenu();
    var35.setLocation(0, 100);
    javax.swing.plaf.PanelUI var45 = var35.getUI();
    var2.setUI(var45);
    bierse.view.RunningMessagePanel var49 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var50 = var49.isMaximumSizeSet();
    var49.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var55 = var49.getTransferHandler();
    boolean var56 = var49.hasFocus();
    var49.setVerifyInputWhenFocusTarget(false);
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var62 = var61.isMaximumSizeSet();
    boolean var63 = var61.isOpaque();
    javax.swing.InputMap var64 = var61.getInputMap();
    java.beans.PropertyChangeListener[] var66 = var61.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var67 = var61.getComponentOrientation();
    var49.applyComponentOrientation(var67);
    java.awt.Dimension var69 = var49.getMinimumSize();
    int var70 = var49.getY();
    bierse.view.RunningMessagePanel var73 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var74 = var73.getPreferredSize();
    boolean var77 = var73.contains(10, 1);
    var73.setAlignmentX((-1.0f));
    java.awt.Point var80 = var73.getLocation();
    java.awt.Component var81 = var49.getComponentAt(var80);
    java.awt.Image var84 = var49.createImage((-1), 100);
    java.awt.Insets var85 = var49.insets();
    java.lang.Object var86 = var2.getClientProperty((java.lang.Object)var85);
    var2.setSize(0, 1);
    java.awt.Dimension var90 = var2.getMinimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test318() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test318");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.setDoubleBuffered(false);
    var2.setFocusTraversalKeysEnabled(false);
    java.awt.Point var10 = var2.getMousePosition(false);
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var14 = var13.isMaximumSizeSet();
    boolean var15 = var13.isOpaque();
    java.awt.event.HierarchyListener[] var16 = var13.getHierarchyListeners();
    int var17 = var13.getWidth();
    int var18 = var13.countComponents();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var22 = var21.getPreferredSize();
    boolean var25 = var21.contains(10, 1);
    java.awt.im.InputMethodRequests var26 = var21.getInputMethodRequests();
    boolean var29 = var21.inside((-1), 100);
    bierse.view.RunningMessagePanel var32 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var33 = var32.getPreferredSize();
    boolean var36 = var32.contains(10, 1);
    var32.setAlignmentX((-1.0f));
    java.awt.Point var39 = var32.getLocation();
    java.awt.Point var40 = var21.getLocation(var39);
    boolean var41 = var13.contains(var40);
    var2.setLocation(var40);
    var2.move(996, 10);
    java.awt.Rectangle var46 = var2.getVisibleRect();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test319() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test319");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.Insets var7 = var2.getInsets();
    javax.swing.JToolTip var8 = var2.createToolTip();
    var2.invalidate();
    java.awt.Dimension var10 = var2.getPreferredSize();
    boolean var11 = var2.isDoubleBuffered();
    java.awt.Rectangle var12 = var2.bounds();
    java.awt.Rectangle var13 = var2.bounds();
    boolean var14 = var2.isPaintingForPrint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test320() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test320");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    bierse.view.RunningMessagePanel var6 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var7 = var6.isMaximumSizeSet();
    boolean var8 = var6.isOpaque();
    java.awt.event.HierarchyListener[] var9 = var6.getHierarchyListeners();
    int var10 = var6.countComponents();
    java.awt.event.HierarchyBoundsListener[] var11 = var6.getHierarchyBoundsListeners();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    boolean var16 = var14.isOpaque();
    java.awt.event.HierarchyListener[] var17 = var14.getHierarchyListeners();
    int var18 = var14.getWidth();
    java.awt.event.ContainerListener[] var19 = var14.getContainerListeners();
    java.awt.Dimension var20 = var14.getMaximumSize();
    var6.setMinimumSize(var20);
    java.awt.Dimension var22 = var2.getSize(var20);
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var25.repaint(1L, (-1), (-1), 0, 100);
    boolean var32 = var25.isFocusTraversable();
    javax.swing.ActionMap var33 = var25.getActionMap();
    var2.setActionMap(var33);
    boolean var35 = var2.isMaximumSizeSet();
    var2.setEnabled(false);
    java.awt.Font var38 = var2.getFont();
    java.awt.Insets var39 = var2.getInsets();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test321() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test321");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    var2.enable();
    var2.transferFocusBackward();
    java.awt.Dimension var7 = var2.size();
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var11 = var10.isMaximumSizeSet();
    var10.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var16 = var10.isFocusTraversalPolicySet();
    java.awt.event.FocusListener[] var17 = var10.getFocusListeners();
    java.awt.Point var18 = var10.getMousePosition();
    var10.setFocusable(false);
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var24 = var23.isMaximumSizeSet();
    boolean var25 = var23.isOpaque();
    java.beans.PropertyChangeListener[] var26 = var23.getPropertyChangeListeners();
    var23.setOpaque(true);
    java.awt.Insets var29 = var23.insets();
    boolean var30 = var23.isOptimizedDrawingEnabled();
    var23.disable();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var34.repaint(1L, (-1), (-1), 0, 100);
    boolean var41 = var34.isFocusTraversable();
    javax.swing.ActionMap var42 = var34.getActionMap();
    var23.setActionMap(var42);
    boolean var44 = var23.isMinimumSizeSet();
    bierse.view.RunningMessagePanel var47 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var48 = var47.getPreferredSize();
    boolean var51 = var47.contains(10, 1);
    java.awt.im.InputMethodRequests var52 = var47.getInputMethodRequests();
    java.awt.Font var53 = var47.getFont();
    var10.add((java.awt.Component)var23, (java.lang.Object)var53, (-1));
    var2.setFont(var53);
    boolean var57 = var2.isFocusTraversalPolicySet();
    javax.swing.event.AncestorListener[] var58 = var2.getAncestorListeners();
    var2.removeNotify();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test322() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test322");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.beans.PropertyChangeListener[] var5 = var2.getPropertyChangeListeners();
    boolean var6 = var2.isFocusCycleRoot();
    boolean var7 = var2.getIgnoreRepaint();
    java.awt.Component[] var8 = var2.getComponents();
    var2.hide();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test323() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test323");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.setDoubleBuffered(false);
    java.awt.Toolkit var7 = var2.getToolkit();
    java.awt.Component.BaselineResizeBehavior var8 = var2.getBaselineResizeBehavior();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test324() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test324");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var8 = var2.isFocusTraversalPolicySet();
    var2.paintImmediately(10, 12, 10, 10);
    int var14 = var2.getX();
    java.awt.LayoutManager var15 = var2.getLayout();
    var2.enable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test325() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test325");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var10.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var17 = var10.location();
    boolean var18 = var2.contains(var17);
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 0.0f, (-1.0f));
    var2.firePropertyChange("PanelUI", (byte)0, (byte)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test326() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test326");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.Insets var7 = var2.getInsets();
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var11 = var10.isMaximumSizeSet();
    var10.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var16 = var10.getTransferHandler();
    boolean var17 = var10.hasFocus();
    var10.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var20 = var10.getPreferredSize();
    java.awt.ComponentOrientation var21 = var10.getComponentOrientation();
    var10.transferFocus();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    var25.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var31 = var25.getTransferHandler();
    boolean var32 = var25.hasFocus();
    javax.swing.event.AncestorListener[] var33 = var25.getAncestorListeners();
    java.awt.Dimension var34 = var25.getMinimumSize();
    boolean var35 = var25.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var39 = var38.isMaximumSizeSet();
    var38.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var44 = var38.getTransferHandler();
    boolean var45 = var38.hasFocus();
    var38.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var48 = var38.getPreferredSize();
    java.awt.Dimension var49 = var25.getSize(var48);
    var10.setSize(var48);
    var2.setSize(var48);
    bierse.view.RunningMessagePanel var55 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    javax.swing.InputVerifier var56 = var55.getInputVerifier();
    var55.removeAll();
    boolean var58 = var55.getFocusTraversalKeysEnabled();
    java.awt.Dimension var59 = var55.preferredSize();
    java.awt.Component var60 = var2.add("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var55);
    var55.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", (short)10, (short)10);
    var55.setAlignmentX((-1.0f));
    var55.paintImmediately(10, 10, 1, 13);
    boolean var72 = var55.getAutoscrolls();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);

  }

  public void test327() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test327");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var3 = var2.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var6 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var6.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var13 = var6.location();
    java.awt.Component var14 = var2.findComponentAt(var13);
    var2.firePropertyChange("hi!", '#', '#');
    javax.swing.JPopupMenu var19 = var2.getComponentPopupMenu();
    java.awt.event.FocusListener[] var20 = var2.getFocusListeners();
    javax.swing.InputMap var21 = var2.getInputMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test328() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test328");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    java.awt.Component[] var9 = var2.getComponents();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var13 = var12.isMaximumSizeSet();
    var12.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var18 = var12.getTransferHandler();
    boolean var19 = var12.hasFocus();
    var12.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var22 = var12.getPreferredSize();
    var2.setMaximumSize(var22);
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var27 = var26.isMaximumSizeSet();
    boolean var28 = var26.isOpaque();
    java.awt.event.HierarchyListener[] var29 = var26.getHierarchyListeners();
    java.awt.peer.ComponentPeer var30 = var26.getPeer();
    var26.transferFocusDownCycle();
    var26.transferFocusUpCycle();
    java.awt.Dimension var33 = var26.minimumSize();
    var2.setSize(var33);
    boolean var35 = var2.isFocusTraversalPolicySet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test329() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test329");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    java.awt.Component var11 = var2.getComponentAt(0, 0);
    java.awt.Dimension var12 = var2.minimumSize();
    boolean var13 = var2.isFocusable();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var17 = var16.getPreferredSize();
    javax.swing.JPopupMenu var18 = var16.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var22 = var21.getPreferredSize();
    javax.swing.JPopupMenu var23 = var21.getComponentPopupMenu();
    java.awt.Rectangle var24 = var21.bounds();
    var16.computeVisibleRect(var24);
    boolean var26 = var16.isManagingFocus();
    int var27 = var16.getHeight();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var31 = var30.isMaximumSizeSet();
    var30.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var36 = var30.getTransferHandler();
    boolean var37 = var30.hasFocus();
    javax.swing.event.AncestorListener[] var38 = var30.getAncestorListeners();
    java.awt.Dimension var39 = var30.getMinimumSize();
    boolean var40 = var30.isFocusTraversalPolicySet();
    var2.add((java.awt.Component)var16, (java.lang.Object)var30);
    bierse.view.RunningMessagePanel var44 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var45 = var44.isMaximumSizeSet();
    boolean var46 = var44.isOpaque();
    java.awt.event.HierarchyListener[] var47 = var44.getHierarchyListeners();
    int var48 = var44.countComponents();
    var44.setName("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var54 = var53.isLightweight();
    java.beans.VetoableChangeListener[] var55 = var53.getVetoableChangeListeners();
    float var56 = var53.getAlignmentY();
    bierse.view.RunningMessagePanel var59 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var60 = var59.isMaximumSizeSet();
    var59.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var59.invalidate();
    bierse.view.RunningMessagePanel var68 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var69 = var68.isMaximumSizeSet();
    var68.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var76 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var77 = var76.isMaximumSizeSet();
    var76.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var82 = var76.getWidth();
    java.awt.Component[] var83 = var76.getComponents();
    var59.putClientProperty((java.lang.Object)var68, (java.lang.Object)var83);
    java.util.Locale var85 = var68.getLocale();
    javax.swing.JComponent.setDefaultLocale(var85);
    var53.setLocale(var85);
    var44.setLocale(var85);
    var16.setLocale(var85);
    boolean var90 = var16.requestFocusInWindow();
    javax.swing.ActionMap var91 = var16.getActionMap();
    int var92 = var16.getWidth();
    var16.grabFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 0);

  }

  public void test330() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test330");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    java.awt.Image var11 = var2.createImage(24, 24);
    boolean var12 = var2.getInheritsPopupMenu();
    boolean var13 = var2.isBackgroundSet();
    boolean var14 = var2.isValidateRoot();
    var2.transferFocus();
    java.awt.Dimension var16 = var2.getPreferredSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test331() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test331");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    var15.setEnabled(false);
    boolean var22 = var15.isMinimumSizeSet();
    javax.swing.KeyStroke[] var23 = var15.getRegisteredKeyStrokes();
    var15.firePropertyChange("", 10.0d, 10.0d);
    java.awt.Point var28 = var15.getMousePosition();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test332() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test332");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    var2.disable();
    var2.setEnabled(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test333() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test333");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    javax.accessibility.AccessibleContext var11 = var2.getAccessibleContext();
    var2.setOpaque(false);
    java.lang.Object var14 = var2.getTreeLock();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var17.transferFocus();
    var17.show();
    boolean var20 = var17.isMaximumSizeSet();
    var17.removeNotify();
    boolean var22 = var17.isShowing();
    java.awt.Color var23 = var17.getForeground();
    var2.setBackground(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test334() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test334");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    java.lang.String var14 = var2.getName();
    java.awt.Font var15 = var2.getFont();
    javax.swing.ActionMap var16 = var2.getActionMap();
    java.awt.Component.BaselineResizeBehavior var17 = var2.getBaselineResizeBehavior();
    var2.transferFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test335() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test335");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    var2.setAlignmentY(10.0f);
    java.awt.event.ComponentListener[] var16 = var2.getComponentListeners();
    var2.repaint((-1L), 12, 24, 100, 13);
    float var23 = var2.getAlignmentY();
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var27 = var26.isMaximumSizeSet();
    var26.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var32 = var26.getTransferHandler();
    boolean var33 = var26.hasFocus();
    var26.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var36 = var26.getPreferredSize();
    java.awt.ComponentOrientation var37 = var26.getComponentOrientation();
    bierse.view.RunningMessagePanel var40 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var41 = var40.isMaximumSizeSet();
    var40.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var46 = var40.getTransferHandler();
    boolean var47 = var40.hasFocus();
    javax.swing.event.AncestorListener[] var48 = var40.getAncestorListeners();
    bierse.view.RunningMessagePanel var51 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var52 = var51.isMaximumSizeSet();
    var51.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var57 = var51.getTransferHandler();
    boolean var58 = var51.hasFocus();
    var51.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var61 = var51.getPreferredSize();
    java.awt.ComponentOrientation var62 = var51.getComponentOrientation();
    var26.add((java.awt.Component)var40, (java.lang.Object)var51);
    bierse.view.RunningMessagePanel var66 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var67 = var66.getPreferredSize();
    java.awt.Dimension var68 = var66.getMaximumSize();
    var51.resize(var68);
    int var72 = var51.getBaseline(1, 996);
    bierse.view.RunningMessagePanel var75 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var75.transferFocus();
    var75.show();
    boolean var78 = var75.isMaximumSizeSet();
    java.awt.Dimension var79 = var75.preferredSize();
    java.awt.Color var80 = var75.getBackground();
    var51.setForeground(var80);
    java.awt.Dimension var82 = var51.size();
    var2.setMaximumSize(var82);
    var2.enable();
    boolean var85 = var2.isShowing();
    java.lang.String var86 = var2.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);

  }

  public void test336() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test336");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    boolean var10 = var2.inside((-1), 100);
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var14 = var13.getPreferredSize();
    boolean var17 = var13.contains(10, 1);
    var13.setAlignmentX((-1.0f));
    java.awt.Point var20 = var13.getLocation();
    java.awt.Point var21 = var2.getLocation(var20);
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    boolean var26 = var24.isOpaque();
    java.awt.event.HierarchyListener[] var27 = var24.getHierarchyListeners();
    int var28 = var24.getWidth();
    int var29 = var24.countComponents();
    java.awt.Point var31 = var24.getMousePosition(true);
    var24.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var34 = var24.toString();
    java.awt.Font var35 = var24.getFont();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var39 = var38.getPreferredSize();
    boolean var42 = var38.contains(10, 1);
    java.awt.im.InputMethodRequests var43 = var38.getInputMethodRequests();
    boolean var44 = var38.getInheritsPopupMenu();
    java.lang.String var45 = var38.toString();
    java.awt.Rectangle var46 = var38.bounds();
    var24.setBounds(var46);
    java.awt.Rectangle var48 = var2.getBounds(var46);
    bierse.view.RunningMessagePanel var51 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var52 = var51.isMaximumSizeSet();
    boolean var53 = var51.isOpaque();
    java.awt.event.HierarchyListener[] var54 = var51.getHierarchyListeners();
    int var55 = var51.getWidth();
    java.awt.event.ContainerListener[] var56 = var51.getContainerListeners();
    java.awt.Dimension var57 = var51.getMaximumSize();
    boolean var58 = var51.isRequestFocusEnabled();
    var51.transferFocus();
    bierse.view.RunningMessagePanel var62 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var63 = var62.getPreferredSize();
    java.awt.Point var64 = var62.getMousePosition();
    var62.setDoubleBuffered(false);
    java.awt.GraphicsConfiguration var67 = var62.getGraphicsConfiguration();
    java.awt.Component var70 = var62.locate((-1), (-1));
    java.awt.Font var71 = var62.getFont();
    java.awt.FontMetrics var72 = var51.getFontMetrics(var71);
    var2.setFont(var71);
    java.awt.Component.BaselineResizeBehavior var74 = var2.getBaselineResizeBehavior();
    javax.swing.JToolTip var75 = var2.createToolTip();
    var2.setFocusTraversalKeysEnabled(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var34,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var34.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var34,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var45,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var45.equals("bierse.view.RunningMessagePanel[,0,0,0var45,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test337() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test337");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    java.awt.Image var11 = var2.createImage(24, 24);
    boolean var12 = var2.getInheritsPopupMenu();
    java.awt.image.ColorModel var13 = var2.getColorModel();
    var2.firePropertyChange("", 1L, 0L);
    java.awt.FocusTraversalPolicy var18 = var2.getFocusTraversalPolicy();
    int var19 = var2.countComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);

  }

  public void test338() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test338");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    int var12 = var2.getDebugGraphicsOptions();
    java.awt.Component var15 = var2.locate(24, 100);
    bierse.view.RunningMessagePanel var18 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var19 = var18.getPreferredSize();
    boolean var22 = var18.contains(10, 1);
    java.awt.im.InputMethodRequests var23 = var18.getInputMethodRequests();
    java.awt.event.FocusListener[] var24 = var18.getFocusListeners();
    java.awt.Font var25 = var18.getFont();
    javax.swing.plaf.PanelUI var26 = var18.getUI();
    var2.setUI(var26);
    java.awt.Dimension var28 = var2.getSize();
    var2.setAlignmentX(0.0f);
    boolean var31 = var2.requestFocusInWindow();
    var2.setIgnoreRepaint(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test339() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test339");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    boolean var16 = var2.contains(1, 1);
    javax.swing.border.Border var17 = var2.getBorder();
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var21 = var20.getPreferredSize();
    boolean var24 = var20.contains(10, 1);
    java.awt.im.InputMethodRequests var25 = var20.getInputMethodRequests();
    var20.revalidate();
    var20.firePropertyChange("hi!", (short)100, (short)0);
    java.awt.Component var33 = var20.getComponentAt(0, (-1));
    var20.setRequestFocusEnabled(false);
    java.awt.Dimension var36 = var20.getSize();
    java.awt.Component var37 = var2.add((java.awt.Component)var20);
    var2.firePropertyChange("hi!", (-1L), (-1L));
    boolean var42 = var2.requestFocusInWindow();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test340() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test340");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    java.awt.Font var9 = var2.getFont();
    var2.enable();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var14 = var13.isMaximumSizeSet();
    var13.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var19 = var13.getTransferHandler();
    boolean var20 = var13.hasFocus();
    javax.swing.event.AncestorListener[] var21 = var13.getAncestorListeners();
    java.awt.Dimension var22 = var13.getMinimumSize();
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var27 = var26.getPreferredSize();
    java.awt.Dimension var28 = var26.getMaximumSize();
    var26.disable();
    var13.putClientProperty((java.lang.Object)100, (java.lang.Object)var26);
    java.awt.image.VolatileImage var33 = var26.createVolatileImage(100, 24);
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var37 = var36.getPreferredSize();
    var26.setMinimumSize(var37);
    boolean var39 = var26.isValid();
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var43 = var42.getPreferredSize();
    boolean var46 = var42.contains(10, 1);
    java.awt.im.InputMethodRequests var47 = var42.getInputMethodRequests();
    boolean var50 = var42.inside((-1), 100);
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var54 = var53.getPreferredSize();
    boolean var57 = var53.contains(10, 1);
    var53.setAlignmentX((-1.0f));
    java.awt.Point var60 = var53.getLocation();
    java.awt.Point var61 = var42.getLocation(var60);
    boolean var64 = var42.contains(100, 0);
    var2.add((java.awt.Component)var26, (java.lang.Object)var42);
    boolean var66 = var26.isPaintingTile();
    java.awt.Container var67 = var26.getTopLevelAncestor();
    java.awt.dnd.DropTarget var68 = var26.getDropTarget();
    var26.setLocation(32767, 12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);

  }

  public void test341() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test341");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.setDoubleBuffered(false);
    java.awt.Dimension var7 = var2.minimumSize();
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var11 = var10.isMaximumSizeSet();
    boolean var12 = var10.isOpaque();
    java.awt.event.HierarchyListener[] var13 = var10.getHierarchyListeners();
    int var14 = var10.countComponents();
    java.awt.event.HierarchyBoundsListener[] var15 = var10.getHierarchyBoundsListeners();
    bierse.view.RunningMessagePanel var18 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var19 = var18.isMaximumSizeSet();
    boolean var20 = var18.isOpaque();
    java.awt.event.HierarchyListener[] var21 = var18.getHierarchyListeners();
    int var22 = var18.getWidth();
    java.awt.event.ContainerListener[] var23 = var18.getContainerListeners();
    java.awt.Dimension var24 = var18.getMaximumSize();
    var10.setMinimumSize(var24);
    var10.revalidate();
    int var27 = var10.countComponents();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var31 = var30.getPreferredSize();
    java.awt.Dimension var32 = var30.getMaximumSize();
    java.awt.Insets var33 = var30.getInsets();
    java.beans.PropertyChangeListener[] var35 = var30.getPropertyChangeListeners("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    var2.putClientProperty((java.lang.Object)var10, (java.lang.Object)"bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    var2.reshape(10, 11, 996, (-1));
    bierse.view.RunningMessagePanel var44 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var44.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var51 = var44.location();
    bierse.view.RunningMessagePanel var54 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var55 = var54.isMaximumSizeSet();
    var54.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var60 = var54.getTransferHandler();
    boolean var61 = var54.hasFocus();
    javax.swing.event.AncestorListener[] var62 = var54.getAncestorListeners();
    java.awt.Dimension var63 = var54.getMinimumSize();
    var44.resize(var63);
    var44.repaint(100L, 1, (-1), 100, 24);
    java.awt.event.HierarchyBoundsListener[] var71 = var44.getHierarchyBoundsListeners();
    int var74 = var44.getBaseline(24, 1);
    var44.setSize(24, 0);
    var2.setNextFocusableComponent((java.awt.Component)var44);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var81 = var2.getBaseline(13, (-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == (-1));

  }

  public void test342() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test342");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    boolean var40 = var16.isVisible();
    int var41 = var16.getX();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var44 = var16.getBaseline((-1), 24);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);

  }

  public void test343() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test343");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    java.awt.Font var9 = var2.getFont();
    java.beans.PropertyChangeListener[] var11 = var2.getPropertyChangeListeners("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    boolean var12 = var2.isValidateRoot();
    var2.transferFocusUpCycle();
    boolean var14 = var2.getFocusTraversalKeysEnabled();
    var2.repaint(14, 0, 10, 0);
    boolean var20 = var2.isBackgroundSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);

  }

  public void test344() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test344");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.revalidate();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var9 = var8.isMaximumSizeSet();
    var8.layout();
    var8.invalidate();
    var2.setNextFocusableComponent((java.awt.Component)var8);
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    boolean var19 = var15.contains(10, 1);
    java.awt.Insets var20 = var15.getInsets();
    javax.swing.JToolTip var21 = var15.createToolTip();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    var24.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var30 = var24.getTransferHandler();
    boolean var31 = var24.hasFocus();
    var24.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var34 = var24.getPreferredSize();
    java.awt.ComponentOrientation var35 = var24.getComponentOrientation();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var39 = var38.isMaximumSizeSet();
    var38.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var44 = var38.getTransferHandler();
    boolean var45 = var38.hasFocus();
    javax.swing.event.AncestorListener[] var46 = var38.getAncestorListeners();
    bierse.view.RunningMessagePanel var49 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var50 = var49.isMaximumSizeSet();
    var49.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var55 = var49.getTransferHandler();
    boolean var56 = var49.hasFocus();
    var49.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var59 = var49.getPreferredSize();
    java.awt.ComponentOrientation var60 = var49.getComponentOrientation();
    var24.add((java.awt.Component)var38, (java.lang.Object)var49);
    bierse.view.RunningMessagePanel var64 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var65 = var64.getPreferredSize();
    java.awt.Dimension var66 = var64.getMaximumSize();
    var49.resize(var66);
    var21.setPreferredSize(var66);
    java.awt.Dimension var69 = var2.getSize(var66);
    boolean var70 = var2.getVerifyInputWhenFocusTarget();
    boolean var71 = var2.isOptimizedDrawingEnabled();
    boolean var72 = var2.isPaintingForPrint();
    var2.validate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);

  }

  public void test345() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test345");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    java.awt.image.VolatileImage var22 = var15.createVolatileImage(100, 24);
    boolean var23 = var15.isPreferredSizeSet();
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var27 = var26.isMaximumSizeSet();
    boolean var28 = var26.isOpaque();
    java.awt.event.HierarchyListener[] var29 = var26.getHierarchyListeners();
    int var30 = var26.getWidth();
    int var31 = var26.countComponents();
    java.awt.Point var33 = var26.getMousePosition(true);
    var26.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var36 = var26.toString();
    java.awt.Font var37 = var26.getFont();
    javax.swing.plaf.PanelUI var38 = var26.getUI();
    float var39 = var26.getAlignmentY();
    java.awt.Point var40 = var26.getLocation();
    var15.setLocation(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var36,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var36.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var36,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test346() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test346");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.beans.PropertyChangeListener[] var5 = var2.getPropertyChangeListeners();
    var2.setOpaque(true);
    java.awt.Insets var8 = var2.insets();
    boolean var9 = var2.isOptimizedDrawingEnabled();
    java.awt.event.ComponentListener[] var10 = var2.getComponentListeners();
    boolean var13 = var2.contains(996, 0);
    java.awt.Dimension var14 = var2.getMaximumSize();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var18 = var17.getPreferredSize();
    java.awt.Point var19 = var17.getMousePosition();
    var17.revalidate();
    var17.invalidate();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    var24.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var30 = var24.getTransferHandler();
    boolean var31 = var24.hasFocus();
    javax.swing.event.AncestorListener[] var32 = var24.getAncestorListeners();
    java.awt.Dimension var33 = var24.getMinimumSize();
    boolean var34 = var24.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    var37.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var47 = var37.getPreferredSize();
    java.awt.Dimension var48 = var24.getSize(var47);
    java.awt.event.ComponentListener[] var49 = var24.getComponentListeners();
    java.beans.PropertyChangeListener[] var50 = var24.getPropertyChangeListeners();
    java.awt.image.ColorModel var51 = var24.getColorModel();
    boolean var52 = var17.isAncestorOf((java.awt.Component)var24);
    java.awt.Component var53 = var2.add((java.awt.Component)var24);
    java.awt.dnd.DropTarget var54 = var53.getDropTarget();
    java.awt.Color var55 = var53.getBackground();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test347() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test347");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var3 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var4 = var3.isMaximumSizeSet();
    var3.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var9 = var3.getTransferHandler();
    boolean var10 = var3.hasFocus();
    javax.swing.event.AncestorListener[] var11 = var3.getAncestorListeners();
    java.awt.Dimension var12 = var3.getMinimumSize();
    boolean var13 = var3.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    var16.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var26 = var16.getPreferredSize();
    java.awt.Dimension var27 = var3.getSize(var26);
    int var28 = var0.getIndexOf((java.lang.Object)var3);
    var0.removeAllElements();
    bierse.view.RunningMessagePanel var32 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var33 = var32.isMaximumSizeSet();
    boolean var34 = var32.isOpaque();
    java.beans.PropertyChangeListener[] var35 = var32.getPropertyChangeListeners();
    boolean var36 = var32.isFocusCycleRoot();
    boolean var39 = var32.inside((-1), 996);
    var0.setSelectedItem((java.lang.Object)996);
    javax.swing.event.ListDataListener[] var41 = var0.getListDataListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test348() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test348");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    boolean var21 = var15.isValidateRoot();
    java.awt.Insets var22 = var15.getInsets();
    var15.list();
    java.awt.Insets var24 = var15.getInsets();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test349() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test349");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.event.HierarchyBoundsListener[] var7 = var2.getHierarchyBoundsListeners();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (short)(-1), (short)100);
    boolean var12 = var2.requestDefaultFocus();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var15.transferFocus();
    var15.show();
    float var18 = var15.getAlignmentX();
    var15.repaint(0L, 10, 0, 10, (-1));
    boolean var25 = var15.isEnabled();
    java.lang.Object var26 = var15.getTreeLock();
    var15.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (byte)100, (byte)100);
    javax.swing.JPopupMenu var31 = var15.getComponentPopupMenu();
    java.awt.ComponentOrientation var32 = var15.getComponentOrientation();
    var2.applyComponentOrientation(var32);
    javax.swing.border.Border var34 = var2.getBorder();
    var2.paintImmediately(100, (-1), 100, 32767);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);

  }

  public void test350() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test350");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    int var20 = var2.getHeight();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var23.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var30 = var23.location();
    boolean var31 = var2.contains(var30);
    float var32 = var2.getAlignmentX();
    java.awt.Font var33 = var2.getFont();
    var2.setMessage("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=8,maximumSize=,minimumSize=,preferredSize=]");
    java.awt.Container var36 = var2.getTopLevelAncestor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);

  }

  public void test351() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test351");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    java.awt.Image var11 = var2.createImage(24, 24);
    boolean var12 = var2.getInheritsPopupMenu();
    java.awt.image.ColorModel var13 = var2.getColorModel();
    var2.firePropertyChange("PanelUI", 0.0d, (-1.0d));
    java.awt.Color var18 = var2.getBackground();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test352() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test352");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var3 = var2.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var6 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var6.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var13 = var6.location();
    java.awt.Component var14 = var2.findComponentAt(var13);
    var2.firePropertyChange("hi!", '#', '#');
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var22 = var21.getPreferredSize();
    boolean var25 = var21.contains(10, 1);
    java.awt.im.InputMethodRequests var26 = var21.getInputMethodRequests();
    var21.revalidate();
    var21.firePropertyChange("hi!", (short)100, (short)0);
    java.awt.Component var34 = var21.getComponentAt(0, (-1));
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    javax.swing.event.AncestorListener[] var45 = var37.getAncestorListeners();
    java.awt.Dimension var46 = var37.getMinimumSize();
    bierse.view.RunningMessagePanel var50 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var51 = var50.getPreferredSize();
    java.awt.Dimension var52 = var50.getMaximumSize();
    var50.disable();
    var37.putClientProperty((java.lang.Object)100, (java.lang.Object)var50);
    javax.swing.InputVerifier var55 = var50.getInputVerifier();
    boolean var56 = var50.getInheritsPopupMenu();
    var50.setLocation(0, 100);
    boolean var60 = var50.isFocusTraversalPolicyProvider();
    var50.list();
    javax.swing.event.AncestorListener[] var62 = var50.getAncestorListeners();
    java.awt.Cursor var63 = var50.getCursor();
    var21.setCursor(var63);
    var2.setCursor(var63);
    java.awt.Dimension var66 = var2.getMinimumSize();
    java.beans.PropertyChangeListener[] var68 = var2.getPropertyChangeListeners("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777225,maximumSize=,minimumSize=,preferredSize=]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test353() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test353");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPaintingTile();
    boolean var5 = var2.isValid();
    boolean var6 = var2.getFocusTraversalKeysEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test354() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test354");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.GraphicsConfiguration var13 = var2.getGraphicsConfiguration();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    boolean var18 = var16.isOpaque();
    javax.swing.InputMap var19 = var16.getInputMap();
    java.beans.PropertyChangeListener[] var21 = var16.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var22 = var16.getComponentOrientation();
    var2.applyComponentOrientation(var22);
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var27 = var26.isMaximumSizeSet();
    var26.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var32 = var26.getTransferHandler();
    boolean var33 = var26.hasFocus();
    javax.swing.event.AncestorListener[] var34 = var26.getAncestorListeners();
    var26.enable(false);
    java.awt.Dimension var37 = var26.minimumSize();
    java.awt.Dimension var38 = var2.getSize(var37);
    bierse.view.RunningMessagePanel var41 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var42 = var41.isMaximumSizeSet();
    var41.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var47 = var41.getTransferHandler();
    boolean var48 = var41.hasFocus();
    var41.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var51 = var41.getPreferredSize();
    java.awt.ComponentOrientation var52 = var41.getComponentOrientation();
    bierse.view.RunningMessagePanel var55 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var56 = var55.isMaximumSizeSet();
    var55.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var61 = var55.getTransferHandler();
    boolean var62 = var55.hasFocus();
    javax.swing.event.AncestorListener[] var63 = var55.getAncestorListeners();
    bierse.view.RunningMessagePanel var66 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var67 = var66.isMaximumSizeSet();
    var66.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var72 = var66.getTransferHandler();
    boolean var73 = var66.hasFocus();
    var66.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var76 = var66.getPreferredSize();
    java.awt.ComponentOrientation var77 = var66.getComponentOrientation();
    var41.add((java.awt.Component)var55, (java.lang.Object)var66);
    bierse.view.RunningMessagePanel var81 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var82 = var81.getPreferredSize();
    java.awt.Dimension var83 = var81.getMaximumSize();
    var66.resize(var83);
    int var87 = var66.getBaseline(1, 996);
    bierse.view.RunningMessagePanel var90 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var90.transferFocus();
    var90.show();
    boolean var93 = var90.isMaximumSizeSet();
    java.awt.Dimension var94 = var90.preferredSize();
    java.awt.Color var95 = var90.getBackground();
    var66.setForeground(var95);
    var2.setForeground(var95);
    boolean var98 = var2.isRequestFocusEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == true);

  }

  public void test355() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test355");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    boolean var40 = var2.getFocusTraversalKeysEnabled();
    var2.setAlignmentX(100.0f);
    var2.setMessage("");
    bierse.view.RunningMessagePanel var47 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var48 = var47.isMaximumSizeSet();
    var47.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var53 = var47.getTransferHandler();
    boolean var54 = var47.hasFocus();
    var47.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var57 = var47.getPreferredSize();
    java.awt.ComponentOrientation var58 = var47.getComponentOrientation();
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var62 = var61.isMaximumSizeSet();
    var61.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var67 = var61.getTransferHandler();
    boolean var68 = var61.hasFocus();
    var61.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var71 = var61.getPreferredSize();
    java.awt.Dimension var72 = var47.getSize(var71);
    java.awt.image.VolatileImage var75 = var47.createVolatileImage((-1), (-1));
    var47.repaint(100L);
    java.awt.ComponentOrientation var78 = var47.getComponentOrientation();
    var2.applyComponentOrientation(var78);
    java.awt.event.MouseMotionListener[] var80 = var2.getMouseMotionListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test356() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test356");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    int var7 = var2.countComponents();
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var11 = var10.getPreferredSize();
    boolean var14 = var10.contains(10, 1);
    java.awt.im.InputMethodRequests var15 = var10.getInputMethodRequests();
    boolean var18 = var10.inside((-1), 100);
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var22 = var21.getPreferredSize();
    boolean var25 = var21.contains(10, 1);
    var21.setAlignmentX((-1.0f));
    java.awt.Point var28 = var21.getLocation();
    java.awt.Point var29 = var10.getLocation(var28);
    boolean var30 = var2.contains(var29);
    boolean var31 = var2.isPaintingForPrint();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", (byte)10, (byte)0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test357() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test357");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    java.lang.String var14 = var2.getName();
    java.awt.Font var15 = var2.getFont();
    java.awt.Point var16 = var2.location();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test358() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test358");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    int var20 = var2.getHeight();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var23.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var30 = var23.location();
    boolean var31 = var2.contains(var30);
    int var32 = var2.getHeight();
    var2.enable();
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var37 = var36.getPreferredSize();
    boolean var40 = var36.contains(10, 1);
    bierse.view.RunningMessagePanel var43 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var44 = var43.getPreferredSize();
    java.awt.Point var45 = var43.getMousePosition();
    var43.setDoubleBuffered(false);
    java.awt.Dimension var48 = var43.minimumSize();
    var36.setMinimumSize(var48);
    boolean var50 = var36.getFocusTraversalKeysEnabled();
    java.awt.Dimension var51 = var36.getMaximumSize();
    java.awt.Dimension var52 = var2.getSize(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test359() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test359");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var9 = var2.location();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var13 = var12.isMaximumSizeSet();
    var12.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var18 = var12.getTransferHandler();
    boolean var19 = var12.hasFocus();
    javax.swing.event.AncestorListener[] var20 = var12.getAncestorListeners();
    java.awt.Dimension var21 = var12.getMinimumSize();
    var2.resize(var21);
    var2.validate();
    java.awt.Point var24 = var2.getMousePosition();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var27 = var2.getBaseline((-1), (-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }

  public void test360() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test360");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    javax.swing.InputMap var5 = var2.getInputMap();
    java.beans.PropertyChangeListener[] var7 = var2.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var8 = var2.getComponentOrientation();
    java.awt.peer.ComponentPeer var9 = var2.getPeer();
    var2.resetKeyboardActions();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var14 = var13.getPreferredSize();
    boolean var17 = var13.contains(10, 1);
    java.awt.Insets var18 = var13.getInsets();
    javax.swing.JToolTip var19 = var13.createToolTip();
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var23 = var22.isMaximumSizeSet();
    var22.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var28 = var22.getTransferHandler();
    boolean var29 = var22.hasFocus();
    var22.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var32 = var22.getPreferredSize();
    java.awt.ComponentOrientation var33 = var22.getComponentOrientation();
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var37 = var36.isMaximumSizeSet();
    var36.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var42 = var36.getTransferHandler();
    boolean var43 = var36.hasFocus();
    javax.swing.event.AncestorListener[] var44 = var36.getAncestorListeners();
    bierse.view.RunningMessagePanel var47 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var48 = var47.isMaximumSizeSet();
    var47.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var53 = var47.getTransferHandler();
    boolean var54 = var47.hasFocus();
    var47.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var57 = var47.getPreferredSize();
    java.awt.ComponentOrientation var58 = var47.getComponentOrientation();
    var22.add((java.awt.Component)var36, (java.lang.Object)var47);
    bierse.view.RunningMessagePanel var62 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var63 = var62.getPreferredSize();
    java.awt.Dimension var64 = var62.getMaximumSize();
    var47.resize(var64);
    var19.setPreferredSize(var64);
    bierse.view.RunningMessagePanel var69 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var70 = var69.isMaximumSizeSet();
    boolean var71 = var69.isOpaque();
    java.awt.event.HierarchyListener[] var72 = var69.getHierarchyListeners();
    int var73 = var69.getWidth();
    java.awt.event.ContainerListener[] var74 = var69.getContainerListeners();
    java.awt.Dimension var75 = var69.getMaximumSize();
    boolean var76 = var69.isBackgroundSet();
    var19.remove((java.awt.Component)var69);
    java.awt.Point var78 = var19.getLocation();
    var2.setLocation(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test361() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test361");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    java.awt.Dimension var9 = var2.getPreferredSize();
    int var10 = var2.getWidth();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var14 = var13.isMaximumSizeSet();
    var13.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var19 = var13.getTransferHandler();
    boolean var20 = var13.hasFocus();
    var13.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var23 = var13.getPreferredSize();
    var2.setSize(var23);
    var2.setOpaque(true);
    boolean var27 = var2.isShowing();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var31 = var30.isMaximumSizeSet();
    var30.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var36 = var30.getTransferHandler();
    boolean var37 = var30.hasFocus();
    var30.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var40 = var30.getPreferredSize();
    java.awt.ComponentOrientation var41 = var30.getComponentOrientation();
    var30.transferFocus();
    bierse.view.RunningMessagePanel var45 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var46 = var45.isMaximumSizeSet();
    var45.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var51 = var45.getTransferHandler();
    boolean var52 = var45.hasFocus();
    javax.swing.event.AncestorListener[] var53 = var45.getAncestorListeners();
    java.awt.Dimension var54 = var45.getMinimumSize();
    boolean var55 = var45.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var58 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var59 = var58.isMaximumSizeSet();
    var58.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var64 = var58.getTransferHandler();
    boolean var65 = var58.hasFocus();
    var58.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var68 = var58.getPreferredSize();
    java.awt.Dimension var69 = var45.getSize(var68);
    var30.setSize(var68);
    var30.nextFocus();
    boolean var72 = var30.isManagingFocus();
    var30.show(false);
    bierse.view.RunningMessagePanel var77 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var78 = var77.getPreferredSize();
    boolean var79 = var77.isPreferredSizeSet();
    bierse.view.RunningMessagePanel var82 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var83 = var82.isMaximumSizeSet();
    boolean var84 = var82.isOpaque();
    java.beans.PropertyChangeListener[] var85 = var82.getPropertyChangeListeners();
    var82.setOpaque(true);
    java.awt.Insets var88 = var82.insets();
    java.awt.Insets var89 = var77.getInsets(var88);
    var77.resetKeyboardActions();
    java.awt.im.InputContext var91 = var77.getInputContext();
    java.awt.Component var92 = var30.add((java.awt.Component)var77);
    java.awt.Point var93 = var92.getLocation();
    java.awt.Rectangle var94 = var92.bounds();
    java.awt.Rectangle var95 = var2.getBounds(var94);
    java.awt.Dimension var96 = var2.preferredSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test362() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test362");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.Insets var7 = var2.getInsets();
    javax.swing.JToolTip var8 = var2.createToolTip();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var17 = var11.getTransferHandler();
    boolean var18 = var11.hasFocus();
    javax.swing.event.AncestorListener[] var19 = var11.getAncestorListeners();
    var11.enable(false);
    int var22 = var8.getComponentZOrder((java.awt.Component)var11);
    boolean var23 = var8.requestFocusInWindow();
    var8.grabFocus();
    boolean var25 = var8.isFontSet();
    var8.disable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);

  }

  public void test363() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test363");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var9 = var2.location();
    java.awt.Font var10 = var2.getFont();
    boolean var11 = var2.requestFocusInWindow();
    java.lang.String var12 = var2.getUIClassID();
    var2.transferFocus();
    var2.doLayout();
    java.awt.Rectangle var15 = var2.getVisibleRect();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "PanelUI"+ "'", var12.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test364() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test364");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    java.awt.event.ContainerListener[] var7 = var2.getContainerListeners();
    java.awt.Dimension var8 = var2.getMaximumSize();
    boolean var9 = var2.isRequestFocusEnabled();
    var2.setBounds(0, 24, 24, (-1));
    int var17 = var2.getBaseline(1, 10);
    java.awt.Dimension var18 = var2.getPreferredSize();
    java.awt.im.InputMethodRequests var19 = var2.getInputMethodRequests();
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var23 = var22.isMaximumSizeSet();
    var22.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var28 = var22.getTransferHandler();
    boolean var29 = var22.hasFocus();
    javax.swing.event.AncestorListener[] var30 = var22.getAncestorListeners();
    java.awt.Dimension var31 = var22.getMinimumSize();
    boolean var32 = var22.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var36 = var35.isMaximumSizeSet();
    var35.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var41 = var35.getTransferHandler();
    boolean var42 = var35.hasFocus();
    var35.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var45 = var35.getPreferredSize();
    java.awt.Dimension var46 = var22.getSize(var45);
    var2.setMinimumSize(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test365() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test365");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    var2.firePropertyChange("hi!", ' ', ' ');
    javax.accessibility.AccessibleContext var11 = var2.getAccessibleContext();
    var2.resize(100, 0);
    java.awt.Dimension var15 = var2.getMaximumSize();
    int var16 = var2.getX();
    var2.setInheritsPopupMenu(false);
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var22 = var21.getPreferredSize();
    boolean var25 = var21.contains(10, 1);
    java.awt.Insets var26 = var21.getInsets();
    javax.accessibility.AccessibleContext var27 = var21.getAccessibleContext();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var31 = var30.isMaximumSizeSet();
    var30.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var36 = var30.getTransferHandler();
    boolean var37 = var30.hasFocus();
    var30.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var40 = var30.getPreferredSize();
    java.awt.ComponentOrientation var41 = var30.getComponentOrientation();
    var2.putClientProperty((java.lang.Object)var27, (java.lang.Object)var30);
    java.awt.Point var43 = var2.location();
    var2.firePropertyChange("", (byte)(-1), (byte)1);
    java.awt.Component var50 = var2.findComponentAt(10, 14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);

  }

  public void test366() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test366");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.revalidate();
    var2.invalidate();
    boolean var7 = var2.isManagingFocus();
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var11 = var10.getPreferredSize();
    java.awt.Dimension var12 = var10.getMaximumSize();
    java.awt.event.FocusListener[] var13 = var10.getFocusListeners();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var17 = var16.getPreferredSize();
    boolean var20 = var16.contains(10, 1);
    java.awt.im.InputMethodRequests var21 = var16.getInputMethodRequests();
    java.awt.Font var22 = var16.getFont();
    var10.setFont(var22);
    var2.setFont(var22);
    int var25 = var2.getX();
    boolean var26 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var2);
    java.awt.event.HierarchyListener[] var27 = var2.getHierarchyListeners();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=8,maximumSize=,minimumSize=,preferredSize=]", 1.0f, (-1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test367() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test367");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    var15.setEnabled(false);
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var24.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var31 = var24.location();
    java.awt.Font var32 = var24.getFont();
    var15.setNextFocusableComponent((java.awt.Component)var24);
    java.awt.event.FocusListener[] var34 = var24.getFocusListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test368() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test368");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    java.awt.event.ContainerListener[] var7 = var2.getContainerListeners();
    java.awt.Dimension var8 = var2.getMaximumSize();
    javax.swing.border.Border var9 = var2.getBorder();
    var2.removeNotify();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var14 = var13.isMaximumSizeSet();
    var13.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var13.invalidate();
    java.awt.Dimension var20 = var13.getPreferredSize();
    int var21 = var13.getWidth();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    var24.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var30 = var24.getTransferHandler();
    boolean var31 = var24.hasFocus();
    var24.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var34 = var24.getPreferredSize();
    java.awt.ComponentOrientation var35 = var24.getComponentOrientation();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var39 = var38.isMaximumSizeSet();
    var38.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var44 = var38.getTransferHandler();
    boolean var45 = var38.hasFocus();
    javax.swing.event.AncestorListener[] var46 = var38.getAncestorListeners();
    bierse.view.RunningMessagePanel var49 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var50 = var49.isMaximumSizeSet();
    var49.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var55 = var49.getTransferHandler();
    boolean var56 = var49.hasFocus();
    var49.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var59 = var49.getPreferredSize();
    java.awt.ComponentOrientation var60 = var49.getComponentOrientation();
    var24.add((java.awt.Component)var38, (java.lang.Object)var49);
    bierse.view.RunningMessagePanel var64 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var65 = var64.getPreferredSize();
    java.awt.Dimension var66 = var64.getMaximumSize();
    var13.add((java.awt.Component)var38, (java.lang.Object)var64, (-1));
    java.lang.Object var69 = var2.getClientProperty((java.lang.Object)var13);
    bierse.view.RunningMessagePanel var72 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var72.repaint(1L, (-1), (-1), 0, 100);
    boolean var79 = var72.isFocusTraversable();
    javax.swing.ActionMap var80 = var72.getActionMap();
    var13.setActionMap(var80);
    var13.move(15, 0);
    javax.swing.JToolTip var85 = var13.createToolTip();
    boolean var86 = var85.isFocusTraversable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);

  }

  public void test369() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test369");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    int var7 = var2.countComponents();
    java.awt.Point var9 = var2.getMousePosition(true);
    var2.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    boolean var16 = var14.isOpaque();
    javax.swing.InputMap var17 = var14.getInputMap();
    java.lang.Object var18 = var2.getClientProperty((java.lang.Object)var14);
    java.util.Locale var19 = var2.getLocale();
    javax.swing.InputMap var20 = var2.getInputMap();
    var2.doLayout();
    var2.transferFocusUpCycle();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test370() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test370");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    float var5 = var2.getAlignmentX();
    var2.repaint(0L, 10, 0, 10, (-1));
    boolean var12 = var2.isEnabled();
    java.lang.Object var13 = var2.getTreeLock();
    java.awt.GraphicsConfiguration var14 = var2.getGraphicsConfiguration();
    boolean var15 = var2.requestFocusInWindow();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test371() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test371");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    boolean var11 = var2.inside(24, 1);
    java.awt.image.VolatileImage var14 = var2.createVolatileImage(0, 1);
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", 10, 100);
    boolean var21 = var2.contains((-1), 1);
    var2.setEnabled(false);
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var26.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var33 = var26.location();
    java.awt.Font var34 = var26.getFont();
    boolean var35 = var26.requestFocusInWindow();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var39 = var38.isMaximumSizeSet();
    var38.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var44 = var38.getTransferHandler();
    boolean var45 = var38.hasFocus();
    javax.swing.event.AncestorListener[] var46 = var38.getAncestorListeners();
    java.awt.Dimension var47 = var38.getMinimumSize();
    bierse.view.RunningMessagePanel var51 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var52 = var51.getPreferredSize();
    java.awt.Dimension var53 = var51.getMaximumSize();
    var51.disable();
    var38.putClientProperty((java.lang.Object)100, (java.lang.Object)var51);
    int var56 = var38.getHeight();
    bierse.view.RunningMessagePanel var59 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var59.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var66 = var59.location();
    boolean var67 = var38.contains(var66);
    java.awt.Component var68 = var26.getComponentAt(var66);
    var2.setLocation(var66);
    bierse.view.RunningMessagePanel var72 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var72.transferFocus();
    var72.show();
    float var75 = var72.getAlignmentX();
    var72.repaint(0L, 10, 0, 10, (-1));
    boolean var82 = var72.isEnabled();
    java.lang.Object var83 = var72.getTreeLock();
    var72.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (byte)100, (byte)100);
    javax.swing.JPopupMenu var88 = var72.getComponentPopupMenu();
    java.awt.ComponentOrientation var89 = var72.getComponentOrientation();
    var72.setEnabled(false);
    var2.setNextFocusableComponent((java.awt.Component)var72);
    var2.setAlignmentY(0.0f);
    float var95 = var2.getAlignmentX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == 0.5f);

  }

  public void test372() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test372");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    java.awt.Component[] var9 = var2.getComponents();
    var2.setRequestFocusEnabled(false);
    var2.setVisible(true);
    javax.swing.InputVerifier var14 = var2.getInputVerifier();
    int var15 = var2.getStringWidth();
    bierse.view.RunningMessagePanel var18 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var19 = var18.isMaximumSizeSet();
    var18.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var24 = var18.getTransferHandler();
    boolean var25 = var18.hasFocus();
    javax.swing.event.AncestorListener[] var26 = var18.getAncestorListeners();
    javax.accessibility.AccessibleContext var27 = var18.getAccessibleContext();
    var18.setOpaque(false);
    java.awt.Component.BaselineResizeBehavior var30 = var18.getBaselineResizeBehavior();
    bierse.view.RunningMessagePanel var33 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var34 = var33.isMaximumSizeSet();
    boolean var35 = var33.isOpaque();
    java.awt.event.HierarchyListener[] var36 = var33.getHierarchyListeners();
    int var37 = var33.getWidth();
    int var38 = var33.countComponents();
    java.awt.Point var40 = var33.getMousePosition(true);
    var33.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var43 = var33.toString();
    java.awt.Font var44 = var33.getFont();
    javax.swing.plaf.PanelUI var45 = var33.getUI();
    java.awt.Dimension var46 = var33.getPreferredSize();
    var33.firePropertyChange("", (-1), 1);
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var54 = var53.getPreferredSize();
    boolean var57 = var53.contains(10, 1);
    var53.setFocusTraversalPolicyProvider(false);
    float var60 = var53.getAlignmentX();
    java.awt.Component.BaselineResizeBehavior var61 = var53.getBaselineResizeBehavior();
    java.awt.dnd.DropTarget var62 = var53.getDropTarget();
    var53.layout();
    var53.setDebugGraphicsOptions(996);
    java.awt.Graphics var66 = var53.getGraphics();
    var33.print(var66);
    var18.update(var66);
    var2.print(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 996);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var43,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var43.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var43,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test373() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test373");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Dimension var4 = var2.getMaximumSize();
    java.awt.event.FocusListener[] var5 = var2.getFocusListeners();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var9 = var8.getPreferredSize();
    boolean var12 = var8.contains(10, 1);
    java.awt.im.InputMethodRequests var13 = var8.getInputMethodRequests();
    java.awt.Font var14 = var8.getFont();
    var2.setFont(var14);
    java.beans.VetoableChangeListener[] var16 = var2.getVetoableChangeListeners();
    boolean var17 = var2.isMaximumSizeSet();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", (short)0, (short)10);
    var2.requestFocus();
    boolean var23 = var2.isPreferredSizeSet();
    java.awt.Color var24 = var2.getBackground();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test374() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test374");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    float var5 = var2.getAlignmentX();
    boolean var8 = var2.contains(0, 24);
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var12 = var11.getPreferredSize();
    java.awt.Dimension var13 = var11.getMaximumSize();
    java.awt.event.FocusListener[] var14 = var11.getFocusListeners();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var18 = var17.getPreferredSize();
    boolean var21 = var17.contains(10, 1);
    java.awt.im.InputMethodRequests var22 = var17.getInputMethodRequests();
    java.awt.Font var23 = var17.getFont();
    var11.setFont(var23);
    java.awt.FontMetrics var25 = var2.getFontMetrics(var23);
    java.awt.event.ContainerListener[] var26 = var2.getContainerListeners();
    var2.validate();
    java.beans.VetoableChangeListener[] var28 = var2.getVetoableChangeListeners();
    var2.setInheritsPopupMenu(false);
    var2.setDebugGraphicsOptions(996);
    var2.removeAll();
    boolean var34 = var2.requestFocusInWindow();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test375() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test375");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var13 = var12.getPreferredSize();
    java.awt.Point var14 = var12.getMousePosition();
    var12.revalidate();
    var12.transferFocus();
    java.awt.Toolkit var17 = var12.getToolkit();
    boolean var18 = var12.isFocusTraversalPolicySet();
    java.awt.Component var19 = var2.add("PanelUI", (java.awt.Component)var12);
    var2.paintImmediately(12, 13, 13, 13);
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    java.awt.Component var36 = var27.getComponentAt(0, 0);
    java.awt.Dimension var37 = var27.minimumSize();
    var2.resize(var37);
    boolean var39 = var2.getIgnoreRepaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test376() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test376");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var3 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var4 = var3.getPreferredSize();
    javax.swing.JPopupMenu var5 = var3.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var9 = var8.getPreferredSize();
    javax.swing.JPopupMenu var10 = var8.getComponentPopupMenu();
    java.awt.Rectangle var11 = var8.bounds();
    var3.computeVisibleRect(var11);
    int var13 = var0.getIndexOf((java.lang.Object)var3);
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    java.awt.Dimension var25 = var16.getMinimumSize();
    bierse.view.RunningMessagePanel var29 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var30 = var29.getPreferredSize();
    java.awt.Dimension var31 = var29.getMaximumSize();
    var29.disable();
    var16.putClientProperty((java.lang.Object)100, (java.lang.Object)var29);
    javax.swing.InputVerifier var34 = var29.getInputVerifier();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var39 = var38.isMaximumSizeSet();
    var38.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var38.invalidate();
    java.awt.Dimension var45 = var38.getPreferredSize();
    int var46 = var38.getWidth();
    java.awt.Component var47 = var29.add("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var38);
    java.awt.Rectangle var48 = var38.getVisibleRect();
    java.awt.Rectangle var49 = var3.getBounds(var48);
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var53 = var52.getPreferredSize();
    javax.swing.JPopupMenu var54 = var52.getComponentPopupMenu();
    java.awt.Rectangle var55 = var52.bounds();
    java.awt.Insets var56 = var52.insets();
    java.awt.Insets var57 = var3.getInsets(var56);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      javax.swing.InputMap var59 = var3.getInputMap(32767);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test377() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test377");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    var2.setFocusTraversalPolicyProvider(false);
    float var9 = var2.getAlignmentX();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var13 = var12.getPreferredSize();
    boolean var16 = var12.contains(10, 1);
    java.awt.Insets var17 = var12.getInsets();
    javax.swing.JToolTip var18 = var12.createToolTip();
    boolean var19 = var12.requestFocusInWindow();
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var23 = var22.isMaximumSizeSet();
    boolean var24 = var22.isOpaque();
    java.beans.PropertyChangeListener[] var25 = var22.getPropertyChangeListeners();
    boolean var26 = var22.isFocusCycleRoot();
    var22.repaint(0L, (-1), 10, (-1), 10);
    java.awt.Font var33 = var22.getFont();
    java.awt.FontMetrics var34 = var12.getFontMetrics(var33);
    java.awt.FontMetrics var35 = var2.getFontMetrics(var33);
    java.awt.Image var38 = var2.createImage(10, 0);
    var2.setVisible(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);

  }

  public void test378() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test378");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.Insets var7 = var2.getInsets();
    javax.swing.JToolTip var8 = var2.createToolTip();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var17 = var11.getTransferHandler();
    boolean var18 = var11.hasFocus();
    var11.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var21 = var11.getPreferredSize();
    java.awt.ComponentOrientation var22 = var11.getComponentOrientation();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    var25.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var31 = var25.getTransferHandler();
    boolean var32 = var25.hasFocus();
    javax.swing.event.AncestorListener[] var33 = var25.getAncestorListeners();
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var37 = var36.isMaximumSizeSet();
    var36.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var42 = var36.getTransferHandler();
    boolean var43 = var36.hasFocus();
    var36.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var46 = var36.getPreferredSize();
    java.awt.ComponentOrientation var47 = var36.getComponentOrientation();
    var11.add((java.awt.Component)var25, (java.lang.Object)var36);
    bierse.view.RunningMessagePanel var51 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var52 = var51.getPreferredSize();
    java.awt.Dimension var53 = var51.getMaximumSize();
    var36.resize(var53);
    var8.setPreferredSize(var53);
    bierse.view.RunningMessagePanel var58 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var59 = var58.isMaximumSizeSet();
    boolean var60 = var58.isOpaque();
    java.awt.event.HierarchyListener[] var61 = var58.getHierarchyListeners();
    int var62 = var58.getWidth();
    java.awt.event.ContainerListener[] var63 = var58.getContainerListeners();
    java.awt.Dimension var64 = var58.getMaximumSize();
    boolean var65 = var58.isBackgroundSet();
    var8.remove((java.awt.Component)var58);
    boolean var67 = var8.isValidateRoot();
    var8.setAutoscrolls(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);

  }

  public void test379() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test379");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    var2.setFocusTraversalPolicyProvider(false);
    float var9 = var2.getAlignmentX();
    java.awt.Component.BaselineResizeBehavior var10 = var2.getBaselineResizeBehavior();
    boolean var11 = var2.isEnabled();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var15 = var14.getPreferredSize();
    boolean var18 = var14.contains(10, 1);
    java.awt.im.InputMethodRequests var19 = var14.getInputMethodRequests();
    java.awt.event.FocusListener[] var20 = var14.getFocusListeners();
    java.awt.Font var21 = var14.getFont();
    java.beans.PropertyChangeListener[] var23 = var14.getPropertyChangeListeners("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    boolean var24 = var14.isValidateRoot();
    var14.transferFocusUpCycle();
    boolean var26 = var14.requestFocusInWindow();
    bierse.view.KeyMapComboBoxModel var27 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var31 = var30.getPreferredSize();
    java.awt.Point var32 = var30.getMousePosition();
    var30.revalidate();
    var30.invalidate();
    int var35 = var27.getIndexOf((java.lang.Object)var30);
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var39 = var38.isMaximumSizeSet();
    var38.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var44 = var38.isFocusTraversalPolicySet();
    java.awt.event.FocusListener[] var45 = var38.getFocusListeners();
    boolean var46 = var38.isFontSet();
    bierse.view.RunningMessagePanel var49 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var50 = var49.isMaximumSizeSet();
    boolean var51 = var49.isOpaque();
    java.awt.event.HierarchyListener[] var52 = var49.getHierarchyListeners();
    int var53 = var49.getWidth();
    int var54 = var49.countComponents();
    java.awt.Point var56 = var49.getMousePosition(true);
    var49.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var59 = var49.toString();
    java.awt.Font var60 = var49.getFont();
    java.awt.FontMetrics var61 = var38.getFontMetrics(var60);
    var30.setFont(var60);
    bierse.view.RunningMessagePanel var65 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var66 = var65.isMaximumSizeSet();
    boolean var67 = var65.isOpaque();
    java.awt.event.HierarchyListener[] var68 = var65.getHierarchyListeners();
    int var69 = var65.countComponents();
    int var70 = var65.getStringHeight();
    java.awt.Point var71 = var65.location();
    java.awt.Component var72 = var30.findComponentAt(var71);
    java.awt.Point var73 = var14.getLocation(var71);
    java.awt.Point var74 = var2.getLocation(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var59,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var59.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var59,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test380() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test380");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var8 = var7.isMaximumSizeSet();
    boolean var9 = var7.isOpaque();
    java.beans.PropertyChangeListener[] var10 = var7.getPropertyChangeListeners();
    var7.setOpaque(true);
    java.awt.Insets var13 = var7.insets();
    java.awt.Insets var14 = var2.getInsets(var13);
    var2.resetKeyboardActions();
    java.awt.im.InputContext var16 = var2.getInputContext();
    java.awt.Dimension var17 = var2.getPreferredSize();
    var2.setAlignmentX(10.0f);
    java.awt.Component[] var20 = var2.getComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test381() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test381");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    boolean var6 = var2.isValid();
    var2.repaint(100L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test382() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test382");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    boolean var12 = var2.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var16 = var15.isMaximumSizeSet();
    var15.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var21 = var15.getTransferHandler();
    boolean var22 = var15.hasFocus();
    var15.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var25 = var15.getPreferredSize();
    java.awt.Dimension var26 = var2.getSize(var25);
    var2.updateUI();
    java.awt.Dimension var28 = var2.getMinimumSize();
    var2.resetKeyboardActions();
    java.awt.image.ColorModel var30 = var2.getColorModel();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test383() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test383");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var43 = var42.getPreferredSize();
    java.awt.Dimension var44 = var42.getMaximumSize();
    var27.resize(var44);
    int var48 = var27.getBaseline(1, 996);
    bierse.view.RunningMessagePanel var51 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var51.transferFocus();
    var51.show();
    boolean var54 = var51.isMaximumSizeSet();
    java.awt.Dimension var55 = var51.preferredSize();
    java.awt.Color var56 = var51.getBackground();
    var27.setForeground(var56);
    java.awt.Dimension var58 = var27.size();
    java.awt.Component var61 = var27.locate(11, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test384() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test384");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    java.awt.Component var30 = var11.locate(24, 1);
    var11.setVisible(true);
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    var35.reshape(100, 100, 1, 0);
    java.awt.Dimension var41 = var35.getMaximumSize();
    var11.remove((java.awt.Component)var35);
    bierse.view.RunningMessagePanel var45 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var46 = var45.getPreferredSize();
    boolean var49 = var45.contains(10, 1);
    java.awt.Insets var50 = var45.getInsets();
    javax.swing.JToolTip var51 = var45.createToolTip();
    bierse.view.RunningMessagePanel var54 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var55 = var54.isMaximumSizeSet();
    var54.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var60 = var54.getTransferHandler();
    boolean var61 = var54.hasFocus();
    javax.swing.event.AncestorListener[] var62 = var54.getAncestorListeners();
    var54.enable(false);
    int var65 = var51.getComponentZOrder((java.awt.Component)var54);
    bierse.view.RunningMessagePanel var68 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var69 = var68.isMaximumSizeSet();
    var68.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var74 = var68.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var77 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var78 = var77.getPreferredSize();
    boolean var79 = var77.isPreferredSizeSet();
    var77.enable();
    var77.transferFocusBackward();
    int var82 = var68.getComponentZOrder((java.awt.Component)var77);
    bierse.view.RunningMessagePanel var85 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var85.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var92 = var85.location();
    boolean var93 = var77.contains(var92);
    java.awt.Component var94 = var54.getComponentAt(var92);
    boolean var95 = var54.isValid();
    java.awt.Dimension var96 = var54.getPreferredSize();
    var35.setMaximumSize(var96);
    java.awt.Insets var98 = var35.getInsets();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test385() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test385");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.setDebugGraphicsOptions(10);
    java.lang.Object var5 = var2.getTreeLock();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var9 = var8.isMaximumSizeSet();
    var8.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var14 = var8.getTransferHandler();
    boolean var15 = var8.hasFocus();
    javax.swing.event.AncestorListener[] var16 = var8.getAncestorListeners();
    java.awt.Dimension var17 = var8.getMinimumSize();
    var2.setPreferredSize(var17);
    int var19 = var2.getDebugGraphicsOptions();
    var2.revalidate();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var24 = var23.isMaximumSizeSet();
    var23.layout();
    var23.revalidate();
    boolean var27 = var23.isFocusOwner();
    float var28 = var23.getAlignmentX();
    java.awt.Color var29 = var23.getForeground();
    var2.setForeground(var29);
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=java.awt.Dimension[width=10,height=10],preferredSize=]", 'a', '4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test386() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test386");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    var11.transferFocus();
    var11.setToolTipText("");
    java.awt.event.InputMethodListener[] var31 = var11.getInputMethodListeners();
    boolean var32 = var11.isFocusTraversable();
    java.awt.Insets var33 = var11.getInsets();
    float var34 = var11.getAlignmentX();
    java.awt.Container var35 = var11.getFocusCycleRootAncestor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);

  }

  public void test387() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test387");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    int var7 = var2.countComponents();
    java.awt.Point var9 = var2.getMousePosition(true);
    var2.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var12 = var2.toString();
    java.awt.Font var13 = var2.getFont();
    javax.swing.plaf.PanelUI var14 = var2.getUI();
    javax.swing.KeyStroke[] var15 = var2.getRegisteredKeyStrokes();
    java.awt.Rectangle var16 = var2.bounds();
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var20 = var19.getPreferredSize();
    java.awt.Point var21 = var19.getMousePosition();
    var19.revalidate();
    var19.revalidate();
    java.awt.Component var26 = var19.findComponentAt((-1), 0);
    java.lang.String var27 = var19.getUIClassID();
    bierse.view.KeyMapComboBoxModel var28 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var31 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var32 = var31.getPreferredSize();
    java.awt.Point var33 = var31.getMousePosition();
    var31.revalidate();
    var31.invalidate();
    int var36 = var28.getIndexOf((java.lang.Object)var31);
    bierse.view.RunningMessagePanel var39 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var40 = var39.isMaximumSizeSet();
    var39.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var45 = var39.getTransferHandler();
    boolean var46 = var39.hasFocus();
    javax.swing.event.AncestorListener[] var47 = var39.getAncestorListeners();
    java.awt.Dimension var48 = var39.getMinimumSize();
    int var49 = var28.getIndexOf((java.lang.Object)var39);
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var53 = var52.isMaximumSizeSet();
    var52.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var58 = var52.getTransferHandler();
    boolean var59 = var52.hasFocus();
    var52.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var62 = var52.getPreferredSize();
    java.awt.ComponentOrientation var63 = var52.getComponentOrientation();
    bierse.view.RunningMessagePanel var66 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var67 = var66.isMaximumSizeSet();
    var66.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var72 = var66.getTransferHandler();
    boolean var73 = var66.hasFocus();
    var66.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var76 = var66.getPreferredSize();
    java.awt.Dimension var77 = var52.getSize(var76);
    var52.repaint(100L, 1, 0, 100, 24);
    var52.updateUI();
    javax.swing.TransferHandler var85 = var52.getTransferHandler();
    java.util.Locale var86 = var52.getLocale();
    var39.setLocale(var86);
    var19.setLocale(var86);
    var2.setLocale(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var12,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var12.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var12,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "PanelUI"+ "'", var27.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test388() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test388");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    java.awt.Rectangle var5 = var2.bounds();
    var2.setSize(0, 24);
    javax.swing.TransferHandler var9 = var2.getTransferHandler();
    java.awt.Insets var10 = var2.getInsets();
    java.lang.String var11 = var2.getName();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    var14.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var20 = var14.getTransferHandler();
    boolean var21 = var14.hasFocus();
    javax.swing.event.AncestorListener[] var22 = var14.getAncestorListeners();
    java.awt.Dimension var23 = var14.getMinimumSize();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var28 = var27.getPreferredSize();
    java.awt.Dimension var29 = var27.getMaximumSize();
    var27.disable();
    var14.putClientProperty((java.lang.Object)100, (java.lang.Object)var27);
    javax.swing.InputVerifier var32 = var27.getInputVerifier();
    boolean var33 = var27.getInheritsPopupMenu();
    var27.setLocation(0, 100);
    boolean var37 = var27.isFocusTraversalPolicyProvider();
    var27.list();
    javax.swing.event.AncestorListener[] var39 = var27.getAncestorListeners();
    var27.repaint(100L);
    java.awt.peer.ComponentPeer var42 = var27.getPeer();
    boolean var43 = var27.isManagingFocus();
    int var44 = var27.getWidth();
    float var45 = var27.getAlignmentX();
    var27.paintImmediately(13, 13, 1, 24);
    int var51 = var2.getComponentZOrder((java.awt.Component)var27);
    boolean var52 = var27.isFocusCycleRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);

  }

  public void test389() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test389");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    boolean var21 = var15.isEnabled();
    java.awt.Point var23 = var15.getMousePosition(true);
    java.awt.event.FocusListener[] var24 = var15.getFocusListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test390() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test390");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.beans.PropertyChangeListener[] var5 = var2.getPropertyChangeListeners();
    boolean var6 = var2.isFocusCycleRoot();
    boolean var7 = var2.getIgnoreRepaint();
    java.awt.Component[] var8 = var2.getComponents();
    java.awt.Dimension var9 = var2.preferredSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test391() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test391");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Dimension var4 = var2.getMaximumSize();
    var2.disable();
    boolean var6 = var2.isEnabled();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var10 = var9.getPreferredSize();
    boolean var13 = var9.contains(10, 1);
    var9.setAlignmentX((-1.0f));
    java.awt.Toolkit var16 = var9.getToolkit();
    java.awt.Rectangle var17 = var9.getBounds();
    var2.repaint(var17);
    var2.setAlignmentX(1.0f);
    boolean var21 = var2.isPreferredSizeSet();
    java.awt.Insets var22 = var2.insets();
    java.awt.image.VolatileImage var25 = var2.createVolatileImage(11, 996);
    var2.revalidate();
    java.awt.Dimension var27 = var2.getPreferredSize();
    boolean var28 = var2.isRequestFocusEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);

  }

  public void test392() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test392");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    javax.swing.InputMap var5 = var2.getInputMap();
    java.lang.String var6 = var2.getName();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var10 = var9.isMaximumSizeSet();
    var9.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var15 = var9.getTransferHandler();
    boolean var16 = var9.hasFocus();
    var9.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var19 = var9.getPreferredSize();
    java.awt.ComponentOrientation var20 = var9.getComponentOrientation();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var24 = var23.isMaximumSizeSet();
    var23.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var29 = var23.getTransferHandler();
    boolean var30 = var23.hasFocus();
    javax.swing.event.AncestorListener[] var31 = var23.getAncestorListeners();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var35 = var34.isMaximumSizeSet();
    var34.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var40 = var34.getTransferHandler();
    boolean var41 = var34.hasFocus();
    var34.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var44 = var34.getPreferredSize();
    java.awt.ComponentOrientation var45 = var34.getComponentOrientation();
    var9.add((java.awt.Component)var23, (java.lang.Object)var34);
    boolean var47 = var34.isDoubleBuffered();
    var34.setEnabled(true);
    boolean var50 = var2.isAncestorOf((java.awt.Component)var34);
    boolean var51 = var2.isFocusTraversalPolicySet();
    javax.swing.JPopupMenu var52 = var2.getComponentPopupMenu();
    java.awt.event.FocusListener[] var53 = var2.getFocusListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test393() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test393");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    var2.revalidate();
    boolean var6 = var2.isFocusOwner();
    javax.swing.InputVerifier var7 = var2.getInputVerifier();
    boolean var8 = var2.isFocusTraversable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test394() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test394");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    var2.firePropertyChange("hi!", ' ', ' ');
    javax.accessibility.AccessibleContext var11 = var2.getAccessibleContext();
    var2.resize(100, 0);
    java.awt.Dimension var15 = var2.getMaximumSize();
    bierse.view.RunningMessagePanel var18 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var19 = var18.isMaximumSizeSet();
    var18.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var18.invalidate();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var36 = var35.isMaximumSizeSet();
    var35.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var41 = var35.getWidth();
    java.awt.Component[] var42 = var35.getComponents();
    var18.putClientProperty((java.lang.Object)var27, (java.lang.Object)var42);
    boolean var44 = var27.isPaintingForPrint();
    var27.show(true);
    bierse.view.RunningMessagePanel var49 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var50 = var49.getPreferredSize();
    java.awt.Point var51 = var49.getMousePosition();
    var49.revalidate();
    var49.revalidate();
    bierse.view.RunningMessagePanel var56 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var57 = var56.isMaximumSizeSet();
    var56.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var64 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var64.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var71 = var64.location();
    boolean var72 = var56.contains(var71);
    java.awt.Point var73 = var49.getLocation(var71);
    java.awt.Component var74 = var27.getComponentAt(var73);
    java.awt.Point var75 = var2.getLocation(var73);
    var2.resetKeyboardActions();
    var2.transferFocusDownCycle();
    bierse.view.RunningMessagePanel var80 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var81 = var80.isMaximumSizeSet();
    boolean var82 = var80.isOpaque();
    java.awt.event.HierarchyListener[] var83 = var80.getHierarchyListeners();
    int var84 = var80.countComponents();
    java.awt.dnd.DropTarget var85 = var80.getDropTarget();
    var80.validate();
    java.awt.LayoutManager var87 = var80.getLayout();
    var2.setLayout(var87);
    java.awt.LayoutManager var89 = var2.getLayout();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test395() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test395");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    java.awt.Dimension var9 = var2.getPreferredSize();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var12.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var19 = var12.location();
    java.awt.Point var20 = var2.getLocation(var19);
    var2.transferFocusBackward();
    int var22 = var2.countComponents();
    var2.setOpaque(false);
    java.awt.event.MouseListener[] var25 = var2.getMouseListeners();
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var29 = var28.isMaximumSizeSet();
    var28.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var28.invalidate();
    java.awt.Dimension var35 = var28.getPreferredSize();
    var28.show(false);
    boolean var38 = var28.isMaximumSizeSet();
    var28.firePropertyChange("PanelUI", 10L, 100L);
    java.awt.event.HierarchyListener[] var43 = var28.getHierarchyListeners();
    java.lang.String var44 = var28.getName();
    bierse.view.RunningMessagePanel var47 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var48 = var47.getPreferredSize();
    java.awt.Dimension var49 = var47.getMaximumSize();
    var47.disable();
    var47.transferFocusDownCycle();
    java.awt.Dimension var52 = var47.getPreferredSize();
    java.awt.Color var53 = var47.getForeground();
    var28.setBackground(var53);
    var2.setForeground(var53);
    var2.setFocusCycleRoot(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test396() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test396");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    javax.swing.InputMap var5 = var2.getInputMap();
    java.lang.String var6 = var2.getName();
    var2.setFocusTraversalPolicyProvider(true);
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var11.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var18 = var11.location();
    java.awt.Component var19 = var2.findComponentAt(var18);
    java.awt.LayoutManager var20 = var2.getLayout();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var24 = var23.isMaximumSizeSet();
    boolean var25 = var23.isOpaque();
    javax.swing.InputMap var26 = var23.getInputMap();
    java.beans.PropertyChangeListener[] var28 = var23.getPropertyChangeListeners("");
    java.lang.String var29 = var23.toString();
    boolean var30 = var2.isFocusCycleRoot((java.awt.Container)var23);
    bierse.view.RunningMessagePanel var33 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var33.setDebugGraphicsOptions(10);
    java.lang.Object var36 = var33.getTreeLock();
    java.awt.Cursor var37 = var33.getCursor();
    var2.setCursor(var37);
    var2.transferFocusDownCycle();
    var2.grabFocus();
    int var41 = var2.getStringHeight();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var29,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]"+ "'", var29.equals("bierse.view.RunningMessagePanel[,0,0,0var29,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 24);

  }

  public void test397() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test397");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    var2.disable();
    boolean var8 = var2.isManagingFocus();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var11.invalidate();
    java.awt.Dimension var18 = var11.getPreferredSize();
    int var19 = var11.getWidth();
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var23 = var22.isMaximumSizeSet();
    var22.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var28 = var22.getTransferHandler();
    boolean var29 = var22.hasFocus();
    var22.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var32 = var22.getPreferredSize();
    var11.setSize(var32);
    var2.setMaximumSize(var32);
    boolean var35 = var2.isManagingFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test398() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test398");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.Insets var7 = var2.getInsets();
    javax.swing.JToolTip var8 = var2.createToolTip();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var17 = var11.getTransferHandler();
    boolean var18 = var11.hasFocus();
    javax.swing.event.AncestorListener[] var19 = var11.getAncestorListeners();
    var11.enable(false);
    int var22 = var8.getComponentZOrder((java.awt.Component)var11);
    java.awt.Dimension var23 = var8.getMinimumSize();
    java.beans.PropertyChangeListener[] var25 = var8.getPropertyChangeListeners("");
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var29 = var28.getPreferredSize();
    java.awt.Dimension var30 = var28.getMaximumSize();
    var8.setPreferredSize(var30);
    javax.swing.TransferHandler var32 = var8.getTransferHandler();
    java.beans.VetoableChangeListener[] var33 = var8.getVetoableChangeListeners();
    boolean var34 = var8.isManagingFocus();
    java.lang.String var35 = var8.getToolTipText();
    boolean var36 = var8.requestDefaultFocus();
    javax.swing.JToolTip var37 = var8.createToolTip();
    var37.move(14, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test399() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test399");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var8 = var7.getPreferredSize();
    javax.swing.JPopupMenu var9 = var7.getComponentPopupMenu();
    java.awt.Rectangle var10 = var7.bounds();
    var2.computeVisibleRect(var10);
    var2.removeNotify();
    int var13 = var2.getHeight();
    float var14 = var2.getAlignmentY();
    int var17 = var2.getBaseline(10, 10);
    boolean var18 = var2.isPaintingTile();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isMaximumSizeSet();
    boolean var23 = var21.isOpaque();
    java.awt.event.HierarchyListener[] var24 = var21.getHierarchyListeners();
    java.awt.peer.ComponentPeer var25 = var21.getPeer();
    var21.transferFocusDownCycle();
    var21.transferFocusUpCycle();
    java.awt.Dimension var28 = var21.minimumSize();
    boolean var29 = var21.isVisible();
    bierse.view.RunningMessagePanel var32 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var32.transferFocus();
    var32.show();
    float var35 = var32.getAlignmentX();
    boolean var38 = var32.contains(0, 24);
    java.awt.Color var39 = var32.getForeground();
    var21.setForeground(var39);
    boolean var41 = var21.isShowing();
    boolean var42 = var21.isShowing();
    bierse.view.RunningMessagePanel var45 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var46 = var45.getPreferredSize();
    java.awt.Dimension var47 = var45.getMaximumSize();
    var45.disable();
    boolean var49 = var45.isEnabled();
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var53 = var52.getPreferredSize();
    boolean var56 = var52.contains(10, 1);
    var52.setAlignmentX((-1.0f));
    java.awt.Toolkit var59 = var52.getToolkit();
    java.awt.Rectangle var60 = var52.getBounds();
    var45.repaint(var60);
    var45.setAlignmentX(1.0f);
    boolean var64 = var45.isPreferredSizeSet();
    java.awt.Insets var65 = var45.insets();
    java.awt.image.VolatileImage var68 = var45.createVolatileImage(11, 996);
    var45.revalidate();
    java.awt.Font var70 = var45.getFont();
    java.awt.FontMetrics var71 = var21.getFontMetrics(var70);
    java.awt.FontMetrics var72 = var2.getFontMetrics(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test400() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test400");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.Insets var7 = var2.getInsets();
    javax.swing.JToolTip var8 = var2.createToolTip();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var17 = var11.getTransferHandler();
    boolean var18 = var11.hasFocus();
    javax.swing.event.AncestorListener[] var19 = var11.getAncestorListeners();
    var11.enable(false);
    int var22 = var8.getComponentZOrder((java.awt.Component)var11);
    var11.setRequestFocusEnabled(false);
    java.util.Locale var25 = var11.getLocale();
    int var26 = var11.countComponents();
    java.awt.Component var29 = var11.findComponentAt(11, 32767);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test401() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test401");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    var2.disable();
    java.awt.Container var8 = var2.getFocusCycleRootAncestor();
    var2.paintImmediately(1, 24, 13, (-1));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      javax.swing.InputMap var15 = var2.getInputMap(13);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test402() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test402");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    java.awt.Font var9 = var2.getFont();
    var2.enable();
    boolean var11 = var2.getIgnoreRepaint();
    boolean var12 = var2.requestFocusInWindow();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    boolean var19 = var15.contains(10, 1);
    java.awt.im.InputMethodRequests var20 = var15.getInputMethodRequests();
    boolean var21 = var15.getInheritsPopupMenu();
    java.lang.String var22 = var15.toString();
    java.awt.Rectangle var23 = var15.bounds();
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var27 = var26.getPreferredSize();
    boolean var30 = var26.contains(10, 1);
    java.awt.im.InputMethodRequests var31 = var26.getInputMethodRequests();
    boolean var32 = var26.getInheritsPopupMenu();
    java.lang.String var33 = var26.toString();
    java.awt.Rectangle var34 = var26.bounds();
    java.awt.Rectangle var35 = var15.getBounds(var34);
    var2.repaint(var35);
    java.awt.Component var39 = var2.locate((-1), (-1));
    var2.setAlignmentX((-1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var22,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var22.equals("bierse.view.RunningMessagePanel[,0,0,0var22,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var33,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var33.equals("bierse.view.RunningMessagePanel[,0,0,0var33,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);

  }

  public void test403() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test403");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.repaint(1L, (-1), (-1), 0, 100);
    boolean var9 = var2.isFocusTraversable();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var13 = var12.getPreferredSize();
    boolean var16 = var12.contains(10, 1);
    java.awt.im.InputMethodRequests var17 = var12.getInputMethodRequests();
    var12.revalidate();
    var12.firePropertyChange("hi!", (short)100, (short)0);
    var2.setNextFocusableComponent((java.awt.Component)var12);
    var2.setVisible(true);
    java.awt.Point var26 = var2.getLocation();
    var2.hide();
    java.awt.Insets var28 = var2.getInsets();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test404() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test404");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    boolean var29 = var2.requestFocus(false);
    var2.removeNotify();
    java.awt.ComponentOrientation var31 = var2.getComponentOrientation();
    int var32 = var2.getHeight();
    boolean var33 = var2.isLightweight();
    java.awt.GraphicsConfiguration var34 = var2.getGraphicsConfiguration();
    javax.swing.KeyStroke[] var35 = var2.getRegisteredKeyStrokes();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test405() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test405");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    java.awt.Font var9 = var2.getFont();
    java.beans.PropertyChangeListener[] var11 = var2.getPropertyChangeListeners("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    boolean var12 = var2.isValidateRoot();
    java.awt.Toolkit var13 = var2.getToolkit();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var17 = var16.getPreferredSize();
    boolean var18 = var16.isPreferredSizeSet();
    var16.enable();
    var16.transferFocusBackward();
    java.awt.event.MouseListener[] var21 = var16.getMouseListeners();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    var24.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var30 = var24.getTransferHandler();
    boolean var31 = var24.hasFocus();
    javax.swing.event.AncestorListener[] var32 = var24.getAncestorListeners();
    java.awt.Dimension var33 = var24.getMinimumSize();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var38 = var37.getPreferredSize();
    java.awt.Dimension var39 = var37.getMaximumSize();
    var37.disable();
    var24.putClientProperty((java.lang.Object)100, (java.lang.Object)var37);
    javax.swing.InputVerifier var42 = var37.getInputVerifier();
    boolean var43 = var37.getInheritsPopupMenu();
    var37.setLocation(0, 100);
    boolean var47 = var37.isFocusTraversalPolicyProvider();
    var37.list();
    javax.swing.event.AncestorListener[] var49 = var37.getAncestorListeners();
    java.awt.Cursor var50 = var37.getCursor();
    int var51 = var37.getY();
    bierse.view.RunningMessagePanel var54 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var54.transferFocus();
    var54.show();
    float var57 = var54.getAlignmentX();
    var54.repaint(0L, 10, 0, 10, (-1));
    boolean var64 = var54.isEnabled();
    bierse.view.RunningMessagePanel var67 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var68 = var67.getPreferredSize();
    javax.swing.JPopupMenu var69 = var67.getComponentPopupMenu();
    java.awt.Rectangle var70 = var67.bounds();
    java.awt.Rectangle var71 = var54.getBounds(var70);
    var37.setBounds(var71);
    java.awt.Rectangle var73 = var16.getBounds(var71);
    java.awt.Rectangle var74 = var2.getBounds(var71);
    java.lang.String var75 = var2.getUIClassID();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "PanelUI"+ "'", var75.equals("PanelUI"));

  }

  public void test406() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test406");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    java.awt.Component[] var9 = var2.getComponents();
    java.awt.event.HierarchyBoundsListener[] var10 = var2.getHierarchyBoundsListeners();
    java.awt.FocusTraversalPolicy var11 = var2.getFocusTraversalPolicy();
    boolean var12 = var2.isPaintingTile();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var16 = var15.isMaximumSizeSet();
    boolean var17 = var15.isOpaque();
    java.awt.event.HierarchyListener[] var18 = var15.getHierarchyListeners();
    int var19 = var15.getWidth();
    java.awt.event.ContainerListener[] var20 = var15.getContainerListeners();
    java.awt.Dimension var21 = var15.getMaximumSize();
    javax.swing.border.Border var22 = var15.getBorder();
    var15.removeNotify();
    boolean var24 = var15.isVisible();
    java.awt.LayoutManager var25 = var15.getLayout();
    var2.setLayout(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test407() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test407");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    var16.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var26 = var16.getPreferredSize();
    java.awt.Dimension var27 = var2.getSize(var26);
    java.awt.image.VolatileImage var30 = var2.createVolatileImage((-1), (-1));
    var2.repaint(100L);
    var2.setVisible(true);
    java.awt.Point var35 = var2.getMousePosition();
    var2.enableInputMethods(false);
    bierse.view.RunningMessagePanel var40 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var40.repaint(1L, (-1), (-1), 0, 100);
    boolean var47 = var40.isFocusTraversable();
    bierse.view.RunningMessagePanel var50 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var51 = var50.getPreferredSize();
    boolean var54 = var50.contains(10, 1);
    java.awt.im.InputMethodRequests var55 = var50.getInputMethodRequests();
    var50.revalidate();
    var50.firePropertyChange("hi!", (short)100, (short)0);
    var40.setNextFocusableComponent((java.awt.Component)var50);
    boolean var62 = var40.isFocusable();
    java.awt.event.KeyListener[] var63 = var40.getKeyListeners();
    boolean var64 = var40.isPreferredSizeSet();
    java.awt.Point var65 = var40.getMousePosition();
    var40.transferFocusUpCycle();
    int var67 = var2.getComponentZOrder((java.awt.Component)var40);
    bierse.view.RunningMessagePanel var70 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var71 = var70.getPreferredSize();
    javax.swing.JPopupMenu var72 = var70.getComponentPopupMenu();
    boolean var73 = var70.isEnabled();
    javax.swing.JRootPane var74 = var70.getRootPane();
    bierse.view.RunningMessagePanel var77 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var78 = var77.isMaximumSizeSet();
    var77.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var83 = var77.getWidth();
    java.awt.Component[] var84 = var77.getComponents();
    boolean var85 = var77.isOpaque();
    var40.add((java.awt.Component)var70, (java.lang.Object)var77);
    javax.swing.border.Border var87 = var40.getBorder();
    var40.resize((-1), 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);

  }

  public void test408() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test408");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    boolean var5 = var2.isMaximumSizeSet();
    java.awt.Dimension var6 = var2.preferredSize();
    java.awt.Color var7 = var2.getBackground();
    java.awt.im.InputContext var8 = var2.getInputContext();
    var2.revalidate();
    var2.transferFocusBackward();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test409() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test409");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.setDoubleBuffered(false);
    java.awt.Dimension var7 = var2.minimumSize();
    boolean var8 = var2.isValidateRoot();
    java.awt.event.HierarchyListener[] var9 = var2.getHierarchyListeners();
    var2.enable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test410() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test410");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.revalidate();
    var2.invalidate();
    boolean var7 = var2.isManagingFocus();
    var2.firePropertyChange("", (short)100, (short)10);
    var2.disable();
    java.awt.event.InputMethodListener[] var13 = var2.getInputMethodListeners();
    java.lang.Object var14 = var2.getTreeLock();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test411() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test411");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    java.awt.Component[] var9 = var2.getComponents();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var13 = var12.isMaximumSizeSet();
    var12.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var18 = var12.getTransferHandler();
    boolean var19 = var12.hasFocus();
    var12.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var22 = var12.getPreferredSize();
    var2.setMaximumSize(var22);
    boolean var24 = var2.requestDefaultFocus();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (byte)100, (byte)10);
    java.awt.Component.BaselineResizeBehavior var29 = var2.getBaselineResizeBehavior();
    int var30 = var2.getY();
    var2.firePropertyChange("hi!", (short)100, (short)0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0);

  }

  public void test412() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test412");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    var16.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var26 = var16.getPreferredSize();
    java.awt.Dimension var27 = var2.getSize(var26);
    java.awt.image.VolatileImage var30 = var2.createVolatileImage((-1), (-1));
    var2.repaint(100L);
    java.awt.ComponentOrientation var33 = var2.getComponentOrientation();
    var2.addNotify();
    int var35 = var2.getY();
    java.lang.String var36 = var2.getName();
    boolean var37 = var2.isMaximumSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test413() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test413");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    javax.swing.event.ListDataListener[] var1 = var0.getListDataListeners();
    bierse.view.RunningMessagePanel var4 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var4.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var11 = var4.location();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    var14.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var20 = var14.getTransferHandler();
    boolean var21 = var14.hasFocus();
    javax.swing.event.AncestorListener[] var22 = var14.getAncestorListeners();
    java.awt.Dimension var23 = var14.getMinimumSize();
    var4.resize(var23);
    int var25 = var0.getIndexOf((java.lang.Object)var23);
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var29 = var28.isMaximumSizeSet();
    var28.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var34 = var28.getTransferHandler();
    java.awt.Component var37 = var28.getComponentAt(0, 0);
    var0.insertElementAt((java.lang.Object)var28, 0);
    javax.swing.event.ListDataListener[] var40 = var0.getListDataListeners();
    int var41 = var0.getSize();
    bierse.view.RunningMessagePanel var44 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var45 = var44.isMaximumSizeSet();
    var44.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var44.invalidate();
    java.awt.Dimension var51 = var44.getPreferredSize();
    var44.show(false);
    boolean var54 = var44.isMaximumSizeSet();
    var44.reshape(100, 24, 10, 24);
    var44.move(10, 24);
    boolean var63 = var44.isCursorSet();
    var0.addElement((java.lang.Object)var63);
    bierse.view.RunningMessagePanel var67 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var68 = var67.isMaximumSizeSet();
    var67.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var73 = var67.getTransferHandler();
    boolean var74 = var67.hasFocus();
    javax.swing.event.AncestorListener[] var75 = var67.getAncestorListeners();
    javax.accessibility.AccessibleContext var76 = var67.getAccessibleContext();
    int var77 = var67.getHeight();
    java.awt.Image var80 = var67.createImage(12, 24);
    int var81 = var67.getHeight();
    var0.addElement((java.lang.Object)var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);

  }

  public void test414() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test414");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.setDebugGraphicsOptions(10);
    java.lang.Object var5 = var2.getTreeLock();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var9 = var8.isMaximumSizeSet();
    boolean var10 = var8.isOpaque();
    java.awt.event.HierarchyListener[] var11 = var8.getHierarchyListeners();
    int var12 = var8.getWidth();
    int var13 = var8.countComponents();
    java.awt.Point var15 = var8.getMousePosition(true);
    var8.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var18 = var8.toString();
    java.awt.Font var19 = var8.getFont();
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var23 = var22.getPreferredSize();
    boolean var26 = var22.contains(10, 1);
    java.awt.im.InputMethodRequests var27 = var22.getInputMethodRequests();
    boolean var28 = var22.getInheritsPopupMenu();
    java.lang.String var29 = var22.toString();
    java.awt.Rectangle var30 = var22.bounds();
    var8.setBounds(var30);
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var35 = var34.isMaximumSizeSet();
    var34.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var40 = var34.getTransferHandler();
    boolean var41 = var34.hasFocus();
    javax.swing.event.AncestorListener[] var42 = var34.getAncestorListeners();
    java.awt.Dimension var43 = var34.getMinimumSize();
    bierse.view.RunningMessagePanel var47 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var48 = var47.getPreferredSize();
    java.awt.Dimension var49 = var47.getMaximumSize();
    var47.disable();
    var34.putClientProperty((java.lang.Object)100, (java.lang.Object)var47);
    javax.swing.InputVerifier var52 = var47.getInputVerifier();
    boolean var53 = var47.getInheritsPopupMenu();
    var47.setLocation(0, 100);
    javax.swing.plaf.PanelUI var57 = var47.getUI();
    var8.setUI(var57);
    var2.setUI(var57);
    java.awt.Insets var60 = var2.getInsets();
    var2.setSpeed(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var18,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var18.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var18,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var29,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var29.equals("bierse.view.RunningMessagePanel[,0,0,0var29,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test415() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test415");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    javax.accessibility.AccessibleContext var11 = var2.getAccessibleContext();
    int var12 = var2.getHeight();
    var2.invalidate();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var17 = var16.getPreferredSize();
    boolean var18 = var16.isPreferredSizeSet();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isMaximumSizeSet();
    boolean var23 = var21.isOpaque();
    java.beans.PropertyChangeListener[] var24 = var21.getPropertyChangeListeners();
    var21.setOpaque(true);
    java.awt.Insets var27 = var21.insets();
    java.awt.Insets var28 = var16.getInsets(var27);
    var16.resetKeyboardActions();
    java.awt.im.InputContext var30 = var16.getInputContext();
    java.awt.Dimension var31 = var16.getPreferredSize();
    var2.remove((java.awt.Component)var16);
    var16.firePropertyChange("PanelUI", 10.0f, (-1.0f));
    var16.removeNotify();
    int var38 = var16.getX();
    var16.repaint();
    java.awt.Dimension var40 = var16.minimumSize();
    boolean var41 = var16.isPaintingTile();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test416() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test416");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    var2.firePropertyChange("hi!", ' ', ' ');
    var2.requestFocus();
    var2.firePropertyChange("", 100, 1);
    boolean var16 = var2.isDisplayable();
    var2.enable();
    var2.setName("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]");
    java.awt.Insets var20 = var2.getInsets();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test417() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test417");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    java.awt.Container var7 = var2.getTopLevelAncestor();
    var2.setToolTipText("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    boolean var10 = var2.isOpaque();
    java.awt.Dimension var11 = var2.getMinimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test418() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test418");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    int var7 = var2.countComponents();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", (short)1, (short)10);
    java.lang.String var12 = var2.getUIClassID();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var16 = var15.isMaximumSizeSet();
    var15.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var21 = var15.getTransferHandler();
    java.awt.Component var24 = var15.getComponentAt(0, 0);
    java.awt.Dimension var25 = var15.minimumSize();
    var15.move(1, (-1));
    java.awt.Color var29 = var15.getBackground();
    bierse.view.RunningMessagePanel var32 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var33 = var32.isMaximumSizeSet();
    boolean var34 = var32.isOpaque();
    boolean var35 = var32.isPreferredSizeSet();
    boolean var36 = var32.getIgnoreRepaint();
    bierse.view.RunningMessagePanel var39 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var40 = var39.isMaximumSizeSet();
    var39.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var45 = var39.getWidth();
    java.awt.Image var48 = var39.createImage(24, 24);
    boolean var49 = var39.getInheritsPopupMenu();
    boolean var50 = var39.isBackgroundSet();
    java.awt.Dimension var51 = var39.getPreferredSize();
    bierse.view.RunningMessagePanel var54 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var55 = var54.isMaximumSizeSet();
    var54.layout();
    var54.revalidate();
    boolean var58 = var54.isFocusOwner();
    float var59 = var54.getAlignmentX();
    java.awt.Color var60 = var54.getForeground();
    var54.firePropertyChange("", (-1L), 0L);
    var54.setOpaque(true);
    bierse.view.RunningMessagePanel var69 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var70 = var69.getPreferredSize();
    boolean var73 = var69.contains(10, 1);
    var69.setFocusTraversalPolicyProvider(false);
    float var76 = var69.getAlignmentX();
    java.awt.Component.BaselineResizeBehavior var77 = var69.getBaselineResizeBehavior();
    java.awt.dnd.DropTarget var78 = var69.getDropTarget();
    var69.layout();
    var69.setDebugGraphicsOptions(996);
    java.awt.Graphics var82 = var69.getGraphics();
    var54.printComponents(var82);
    var39.paintAll(var82);
    var32.paintAll(var82);
    var15.paintComponents(var82);
    var2.update(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "PanelUI"+ "'", var12.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test419() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test419");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    var2.revalidate();
    boolean var6 = var2.isFocusOwner();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var10 = var9.getPreferredSize();
    java.awt.Dimension var11 = var9.getMaximumSize();
    var9.disable();
    var2.putClientProperty((java.lang.Object)var9, (java.lang.Object)'a');
    int var15 = var2.getWidth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);

  }

  public void test420() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test420");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    var16.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var26 = var16.getPreferredSize();
    java.awt.Dimension var27 = var2.getSize(var26);
    java.awt.image.VolatileImage var30 = var2.createVolatileImage((-1), (-1));
    javax.swing.TransferHandler var31 = var2.getTransferHandler();
    java.awt.Dimension var32 = var2.preferredSize();
    java.awt.Cursor var33 = var2.getCursor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test421() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test421");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    int var9 = var2.getHeight();
    java.awt.Container var10 = var2.getFocusCycleRootAncestor();
    boolean var11 = var2.isPreferredSizeSet();
    java.awt.Rectangle var12 = var2.bounds();
    java.awt.event.HierarchyBoundsListener[] var13 = var2.getHierarchyBoundsListeners();
    java.awt.im.InputContext var14 = var2.getInputContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test422() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test422");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    int var12 = var2.getDebugGraphicsOptions();
    java.awt.Component var15 = var2.locate(24, 100);
    bierse.view.RunningMessagePanel var18 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var19 = var18.getPreferredSize();
    boolean var22 = var18.contains(10, 1);
    java.awt.im.InputMethodRequests var23 = var18.getInputMethodRequests();
    java.awt.event.FocusListener[] var24 = var18.getFocusListeners();
    java.awt.Font var25 = var18.getFont();
    javax.swing.plaf.PanelUI var26 = var18.getUI();
    var2.setUI(var26);
    java.awt.Dimension var28 = var2.getSize();
    var2.repaint(10L, 0, 12, 24, 1);
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (-1L), 0L);
    var2.setFocusCycleRoot(true);
    float var41 = var2.getAlignmentX();
    java.awt.dnd.DropTarget var42 = var2.getDropTarget();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);

  }

  public void test423() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test423");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    boolean var13 = var11.isOpaque();
    java.awt.event.HierarchyListener[] var14 = var11.getHierarchyListeners();
    int var15 = var11.countComponents();
    java.awt.event.HierarchyBoundsListener[] var16 = var11.getHierarchyBoundsListeners();
    boolean var18 = var11.areFocusTraversalKeysSet(1);
    boolean var19 = var2.isAncestorOf((java.awt.Component)var11);
    var2.requestFocus();
    java.awt.Dimension var21 = var2.getMinimumSize();
    var2.setSpeed(0);
    var2.setInheritsPopupMenu(false);
    java.awt.image.VolatileImage var28 = var2.createVolatileImage(12, 14);
    boolean var29 = var2.isDoubleBuffered();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);

  }

  public void test424() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test424");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.countComponents();
    java.awt.event.HierarchyBoundsListener[] var7 = var2.getHierarchyBoundsListeners();
    java.awt.Rectangle var8 = var2.getBounds();
    java.awt.event.HierarchyBoundsListener[] var9 = var2.getHierarchyBoundsListeners();
    var2.repaint((-1L), 10, (-1), 13, (-1));
    var2.removeNotify();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test425() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test425");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    var16.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var26 = var16.getPreferredSize();
    java.awt.Dimension var27 = var2.getSize(var26);
    var2.repaint(100L, 1, 0, 100, 24);
    var2.updateUI();
    javax.swing.TransferHandler var35 = var2.getTransferHandler();
    java.awt.Component.BaselineResizeBehavior var36 = var2.getBaselineResizeBehavior();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", 100L, 1L);
    java.awt.Dimension var41 = var2.getPreferredSize();
    boolean var42 = var2.isVisible();
    boolean var43 = var2.isFontSet();
    java.awt.Dimension var44 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var47 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var48 = var47.isMaximumSizeSet();
    var47.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var53 = var47.getTransferHandler();
    boolean var54 = var47.hasFocus();
    var47.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var57 = var47.getPreferredSize();
    java.awt.ComponentOrientation var58 = var47.getComponentOrientation();
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var62 = var61.isMaximumSizeSet();
    var61.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var67 = var61.getTransferHandler();
    boolean var68 = var61.hasFocus();
    var61.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var71 = var61.getPreferredSize();
    java.awt.Dimension var72 = var47.getSize(var71);
    var47.repaint(100L, 1, 0, 100, 24);
    var47.updateUI();
    javax.swing.TransferHandler var80 = var47.getTransferHandler();
    java.awt.Component.BaselineResizeBehavior var81 = var47.getBaselineResizeBehavior();
    var47.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", 100L, 1L);
    java.awt.Dimension var86 = var47.getPreferredSize();
    boolean var87 = var47.isVisible();
    boolean var88 = var47.isFontSet();
    java.awt.Point var89 = var47.getLocation();
    java.awt.Point var90 = var2.getLocation(var89);
    java.awt.Graphics var91 = var2.getGraphics();
    var2.nextFocus();
    var2.enable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);

  }

  public void test426() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test426");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    java.awt.Component var11 = var2.getComponentAt(0, 0);
    java.awt.Dimension var12 = var2.minimumSize();
    boolean var13 = var2.isFocusable();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var17 = var16.getPreferredSize();
    javax.swing.JPopupMenu var18 = var16.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var22 = var21.getPreferredSize();
    javax.swing.JPopupMenu var23 = var21.getComponentPopupMenu();
    java.awt.Rectangle var24 = var21.bounds();
    var16.computeVisibleRect(var24);
    boolean var26 = var16.isManagingFocus();
    int var27 = var16.getHeight();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var31 = var30.isMaximumSizeSet();
    var30.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var36 = var30.getTransferHandler();
    boolean var37 = var30.hasFocus();
    javax.swing.event.AncestorListener[] var38 = var30.getAncestorListeners();
    java.awt.Dimension var39 = var30.getMinimumSize();
    boolean var40 = var30.isFocusTraversalPolicySet();
    var2.add((java.awt.Component)var16, (java.lang.Object)var30);
    bierse.view.RunningMessagePanel var45 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var46 = var45.isFocusTraversable();
    var45.setOpaque(true);
    java.awt.Dimension var49 = var45.getSize();
    var45.removeAll();
    java.awt.Component var51 = var16.add("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var45);
    boolean var52 = var45.isRequestFocusEnabled();
    float var53 = var45.getAlignmentX();
    var45.enableInputMethods(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.5f);

  }

  public void test427() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test427");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    javax.accessibility.AccessibleContext var11 = var2.getAccessibleContext();
    int var12 = var2.getHeight();
    var2.invalidate();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var17 = var16.getPreferredSize();
    boolean var18 = var16.isPreferredSizeSet();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isMaximumSizeSet();
    boolean var23 = var21.isOpaque();
    java.beans.PropertyChangeListener[] var24 = var21.getPropertyChangeListeners();
    var21.setOpaque(true);
    java.awt.Insets var27 = var21.insets();
    java.awt.Insets var28 = var16.getInsets(var27);
    var16.resetKeyboardActions();
    java.awt.im.InputContext var30 = var16.getInputContext();
    java.awt.Dimension var31 = var16.getPreferredSize();
    var2.remove((java.awt.Component)var16);
    var16.firePropertyChange("PanelUI", 10.0f, (-1.0f));
    var16.removeNotify();
    boolean var39 = var16.requestFocus(true);
    java.awt.Dimension var40 = var16.getMinimumSize();
    int var41 = var16.getStringHeight();
    boolean var42 = var16.isPaintingForPrint();
    java.awt.Component.BaselineResizeBehavior var43 = var16.getBaselineResizeBehavior();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test428() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test428");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isFocusTraversable();
    bierse.view.RunningMessagePanel var6 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var7 = var6.getPreferredSize();
    boolean var10 = var6.contains(10, 1);
    java.awt.im.InputMethodRequests var11 = var6.getInputMethodRequests();
    java.awt.event.FocusListener[] var12 = var6.getFocusListeners();
    java.awt.Font var13 = var6.getFont();
    java.beans.PropertyChangeListener[] var15 = var6.getPropertyChangeListeners("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    boolean var16 = var6.isValidateRoot();
    java.awt.Toolkit var17 = var6.getToolkit();
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var21 = var20.isMaximumSizeSet();
    var20.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var20.invalidate();
    java.awt.Dimension var27 = var20.getPreferredSize();
    var6.setMaximumSize(var27);
    var2.setSize(var27);
    bierse.view.RunningMessagePanel var32 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var33 = var32.getPreferredSize();
    boolean var36 = var32.contains(10, 1);
    java.awt.im.InputMethodRequests var37 = var32.getInputMethodRequests();
    java.awt.Font var38 = var32.getFont();
    var2.setFont(var38);
    boolean var40 = var2.getIgnoreRepaint();
    boolean var41 = var2.isCursorSet();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777225,maximumSize=,minimumSize=,preferredSize=]", (byte)100, (byte)(-1));
    var2.setAlignmentX(100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test429() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test429");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    float var5 = var2.getAlignmentX();
    var2.repaint(0L, 10, 0, 10, (-1));
    boolean var12 = var2.isEnabled();
    java.lang.Object var13 = var2.getTreeLock();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (byte)100, (byte)100);
    javax.swing.JPopupMenu var18 = var2.getComponentPopupMenu();
    int var19 = var2.getWidth();
    var2.move(24, 12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);

  }

  public void test430() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test430");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    javax.accessibility.AccessibleContext var11 = var2.getAccessibleContext();
    int var12 = var2.getHeight();
    var2.invalidate();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var17 = var16.getPreferredSize();
    boolean var18 = var16.isPreferredSizeSet();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isMaximumSizeSet();
    boolean var23 = var21.isOpaque();
    java.beans.PropertyChangeListener[] var24 = var21.getPropertyChangeListeners();
    var21.setOpaque(true);
    java.awt.Insets var27 = var21.insets();
    java.awt.Insets var28 = var16.getInsets(var27);
    var16.resetKeyboardActions();
    java.awt.im.InputContext var30 = var16.getInputContext();
    java.awt.Dimension var31 = var16.getPreferredSize();
    var2.remove((java.awt.Component)var16);
    var16.firePropertyChange("PanelUI", 10.0f, (-1.0f));
    var16.removeNotify();
    int var38 = var16.getX();
    var16.repaint();
    boolean var42 = var16.contains((-1), 12);
    javax.swing.InputVerifier var43 = var16.getInputVerifier();
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var47 = var46.isMaximumSizeSet();
    var46.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var52 = var46.getWidth();
    java.awt.im.InputMethodRequests var53 = var46.getInputMethodRequests();
    boolean var56 = var46.inside(0, 100);
    bierse.view.RunningMessagePanel var59 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var60 = var59.getPreferredSize();
    java.awt.Dimension var61 = var46.getSize(var60);
    var16.setSize(var60);
    int var63 = var16.countComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);

  }

  public void test431() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test431");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    var2.setAlignmentY(10.0f);
    java.awt.event.ComponentListener[] var16 = var2.getComponentListeners();
    var2.repaint((-1L), 12, 24, 100, 13);
    java.awt.Toolkit var23 = var2.getToolkit();
    java.awt.event.HierarchyBoundsListener[] var24 = var2.getHierarchyBoundsListeners();
    javax.swing.event.AncestorListener[] var25 = var2.getAncestorListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test432() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test432");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    javax.swing.InputMap var5 = var2.getInputMap();
    java.lang.String var6 = var2.getName();
    var2.setFocusTraversalPolicyProvider(true);
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var11.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var18 = var11.location();
    java.awt.Component var19 = var2.findComponentAt(var18);
    java.awt.LayoutManager var20 = var2.getLayout();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var24 = var23.isMaximumSizeSet();
    boolean var25 = var23.isOpaque();
    javax.swing.InputMap var26 = var23.getInputMap();
    java.beans.PropertyChangeListener[] var28 = var23.getPropertyChangeListeners("");
    java.lang.String var29 = var23.toString();
    boolean var30 = var2.isFocusCycleRoot((java.awt.Container)var23);
    bierse.view.RunningMessagePanel var33 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var34 = var33.isMaximumSizeSet();
    var33.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var39 = var33.getTransferHandler();
    boolean var40 = var33.hasFocus();
    javax.swing.event.AncestorListener[] var41 = var33.getAncestorListeners();
    java.awt.Dimension var42 = var33.getMinimumSize();
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var47 = var46.getPreferredSize();
    java.awt.Dimension var48 = var46.getMaximumSize();
    var46.disable();
    var33.putClientProperty((java.lang.Object)100, (java.lang.Object)var46);
    var46.setEnabled(false);
    boolean var53 = var46.isMinimumSizeSet();
    float var54 = var46.getAlignmentY();
    java.awt.Rectangle var55 = var46.getBounds();
    java.awt.Rectangle var56 = var2.getBounds(var55);
    var2.setFocusable(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var29,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]"+ "'", var29.equals("bierse.view.RunningMessagePanel[,0,0,0var29,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test433() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test433");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Dimension var4 = var2.getMaximumSize();
    var2.disable();
    var2.transferFocusDownCycle();
    java.awt.Dimension var7 = var2.getPreferredSize();
    java.awt.Color var8 = var2.getForeground();
    var2.disable();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var14 = var13.isMaximumSizeSet();
    var13.layout();
    var13.invalidate();
    java.awt.event.FocusListener[] var17 = var13.getFocusListeners();
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var21 = var20.isMaximumSizeSet();
    var20.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var26 = var20.getTransferHandler();
    boolean var27 = var20.hasFocus();
    var20.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var30 = var20.getPreferredSize();
    java.awt.ComponentOrientation var31 = var20.getComponentOrientation();
    var20.transferFocus();
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var36 = var35.isMaximumSizeSet();
    var35.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var41 = var35.getTransferHandler();
    boolean var42 = var35.hasFocus();
    javax.swing.event.AncestorListener[] var43 = var35.getAncestorListeners();
    java.awt.Dimension var44 = var35.getMinimumSize();
    boolean var45 = var35.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var49 = var48.isMaximumSizeSet();
    var48.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var54 = var48.getTransferHandler();
    boolean var55 = var48.hasFocus();
    var48.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var58 = var48.getPreferredSize();
    java.awt.Dimension var59 = var35.getSize(var58);
    var20.setSize(var58);
    bierse.view.RunningMessagePanel var63 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var64 = var63.getPreferredSize();
    boolean var67 = var63.contains(10, 1);
    java.awt.Insets var68 = var63.getInsets();
    javax.swing.JToolTip var69 = var63.createToolTip();
    bierse.view.RunningMessagePanel var72 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var73 = var72.isMaximumSizeSet();
    var72.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var78 = var72.getTransferHandler();
    boolean var79 = var72.hasFocus();
    javax.swing.event.AncestorListener[] var80 = var72.getAncestorListeners();
    var72.enable(false);
    int var83 = var69.getComponentZOrder((java.awt.Component)var72);
    boolean var84 = var69.requestFocusInWindow();
    boolean var85 = var69.isOptimizedDrawingEnabled();
    var13.add((java.awt.Component)var20, (java.lang.Object)var69);
    float var87 = var69.getAlignmentY();
    boolean var88 = var69.getIgnoreRepaint();
    java.awt.Component var89 = var2.add("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var69);
    java.awt.Rectangle var90 = var89.bounds();
    java.awt.Color var91 = var89.getBackground();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test434() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test434");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    java.awt.Font var9 = var2.getFont();
    java.awt.Image var12 = var2.createImage((-1), 996);
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var16 = var15.isMaximumSizeSet();
    var15.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var21 = var15.getTransferHandler();
    boolean var22 = var15.hasFocus();
    var15.setVerifyInputWhenFocusTarget(false);
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    boolean var29 = var27.isOpaque();
    javax.swing.InputMap var30 = var27.getInputMap();
    java.beans.PropertyChangeListener[] var32 = var27.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var33 = var27.getComponentOrientation();
    var15.applyComponentOrientation(var33);
    java.awt.Dimension var35 = var15.getMinimumSize();
    int var36 = var15.getY();
    bierse.view.RunningMessagePanel var39 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var40 = var39.getPreferredSize();
    boolean var43 = var39.contains(10, 1);
    var39.setAlignmentX((-1.0f));
    java.awt.Point var46 = var39.getLocation();
    java.awt.Component var47 = var15.getComponentAt(var46);
    boolean var48 = var2.contains(var46);
    var2.paintImmediately(24, 13, (-1), 24);
    java.awt.Component.BaselineResizeBehavior var54 = var2.getBaselineResizeBehavior();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test435() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test435");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    java.awt.event.ContainerListener[] var7 = var2.getContainerListeners();
    java.awt.Dimension var8 = var2.getMaximumSize();
    boolean var9 = var2.isRequestFocusEnabled();
    boolean var10 = var2.hasFocus();
    var2.transferFocusUpCycle();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    boolean var16 = var14.isOpaque();
    java.beans.PropertyChangeListener[] var17 = var14.getPropertyChangeListeners();
    var14.setOpaque(true);
    java.awt.Insets var20 = var14.insets();
    boolean var21 = var14.isOptimizedDrawingEnabled();
    var14.disable();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var25.repaint(1L, (-1), (-1), 0, 100);
    boolean var32 = var25.isFocusTraversable();
    javax.swing.ActionMap var33 = var25.getActionMap();
    var14.setActionMap(var33);
    boolean var35 = var14.isMinimumSizeSet();
    java.awt.Container var36 = var14.getParent();
    var14.setOpaque(true);
    var14.transferFocus();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setComponentZOrder((java.awt.Component)var14, 11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);

  }

  public void test436() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test436");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    float var12 = var2.getAlignmentX();
    boolean var13 = var2.isMinimumSizeSet();
    var2.list();
    boolean var15 = var2.isMaximumSizeSet();
    var2.invalidate();
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    boolean var21 = var19.isOpaque();
    javax.swing.InputMap var22 = var19.getInputMap();
    java.beans.PropertyChangeListener[] var24 = var19.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var25 = var19.getComponentOrientation();
    java.awt.peer.ComponentPeer var26 = var19.getPeer();
    var19.transferFocusDownCycle();
    java.awt.Rectangle var28 = var19.getBounds();
    var2.scrollRectToVisible(var28);
    var2.setDoubleBuffered(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test437() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test437");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    int var12 = var2.getDebugGraphicsOptions();
    java.awt.Component var15 = var2.locate(24, 100);
    bierse.view.RunningMessagePanel var18 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var19 = var18.getPreferredSize();
    boolean var22 = var18.contains(10, 1);
    java.awt.im.InputMethodRequests var23 = var18.getInputMethodRequests();
    java.awt.event.FocusListener[] var24 = var18.getFocusListeners();
    java.awt.Font var25 = var18.getFont();
    javax.swing.plaf.PanelUI var26 = var18.getUI();
    var2.setUI(var26);
    java.awt.Dimension var28 = var2.getSize();
    var2.repaint(10L, 0, 12, 24, 1);
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (-1L), 0L);
    java.awt.peer.ComponentPeer var39 = var2.getPeer();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);

  }

  public void test438() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test438");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var8 = var7.getPreferredSize();
    javax.swing.JPopupMenu var9 = var7.getComponentPopupMenu();
    java.awt.Rectangle var10 = var7.bounds();
    var2.computeVisibleRect(var10);
    java.awt.event.ComponentListener[] var12 = var2.getComponentListeners();
    java.awt.Container var13 = var2.getFocusCycleRootAncestor();
    java.awt.Font var14 = var2.getFont();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var18 = var17.getPreferredSize();
    boolean var21 = var17.contains(10, 1);
    java.awt.im.InputMethodRequests var22 = var17.getInputMethodRequests();
    java.awt.event.FocusListener[] var23 = var17.getFocusListeners();
    java.awt.Font var24 = var17.getFont();
    java.beans.PropertyChangeListener[] var26 = var17.getPropertyChangeListeners("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    boolean var27 = var17.isValidateRoot();
    java.awt.Toolkit var28 = var17.getToolkit();
    javax.swing.KeyStroke[] var29 = var17.getRegisteredKeyStrokes();
    bierse.view.RunningMessagePanel var32 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var33 = var32.isMaximumSizeSet();
    var32.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var38 = var32.getTransferHandler();
    boolean var39 = var32.hasFocus();
    var32.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var42 = var32.getPreferredSize();
    java.awt.ComponentOrientation var43 = var32.getComponentOrientation();
    java.lang.String var44 = var32.getName();
    java.awt.Font var45 = var32.getFont();
    javax.swing.ActionMap var46 = var32.getActionMap();
    java.awt.Component var48 = var17.add((java.awt.Component)var32, (-1));
    bierse.view.RunningMessagePanel var51 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var52 = var51.isMaximumSizeSet();
    var51.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var57 = var51.getTransferHandler();
    boolean var58 = var51.hasFocus();
    var51.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var61 = var51.getPreferredSize();
    java.awt.ComponentOrientation var62 = var51.getComponentOrientation();
    bierse.view.RunningMessagePanel var65 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var66 = var65.isMaximumSizeSet();
    var65.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var71 = var65.getTransferHandler();
    boolean var72 = var65.hasFocus();
    var65.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var75 = var65.getPreferredSize();
    java.awt.Dimension var76 = var51.getSize(var75);
    java.awt.image.VolatileImage var79 = var51.createVolatileImage((-1), (-1));
    var51.repaint(100L);
    java.awt.ComponentOrientation var82 = var51.getComponentOrientation();
    var17.setComponentOrientation(var82);
    boolean var84 = var17.isBackgroundSet();
    java.awt.Image var87 = var17.createImage(13, 10);
    java.awt.event.ContainerListener[] var88 = var17.getContainerListeners();
    java.lang.Object var89 = var2.getClientProperty((java.lang.Object)var88);
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777225,maximumSize=,minimumSize=,preferredSize=]", '4', 'a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);

  }

  public void test439() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test439");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    java.awt.peer.ComponentPeer var6 = var2.getPeer();
    var2.transferFocusDownCycle();
    var2.transferFocusUpCycle();
    java.awt.Dimension var9 = var2.minimumSize();
    var2.repaint(10L, 11, 24, 11, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test440() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test440");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    boolean var7 = var2.isFocusTraversalPolicySet();
    java.awt.image.ColorModel var8 = var2.getColorModel();
    var2.requestFocus();
    java.awt.Image var12 = var2.createImage(996, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test441() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test441");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    javax.accessibility.AccessibleContext var5 = var2.getAccessibleContext();
    boolean var6 = var2.isFocusTraversalPolicyProvider();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var9.transferFocus();
    var9.show();
    float var12 = var9.getAlignmentX();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var16 = var15.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var19.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var26 = var19.location();
    java.awt.Component var27 = var15.findComponentAt(var26);
    var15.setEnabled(true);
    bierse.view.RunningMessagePanel var32 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var32.transferFocus();
    var32.show();
    float var35 = var32.getAlignmentX();
    boolean var38 = var32.contains(0, 24);
    bierse.view.RunningMessagePanel var41 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var42 = var41.getPreferredSize();
    java.awt.Dimension var43 = var41.getMaximumSize();
    java.awt.event.FocusListener[] var44 = var41.getFocusListeners();
    bierse.view.RunningMessagePanel var47 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var48 = var47.getPreferredSize();
    boolean var51 = var47.contains(10, 1);
    java.awt.im.InputMethodRequests var52 = var47.getInputMethodRequests();
    java.awt.Font var53 = var47.getFont();
    var41.setFont(var53);
    java.awt.FontMetrics var55 = var32.getFontMetrics(var53);
    java.awt.FontMetrics var56 = var15.getFontMetrics(var53);
    var9.setFont(var53);
    var2.setFont(var53);
    var2.transferFocus();
    bierse.view.RunningMessagePanel var62 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var63 = var62.getPreferredSize();
    boolean var64 = var62.isPreferredSizeSet();
    var62.enable();
    var62.transferFocusBackward();
    var62.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (byte)10, (byte)1);
    java.awt.event.MouseWheelListener[] var71 = var62.getMouseWheelListeners();
    boolean var72 = var62.isFontSet();
    java.awt.Dimension var73 = var62.getMaximumSize();
    int var74 = var2.getComponentZOrder((java.awt.Component)var62);
    int var75 = var2.getWidth();
    javax.swing.ActionMap var76 = var2.getActionMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test442() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test442");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var3 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var4 = var3.getPreferredSize();
    java.awt.Point var5 = var3.getMousePosition();
    var3.revalidate();
    var3.invalidate();
    int var8 = var0.getIndexOf((java.lang.Object)var3);
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var17 = var11.getTransferHandler();
    boolean var18 = var11.hasFocus();
    javax.swing.event.AncestorListener[] var19 = var11.getAncestorListeners();
    java.awt.Dimension var20 = var11.getMinimumSize();
    int var21 = var0.getIndexOf((java.lang.Object)var11);
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    var24.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var24.invalidate();
    int var31 = var24.getHeight();
    var24.setIgnoreRepaint(true);
    var24.grabFocus();
    java.awt.Color var35 = var24.getBackground();
    var0.insertElementAt((java.lang.Object)var24, 10);
    javax.swing.KeyStroke[] var38 = var24.getRegisteredKeyStrokes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test443() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test443");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    java.awt.dnd.DropTarget var21 = var15.getDropTarget();
    java.awt.event.MouseListener[] var22 = var15.getMouseListeners();
    java.awt.Component var25 = var15.findComponentAt(1, 1);
    java.awt.event.MouseWheelListener[] var26 = var15.getMouseWheelListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test444() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test444");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    java.awt.Dimension var9 = var2.getPreferredSize();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var12.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var19 = var12.location();
    java.awt.Point var20 = var2.getLocation(var19);
    var2.transferFocusBackward();
    int var22 = var2.countComponents();
    var2.setOpaque(false);
    int var25 = var2.getY();
    javax.swing.plaf.PanelUI var26 = var2.getUI();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test445() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test445");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    var2.enable();
    javax.accessibility.AccessibleContext var6 = var2.getAccessibleContext();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var9.transferFocus();
    var9.show();
    float var12 = var9.getAlignmentX();
    var9.repaint(0L, 10, 0, 10, (-1));
    boolean var19 = var9.isEnabled();
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var23 = var22.getPreferredSize();
    javax.swing.JPopupMenu var24 = var22.getComponentPopupMenu();
    java.awt.Rectangle var25 = var22.bounds();
    java.awt.Rectangle var26 = var9.getBounds(var25);
    var2.computeVisibleRect(var26);
    java.awt.Insets var28 = var2.getInsets();
    java.awt.event.ContainerListener[] var29 = var2.getContainerListeners();
    var2.disable();
    java.awt.Toolkit var31 = var2.getToolkit();
    java.awt.Component var34 = var2.getComponentAt(1, 11);
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var39 = var38.getPreferredSize();
    boolean var42 = var38.contains(10, 1);
    java.awt.im.InputMethodRequests var43 = var38.getInputMethodRequests();
    var38.revalidate();
    java.awt.event.HierarchyListener[] var45 = var38.getHierarchyListeners();
    javax.swing.JRootPane var46 = var38.getRootPane();
    var38.validate();
    javax.swing.InputMap var48 = var38.getInputMap();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setInputMap(10, var48);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test446() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test446");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    int var20 = var2.getHeight();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var23.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var30 = var23.location();
    boolean var31 = var2.contains(var30);
    float var32 = var2.getAlignmentX();
    var2.grabFocus();
    boolean var34 = var2.getAutoscrolls();
    java.awt.Container var35 = var2.getFocusCycleRootAncestor();
    boolean var36 = var2.isFocusCycleRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test447() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test447");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    boolean var21 = var15.getInheritsPopupMenu();
    boolean var22 = var15.isFocusCycleRoot();
    java.awt.dnd.DropTarget var23 = var15.getDropTarget();
    boolean var24 = var15.isBackgroundSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);

  }

  public void test448() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test448");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    var2.setAlignmentY(10.0f);
    var2.setInheritsPopupMenu(false);
    boolean var18 = var2.requestDefaultFocus();
    var2.transferFocusBackward();
    javax.swing.JToolTip var20 = var2.createToolTip();
    var2.setSize(12, 24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test449() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test449");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    java.awt.dnd.DropTarget var21 = var15.getDropTarget();
    java.awt.event.MouseListener[] var22 = var15.getMouseListeners();
    int var23 = var15.getHeight();
    boolean var24 = var15.isFocusTraversalPolicyProvider();
    var15.enable();
    var15.removeAll();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test450() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test450");


    bierse.view.MyKeyMap var2 = new bierse.view.MyKeyMap("PanelUI", 24);
    java.lang.String var3 = var2.getText();
    java.lang.String var4 = var2.toString();
    java.lang.String var5 = var2.getText();
    java.lang.String var6 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "PanelUI"+ "'", var3.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "PanelUI"+ "'", var4.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "PanelUI"+ "'", var5.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "PanelUI"+ "'", var6.equals("PanelUI"));

  }

  public void test451() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test451");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Dimension var4 = var2.getMaximumSize();
    java.awt.event.FocusListener[] var5 = var2.getFocusListeners();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var9 = var8.getPreferredSize();
    boolean var12 = var8.contains(10, 1);
    java.awt.im.InputMethodRequests var13 = var8.getInputMethodRequests();
    java.awt.Font var14 = var8.getFont();
    var2.setFont(var14);
    java.beans.VetoableChangeListener[] var16 = var2.getVetoableChangeListeners();
    boolean var17 = var2.isMaximumSizeSet();
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var20.transferFocus();
    var20.show();
    float var23 = var20.getAlignmentX();
    var20.repaint(0L, 10, 0, 10, (-1));
    boolean var30 = var20.isEnabled();
    bierse.view.RunningMessagePanel var33 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var34 = var33.getPreferredSize();
    javax.swing.JPopupMenu var35 = var33.getComponentPopupMenu();
    java.awt.Rectangle var36 = var33.bounds();
    java.awt.Rectangle var37 = var20.getBounds(var36);
    var2.paintImmediately(var37);
    var2.resize(24, 100);
    var2.setEnabled(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test452() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test452");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var8 = var2.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var12 = var11.getPreferredSize();
    boolean var13 = var11.isPreferredSizeSet();
    var11.enable();
    var11.transferFocusBackward();
    int var16 = var2.getComponentZOrder((java.awt.Component)var11);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var19.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var26 = var19.location();
    boolean var27 = var11.contains(var26);
    var11.layout();
    bierse.view.RunningMessagePanel var31 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var32 = var31.isMaximumSizeSet();
    var31.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var31.invalidate();
    java.awt.Dimension var38 = var31.getPreferredSize();
    bierse.view.RunningMessagePanel var41 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var41.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var48 = var41.location();
    java.awt.Point var49 = var31.getLocation(var48);
    var11.setLocation(var48);
    var11.repaint((-1L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test453() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test453");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    boolean var11 = var2.inside(24, 1);
    java.awt.image.VolatileImage var14 = var2.createVolatileImage(0, 1);
    var2.setEnabled(true);
    boolean var17 = var2.isCursorSet();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (short)100, (short)10);
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var25 = var24.getPreferredSize();
    boolean var26 = var24.isPreferredSizeSet();
    var24.enable();
    javax.accessibility.AccessibleContext var28 = var24.getAccessibleContext();
    java.awt.Insets var29 = var24.insets();
    bierse.view.RunningMessagePanel var32 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var33 = var32.getPreferredSize();
    java.awt.Point var34 = var32.getMousePosition();
    var32.revalidate();
    var32.transferFocus();
    java.awt.Toolkit var37 = var32.getToolkit();
    bierse.view.RunningMessagePanel var40 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var41 = var40.isMaximumSizeSet();
    var40.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var46 = var40.getTransferHandler();
    boolean var47 = var40.hasFocus();
    var40.setVerifyInputWhenFocusTarget(false);
    int var50 = var40.getDebugGraphicsOptions();
    java.awt.Component var53 = var40.locate(24, 100);
    bierse.view.RunningMessagePanel var56 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var57 = var56.getPreferredSize();
    boolean var60 = var56.contains(10, 1);
    java.awt.im.InputMethodRequests var61 = var56.getInputMethodRequests();
    java.awt.event.FocusListener[] var62 = var56.getFocusListeners();
    java.awt.Font var63 = var56.getFont();
    javax.swing.plaf.PanelUI var64 = var56.getUI();
    var40.setUI(var64);
    bierse.view.RunningMessagePanel var68 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var69 = var68.isMaximumSizeSet();
    boolean var70 = var68.isOpaque();
    java.awt.event.HierarchyListener[] var71 = var68.getHierarchyListeners();
    int var72 = var68.getWidth();
    int var73 = var68.countComponents();
    java.awt.Point var75 = var68.getMousePosition(true);
    var68.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var78 = var68.toString();
    java.awt.Font var79 = var68.getFont();
    bierse.view.RunningMessagePanel var82 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var83 = var82.getPreferredSize();
    boolean var86 = var82.contains(10, 1);
    java.awt.im.InputMethodRequests var87 = var82.getInputMethodRequests();
    boolean var88 = var82.getInheritsPopupMenu();
    java.lang.String var89 = var82.toString();
    java.awt.Rectangle var90 = var82.bounds();
    var68.setBounds(var90);
    var40.paintImmediately(var90);
    var32.setBounds(var90);
    var24.setBounds(var90);
    java.awt.Rectangle var95 = var2.getBounds(var90);
    int var96 = var2.getDebugGraphicsOptions();
    javax.swing.JToolTip var97 = var2.createToolTip();
    java.awt.Font var98 = var2.getFont();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var78,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var78.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var78,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var89,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var89.equals("bierse.view.RunningMessagePanel[,0,0,0var89,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test454() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test454");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    var16.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var26 = var16.getPreferredSize();
    java.awt.Dimension var27 = var2.getSize(var26);
    var2.repaint(100L, 1, 0, 100, 24);
    var2.updateUI();
    javax.swing.TransferHandler var35 = var2.getTransferHandler();
    boolean var36 = var2.isDisplayable();
    java.beans.PropertyChangeListener[] var38 = var2.getPropertyChangeListeners("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    javax.swing.event.AncestorListener[] var39 = var2.getAncestorListeners();
    var2.setDoubleBuffered(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test455() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test455");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    var2.invalidate();
    java.awt.event.InputMethodListener[] var6 = var2.getInputMethodListeners();
    int var7 = var2.getStringWidth();
    boolean var8 = var2.isEnabled();
    var2.enable(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 996);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test456() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test456");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    javax.swing.InputMap var5 = var2.getInputMap();
    java.beans.PropertyChangeListener[] var7 = var2.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var8 = var2.getComponentOrientation();
    var2.transferFocusBackward();
    boolean var10 = var2.isFocusTraversalPolicyProvider();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var14 = var13.getPreferredSize();
    java.awt.Dimension var15 = var13.getMaximumSize();
    java.awt.event.FocusListener[] var16 = var13.getFocusListeners();
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var20 = var19.getPreferredSize();
    boolean var23 = var19.contains(10, 1);
    java.awt.im.InputMethodRequests var24 = var19.getInputMethodRequests();
    java.awt.Font var25 = var19.getFont();
    var13.setFont(var25);
    java.beans.VetoableChangeListener[] var27 = var13.getVetoableChangeListeners();
    boolean var28 = var13.isMaximumSizeSet();
    bierse.view.RunningMessagePanel var31 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var31.transferFocus();
    var31.show();
    float var34 = var31.getAlignmentX();
    var31.repaint(0L, 10, 0, 10, (-1));
    boolean var41 = var31.isEnabled();
    bierse.view.RunningMessagePanel var44 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var45 = var44.getPreferredSize();
    javax.swing.JPopupMenu var46 = var44.getComponentPopupMenu();
    java.awt.Rectangle var47 = var44.bounds();
    java.awt.Rectangle var48 = var31.getBounds(var47);
    var13.paintImmediately(var48);
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var53 = var52.isMaximumSizeSet();
    var52.layout();
    bierse.view.RunningMessagePanel var57 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var58 = var57.isMaximumSizeSet();
    boolean var59 = var57.isOpaque();
    java.awt.event.HierarchyListener[] var60 = var57.getHierarchyListeners();
    int var61 = var57.countComponents();
    java.awt.event.HierarchyBoundsListener[] var62 = var57.getHierarchyBoundsListeners();
    boolean var64 = var57.areFocusTraversalKeysSet(1);
    bierse.view.RunningMessagePanel var67 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var68 = var67.getPreferredSize();
    javax.swing.JPopupMenu var69 = var67.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var72 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var73 = var72.getPreferredSize();
    javax.swing.JPopupMenu var74 = var72.getComponentPopupMenu();
    java.awt.Rectangle var75 = var72.bounds();
    var67.computeVisibleRect(var75);
    var57.setBounds(var75);
    var52.repaint(var75);
    java.awt.Rectangle var79 = var13.getBounds(var75);
    java.awt.Rectangle var80 = var2.getBounds(var79);
    var2.disable();
    var2.transferFocusBackward();
    java.awt.Cursor var83 = var2.getCursor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test457() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test457");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.beans.PropertyChangeListener[] var5 = var2.getPropertyChangeListeners();
    var2.setOpaque(true);
    java.awt.Insets var8 = var2.insets();
    boolean var9 = var2.isOptimizedDrawingEnabled();
    javax.swing.InputVerifier var10 = var2.getInputVerifier();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", 24, 0);
    boolean var15 = var2.isOptimizedDrawingEnabled();
    var2.requestFocus();
    var2.layout();
    java.awt.Point var18 = var2.getMousePosition();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test458() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test458");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var9 = var2.location();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var13 = var12.isMaximumSizeSet();
    var12.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var18 = var12.getTransferHandler();
    boolean var19 = var12.hasFocus();
    javax.swing.event.AncestorListener[] var20 = var12.getAncestorListeners();
    java.awt.Dimension var21 = var12.getMinimumSize();
    var2.resize(var21);
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=java.awt.Dimension[width=10,height=10],preferredSize=]", (short)10, (short)10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test459() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test459");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    java.awt.Dimension var9 = var2.getPreferredSize();
    var2.show(false);
    boolean var12 = var2.isMaximumSizeSet();
    var2.firePropertyChange("PanelUI", 10L, 100L);
    boolean var17 = var2.isFocusTraversalPolicySet();
    boolean var18 = var2.isRequestFocusEnabled();
    java.lang.Object var19 = var2.getTreeLock();
    var2.repaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test460() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test460");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var9 = var2.location();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var13 = var12.isMaximumSizeSet();
    var12.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var18 = var12.getTransferHandler();
    boolean var19 = var12.hasFocus();
    javax.swing.event.AncestorListener[] var20 = var12.getAncestorListeners();
    java.awt.Dimension var21 = var12.getMinimumSize();
    var2.resize(var21);
    boolean var23 = var2.isFocusable();
    var2.repaint(11, 0, 13, 24);
    boolean var29 = var2.getFocusTraversalKeysEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);

  }

  public void test461() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test461");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var8 = var7.getPreferredSize();
    javax.swing.JPopupMenu var9 = var7.getComponentPopupMenu();
    java.awt.Rectangle var10 = var7.bounds();
    var2.computeVisibleRect(var10);
    boolean var12 = var2.isManagingFocus();
    var2.transferFocus();
    java.awt.Point var14 = var2.getLocation();
    var2.enable(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test462() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test462");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("", 12);
    java.util.Locale var3 = var2.getLocale();
    int var4 = var2.getHeight();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var8 = var7.isMaximumSizeSet();
    var7.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var13 = var7.getTransferHandler();
    boolean var14 = var7.hasFocus();
    javax.swing.event.AncestorListener[] var15 = var7.getAncestorListeners();
    java.awt.Dimension var16 = var7.getMinimumSize();
    boolean var17 = var7.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var21 = var20.isMaximumSizeSet();
    var20.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var26 = var20.getTransferHandler();
    boolean var27 = var20.hasFocus();
    var20.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var30 = var20.getPreferredSize();
    java.awt.Dimension var31 = var7.getSize(var30);
    java.awt.Dimension var32 = var2.getSize(var30);
    java.awt.GraphicsConfiguration var33 = var2.getGraphicsConfiguration();
    java.awt.Toolkit var34 = var2.getToolkit();
    int var35 = var2.getY();
    var2.disable();
    var2.setFocusable(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);

  }

  public void test463() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test463");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("", 12);
    java.util.Locale var3 = var2.getLocale();
    int var4 = var2.getHeight();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var8 = var7.isMaximumSizeSet();
    var7.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var13 = var7.getTransferHandler();
    boolean var14 = var7.hasFocus();
    javax.swing.event.AncestorListener[] var15 = var7.getAncestorListeners();
    java.awt.Dimension var16 = var7.getMinimumSize();
    boolean var17 = var7.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var21 = var20.isMaximumSizeSet();
    var20.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var26 = var20.getTransferHandler();
    boolean var27 = var20.hasFocus();
    var20.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var30 = var20.getPreferredSize();
    java.awt.Dimension var31 = var7.getSize(var30);
    java.awt.Dimension var32 = var2.getSize(var30);
    boolean var33 = var2.isFocusTraversalPolicySet();
    boolean var34 = var2.requestDefaultFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test464() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test464");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("", 12);
    java.util.Locale var3 = var2.getLocale();
    int var4 = var2.getHeight();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var8 = var7.isMaximumSizeSet();
    var7.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var13 = var7.getTransferHandler();
    boolean var14 = var7.hasFocus();
    javax.swing.event.AncestorListener[] var15 = var7.getAncestorListeners();
    java.awt.Dimension var16 = var7.getMinimumSize();
    boolean var17 = var7.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var21 = var20.isMaximumSizeSet();
    var20.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var26 = var20.getTransferHandler();
    boolean var27 = var20.hasFocus();
    var20.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var30 = var20.getPreferredSize();
    java.awt.Dimension var31 = var7.getSize(var30);
    java.awt.Dimension var32 = var2.getSize(var30);
    java.awt.GraphicsConfiguration var33 = var2.getGraphicsConfiguration();
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var37 = var36.isMaximumSizeSet();
    boolean var38 = var36.isOpaque();
    boolean var39 = var36.isPreferredSizeSet();
    boolean var40 = var36.getIgnoreRepaint();
    bierse.view.RunningMessagePanel var43 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var43.repaint(1L, (-1), (-1), 0, 100);
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var53 = var52.isMaximumSizeSet();
    var52.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var58 = var52.getTransferHandler();
    boolean var59 = var52.hasFocus();
    javax.swing.event.AncestorListener[] var60 = var52.getAncestorListeners();
    java.awt.Dimension var61 = var52.getMinimumSize();
    bierse.view.RunningMessagePanel var65 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var66 = var65.getPreferredSize();
    java.awt.Dimension var67 = var65.getMaximumSize();
    var65.disable();
    var52.putClientProperty((java.lang.Object)100, (java.lang.Object)var65);
    javax.swing.InputVerifier var70 = var65.getInputVerifier();
    boolean var71 = var65.getInheritsPopupMenu();
    var65.setLocation(0, 100);
    boolean var75 = var65.isFocusTraversalPolicyProvider();
    var65.list();
    bierse.view.RunningMessagePanel var79 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var79.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var86 = var79.location();
    java.awt.Font var87 = var79.getFont();
    var65.setFont(var87);
    java.awt.FontMetrics var89 = var43.getFontMetrics(var87);
    var36.setFont(var87);
    java.awt.FontMetrics var91 = var2.getFontMetrics(var87);
    java.awt.im.InputContext var92 = var2.getInputContext();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var93 = var2.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);

  }

  public void test465() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test465");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Dimension var4 = var2.getMaximumSize();
    var2.disable();
    var2.transferFocusDownCycle();
    boolean var7 = var2.isFocusCycleRoot();
    boolean var8 = var2.isDoubleBuffered();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test466() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test466");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.event.HierarchyBoundsListener[] var7 = var2.getHierarchyBoundsListeners();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (short)(-1), (short)100);
    java.awt.Component var12 = var2.getNextFocusableComponent();
    boolean var13 = var2.isBackgroundSet();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    java.awt.Dimension var25 = var16.getMinimumSize();
    bierse.view.RunningMessagePanel var29 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var30 = var29.getPreferredSize();
    java.awt.Dimension var31 = var29.getMaximumSize();
    var29.disable();
    var16.putClientProperty((java.lang.Object)100, (java.lang.Object)var29);
    javax.swing.InputVerifier var34 = var29.getInputVerifier();
    boolean var35 = var29.getInheritsPopupMenu();
    int var36 = var29.getWidth();
    bierse.view.RunningMessagePanel var39 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var40 = var39.getPreferredSize();
    boolean var43 = var39.contains(10, 1);
    java.awt.im.InputMethodRequests var44 = var39.getInputMethodRequests();
    boolean var47 = var39.inside((-1), 100);
    bierse.view.RunningMessagePanel var50 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var51 = var50.getPreferredSize();
    boolean var54 = var50.contains(10, 1);
    var50.setAlignmentX((-1.0f));
    java.awt.Point var57 = var50.getLocation();
    java.awt.Point var58 = var39.getLocation(var57);
    boolean var61 = var39.contains(100, 0);
    int var62 = var39.countComponents();
    bierse.view.RunningMessagePanel var65 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var66 = var65.getPreferredSize();
    boolean var69 = var65.contains(10, 1);
    java.awt.im.InputMethodRequests var70 = var65.getInputMethodRequests();
    java.awt.event.FocusListener[] var71 = var65.getFocusListeners();
    java.awt.Font var72 = var65.getFont();
    java.awt.Cursor var73 = var65.getCursor();
    bierse.view.RunningMessagePanel var76 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var77 = var76.getPreferredSize();
    var65.resize(var77);
    java.awt.Dimension var79 = var39.getSize(var77);
    var29.setMaximumSize(var79);
    bierse.view.RunningMessagePanel var83 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var84 = var83.getPreferredSize();
    boolean var87 = var83.contains(10, 1);
    java.awt.im.InputMethodRequests var88 = var83.getInputMethodRequests();
    java.awt.event.FocusListener[] var89 = var83.getFocusListeners();
    java.awt.Font var90 = var83.getFont();
    var83.enable();
    int var92 = var83.getY();
    int var93 = var83.getX();
    var83.repaint();
    var2.add((java.awt.Component)var29, (java.lang.Object)var83);
    var2.layout();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == 0);

  }

  public void test467() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test467");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    var2.revalidate();
    boolean var9 = var2.isBackgroundSet();
    java.awt.Component[] var10 = var2.getComponents();
    java.awt.GraphicsConfiguration var11 = var2.getGraphicsConfiguration();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    boolean var16 = var14.isOpaque();
    java.awt.event.HierarchyListener[] var17 = var14.getHierarchyListeners();
    var14.setFocusCycleRoot(true);
    float var20 = var14.getAlignmentX();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var24 = var23.isMaximumSizeSet();
    boolean var25 = var23.isOpaque();
    java.awt.event.HierarchyListener[] var26 = var23.getHierarchyListeners();
    java.awt.peer.ComponentPeer var27 = var23.getPeer();
    var23.transferFocus();
    java.lang.String var29 = var23.getToolTipText();
    bierse.view.RunningMessagePanel var32 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var33 = var32.isMaximumSizeSet();
    boolean var34 = var32.isOpaque();
    java.beans.PropertyChangeListener[] var35 = var32.getPropertyChangeListeners();
    var32.setOpaque(true);
    java.awt.Insets var38 = var32.insets();
    bierse.view.RunningMessagePanel var41 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var42 = var41.isMaximumSizeSet();
    var41.layout();
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var47 = var46.isMaximumSizeSet();
    var46.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var52 = var46.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var55 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var56 = var55.getPreferredSize();
    boolean var57 = var55.isPreferredSizeSet();
    var55.enable();
    var55.transferFocusBackward();
    int var60 = var46.getComponentZOrder((java.awt.Component)var55);
    var46.setEnabled(false);
    java.awt.Graphics var63 = var46.getGraphics();
    var41.remove((java.awt.Component)var46);
    bierse.view.RunningMessagePanel var67 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var68 = var67.getPreferredSize();
    boolean var71 = var67.contains(10, 1);
    java.awt.Insets var72 = var67.getInsets();
    javax.swing.JToolTip var73 = var67.createToolTip();
    var67.invalidate();
    var41.remove((java.awt.Component)var67);
    var23.putClientProperty((java.lang.Object)var32, (java.lang.Object)var67);
    var67.layout();
    bierse.view.RunningMessagePanel var80 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var81 = var80.getPreferredSize();
    java.awt.Dimension var82 = var80.getMaximumSize();
    java.awt.Dimension var83 = var67.getSize(var82);
    java.awt.Dimension var84 = var14.getSize(var83);
    var2.setMaximumSize(var83);
    var2.setVisible(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test468() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test468");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    var2.transferFocus();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var18 = var17.isMaximumSizeSet();
    var17.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var23 = var17.getTransferHandler();
    boolean var24 = var17.hasFocus();
    javax.swing.event.AncestorListener[] var25 = var17.getAncestorListeners();
    java.awt.Dimension var26 = var17.getMinimumSize();
    boolean var27 = var17.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var31 = var30.isMaximumSizeSet();
    var30.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var36 = var30.getTransferHandler();
    boolean var37 = var30.hasFocus();
    var30.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var40 = var30.getPreferredSize();
    java.awt.Dimension var41 = var17.getSize(var40);
    var2.setSize(var40);
    var2.nextFocus();
    boolean var44 = var2.isManagingFocus();
    var2.show(false);
    bierse.view.RunningMessagePanel var49 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var50 = var49.getPreferredSize();
    boolean var51 = var49.isPreferredSizeSet();
    bierse.view.RunningMessagePanel var54 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var55 = var54.isMaximumSizeSet();
    boolean var56 = var54.isOpaque();
    java.beans.PropertyChangeListener[] var57 = var54.getPropertyChangeListeners();
    var54.setOpaque(true);
    java.awt.Insets var60 = var54.insets();
    java.awt.Insets var61 = var49.getInsets(var60);
    var49.resetKeyboardActions();
    java.awt.im.InputContext var63 = var49.getInputContext();
    java.awt.Component var64 = var2.add((java.awt.Component)var49);
    var2.setFocusable(false);
    var2.revalidate();
    var2.setFocusCycleRoot(true);
    var2.setEnabled(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test469() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test469");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var3 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var4 = var3.getPreferredSize();
    javax.swing.JPopupMenu var5 = var3.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var9 = var8.getPreferredSize();
    javax.swing.JPopupMenu var10 = var8.getComponentPopupMenu();
    java.awt.Rectangle var11 = var8.bounds();
    var3.computeVisibleRect(var11);
    int var13 = var0.getIndexOf((java.lang.Object)var3);
    var0.removeElementAt(0);
    int var16 = var0.getSize();
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var19.invalidate();
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var29 = var28.isMaximumSizeSet();
    boolean var30 = var28.isOpaque();
    java.awt.event.HierarchyListener[] var31 = var28.getHierarchyListeners();
    int var32 = var28.countComponents();
    java.awt.event.HierarchyBoundsListener[] var33 = var28.getHierarchyBoundsListeners();
    boolean var35 = var28.areFocusTraversalKeysSet(1);
    boolean var36 = var19.isAncestorOf((java.awt.Component)var28);
    var19.requestFocus();
    java.awt.Dimension var38 = var19.getMinimumSize();
    var0.addElement((java.lang.Object)var19);
    java.lang.String var40 = var19.getToolTipText();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);

  }

  public void test470() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test470");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    var2.setAlignmentY(10.0f);
    var2.setInheritsPopupMenu(false);
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var20.transferFocus();
    var20.show();
    float var23 = var20.getAlignmentX();
    var20.repaint(0L, 10, 0, 10, (-1));
    boolean var30 = var20.isEnabled();
    java.lang.Object var31 = var20.getTreeLock();
    int var32 = var2.getComponentZOrder((java.awt.Component)var20);
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var36 = var35.isMaximumSizeSet();
    boolean var37 = var35.isOpaque();
    java.awt.event.HierarchyListener[] var38 = var35.getHierarchyListeners();
    int var39 = var35.getWidth();
    int var40 = var35.countComponents();
    java.awt.Point var42 = var35.getMousePosition(true);
    var35.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    bierse.view.RunningMessagePanel var47 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var48 = var47.isMaximumSizeSet();
    boolean var49 = var47.isOpaque();
    javax.swing.InputMap var50 = var47.getInputMap();
    java.lang.Object var51 = var35.getClientProperty((java.lang.Object)var47);
    bierse.view.RunningMessagePanel var54 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var55 = var54.getPreferredSize();
    java.awt.Dimension var56 = var54.getMaximumSize();
    var54.disable();
    boolean var58 = var54.isEnabled();
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var62 = var61.getPreferredSize();
    boolean var65 = var61.contains(10, 1);
    var61.setAlignmentX((-1.0f));
    java.awt.Toolkit var68 = var61.getToolkit();
    java.awt.Rectangle var69 = var61.getBounds();
    var54.repaint(var69);
    java.awt.Rectangle var71 = var35.getBounds(var69);
    var2.setBounds(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test471() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test471");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    var2.revalidate();
    boolean var9 = var2.isBackgroundSet();
    java.awt.Component[] var10 = var2.getComponents();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var14 = var13.getPreferredSize();
    java.awt.Point var15 = var13.getMousePosition();
    var13.revalidate();
    java.awt.Component[] var17 = var13.getComponents();
    java.awt.event.KeyListener[] var18 = var13.getKeyListeners();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var22 = var21.getPreferredSize();
    java.awt.Point var23 = var21.getMousePosition();
    var21.setDoubleBuffered(false);
    java.awt.GraphicsConfiguration var26 = var21.getGraphicsConfiguration();
    java.awt.Component var29 = var21.locate((-1), (-1));
    java.awt.Font var30 = var21.getFont();
    var13.setFont(var30);
    java.awt.FontMetrics var32 = var2.getFontMetrics(var30);
    java.awt.Graphics var33 = var2.getGraphics();
    var2.repaint(0L, 0, 996, 1, 1);
    java.awt.event.KeyListener[] var40 = var2.getKeyListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test472() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test472");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    float var12 = var2.getAlignmentX();
    boolean var13 = var2.isMinimumSizeSet();
    var2.list();
    var2.setDebugGraphicsOptions(100);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var25 = var19.getTransferHandler();
    var19.firePropertyChange("hi!", 100.0f, (-1.0f));
    java.awt.Cursor var30 = var19.getCursor();
    var2.setCursor(var30);
    var2.nextFocus();
    java.awt.Insets var33 = var2.getInsets();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var34 = var2.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test473() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test473");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    java.awt.Dimension var9 = var2.getPreferredSize();
    var2.show(false);
    boolean var12 = var2.isMaximumSizeSet();
    var2.firePropertyChange("PanelUI", 10L, 100L);
    java.awt.event.HierarchyListener[] var17 = var2.getHierarchyListeners();
    var2.setIgnoreRepaint(true);
    int var20 = var2.getHeight();
    java.awt.event.ContainerListener[] var21 = var2.getContainerListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test474() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test474");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    java.awt.Rectangle var5 = var2.bounds();
    var2.setSize(0, 24);
    javax.swing.TransferHandler var9 = var2.getTransferHandler();
    var2.addNotify();
    var2.list();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test475() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test475");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.beans.PropertyChangeListener[] var5 = var2.getPropertyChangeListeners();
    var2.setOpaque(true);
    java.awt.Insets var8 = var2.insets();
    boolean var9 = var2.isOptimizedDrawingEnabled();
    var2.disable();
    java.awt.peer.ComponentPeer var11 = var2.getPeer();
    var2.setRequestFocusEnabled(true);
    boolean var14 = var2.isFontSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test476() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test476");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.repaint(1L, (-1), (-1), 0, 100);
    boolean var9 = var2.isFocusTraversable();
    java.beans.PropertyChangeListener[] var10 = var2.getPropertyChangeListeners();
    boolean var11 = var2.isShowing();
    var2.transferFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test477() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test477");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    boolean var10 = var2.inside((-1), 100);
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var14 = var13.getPreferredSize();
    boolean var17 = var13.contains(10, 1);
    var13.setAlignmentX((-1.0f));
    java.awt.Point var20 = var13.getLocation();
    java.awt.Point var21 = var2.getLocation(var20);
    boolean var24 = var2.contains(100, 0);
    int var25 = var2.countComponents();
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var29 = var28.getPreferredSize();
    boolean var32 = var28.contains(10, 1);
    java.awt.im.InputMethodRequests var33 = var28.getInputMethodRequests();
    java.awt.event.FocusListener[] var34 = var28.getFocusListeners();
    java.awt.Font var35 = var28.getFont();
    java.awt.Cursor var36 = var28.getCursor();
    bierse.view.RunningMessagePanel var39 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var40 = var39.getPreferredSize();
    var28.resize(var40);
    java.awt.Dimension var42 = var2.getSize(var40);
    var2.transferFocus();
    var2.transferFocus();
    java.awt.event.ComponentListener[] var45 = var2.getComponentListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test478() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test478");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    var2.setAlignmentY(10.0f);
    var2.setInheritsPopupMenu(false);
    boolean var18 = var2.requestDefaultFocus();
    var2.transferFocusBackward();
    javax.swing.JToolTip var20 = var2.createToolTip();
    boolean var23 = var2.inside(100, 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test479() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test479");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    var2.setAlignmentY(0.5f);
    bierse.view.RunningMessagePanel var44 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var45 = var44.isFocusTraversable();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var49 = var48.getPreferredSize();
    boolean var52 = var48.contains(10, 1);
    java.awt.im.InputMethodRequests var53 = var48.getInputMethodRequests();
    java.awt.event.FocusListener[] var54 = var48.getFocusListeners();
    java.awt.Font var55 = var48.getFont();
    java.beans.PropertyChangeListener[] var57 = var48.getPropertyChangeListeners("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    boolean var58 = var48.isValidateRoot();
    java.awt.Toolkit var59 = var48.getToolkit();
    bierse.view.RunningMessagePanel var62 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var63 = var62.isMaximumSizeSet();
    var62.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var62.invalidate();
    java.awt.Dimension var69 = var62.getPreferredSize();
    var48.setMaximumSize(var69);
    var44.setSize(var69);
    bierse.view.RunningMessagePanel var74 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var75 = var74.isMaximumSizeSet();
    boolean var76 = var74.isOpaque();
    java.awt.event.HierarchyListener[] var77 = var74.getHierarchyListeners();
    int var78 = var74.getWidth();
    int var79 = var74.countComponents();
    var74.enable(false);
    bierse.view.RunningMessagePanel var84 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var85 = var84.getPreferredSize();
    java.awt.Dimension var86 = var84.getMaximumSize();
    var84.repaint();
    var84.disable();
    java.awt.Rectangle var89 = var84.getBounds();
    var74.paintImmediately(var89);
    java.awt.Rectangle var91 = var44.getBounds(var89);
    var2.computeVisibleRect(var89);
    boolean var93 = var2.isFocusTraversalPolicySet();
    var2.requestFocus();
    boolean var95 = var2.isMaximumSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);

  }

  public void test480() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test480");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.revalidate();
    var2.invalidate();
    boolean var7 = var2.isManagingFocus();
    var2.validate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.layout();
    var11.revalidate();
    boolean var15 = var11.isFocusOwner();
    float var16 = var11.getAlignmentX();
    java.beans.VetoableChangeListener[] var17 = var11.getVetoableChangeListeners();
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var21 = var20.isMaximumSizeSet();
    var20.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var26 = var20.getTransferHandler();
    boolean var27 = var20.hasFocus();
    var20.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var30 = var20.getPreferredSize();
    java.awt.GraphicsConfiguration var31 = var20.getGraphicsConfiguration();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var35 = var34.isMaximumSizeSet();
    boolean var36 = var34.isOpaque();
    javax.swing.InputMap var37 = var34.getInputMap();
    java.beans.PropertyChangeListener[] var39 = var34.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var40 = var34.getComponentOrientation();
    var20.applyComponentOrientation(var40);
    bierse.view.RunningMessagePanel var44 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var45 = var44.isMaximumSizeSet();
    var44.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var50 = var44.getTransferHandler();
    boolean var51 = var44.hasFocus();
    javax.swing.event.AncestorListener[] var52 = var44.getAncestorListeners();
    var44.enable(false);
    java.awt.Dimension var55 = var44.minimumSize();
    java.awt.Dimension var56 = var20.getSize(var55);
    var11.setSize(var56);
    java.awt.Dimension var58 = var11.getMaximumSize();
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var62 = var61.getPreferredSize();
    java.awt.Dimension var63 = var61.getMaximumSize();
    java.awt.Insets var64 = var61.getInsets();
    java.beans.PropertyChangeListener[] var66 = var61.getPropertyChangeListeners("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    int var67 = var61.getX();
    bierse.view.RunningMessagePanel var70 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var71 = var70.getPreferredSize();
    boolean var72 = var70.isPreferredSizeSet();
    var70.enable();
    javax.accessibility.AccessibleContext var74 = var70.getAccessibleContext();
    var70.setFocusable(false);
    var70.setIgnoreRepaint(false);
    java.awt.event.MouseWheelListener[] var79 = var70.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var82 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var83 = var82.getPreferredSize();
    boolean var86 = var82.contains(10, 1);
    var82.setFocusTraversalPolicyProvider(false);
    float var89 = var82.getAlignmentX();
    java.awt.Component.BaselineResizeBehavior var90 = var82.getBaselineResizeBehavior();
    java.awt.dnd.DropTarget var91 = var82.getDropTarget();
    var82.layout();
    var82.setDebugGraphicsOptions(996);
    java.awt.Graphics var95 = var82.getGraphics();
    var70.printAll(var95);
    var61.update(var95);
    var11.printComponents(var95);
    var2.paintComponents(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test481() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test481");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var8 = var2.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var12 = var11.getPreferredSize();
    boolean var13 = var11.isPreferredSizeSet();
    var11.enable();
    var11.transferFocusBackward();
    int var16 = var2.getComponentZOrder((java.awt.Component)var11);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var19.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var26 = var19.location();
    boolean var27 = var11.contains(var26);
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var30.transferFocus();
    java.awt.image.ColorModel var32 = var30.getColorModel();
    java.beans.PropertyChangeListener[] var33 = var30.getPropertyChangeListeners();
    int var34 = var30.getHeight();
    boolean var35 = var30.isValid();
    javax.swing.border.Border var36 = var30.getBorder();
    java.awt.Color var37 = var30.getForeground();
    var11.setBackground(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test482() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test482");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var9 = var2.location();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", ' ', 'a');
    java.awt.image.ColorModel var14 = var2.getColorModel();
    boolean var15 = var2.isEnabled();
    boolean var16 = var2.getVerifyInputWhenFocusTarget();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);

  }

  public void test483() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test483");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Dimension var4 = var2.getMaximumSize();
    java.awt.event.FocusListener[] var5 = var2.getFocusListeners();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var9 = var8.getPreferredSize();
    boolean var12 = var8.contains(10, 1);
    java.awt.im.InputMethodRequests var13 = var8.getInputMethodRequests();
    java.awt.Font var14 = var8.getFont();
    var2.setFont(var14);
    java.beans.VetoableChangeListener[] var16 = var2.getVetoableChangeListeners();
    boolean var17 = var2.isMaximumSizeSet();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", (short)0, (short)10);
    java.awt.dnd.DropTarget var22 = var2.getDropTarget();
    var2.transferFocusUpCycle();
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var27 = var26.isMaximumSizeSet();
    var26.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var32 = var26.getTransferHandler();
    boolean var33 = var26.hasFocus();
    javax.swing.event.AncestorListener[] var34 = var26.getAncestorListeners();
    java.awt.Dimension var35 = var26.getMinimumSize();
    boolean var36 = var26.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var39 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var40 = var39.isMaximumSizeSet();
    var39.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var45 = var39.getTransferHandler();
    boolean var46 = var39.hasFocus();
    var39.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var49 = var39.getPreferredSize();
    java.awt.Dimension var50 = var26.getSize(var49);
    java.awt.event.ComponentListener[] var51 = var26.getComponentListeners();
    var26.disable();
    bierse.view.RunningMessagePanel var55 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var56 = var55.isMaximumSizeSet();
    boolean var57 = var55.isOpaque();
    java.awt.event.HierarchyListener[] var58 = var55.getHierarchyListeners();
    int var59 = var55.countComponents();
    int var60 = var55.getStringHeight();
    java.awt.Point var61 = var55.location();
    var26.setLocation(var61);
    java.awt.Component var63 = var2.getComponentAt(var61);
    int var64 = var2.countComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0);

  }

  public void test484() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test484");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    java.awt.Font var9 = var2.getFont();
    var2.enable();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var14 = var13.isMaximumSizeSet();
    var13.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var19 = var13.getTransferHandler();
    boolean var20 = var13.hasFocus();
    javax.swing.event.AncestorListener[] var21 = var13.getAncestorListeners();
    java.awt.Dimension var22 = var13.getMinimumSize();
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var27 = var26.getPreferredSize();
    java.awt.Dimension var28 = var26.getMaximumSize();
    var26.disable();
    var13.putClientProperty((java.lang.Object)100, (java.lang.Object)var26);
    java.awt.image.VolatileImage var33 = var26.createVolatileImage(100, 24);
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var37 = var36.getPreferredSize();
    var26.setMinimumSize(var37);
    boolean var39 = var26.isValid();
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var43 = var42.getPreferredSize();
    boolean var46 = var42.contains(10, 1);
    java.awt.im.InputMethodRequests var47 = var42.getInputMethodRequests();
    boolean var50 = var42.inside((-1), 100);
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var54 = var53.getPreferredSize();
    boolean var57 = var53.contains(10, 1);
    var53.setAlignmentX((-1.0f));
    java.awt.Point var60 = var53.getLocation();
    java.awt.Point var61 = var42.getLocation(var60);
    boolean var64 = var42.contains(100, 0);
    var2.add((java.awt.Component)var26, (java.lang.Object)var42);
    var26.setSpeed(12);
    var26.nextFocus();
    bierse.view.RunningMessagePanel var71 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var72 = var71.isMaximumSizeSet();
    var71.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var77 = var71.getTransferHandler();
    boolean var78 = var71.hasFocus();
    javax.swing.event.AncestorListener[] var79 = var71.getAncestorListeners();
    java.awt.Dimension var80 = var71.getMinimumSize();
    bierse.view.RunningMessagePanel var84 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var85 = var84.getPreferredSize();
    java.awt.Dimension var86 = var84.getMaximumSize();
    var84.disable();
    var71.putClientProperty((java.lang.Object)100, (java.lang.Object)var84);
    javax.swing.InputVerifier var89 = var84.getInputVerifier();
    boolean var90 = var84.isValidateRoot();
    java.awt.Insets var91 = var84.getInsets();
    java.awt.Insets var92 = var26.getInsets(var91);
    java.awt.Component var95 = var26.findComponentAt(13, 13);
    var26.enableInputMethods(false);
    var26.setToolTipText("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var95);

  }

  public void test485() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test485");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    var2.transferFocus();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var18 = var17.isMaximumSizeSet();
    var17.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var23 = var17.getTransferHandler();
    boolean var24 = var17.hasFocus();
    javax.swing.event.AncestorListener[] var25 = var17.getAncestorListeners();
    java.awt.Dimension var26 = var17.getMinimumSize();
    boolean var27 = var17.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var31 = var30.isMaximumSizeSet();
    var30.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var36 = var30.getTransferHandler();
    boolean var37 = var30.hasFocus();
    var30.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var40 = var30.getPreferredSize();
    java.awt.Dimension var41 = var17.getSize(var40);
    var2.setSize(var40);
    var2.nextFocus();
    boolean var44 = var2.isManagingFocus();
    var2.show(false);
    bierse.view.RunningMessagePanel var49 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var50 = var49.getPreferredSize();
    boolean var51 = var49.isPreferredSizeSet();
    bierse.view.RunningMessagePanel var54 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var55 = var54.isMaximumSizeSet();
    boolean var56 = var54.isOpaque();
    java.beans.PropertyChangeListener[] var57 = var54.getPropertyChangeListeners();
    var54.setOpaque(true);
    java.awt.Insets var60 = var54.insets();
    java.awt.Insets var61 = var49.getInsets(var60);
    var49.resetKeyboardActions();
    java.awt.im.InputContext var63 = var49.getInputContext();
    java.awt.Component var64 = var2.add((java.awt.Component)var49);
    var2.setFocusable(false);
    var2.revalidate();
    var2.setFocusCycleRoot(true);
    int var70 = var2.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);

  }

  public void test486() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test486");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    javax.accessibility.AccessibleContext var11 = var2.getAccessibleContext();
    int var12 = var2.getHeight();
    var2.invalidate();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var17 = var16.getPreferredSize();
    boolean var18 = var16.isPreferredSizeSet();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isMaximumSizeSet();
    boolean var23 = var21.isOpaque();
    java.beans.PropertyChangeListener[] var24 = var21.getPropertyChangeListeners();
    var21.setOpaque(true);
    java.awt.Insets var27 = var21.insets();
    java.awt.Insets var28 = var16.getInsets(var27);
    var16.resetKeyboardActions();
    java.awt.im.InputContext var30 = var16.getInputContext();
    java.awt.Dimension var31 = var16.getPreferredSize();
    var2.remove((java.awt.Component)var16);
    var16.firePropertyChange("PanelUI", 10.0f, (-1.0f));
    var16.removeNotify();
    boolean var39 = var16.requestFocus(true);
    java.awt.Dimension var40 = var16.getMinimumSize();
    boolean var41 = var16.isValid();
    int var42 = var16.getDebugGraphicsOptions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);

  }

  public void test487() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test487");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    float var12 = var2.getAlignmentX();
    boolean var13 = var2.isMinimumSizeSet();
    var2.list();
    var2.setDebugGraphicsOptions(100);
    boolean var17 = var2.requestDefaultFocus();
    var2.setToolTipText("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test488() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test488");


    bierse.view.MyKeyMap var2 = new bierse.view.MyKeyMap("hi!", 1);
    int var3 = var2.getCode();
    java.lang.String var4 = var2.toString();
    java.lang.String var5 = var2.getText();
    int var6 = var2.getCode();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);

  }

  public void test489() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test489");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Dimension var4 = var2.getMaximumSize();
    var2.repaint();
    var2.disable();
    var2.enable();
    boolean var8 = var2.isMaximumSizeSet();
    boolean var9 = var2.isFocusable();
    var2.transferFocusUpCycle();
    int var11 = var2.getWidth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);

  }

  public void test490() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test490");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    var2.revalidate();
    var2.enable(true);
    java.awt.Point var11 = var2.location();
    var2.paintImmediately(10, 13, 996, 996);
    int var17 = var2.getComponentCount();
    boolean var20 = var2.contains((-1), 11);
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var24 = var23.getPreferredSize();
    java.awt.Dimension var25 = var23.getMaximumSize();
    java.awt.Insets var26 = var23.getInsets();
    java.beans.PropertyChangeListener[] var28 = var23.getPropertyChangeListeners("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    int var29 = var23.getX();
    bierse.view.RunningMessagePanel var32 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var33 = var32.getPreferredSize();
    boolean var34 = var32.isPreferredSizeSet();
    var32.enable();
    javax.accessibility.AccessibleContext var36 = var32.getAccessibleContext();
    var32.setFocusable(false);
    var32.setIgnoreRepaint(false);
    java.awt.event.MouseWheelListener[] var41 = var32.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var44 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var45 = var44.getPreferredSize();
    boolean var48 = var44.contains(10, 1);
    var44.setFocusTraversalPolicyProvider(false);
    float var51 = var44.getAlignmentX();
    java.awt.Component.BaselineResizeBehavior var52 = var44.getBaselineResizeBehavior();
    java.awt.dnd.DropTarget var53 = var44.getDropTarget();
    var44.layout();
    var44.setDebugGraphicsOptions(996);
    java.awt.Graphics var57 = var44.getGraphics();
    var32.printAll(var57);
    var23.update(var57);
    var2.setNextFocusableComponent((java.awt.Component)var23);
    int var61 = var2.getComponentCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);

  }

  public void test491() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test491");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var8 = var7.getPreferredSize();
    javax.swing.JPopupMenu var9 = var7.getComponentPopupMenu();
    java.awt.Rectangle var10 = var7.bounds();
    var2.computeVisibleRect(var10);
    java.awt.event.ComponentListener[] var12 = var2.getComponentListeners();
    var2.setDebugGraphicsOptions(10);
    var2.setAlignmentY(0.5f);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var19.repaint(1L, (-1), (-1), 0, 100);
    boolean var26 = var19.isFocusTraversable();
    bierse.view.RunningMessagePanel var29 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var30 = var29.isMaximumSizeSet();
    boolean var31 = var29.isOpaque();
    java.awt.event.HierarchyListener[] var32 = var29.getHierarchyListeners();
    boolean var33 = var29.isValid();
    var2.add((java.awt.Component)var19, (java.lang.Object)var33, 0);
    var2.transferFocusUpCycle();
    bierse.view.RunningMessagePanel var39 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var40 = var39.getPreferredSize();
    boolean var43 = var39.contains(10, 1);
    java.awt.im.InputMethodRequests var44 = var39.getInputMethodRequests();
    java.awt.event.FocusListener[] var45 = var39.getFocusListeners();
    java.awt.Font var46 = var39.getFont();
    var39.enable();
    boolean var48 = var39.getIgnoreRepaint();
    boolean var49 = var39.requestFocusInWindow();
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var53 = var52.getPreferredSize();
    boolean var56 = var52.contains(10, 1);
    java.awt.im.InputMethodRequests var57 = var52.getInputMethodRequests();
    boolean var58 = var52.getInheritsPopupMenu();
    java.lang.String var59 = var52.toString();
    java.awt.Rectangle var60 = var52.bounds();
    bierse.view.RunningMessagePanel var63 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var64 = var63.getPreferredSize();
    boolean var67 = var63.contains(10, 1);
    java.awt.im.InputMethodRequests var68 = var63.getInputMethodRequests();
    boolean var69 = var63.getInheritsPopupMenu();
    java.lang.String var70 = var63.toString();
    java.awt.Rectangle var71 = var63.bounds();
    java.awt.Rectangle var72 = var52.getBounds(var71);
    var39.repaint(var72);
    var2.setNextFocusableComponent((java.awt.Component)var39);
    javax.swing.border.Border var75 = var2.getBorder();
    bierse.view.RunningMessagePanel var78 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var79 = var78.getPreferredSize();
    java.awt.Dimension var80 = var78.getMaximumSize();
    java.awt.event.FocusListener[] var81 = var78.getFocusListeners();
    bierse.view.RunningMessagePanel var84 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var85 = var84.getPreferredSize();
    boolean var88 = var84.contains(10, 1);
    java.awt.im.InputMethodRequests var89 = var84.getInputMethodRequests();
    java.awt.Font var90 = var84.getFont();
    var78.setFont(var90);
    var2.setFont(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var59,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var59.equals("bierse.view.RunningMessagePanel[,0,0,0var59,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var70,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var70.equals("bierse.view.RunningMessagePanel[,0,0,0var70,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test492() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test492");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    var2.enable();
    javax.accessibility.AccessibleContext var6 = var2.getAccessibleContext();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var9.transferFocus();
    var9.show();
    float var12 = var9.getAlignmentX();
    var9.repaint(0L, 10, 0, 10, (-1));
    boolean var19 = var9.isEnabled();
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var23 = var22.getPreferredSize();
    javax.swing.JPopupMenu var24 = var22.getComponentPopupMenu();
    java.awt.Rectangle var25 = var22.bounds();
    java.awt.Rectangle var26 = var9.getBounds(var25);
    var2.computeVisibleRect(var26);
    boolean var29 = var2.requestFocus(false);
    java.awt.Rectangle var30 = var2.getVisibleRect();
    var2.nextFocus();
    boolean var32 = var2.isMaximumSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test493() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test493");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.beans.PropertyChangeListener[] var5 = var2.getPropertyChangeListeners();
    boolean var6 = var2.isFocusCycleRoot();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var10 = var9.getPreferredSize();
    boolean var11 = var9.isPreferredSizeSet();
    java.awt.Component var12 = var2.add((java.awt.Component)var9);
    java.awt.Dimension var13 = var2.getMaximumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test494() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test494");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var8 = var7.isMaximumSizeSet();
    boolean var9 = var7.isOpaque();
    java.beans.PropertyChangeListener[] var10 = var7.getPropertyChangeListeners();
    var7.setOpaque(true);
    java.awt.Insets var13 = var7.insets();
    java.awt.Insets var14 = var2.getInsets(var13);
    var2.resetKeyboardActions();
    java.awt.im.InputContext var16 = var2.getInputContext();
    java.awt.Dimension var17 = var2.getPreferredSize();
    boolean var19 = var2.requestFocus(true);
    javax.swing.InputMap var20 = var2.getInputMap();
    int var21 = var2.getWidth();
    var2.transferFocusUpCycle();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);

  }

  public void test495() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test495");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var8 = var7.isMaximumSizeSet();
    boolean var9 = var7.isOpaque();
    java.awt.event.HierarchyListener[] var10 = var7.getHierarchyListeners();
    int var11 = var7.countComponents();
    java.awt.event.HierarchyBoundsListener[] var12 = var7.getHierarchyBoundsListeners();
    boolean var14 = var7.areFocusTraversalKeysSet(1);
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var18 = var17.getPreferredSize();
    javax.swing.JPopupMenu var19 = var17.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var23 = var22.getPreferredSize();
    javax.swing.JPopupMenu var24 = var22.getComponentPopupMenu();
    java.awt.Rectangle var25 = var22.bounds();
    var17.computeVisibleRect(var25);
    var7.setBounds(var25);
    var2.repaint(var25);
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", (byte)(-1), (byte)(-1));
    var2.setAutoscrolls(false);
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    javax.swing.event.AncestorListener[] var45 = var37.getAncestorListeners();
    javax.accessibility.AccessibleContext var46 = var37.getAccessibleContext();
    int var47 = var37.getHeight();
    var37.invalidate();
    bierse.view.RunningMessagePanel var51 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var52 = var51.getPreferredSize();
    boolean var53 = var51.isPreferredSizeSet();
    bierse.view.RunningMessagePanel var56 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var57 = var56.isMaximumSizeSet();
    boolean var58 = var56.isOpaque();
    java.beans.PropertyChangeListener[] var59 = var56.getPropertyChangeListeners();
    var56.setOpaque(true);
    java.awt.Insets var62 = var56.insets();
    java.awt.Insets var63 = var51.getInsets(var62);
    var51.resetKeyboardActions();
    java.awt.im.InputContext var65 = var51.getInputContext();
    java.awt.Dimension var66 = var51.getPreferredSize();
    var37.remove((java.awt.Component)var51);
    var51.firePropertyChange("PanelUI", 10.0f, (-1.0f));
    var51.removeNotify();
    int var73 = var51.getX();
    var51.repaint();
    boolean var77 = var51.contains((-1), 12);
    javax.swing.InputVerifier var78 = var51.getInputVerifier();
    bierse.view.RunningMessagePanel var81 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var82 = var81.isMaximumSizeSet();
    var81.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var87 = var81.getWidth();
    java.awt.im.InputMethodRequests var88 = var81.getInputMethodRequests();
    boolean var91 = var81.inside(0, 100);
    bierse.view.RunningMessagePanel var94 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var95 = var94.getPreferredSize();
    java.awt.Dimension var96 = var81.getSize(var95);
    var51.setSize(var95);
    var2.setPreferredSize(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test496() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test496");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    boolean var40 = var27.isDoubleBuffered();
    var27.setEnabled(true);
    var27.disable();
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var47 = var46.isMaximumSizeSet();
    var46.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var46.invalidate();
    bierse.view.RunningMessagePanel var55 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var56 = var55.isMaximumSizeSet();
    var55.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var63 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var64 = var63.isMaximumSizeSet();
    var63.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var69 = var63.getWidth();
    java.awt.Component[] var70 = var63.getComponents();
    var46.putClientProperty((java.lang.Object)var55, (java.lang.Object)var70);
    var55.transferFocus();
    var55.setToolTipText("");
    var55.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (byte)0, (byte)1);
    boolean var79 = var55.isValidateRoot();
    var55.setDoubleBuffered(false);
    boolean var82 = var27.isFocusCycleRoot((java.awt.Container)var55);
    java.util.Set var84 = var55.getFocusTraversalKeys(1);
    var55.setVisible(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test497() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test497");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    java.awt.Dimension var9 = var2.getPreferredSize();
    int var10 = var2.getWidth();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var14 = var13.isMaximumSizeSet();
    var13.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var19 = var13.getTransferHandler();
    boolean var20 = var13.hasFocus();
    var13.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var23 = var13.getPreferredSize();
    java.awt.ComponentOrientation var24 = var13.getComponentOrientation();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    javax.swing.event.AncestorListener[] var35 = var27.getAncestorListeners();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var39 = var38.isMaximumSizeSet();
    var38.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var44 = var38.getTransferHandler();
    boolean var45 = var38.hasFocus();
    var38.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var48 = var38.getPreferredSize();
    java.awt.ComponentOrientation var49 = var38.getComponentOrientation();
    var13.add((java.awt.Component)var27, (java.lang.Object)var38);
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var54 = var53.getPreferredSize();
    java.awt.Dimension var55 = var53.getMaximumSize();
    var2.add((java.awt.Component)var27, (java.lang.Object)var53, (-1));
    bierse.view.RunningMessagePanel var60 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var61 = var60.isMaximumSizeSet();
    var60.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var66 = var60.getTransferHandler();
    java.awt.Component var69 = var60.getComponentAt(0, 0);
    java.awt.Dimension var70 = var60.minimumSize();
    var53.setMaximumSize(var70);
    boolean var72 = var53.isShowing();
    java.awt.Point var73 = var53.getLocation();
    var53.setAlignmentY(10.0f);
    java.awt.Dimension var76 = var53.getMaximumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test498() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test498");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    var2.setAlignmentY(10.0f);
    var2.setInheritsPopupMenu(false);
    javax.accessibility.AccessibleContext var18 = var2.getAccessibleContext();
    java.beans.PropertyChangeListener[] var19 = var2.getPropertyChangeListeners();
    float var20 = var2.getAlignmentX();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=java.awt.Dimension[width=10,height=10],preferredSize=]", '#', 'a');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);

  }

  public void test499() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test499");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    int var7 = var2.countComponents();
    java.awt.Point var9 = var2.getMousePosition(true);
    var2.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var12 = var2.toString();
    java.awt.Font var13 = var2.getFont();
    javax.swing.plaf.PanelUI var14 = var2.getUI();
    java.awt.Dimension var15 = var2.getPreferredSize();
    var2.firePropertyChange("", (-1), 1);
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var23 = var22.getPreferredSize();
    boolean var26 = var22.contains(10, 1);
    var22.setFocusTraversalPolicyProvider(false);
    float var29 = var22.getAlignmentX();
    java.awt.Component.BaselineResizeBehavior var30 = var22.getBaselineResizeBehavior();
    java.awt.dnd.DropTarget var31 = var22.getDropTarget();
    var22.layout();
    var22.setDebugGraphicsOptions(996);
    java.awt.Graphics var35 = var22.getGraphics();
    var2.print(var35);
    boolean var38 = var2.areFocusTraversalKeysSet(1);
    bierse.view.RunningMessagePanel var41 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var42 = var41.isMaximumSizeSet();
    var41.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var47 = var41.getTransferHandler();
    boolean var48 = var41.hasFocus();
    javax.swing.event.AncestorListener[] var49 = var41.getAncestorListeners();
    java.awt.Dimension var50 = var41.getMinimumSize();
    boolean var51 = var41.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var54 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var55 = var54.isMaximumSizeSet();
    var54.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var60 = var54.getTransferHandler();
    boolean var61 = var54.hasFocus();
    var54.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var64 = var54.getPreferredSize();
    java.awt.Dimension var65 = var41.getSize(var64);
    var41.setFocusTraversalKeysEnabled(true);
    bierse.view.RunningMessagePanel var70 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var70.repaint(1L, (-1), (-1), 0, 100);
    boolean var77 = var70.isFocusTraversable();
    bierse.view.RunningMessagePanel var80 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var81 = var80.getPreferredSize();
    boolean var84 = var80.contains(10, 1);
    java.awt.im.InputMethodRequests var85 = var80.getInputMethodRequests();
    var80.revalidate();
    var80.firePropertyChange("hi!", (short)100, (short)0);
    var70.setNextFocusableComponent((java.awt.Component)var80);
    boolean var92 = var70.isFocusable();
    java.awt.event.KeyListener[] var93 = var70.getKeyListeners();
    boolean var94 = var41.isFocusCycleRoot((java.awt.Container)var70);
    var2.setNextFocusableComponent((java.awt.Component)var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var12,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var12.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var12,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);

  }

  public void test500() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest11.test500");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    float var5 = var2.getAlignmentX();
    var2.repaint(0L, 10, 0, 10, (-1));
    boolean var12 = var2.isEnabled();
    var2.firePropertyChange("PanelUI", true, true);
    boolean var17 = var2.isOptimizedDrawingEnabled();
    int var18 = var2.getY();
    var2.setSize(1, 10);
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    boolean var26 = var24.isOpaque();
    java.beans.PropertyChangeListener[] var27 = var24.getPropertyChangeListeners();
    var24.setOpaque(true);
    java.awt.Insets var30 = var24.insets();
    boolean var31 = var24.isOptimizedDrawingEnabled();
    var24.setEnabled(true);
    java.awt.Font var34 = var24.getFont();
    java.awt.FontMetrics var35 = var2.getFontMetrics(var34);
    java.awt.GraphicsConfiguration var36 = var2.getGraphicsConfiguration();
    var2.repaint(0, 13, 32767, 0);
    java.awt.Dimension var42 = var2.getMaximumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

}
