package randoop;

import junit.framework.*;

public class RandoopTest12 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test1");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    java.awt.Font var9 = var2.getFont();
    java.util.Locale var10 = var2.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test2() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test2");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    var11.transferFocus();
    var11.setToolTipText("");
    boolean var33 = var11.contains((-1), 12);
    java.lang.String var34 = var11.getName();
    boolean var35 = var11.isOptimizedDrawingEnabled();
    boolean var37 = var11.requestFocus(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test3() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test3");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var9 = var2.location();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var13 = var12.isMaximumSizeSet();
    var12.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var18 = var12.getTransferHandler();
    boolean var19 = var12.hasFocus();
    javax.swing.event.AncestorListener[] var20 = var12.getAncestorListeners();
    java.awt.Dimension var21 = var12.getMinimumSize();
    var2.resize(var21);
    var2.repaint(100L, 1, (-1), 100, 24);
    bierse.view.RunningMessagePanel var31 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var32 = var31.getPreferredSize();
    boolean var35 = var31.contains(10, 1);
    java.awt.Insets var36 = var31.getInsets();
    boolean var37 = var2.isFocusCycleRoot((java.awt.Container)var31);
    java.awt.Point var38 = var2.getMousePosition();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (short)100, (short)(-1));
    boolean var43 = var2.isVisible();
    var2.grabFocus();
    bierse.view.RunningMessagePanel var47 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var48 = var47.isMaximumSizeSet();
    var47.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var53 = var47.getTransferHandler();
    boolean var54 = var47.hasFocus();
    javax.swing.event.AncestorListener[] var55 = var47.getAncestorListeners();
    java.awt.Dimension var56 = var47.getMinimumSize();
    bierse.view.RunningMessagePanel var60 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var61 = var60.getPreferredSize();
    java.awt.Dimension var62 = var60.getMaximumSize();
    var60.disable();
    var47.putClientProperty((java.lang.Object)100, (java.lang.Object)var60);
    int var65 = var47.getHeight();
    var2.remove((java.awt.Component)var47);
    boolean var67 = var2.getInheritsPopupMenu();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);

  }

  public void test4() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test4");


    bierse.view.MyKeyMap var2 = new bierse.view.MyKeyMap("PanelUI", 996);
    java.lang.String var3 = var2.getText();
    int var4 = var2.getCode();
    int var5 = var2.getCode();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "PanelUI"+ "'", var3.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 996);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 996);

  }

  public void test5() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test5");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    boolean var11 = var2.inside(24, 1);
    java.awt.image.VolatileImage var14 = var2.createVolatileImage(0, 1);
    java.lang.String var15 = var2.getUIClassID();
    java.awt.Toolkit var16 = var2.getToolkit();
    java.awt.Color var17 = var2.getForeground();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "PanelUI"+ "'", var15.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test6() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test6");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("", 12);
    java.util.Locale var3 = var2.getLocale();
    int var4 = var2.getHeight();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var8 = var7.isMaximumSizeSet();
    var7.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var13 = var7.getTransferHandler();
    boolean var14 = var7.hasFocus();
    javax.swing.event.AncestorListener[] var15 = var7.getAncestorListeners();
    java.awt.Dimension var16 = var7.getMinimumSize();
    boolean var17 = var7.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var21 = var20.isMaximumSizeSet();
    var20.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var26 = var20.getTransferHandler();
    boolean var27 = var20.hasFocus();
    var20.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var30 = var20.getPreferredSize();
    java.awt.Dimension var31 = var7.getSize(var30);
    java.awt.Dimension var32 = var2.getSize(var30);
    java.awt.GraphicsConfiguration var33 = var2.getGraphicsConfiguration();
    float var34 = var2.getAlignmentY();
    java.awt.Dimension var35 = var2.getPreferredSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test7() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test7");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    java.awt.Rectangle var5 = var2.bounds();
    java.awt.Insets var6 = var2.insets();
    java.awt.Point var7 = var2.location();
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var11 = var10.isMaximumSizeSet();
    var10.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var16 = var10.getTransferHandler();
    boolean var17 = var10.hasFocus();
    javax.swing.event.AncestorListener[] var18 = var10.getAncestorListeners();
    java.awt.Dimension var19 = var10.getMinimumSize();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var24 = var23.getPreferredSize();
    java.awt.Dimension var25 = var23.getMaximumSize();
    var23.disable();
    var10.putClientProperty((java.lang.Object)100, (java.lang.Object)var23);
    javax.swing.InputVerifier var28 = var23.getInputVerifier();
    boolean var29 = var23.getInheritsPopupMenu();
    var23.setLocation(0, 100);
    boolean var33 = var23.isFocusTraversalPolicyProvider();
    var23.list();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var37.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var44 = var37.location();
    java.awt.Font var45 = var37.getFont();
    var23.setFont(var45);
    var2.setFont(var45);
    var2.disable();
    java.awt.Color var49 = var2.getBackground();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test8() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test8");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    boolean var13 = var11.isOpaque();
    java.awt.event.HierarchyListener[] var14 = var11.getHierarchyListeners();
    int var15 = var11.countComponents();
    java.awt.event.HierarchyBoundsListener[] var16 = var11.getHierarchyBoundsListeners();
    boolean var18 = var11.areFocusTraversalKeysSet(1);
    boolean var19 = var2.isAncestorOf((java.awt.Component)var11);
    var2.requestFocus();
    java.awt.FocusTraversalPolicy var21 = var2.getFocusTraversalPolicy();
    java.awt.Dimension var22 = var2.getPreferredSize();
    boolean var25 = var2.inside(15, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test9() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test9");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var16 = var15.isMaximumSizeSet();
    var15.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var21 = var15.getTransferHandler();
    boolean var22 = var15.hasFocus();
    var15.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var25 = var15.getPreferredSize();
    java.awt.ComponentOrientation var26 = var15.getComponentOrientation();
    var15.transferFocus();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var31 = var30.isMaximumSizeSet();
    var30.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var36 = var30.getTransferHandler();
    boolean var37 = var30.hasFocus();
    javax.swing.event.AncestorListener[] var38 = var30.getAncestorListeners();
    java.awt.Dimension var39 = var30.getMinimumSize();
    boolean var40 = var30.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var43 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var44 = var43.isMaximumSizeSet();
    var43.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var49 = var43.getTransferHandler();
    boolean var50 = var43.hasFocus();
    var43.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var53 = var43.getPreferredSize();
    java.awt.Dimension var54 = var30.getSize(var53);
    var15.setSize(var53);
    bierse.view.RunningMessagePanel var58 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var59 = var58.isMaximumSizeSet();
    var58.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var58.invalidate();
    java.awt.Dimension var65 = var58.getPreferredSize();
    bierse.view.RunningMessagePanel var68 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var68.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var75 = var68.location();
    java.awt.Point var76 = var58.getLocation(var75);
    java.awt.Point var77 = var15.getLocation(var75);
    var2.setLocation(var75);
    var2.resize(11, 13);
    var2.move(24, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test10() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test10");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    int var20 = var2.getHeight();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var23.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var30 = var23.location();
    boolean var31 = var2.contains(var30);
    float var32 = var2.getAlignmentX();
    java.awt.Font var33 = var2.getFont();
    var2.repaint(1, 10, 13, 13);
    java.awt.event.ComponentListener[] var39 = var2.getComponentListeners();
    boolean var40 = var2.requestDefaultFocus();
    java.awt.Point var41 = var2.getMousePosition();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);

  }

  public void test11() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test11");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    javax.swing.event.ListDataListener[] var1 = var0.getListDataListeners();
    bierse.view.RunningMessagePanel var4 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var4.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var11 = var4.location();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    var14.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var20 = var14.getTransferHandler();
    boolean var21 = var14.hasFocus();
    javax.swing.event.AncestorListener[] var22 = var14.getAncestorListeners();
    java.awt.Dimension var23 = var14.getMinimumSize();
    var4.resize(var23);
    int var25 = var0.getIndexOf((java.lang.Object)var23);
    java.lang.Object var27 = var0.getElementAt(996);
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var31 = var30.getPreferredSize();
    boolean var34 = var30.contains(10, 1);
    java.awt.im.InputMethodRequests var35 = var30.getInputMethodRequests();
    var30.revalidate();
    var30.firePropertyChange("hi!", (short)100, (short)0);
    java.awt.Component var43 = var30.getComponentAt(0, (-1));
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var47 = var46.isMaximumSizeSet();
    var46.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var52 = var46.getTransferHandler();
    boolean var53 = var46.hasFocus();
    javax.swing.event.AncestorListener[] var54 = var46.getAncestorListeners();
    java.awt.Dimension var55 = var46.getMinimumSize();
    bierse.view.RunningMessagePanel var59 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var60 = var59.getPreferredSize();
    java.awt.Dimension var61 = var59.getMaximumSize();
    var59.disable();
    var46.putClientProperty((java.lang.Object)100, (java.lang.Object)var59);
    javax.swing.InputVerifier var64 = var59.getInputVerifier();
    boolean var65 = var59.getInheritsPopupMenu();
    var59.setLocation(0, 100);
    boolean var69 = var59.isFocusTraversalPolicyProvider();
    var59.list();
    javax.swing.event.AncestorListener[] var71 = var59.getAncestorListeners();
    java.awt.Cursor var72 = var59.getCursor();
    var30.setCursor(var72);
    var30.transferFocusUpCycle();
    var30.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (short)(-1), (short)0);
    java.awt.Dimension var79 = var30.getSize();
    var0.insertElementAt((java.lang.Object)var79, 10);
    java.lang.Object var82 = var0.getSelectedItem();
    javax.swing.event.ListDataListener[] var83 = var0.getListDataListeners();
    var0.removeElementAt(0);
    int var86 = var0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 12);

  }

  public void test12() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test12");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    java.awt.Font var9 = var2.getFont();
    var2.enable();
    boolean var11 = var2.getIgnoreRepaint();
    var2.removeNotify();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Point var17 = var15.getMousePosition();
    var15.invalidate();
    java.lang.Object var19 = var2.getClientProperty((java.lang.Object)var15);
    java.awt.Dimension var20 = var15.minimumSize();
    javax.swing.InputMap var21 = var15.getInputMap();
    java.awt.Container var22 = var15.getParent();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var26 = var25.getPreferredSize();
    java.awt.Dimension var27 = var25.getMaximumSize();
    var25.repaint();
    var25.disable();
    java.awt.Rectangle var30 = var25.getBounds();
    var25.invalidate();
    var25.setAlignmentX(1.0f);
    javax.swing.ActionMap var34 = var25.getActionMap();
    var15.setActionMap(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test13() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test13");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    var2.invalidate();
    java.awt.event.FocusListener[] var6 = var2.getFocusListeners();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var10 = var9.isMaximumSizeSet();
    var9.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var15 = var9.getTransferHandler();
    boolean var16 = var9.hasFocus();
    var9.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var19 = var9.getPreferredSize();
    java.awt.ComponentOrientation var20 = var9.getComponentOrientation();
    var9.transferFocus();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    var24.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var30 = var24.getTransferHandler();
    boolean var31 = var24.hasFocus();
    javax.swing.event.AncestorListener[] var32 = var24.getAncestorListeners();
    java.awt.Dimension var33 = var24.getMinimumSize();
    boolean var34 = var24.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    var37.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var47 = var37.getPreferredSize();
    java.awt.Dimension var48 = var24.getSize(var47);
    var9.setSize(var47);
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var53 = var52.getPreferredSize();
    boolean var56 = var52.contains(10, 1);
    java.awt.Insets var57 = var52.getInsets();
    javax.swing.JToolTip var58 = var52.createToolTip();
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var62 = var61.isMaximumSizeSet();
    var61.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var67 = var61.getTransferHandler();
    boolean var68 = var61.hasFocus();
    javax.swing.event.AncestorListener[] var69 = var61.getAncestorListeners();
    var61.enable(false);
    int var72 = var58.getComponentZOrder((java.awt.Component)var61);
    boolean var73 = var58.requestFocusInWindow();
    boolean var74 = var58.isOptimizedDrawingEnabled();
    var2.add((java.awt.Component)var9, (java.lang.Object)var58);
    var58.setVisible(false);
    int var78 = var58.getY();
    boolean var81 = var58.contains(14, 12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);

  }

  public void test14() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test14");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    var2.move(11, 0);
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var18 = var17.isMaximumSizeSet();
    var17.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var23 = var17.getTransferHandler();
    boolean var24 = var17.hasFocus();
    var17.setVerifyInputWhenFocusTarget(false);
    int var27 = var17.getDebugGraphicsOptions();
    java.awt.Component var30 = var17.locate(24, 100);
    bierse.view.RunningMessagePanel var33 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var34 = var33.isMaximumSizeSet();
    var33.layout();
    var33.revalidate();
    boolean var37 = var33.isFocusOwner();
    float var38 = var33.getAlignmentX();
    java.awt.Color var39 = var33.getForeground();
    var17.setForeground(var39);
    var17.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", (-1), (-1));
    boolean var45 = var17.isEnabled();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var49 = var48.getPreferredSize();
    boolean var50 = var48.isPreferredSizeSet();
    var48.enable();
    javax.accessibility.AccessibleContext var52 = var48.getAccessibleContext();
    var48.setFocusable(false);
    var48.setIgnoreRepaint(false);
    java.awt.event.MouseWheelListener[] var57 = var48.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var60 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var61 = var60.getPreferredSize();
    boolean var64 = var60.contains(10, 1);
    var60.setFocusTraversalPolicyProvider(false);
    float var67 = var60.getAlignmentX();
    java.awt.Component.BaselineResizeBehavior var68 = var60.getBaselineResizeBehavior();
    java.awt.dnd.DropTarget var69 = var60.getDropTarget();
    var60.layout();
    var60.setDebugGraphicsOptions(996);
    java.awt.Graphics var73 = var60.getGraphics();
    var48.printAll(var73);
    var17.paintComponents(var73);
    var2.printAll(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test15() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test15");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var8 = var7.isMaximumSizeSet();
    var7.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var13 = var7.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var17 = var16.getPreferredSize();
    boolean var18 = var16.isPreferredSizeSet();
    var16.enable();
    var16.transferFocusBackward();
    int var21 = var7.getComponentZOrder((java.awt.Component)var16);
    var7.setEnabled(false);
    java.awt.Graphics var24 = var7.getGraphics();
    var2.remove((java.awt.Component)var7);
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var29 = var28.getPreferredSize();
    boolean var32 = var28.contains(10, 1);
    java.awt.Insets var33 = var28.getInsets();
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var37 = var36.getPreferredSize();
    java.awt.Point var38 = var36.getMousePosition();
    var36.revalidate();
    java.awt.Component[] var40 = var36.getComponents();
    java.awt.event.KeyListener[] var41 = var36.getKeyListeners();
    var2.putClientProperty((java.lang.Object)var28, (java.lang.Object)var41);
    bierse.view.RunningMessagePanel var45 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var46 = var45.getPreferredSize();
    java.awt.Dimension var47 = var45.getMaximumSize();
    java.awt.event.FocusListener[] var48 = var45.getFocusListeners();
    bierse.view.RunningMessagePanel var51 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var52 = var51.getPreferredSize();
    boolean var55 = var51.contains(10, 1);
    java.awt.im.InputMethodRequests var56 = var51.getInputMethodRequests();
    java.awt.Font var57 = var51.getFont();
    var45.setFont(var57);
    var28.setFont(var57);
    boolean var60 = var28.getAutoscrolls();
    var28.nextFocus();
    var28.paintImmediately(0, 0, 10, (-1));
    boolean var69 = var28.contains(14, 12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);

  }

  public void test16() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test16");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    boolean var11 = var2.inside(24, 1);
    java.awt.image.VolatileImage var14 = var2.createVolatileImage(0, 1);
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", 10, 100);
    boolean var19 = var2.isDisplayable();
    var2.setToolTipText("PanelUI");
    int var22 = var2.getX();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777225,maximumSize=,minimumSize=,preferredSize=]", 1.0d, 0.0d);
    float var27 = var2.getAlignmentX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);

  }

  public void test17() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test17");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    boolean var8 = var2.getInheritsPopupMenu();
    java.lang.String var9 = var2.toString();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var13 = var12.isMaximumSizeSet();
    var12.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var12.invalidate();
    java.awt.Dimension var19 = var12.getPreferredSize();
    int var20 = var12.getWidth();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var24 = var23.isMaximumSizeSet();
    var23.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var29 = var23.getTransferHandler();
    boolean var30 = var23.hasFocus();
    var23.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var33 = var23.getPreferredSize();
    java.awt.ComponentOrientation var34 = var23.getComponentOrientation();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    javax.swing.event.AncestorListener[] var45 = var37.getAncestorListeners();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var49 = var48.isMaximumSizeSet();
    var48.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var54 = var48.getTransferHandler();
    boolean var55 = var48.hasFocus();
    var48.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var58 = var48.getPreferredSize();
    java.awt.ComponentOrientation var59 = var48.getComponentOrientation();
    var23.add((java.awt.Component)var37, (java.lang.Object)var48);
    bierse.view.RunningMessagePanel var63 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var64 = var63.getPreferredSize();
    java.awt.Dimension var65 = var63.getMaximumSize();
    var12.add((java.awt.Component)var37, (java.lang.Object)var63, (-1));
    bierse.view.RunningMessagePanel var70 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var71 = var70.isMaximumSizeSet();
    var70.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var76 = var70.getTransferHandler();
    java.awt.Component var79 = var70.getComponentAt(0, 0);
    java.awt.Dimension var80 = var70.minimumSize();
    var63.setMaximumSize(var80);
    boolean var82 = var63.isShowing();
    java.awt.Point var83 = var63.getLocation();
    java.awt.Point var84 = var2.getLocation(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var9,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var9.equals("bierse.view.RunningMessagePanel[,0,0,0var9,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test18() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test18");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    boolean var40 = var2.getFocusTraversalKeysEnabled();
    var2.setAlignmentX(100.0f);
    var2.setMessage("");
    var2.doLayout();
    bierse.view.RunningMessagePanel var49 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var50 = var49.isMaximumSizeSet();
    boolean var51 = var49.isOpaque();
    java.awt.event.HierarchyListener[] var52 = var49.getHierarchyListeners();
    java.awt.peer.ComponentPeer var53 = var49.getPeer();
    var49.transferFocusDownCycle();
    var49.transferFocusUpCycle();
    boolean var56 = var49.isOpaque();
    var49.setFocusTraversalKeysEnabled(false);
    var49.reshape(24, 996, 11, 24);
    java.awt.Component var64 = var2.add("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.5,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var49);
    java.beans.PropertyChangeListener[] var66 = var2.getPropertyChangeListeners("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test19() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test19");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    var2.enable();
    javax.accessibility.AccessibleContext var6 = var2.getAccessibleContext();
    var2.setFocusable(false);
    var2.setIgnoreRepaint(false);
    boolean var11 = var2.isOptimizedDrawingEnabled();
    var2.reshape(12, 12, 0, 11);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var25 = var19.isFocusTraversalPolicySet();
    java.awt.event.FocusListener[] var26 = var19.getFocusListeners();
    java.awt.Point var27 = var19.getMousePosition();
    var19.setFocusable(false);
    bierse.view.RunningMessagePanel var32 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var33 = var32.isMaximumSizeSet();
    boolean var34 = var32.isOpaque();
    java.beans.PropertyChangeListener[] var35 = var32.getPropertyChangeListeners();
    var32.setOpaque(true);
    java.awt.Insets var38 = var32.insets();
    boolean var39 = var32.isOptimizedDrawingEnabled();
    var32.disable();
    bierse.view.RunningMessagePanel var43 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var43.repaint(1L, (-1), (-1), 0, 100);
    boolean var50 = var43.isFocusTraversable();
    javax.swing.ActionMap var51 = var43.getActionMap();
    var32.setActionMap(var51);
    boolean var53 = var32.isMinimumSizeSet();
    bierse.view.RunningMessagePanel var56 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var57 = var56.getPreferredSize();
    boolean var60 = var56.contains(10, 1);
    java.awt.im.InputMethodRequests var61 = var56.getInputMethodRequests();
    java.awt.Font var62 = var56.getFont();
    var19.add((java.awt.Component)var32, (java.lang.Object)var62, (-1));
    boolean var65 = var2.isAncestorOf((java.awt.Component)var19);
    java.awt.Dimension var66 = var2.getMinimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test20() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test20");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    boolean var28 = var11.isPaintingForPrint();
    var11.show(true);
    bierse.view.RunningMessagePanel var33 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var34 = var33.getPreferredSize();
    java.awt.Point var35 = var33.getMousePosition();
    var33.revalidate();
    var33.revalidate();
    bierse.view.RunningMessagePanel var40 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var41 = var40.isMaximumSizeSet();
    var40.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var48.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var55 = var48.location();
    boolean var56 = var40.contains(var55);
    java.awt.Point var57 = var33.getLocation(var55);
    java.awt.Component var58 = var11.getComponentAt(var57);
    var11.enable();
    java.awt.event.KeyListener[] var60 = var11.getKeyListeners();
    java.awt.im.InputMethodRequests var61 = var11.getInputMethodRequests();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);

  }

  public void test21() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test21");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    var2.enable();
    var2.transferFocusBackward();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (byte)10, (byte)1);
    java.awt.event.MouseWheelListener[] var11 = var2.getMouseWheelListeners();
    boolean var12 = var2.isFontSet();
    java.awt.Dimension var13 = var2.getMaximumSize();
    boolean var14 = var2.hasFocus();
    boolean var15 = var2.isMinimumSizeSet();
    bierse.view.RunningMessagePanel var18 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var18.repaint(1L, (-1), (-1), 0, 100);
    boolean var25 = var18.isFocusTraversable();
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var29 = var28.getPreferredSize();
    boolean var32 = var28.contains(10, 1);
    java.awt.im.InputMethodRequests var33 = var28.getInputMethodRequests();
    var28.revalidate();
    var28.firePropertyChange("hi!", (short)100, (short)0);
    var18.setNextFocusableComponent((java.awt.Component)var28);
    boolean var40 = var18.isFocusable();
    java.awt.event.KeyListener[] var41 = var18.getKeyListeners();
    bierse.view.RunningMessagePanel var44 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var44.transferFocus();
    var44.show();
    boolean var47 = var44.isMaximumSizeSet();
    java.awt.Dimension var48 = var44.preferredSize();
    java.awt.Color var49 = var44.getBackground();
    var18.setBackground(var49);
    var2.setForeground(var49);
    java.awt.Point var52 = var2.location();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test22() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test22");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    int var7 = var2.countComponents();
    java.awt.Point var9 = var2.getMousePosition(true);
    var2.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var12 = var2.toString();
    java.awt.Font var13 = var2.getFont();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var17 = var16.getPreferredSize();
    boolean var20 = var16.contains(10, 1);
    java.awt.im.InputMethodRequests var21 = var16.getInputMethodRequests();
    boolean var22 = var16.getInheritsPopupMenu();
    java.lang.String var23 = var16.toString();
    java.awt.Rectangle var24 = var16.bounds();
    var2.setBounds(var24);
    boolean var26 = var2.requestFocusInWindow();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.remove((-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var12,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var12.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var12,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var23,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var23.equals("bierse.view.RunningMessagePanel[,0,0,0var23,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test23() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test23");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    float var5 = var2.getAlignmentX();
    var2.repaint(0L, 10, 0, 10, (-1));
    java.awt.Component.BaselineResizeBehavior var12 = var2.getBaselineResizeBehavior();
    var2.setLocation(100, 996);
    bierse.view.RunningMessagePanel var18 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var18.repaint(1L, (-1), (-1), 0, 100);
    boolean var25 = var18.isFocusTraversable();
    java.beans.PropertyChangeListener[] var26 = var18.getPropertyChangeListeners();
    var18.setName("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    java.awt.Component var29 = var2.add((java.awt.Component)var18);
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=8,maximumSize=,minimumSize=,preferredSize=]", (-1L), 10L);
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var37 = var36.isMaximumSizeSet();
    var36.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var42 = var36.getTransferHandler();
    boolean var43 = var36.hasFocus();
    javax.swing.event.AncestorListener[] var44 = var36.getAncestorListeners();
    java.awt.Dimension var45 = var36.getMinimumSize();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var49 = var48.isMaximumSizeSet();
    boolean var50 = var48.isOpaque();
    java.awt.event.HierarchyListener[] var51 = var48.getHierarchyListeners();
    int var52 = var48.getWidth();
    int var53 = var48.countComponents();
    java.awt.Point var55 = var48.getMousePosition(true);
    var48.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var58 = var48.toString();
    java.awt.Font var59 = var48.getFont();
    javax.swing.plaf.PanelUI var60 = var48.getUI();
    java.awt.Dimension var61 = var48.getPreferredSize();
    var48.firePropertyChange("", (-1), 1);
    bierse.view.RunningMessagePanel var68 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var69 = var68.getPreferredSize();
    java.awt.Dimension var70 = var68.getMaximumSize();
    var68.repaint();
    var68.disable();
    var68.enable();
    java.lang.String var74 = var68.getUIClassID();
    java.awt.event.InputMethodListener[] var75 = var68.getInputMethodListeners();
    var68.enable();
    int var77 = var48.getComponentZOrder((java.awt.Component)var68);
    float var78 = var68.getAlignmentX();
    bierse.view.RunningMessagePanel var81 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var81.repaint(1L, (-1), (-1), 0, 100);
    boolean var88 = var81.isFocusTraversable();
    javax.swing.ActionMap var89 = var81.getActionMap();
    var36.putClientProperty((java.lang.Object)var68, (java.lang.Object)var89);
    var2.setActionMap(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var58,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var58.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var58,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "PanelUI"+ "'", var74.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test24() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test24");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    boolean var11 = var2.inside(24, 1);
    java.awt.image.VolatileImage var14 = var2.createVolatileImage(0, 1);
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var18 = var17.getPreferredSize();
    boolean var21 = var17.contains(10, 1);
    var17.setAlignmentX((-1.0f));
    java.awt.Dimension var24 = var17.getMaximumSize();
    java.awt.Dimension var25 = var2.getSize(var24);
    java.awt.im.InputMethodRequests var26 = var2.getInputMethodRequests();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777225,maximumSize=,minimumSize=,preferredSize=]", (short)100, (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test25() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test25");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.repaint(1L, (-1), (-1), 0, 100);
    boolean var9 = var2.isFocusTraversable();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var13 = var12.getPreferredSize();
    boolean var16 = var12.contains(10, 1);
    java.awt.im.InputMethodRequests var17 = var12.getInputMethodRequests();
    var12.revalidate();
    var12.firePropertyChange("hi!", (short)100, (short)0);
    var2.setNextFocusableComponent((java.awt.Component)var12);
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var26.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var33 = var26.location();
    java.awt.Font var34 = var26.getFont();
    var2.setFont(var34);
    java.awt.Component var38 = var2.getComponentAt(0, 1);
    var2.updateUI();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);

  }

  public void test26() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test26");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    float var5 = var2.getAlignmentX();
    var2.repaint(0L, 10, 0, 10, (-1));
    boolean var12 = var2.isEnabled();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    javax.swing.JPopupMenu var17 = var15.getComponentPopupMenu();
    java.awt.Rectangle var18 = var15.bounds();
    java.awt.Rectangle var19 = var2.getBounds(var18);
    var2.setFocusable(false);
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var25 = var24.getPreferredSize();
    java.awt.Dimension var26 = var24.getMaximumSize();
    var2.setMinimumSize(var26);
    javax.swing.ActionMap var28 = var2.getActionMap();
    boolean var29 = var2.isPaintingForPrint();
    var2.resize(24, 100);
    javax.swing.JPopupMenu var33 = var2.getComponentPopupMenu();
    boolean var34 = var2.isDoubleBuffered();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);

  }

  public void test27() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test27");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    java.awt.Font var9 = var2.getFont();
    java.beans.PropertyChangeListener[] var11 = var2.getPropertyChangeListeners("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    boolean var12 = var2.isValidateRoot();
    java.awt.Toolkit var13 = var2.getToolkit();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var17 = var16.getPreferredSize();
    boolean var18 = var16.isPreferredSizeSet();
    var16.enable();
    var16.transferFocusBackward();
    java.awt.event.MouseListener[] var21 = var16.getMouseListeners();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    var24.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var30 = var24.getTransferHandler();
    boolean var31 = var24.hasFocus();
    javax.swing.event.AncestorListener[] var32 = var24.getAncestorListeners();
    java.awt.Dimension var33 = var24.getMinimumSize();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var38 = var37.getPreferredSize();
    java.awt.Dimension var39 = var37.getMaximumSize();
    var37.disable();
    var24.putClientProperty((java.lang.Object)100, (java.lang.Object)var37);
    javax.swing.InputVerifier var42 = var37.getInputVerifier();
    boolean var43 = var37.getInheritsPopupMenu();
    var37.setLocation(0, 100);
    boolean var47 = var37.isFocusTraversalPolicyProvider();
    var37.list();
    javax.swing.event.AncestorListener[] var49 = var37.getAncestorListeners();
    java.awt.Cursor var50 = var37.getCursor();
    int var51 = var37.getY();
    bierse.view.RunningMessagePanel var54 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var54.transferFocus();
    var54.show();
    float var57 = var54.getAlignmentX();
    var54.repaint(0L, 10, 0, 10, (-1));
    boolean var64 = var54.isEnabled();
    bierse.view.RunningMessagePanel var67 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var68 = var67.getPreferredSize();
    javax.swing.JPopupMenu var69 = var67.getComponentPopupMenu();
    java.awt.Rectangle var70 = var67.bounds();
    java.awt.Rectangle var71 = var54.getBounds(var70);
    var37.setBounds(var71);
    java.awt.Rectangle var73 = var16.getBounds(var71);
    java.awt.Rectangle var74 = var2.getBounds(var71);
    var2.revalidate();
    java.lang.String var76 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var76,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var76.equals("bierse.view.RunningMessagePanel[,0,0,0var76,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));

  }

  public void test28() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test28");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var9 = var2.location();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var13 = var12.isMaximumSizeSet();
    var12.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var18 = var12.getTransferHandler();
    boolean var19 = var12.hasFocus();
    javax.swing.event.AncestorListener[] var20 = var12.getAncestorListeners();
    java.awt.Dimension var21 = var12.getMinimumSize();
    var2.resize(var21);
    var2.repaint(100L, 1, (-1), 100, 24);
    javax.swing.ActionMap var29 = var2.getActionMap();
    var2.repaint(100L);
    boolean var32 = var2.isFocusCycleRoot();
    boolean var33 = var2.isForegroundSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);

  }

  public void test29() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test29");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.repaint(1L, (-1), (-1), 0, 100);
    boolean var9 = var2.isFocusTraversable();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var13 = var12.getPreferredSize();
    boolean var16 = var12.contains(10, 1);
    java.awt.im.InputMethodRequests var17 = var12.getInputMethodRequests();
    var12.revalidate();
    var12.firePropertyChange("hi!", (short)100, (short)0);
    var2.setNextFocusableComponent((java.awt.Component)var12);
    boolean var24 = var2.isFocusable();
    var2.setAutoscrolls(true);
    var2.setAlignmentY(100.0f);
    var2.setVerifyInputWhenFocusTarget(true);
    bierse.view.RunningMessagePanel var33 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var34 = var33.getPreferredSize();
    java.awt.Point var35 = var33.getMousePosition();
    var33.revalidate();
    var33.transferFocus();
    java.awt.Toolkit var38 = var33.getToolkit();
    boolean var39 = var33.isFocusTraversalPolicySet();
    int var40 = var2.getComponentZOrder((java.awt.Component)var33);
    java.awt.Dimension var41 = var2.preferredSize();
    boolean var42 = var2.getIgnoreRepaint();
    java.lang.Object var43 = var2.getTreeLock();
    boolean var44 = var2.getInheritsPopupMenu();
    java.awt.Component.BaselineResizeBehavior var45 = var2.getBaselineResizeBehavior();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test30() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test30");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isFocusTraversable();
    bierse.view.RunningMessagePanel var6 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var7 = var6.getPreferredSize();
    boolean var10 = var6.contains(10, 1);
    java.awt.im.InputMethodRequests var11 = var6.getInputMethodRequests();
    java.awt.event.FocusListener[] var12 = var6.getFocusListeners();
    java.awt.Font var13 = var6.getFont();
    java.beans.PropertyChangeListener[] var15 = var6.getPropertyChangeListeners("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    boolean var16 = var6.isValidateRoot();
    java.awt.Toolkit var17 = var6.getToolkit();
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var21 = var20.isMaximumSizeSet();
    var20.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var20.invalidate();
    java.awt.Dimension var27 = var20.getPreferredSize();
    var6.setMaximumSize(var27);
    var2.setSize(var27);
    bierse.view.RunningMessagePanel var32 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var33 = var32.getPreferredSize();
    boolean var36 = var32.contains(10, 1);
    java.awt.im.InputMethodRequests var37 = var32.getInputMethodRequests();
    java.awt.Font var38 = var32.getFont();
    var2.setFont(var38);
    boolean var40 = var2.getIgnoreRepaint();
    boolean var41 = var2.isCursorSet();
    int var42 = var2.getWidth();
    java.beans.PropertyChangeListener[] var43 = var2.getPropertyChangeListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test31() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test31");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    boolean var21 = var15.isValidateRoot();
    var15.repaint();
    java.lang.String var23 = var15.toString();
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var27 = var26.getPreferredSize();
    java.awt.Dimension var28 = var26.getMaximumSize();
    var26.repaint();
    var26.disable();
    var26.enable();
    java.util.Locale var32 = var26.getLocale();
    javax.swing.JComponent.setDefaultLocale(var32);
    var15.setLocale(var32);
    java.awt.event.KeyListener[] var35 = var15.getKeyListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var23,invalid,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var23.equals("bierse.view.RunningMessagePanel[,0,0,0var23,invalid,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test32() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test32");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.setDebugGraphicsOptions(10);
    java.lang.Object var5 = var2.getTreeLock();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var9 = var8.isMaximumSizeSet();
    var8.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var14 = var8.getTransferHandler();
    boolean var15 = var8.hasFocus();
    javax.swing.event.AncestorListener[] var16 = var8.getAncestorListeners();
    java.awt.Dimension var17 = var8.getMinimumSize();
    var2.setPreferredSize(var17);
    java.awt.FocusTraversalPolicy var19 = var2.getFocusTraversalPolicy();
    float var20 = var2.getAlignmentY();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var23.repaint(1L, (-1), (-1), 0, 100);
    boolean var30 = var23.isFocusTraversable();
    java.beans.PropertyChangeListener[] var31 = var23.getPropertyChangeListeners();
    java.awt.Dimension var32 = var23.getMaximumSize();
    var2.setPreferredSize(var32);
    var2.doLayout();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test33() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test33");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    java.awt.Dimension var9 = var2.getPreferredSize();
    int var10 = var2.getWidth();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var14 = var13.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var17.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var24 = var17.location();
    java.awt.Component var25 = var13.findComponentAt(var24);
    var13.setEnabled(true);
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var30.transferFocus();
    var30.show();
    float var33 = var30.getAlignmentX();
    boolean var36 = var30.contains(0, 24);
    bierse.view.RunningMessagePanel var39 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var40 = var39.getPreferredSize();
    java.awt.Dimension var41 = var39.getMaximumSize();
    java.awt.event.FocusListener[] var42 = var39.getFocusListeners();
    bierse.view.RunningMessagePanel var45 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var46 = var45.getPreferredSize();
    boolean var49 = var45.contains(10, 1);
    java.awt.im.InputMethodRequests var50 = var45.getInputMethodRequests();
    java.awt.Font var51 = var45.getFont();
    var39.setFont(var51);
    java.awt.FontMetrics var53 = var30.getFontMetrics(var51);
    java.awt.FontMetrics var54 = var13.getFontMetrics(var51);
    int var55 = var13.getWidth();
    java.awt.Insets var56 = var13.getInsets();
    java.awt.Insets var57 = var2.getInsets(var56);
    var2.repaint(10L);
    var2.transferFocusUpCycle();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test34() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test34");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    java.awt.Image var11 = var2.createImage(24, 24);
    var2.setAlignmentY(1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test35() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test35");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    var2.invalidate();
    java.awt.event.FocusListener[] var6 = var2.getFocusListeners();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var10 = var9.isMaximumSizeSet();
    var9.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var15 = var9.getTransferHandler();
    boolean var16 = var9.hasFocus();
    var9.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var19 = var9.getPreferredSize();
    java.awt.ComponentOrientation var20 = var9.getComponentOrientation();
    var9.transferFocus();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    var24.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var30 = var24.getTransferHandler();
    boolean var31 = var24.hasFocus();
    javax.swing.event.AncestorListener[] var32 = var24.getAncestorListeners();
    java.awt.Dimension var33 = var24.getMinimumSize();
    boolean var34 = var24.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    var37.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var47 = var37.getPreferredSize();
    java.awt.Dimension var48 = var24.getSize(var47);
    var9.setSize(var47);
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var53 = var52.getPreferredSize();
    boolean var56 = var52.contains(10, 1);
    java.awt.Insets var57 = var52.getInsets();
    javax.swing.JToolTip var58 = var52.createToolTip();
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var62 = var61.isMaximumSizeSet();
    var61.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var67 = var61.getTransferHandler();
    boolean var68 = var61.hasFocus();
    javax.swing.event.AncestorListener[] var69 = var61.getAncestorListeners();
    var61.enable(false);
    int var72 = var58.getComponentZOrder((java.awt.Component)var61);
    boolean var73 = var58.requestFocusInWindow();
    boolean var74 = var58.isOptimizedDrawingEnabled();
    var2.add((java.awt.Component)var9, (java.lang.Object)var58);
    var2.paintImmediately(24, (-1), 996, 10);
    var2.requestFocus();
    java.util.Locale var82 = var2.getLocale();
    var2.setInheritsPopupMenu(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test36() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test36");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    var2.setAlignmentX(10.0f);
    int var14 = var2.countComponents();
    boolean var15 = var2.getInheritsPopupMenu();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test37() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test37");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    int var40 = var16.getX();
    java.awt.GraphicsConfiguration var41 = var16.getGraphicsConfiguration();
    java.awt.Dimension var42 = var16.getPreferredSize();
    bierse.view.RunningMessagePanel var45 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var46 = var45.getPreferredSize();
    java.awt.Point var47 = var45.getMousePosition();
    var45.revalidate();
    var45.invalidate();
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var53 = var52.isMaximumSizeSet();
    var52.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var58 = var52.getTransferHandler();
    boolean var59 = var52.hasFocus();
    javax.swing.event.AncestorListener[] var60 = var52.getAncestorListeners();
    java.awt.Dimension var61 = var52.getMinimumSize();
    boolean var62 = var52.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var65 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var66 = var65.isMaximumSizeSet();
    var65.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var71 = var65.getTransferHandler();
    boolean var72 = var65.hasFocus();
    var65.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var75 = var65.getPreferredSize();
    java.awt.Dimension var76 = var52.getSize(var75);
    java.awt.event.ComponentListener[] var77 = var52.getComponentListeners();
    java.beans.PropertyChangeListener[] var78 = var52.getPropertyChangeListeners();
    java.awt.image.ColorModel var79 = var52.getColorModel();
    boolean var80 = var45.isAncestorOf((java.awt.Component)var52);
    java.awt.im.InputContext var81 = var52.getInputContext();
    var52.setBounds(1, 12, 12, 0);
    java.awt.Dimension var87 = var52.preferredSize();
    var16.setMinimumSize(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test38() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test38");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("hi!", 10);
    java.lang.Object var3 = var2.getTreeLock();
    var2.doLayout();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var8 = var7.isMaximumSizeSet();
    var7.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var7.invalidate();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    boolean var18 = var16.isOpaque();
    java.awt.event.HierarchyListener[] var19 = var16.getHierarchyListeners();
    int var20 = var16.countComponents();
    java.awt.event.HierarchyBoundsListener[] var21 = var16.getHierarchyBoundsListeners();
    boolean var23 = var16.areFocusTraversalKeysSet(1);
    boolean var24 = var7.isAncestorOf((java.awt.Component)var16);
    var7.requestFocus();
    java.awt.Dimension var26 = var7.getMinimumSize();
    boolean var27 = var7.isFocusTraversalPolicySet();
    boolean var28 = var2.isFocusCycleRoot((java.awt.Container)var7);
    var7.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", ' ', ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test39() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test39");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    boolean var13 = var11.isOpaque();
    java.awt.event.HierarchyListener[] var14 = var11.getHierarchyListeners();
    int var15 = var11.countComponents();
    java.awt.event.HierarchyBoundsListener[] var16 = var11.getHierarchyBoundsListeners();
    boolean var18 = var11.areFocusTraversalKeysSet(1);
    boolean var19 = var2.isAncestorOf((java.awt.Component)var11);
    var2.requestFocus();
    javax.swing.event.AncestorListener[] var21 = var2.getAncestorListeners();
    java.awt.Color var22 = var2.getBackground();
    javax.swing.KeyStroke[] var23 = var2.getRegisteredKeyStrokes();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test40() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test40");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    boolean var10 = var2.inside((-1), 100);
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var14 = var13.getPreferredSize();
    boolean var17 = var13.contains(10, 1);
    var13.setAlignmentX((-1.0f));
    java.awt.Point var20 = var13.getLocation();
    java.awt.Point var21 = var2.getLocation(var20);
    boolean var24 = var2.contains(100, 0);
    int var25 = var2.countComponents();
    var2.validate();
    int var27 = var2.getWidth();
    var2.setAutoscrolls(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);

  }

  public void test41() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test41");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    boolean var9 = var2.isPaintingForPrint();
    java.lang.Object var10 = var2.getTreeLock();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test42() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test42");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    java.awt.Image var11 = var2.createImage(24, 24);
    var2.repaint(0, 24, 10, (-1));
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    boolean var21 = var19.isOpaque();
    java.awt.event.HierarchyListener[] var22 = var19.getHierarchyListeners();
    int var23 = var19.getWidth();
    var2.remove((java.awt.Component)var19);
    var19.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", 12, 12);
    var19.enable(false);
    int var31 = var19.getStringHeight();
    var19.enable(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 24);

  }

  public void test43() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test43");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isFocusTraversable();
    java.awt.event.HierarchyListener[] var4 = var2.getHierarchyListeners();
    var2.firePropertyChange("hi!", true, true);
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var11.setDebugGraphicsOptions(10);
    java.lang.Object var14 = var11.getTreeLock();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var18 = var17.isMaximumSizeSet();
    var17.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var23 = var17.getTransferHandler();
    boolean var24 = var17.hasFocus();
    javax.swing.event.AncestorListener[] var25 = var17.getAncestorListeners();
    java.awt.Dimension var26 = var17.getMinimumSize();
    var11.setPreferredSize(var26);
    var11.setAutoscrolls(false);
    bierse.view.RunningMessagePanel var32 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var33 = var32.getPreferredSize();
    boolean var36 = var32.contains(10, 1);
    java.awt.im.InputMethodRequests var37 = var32.getInputMethodRequests();
    java.awt.event.FocusListener[] var38 = var32.getFocusListeners();
    var32.disable();
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var43 = var42.isMaximumSizeSet();
    boolean var44 = var42.isOpaque();
    java.beans.PropertyChangeListener[] var45 = var42.getPropertyChangeListeners();
    var42.setOpaque(true);
    java.awt.Insets var48 = var42.insets();
    boolean var49 = var42.isOptimizedDrawingEnabled();
    var42.disable();
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var53.repaint(1L, (-1), (-1), 0, 100);
    boolean var60 = var53.isFocusTraversable();
    javax.swing.ActionMap var61 = var53.getActionMap();
    var42.setActionMap(var61);
    var32.setActionMap(var61);
    java.awt.Dimension var64 = var32.getMaximumSize();
    var11.setPreferredSize(var64);
    var2.setMaximumSize(var64);
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=8,maximumSize=,minimumSize=,preferredSize=]", (-1.0d), (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test44() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test44");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var8 = var2.isFocusTraversalPolicySet();
    var2.paintImmediately(10, 12, 10, 10);
    int var14 = var2.getX();
    java.awt.LayoutManager var15 = var2.getLayout();
    boolean var16 = var2.requestFocusInWindow();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", '#', 'a');
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var24 = var23.isMaximumSizeSet();
    var23.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var29 = var23.getTransferHandler();
    boolean var30 = var23.hasFocus();
    javax.swing.event.AncestorListener[] var31 = var23.getAncestorListeners();
    javax.accessibility.AccessibleContext var32 = var23.getAccessibleContext();
    int var33 = var23.getHeight();
    java.awt.Image var36 = var23.createImage(12, 24);
    var23.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", (byte)(-1), (byte)100);
    bierse.view.RunningMessagePanel var43 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var44 = var43.isMaximumSizeSet();
    var43.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var49 = var43.getTransferHandler();
    boolean var50 = var43.hasFocus();
    javax.swing.event.AncestorListener[] var51 = var43.getAncestorListeners();
    var43.enable(false);
    java.awt.Dimension var54 = var43.minimumSize();
    var23.setPreferredSize(var54);
    bierse.view.RunningMessagePanel var58 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var59 = var58.getPreferredSize();
    boolean var62 = var58.contains(10, 1);
    java.awt.im.InputMethodRequests var63 = var58.getInputMethodRequests();
    var58.revalidate();
    java.awt.event.HierarchyListener[] var65 = var58.getHierarchyListeners();
    var58.invalidate();
    java.awt.Dimension var67 = var58.getPreferredSize();
    var23.setSize(var67);
    var2.setSize(var67);
    boolean var70 = var2.getAutoscrolls();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);

  }

  public void test45() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test45");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    int var7 = var2.countComponents();
    java.awt.Point var9 = var2.getMousePosition(true);
    var2.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var12 = var2.toString();
    java.awt.Font var13 = var2.getFont();
    javax.swing.plaf.PanelUI var14 = var2.getUI();
    float var15 = var2.getAlignmentY();
    java.awt.Dimension var16 = var2.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var12,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var12.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var12,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test46() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test46");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    boolean var40 = var27.isDoubleBuffered();
    bierse.view.RunningMessagePanel var43 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var43.transferFocus();
    var43.show();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var49 = var48.getPreferredSize();
    boolean var52 = var48.contains(10, 1);
    java.awt.im.InputMethodRequests var53 = var48.getInputMethodRequests();
    java.awt.Font var54 = var48.getFont();
    var43.setFont(var54);
    var27.setFont(var54);
    java.awt.Image var59 = var27.createImage(100, 1);
    java.awt.Dimension var60 = var27.preferredSize();
    float var61 = var27.getAlignmentX();
    var27.setName("");
    boolean var64 = var27.requestFocusInWindow();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test47() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test47");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    var2.revalidate();
    java.awt.event.HierarchyListener[] var9 = var2.getHierarchyListeners();
    var2.invalidate();
    java.awt.LayoutManager var11 = var2.getLayout();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    boolean var16 = var14.isOpaque();
    java.awt.event.HierarchyListener[] var17 = var14.getHierarchyListeners();
    int var18 = var14.countComponents();
    java.awt.event.HierarchyBoundsListener[] var19 = var14.getHierarchyBoundsListeners();
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var23 = var22.getPreferredSize();
    boolean var24 = var22.isPreferredSizeSet();
    var22.enable();
    javax.accessibility.AccessibleContext var26 = var22.getAccessibleContext();
    bierse.view.RunningMessagePanel var29 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var29.transferFocus();
    var29.show();
    float var32 = var29.getAlignmentX();
    var29.repaint(0L, 10, 0, 10, (-1));
    boolean var39 = var29.isEnabled();
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var43 = var42.getPreferredSize();
    javax.swing.JPopupMenu var44 = var42.getComponentPopupMenu();
    java.awt.Rectangle var45 = var42.bounds();
    java.awt.Rectangle var46 = var29.getBounds(var45);
    var22.computeVisibleRect(var46);
    var14.scrollRectToVisible(var46);
    var2.scrollRectToVisible(var46);
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var53 = var52.isMaximumSizeSet();
    boolean var54 = var52.isOpaque();
    java.awt.event.HierarchyListener[] var55 = var52.getHierarchyListeners();
    int var56 = var52.getWidth();
    int var57 = var52.countComponents();
    var52.enable(false);
    var2.setNextFocusableComponent((java.awt.Component)var52);
    boolean var61 = var52.isMaximumSizeSet();
    var52.layout();
    float var63 = var52.getAlignmentY();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0.5f);

  }

  public void test48() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test48");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    boolean var5 = var2.isPreferredSizeSet();
    boolean var6 = var2.getIgnoreRepaint();
    java.awt.dnd.DropTarget var7 = var2.getDropTarget();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test49() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test49");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    var2.revalidate();
    boolean var9 = var2.isBackgroundSet();
    java.awt.Component[] var10 = var2.getComponents();
    java.awt.GraphicsConfiguration var11 = var2.getGraphicsConfiguration();
    var2.reshape(1, 11, 996, 996);
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=8,maximumSize=,minimumSize=,preferredSize=]", 24, 13);
    javax.swing.event.AncestorListener[] var21 = var2.getAncestorListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test50() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test50");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    var2.setAlignmentX(10.0f);
    var2.removeAll();
    java.awt.Point var15 = var2.location();
    int var16 = var2.getX();
    boolean var17 = var2.isFocusTraversalPolicySet();
    boolean var18 = var2.isPaintingTile();
    int var19 = var2.getStringHeight();
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var23 = var22.isMaximumSizeSet();
    var22.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var28 = var22.getWidth();
    java.awt.Component[] var29 = var22.getComponents();
    java.awt.event.HierarchyBoundsListener[] var30 = var22.getHierarchyBoundsListeners();
    int var31 = var22.getX();
    javax.swing.JToolTip var32 = var22.createToolTip();
    java.awt.Point var33 = var32.getMousePosition();
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var36.transferFocus();
    java.awt.image.ColorModel var38 = var36.getColorModel();
    boolean var39 = var36.isPaintingTile();
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var43 = var42.getPreferredSize();
    var36.setMaximumSize(var43);
    var32.setSize(var43);
    var2.setMinimumSize(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test51() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test51");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    var2.revalidate();
    var2.enable(true);
    java.awt.Point var11 = var2.location();
    var2.paintImmediately(10, 13, 996, 996);
    int var17 = var2.getComponentCount();
    java.awt.Dimension var18 = var2.minimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test52() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test52");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    boolean var5 = var2.isPreferredSizeSet();
    var2.nextFocus();
    boolean var7 = var2.requestFocusInWindow();
    java.awt.GraphicsConfiguration var8 = var2.getGraphicsConfiguration();
    bierse.view.KeyMapComboBoxModel var9 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var13 = var12.getPreferredSize();
    java.awt.Point var14 = var12.getMousePosition();
    var12.revalidate();
    var12.invalidate();
    int var17 = var9.getIndexOf((java.lang.Object)var12);
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var21 = var20.isMaximumSizeSet();
    var20.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var26 = var20.isFocusTraversalPolicySet();
    java.awt.event.FocusListener[] var27 = var20.getFocusListeners();
    boolean var28 = var20.isFontSet();
    bierse.view.RunningMessagePanel var31 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var32 = var31.isMaximumSizeSet();
    boolean var33 = var31.isOpaque();
    java.awt.event.HierarchyListener[] var34 = var31.getHierarchyListeners();
    int var35 = var31.getWidth();
    int var36 = var31.countComponents();
    java.awt.Point var38 = var31.getMousePosition(true);
    var31.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var41 = var31.toString();
    java.awt.Font var42 = var31.getFont();
    java.awt.FontMetrics var43 = var20.getFontMetrics(var42);
    var12.setFont(var42);
    bierse.view.RunningMessagePanel var47 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var48 = var47.isMaximumSizeSet();
    boolean var49 = var47.isOpaque();
    java.awt.event.HierarchyListener[] var50 = var47.getHierarchyListeners();
    int var51 = var47.countComponents();
    int var52 = var47.getStringHeight();
    java.awt.Point var53 = var47.location();
    java.awt.Component var54 = var12.findComponentAt(var53);
    java.awt.Component var55 = var2.getComponentAt(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var41,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var41.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var41,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);

  }

  public void test53() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test53");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    boolean var5 = var2.isMaximumSizeSet();
    var2.removeNotify();
    boolean var7 = var2.isPaintingForPrint();
    var2.repaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test54() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test54");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    bierse.view.RunningMessagePanel var6 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var7 = var6.isMaximumSizeSet();
    boolean var8 = var6.isOpaque();
    java.awt.event.HierarchyListener[] var9 = var6.getHierarchyListeners();
    int var10 = var6.countComponents();
    java.awt.event.HierarchyBoundsListener[] var11 = var6.getHierarchyBoundsListeners();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    boolean var16 = var14.isOpaque();
    java.awt.event.HierarchyListener[] var17 = var14.getHierarchyListeners();
    int var18 = var14.getWidth();
    java.awt.event.ContainerListener[] var19 = var14.getContainerListeners();
    java.awt.Dimension var20 = var14.getMaximumSize();
    var6.setMinimumSize(var20);
    java.awt.Dimension var22 = var2.getSize(var20);
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var25.repaint(1L, (-1), (-1), 0, 100);
    boolean var32 = var25.isFocusTraversable();
    javax.swing.ActionMap var33 = var25.getActionMap();
    var2.setActionMap(var33);
    boolean var35 = var2.isMaximumSizeSet();
    var2.setEnabled(false);
    boolean var38 = var2.isDoubleBuffered();
    boolean var39 = var2.isCursorSet();
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("hi!", 10);
    java.lang.Object var43 = var42.getTreeLock();
    boolean var44 = var42.isFontSet();
    boolean var45 = var2.isFocusCycleRoot((java.awt.Container)var42);
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var49 = var48.isMaximumSizeSet();
    var48.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var54 = var48.getTransferHandler();
    boolean var55 = var48.hasFocus();
    var48.setVerifyInputWhenFocusTarget(false);
    float var58 = var48.getAlignmentX();
    boolean var59 = var48.isMinimumSizeSet();
    var48.list();
    boolean var61 = var48.isMaximumSizeSet();
    var48.invalidate();
    bierse.view.RunningMessagePanel var65 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var66 = var65.isMaximumSizeSet();
    boolean var67 = var65.isOpaque();
    javax.swing.InputMap var68 = var65.getInputMap();
    java.beans.PropertyChangeListener[] var70 = var65.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var71 = var65.getComponentOrientation();
    java.awt.peer.ComponentPeer var72 = var65.getPeer();
    var65.transferFocusDownCycle();
    java.awt.Rectangle var74 = var65.getBounds();
    var48.scrollRectToVisible(var74);
    var48.transferFocusBackward();
    var48.repaint(11, 14, 12, (-1));
    var42.remove((java.awt.Component)var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test55() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test55");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    var2.revalidate();
    java.awt.event.HierarchyListener[] var9 = var2.getHierarchyListeners();
    var2.invalidate();
    java.awt.LayoutManager var11 = var2.getLayout();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    boolean var16 = var14.isOpaque();
    java.awt.event.HierarchyListener[] var17 = var14.getHierarchyListeners();
    int var18 = var14.countComponents();
    java.awt.event.HierarchyBoundsListener[] var19 = var14.getHierarchyBoundsListeners();
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var23 = var22.getPreferredSize();
    boolean var24 = var22.isPreferredSizeSet();
    var22.enable();
    javax.accessibility.AccessibleContext var26 = var22.getAccessibleContext();
    bierse.view.RunningMessagePanel var29 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var29.transferFocus();
    var29.show();
    float var32 = var29.getAlignmentX();
    var29.repaint(0L, 10, 0, 10, (-1));
    boolean var39 = var29.isEnabled();
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var43 = var42.getPreferredSize();
    javax.swing.JPopupMenu var44 = var42.getComponentPopupMenu();
    java.awt.Rectangle var45 = var42.bounds();
    java.awt.Rectangle var46 = var29.getBounds(var45);
    var22.computeVisibleRect(var46);
    var14.scrollRectToVisible(var46);
    var2.scrollRectToVisible(var46);
    var2.setAlignmentX(100.0f);
    bierse.view.RunningMessagePanel var55 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var56 = var55.getPreferredSize();
    boolean var57 = var55.isPreferredSizeSet();
    var55.enable();
    var55.transferFocusBackward();
    var55.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (byte)10, (byte)1);
    boolean var65 = var55.requestFocus(false);
    boolean var66 = var55.getInheritsPopupMenu();
    boolean var69 = var55.contains(24, 24);
    bierse.view.RunningMessagePanel var72 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var73 = var72.getPreferredSize();
    boolean var74 = var72.isPreferredSizeSet();
    var72.enable();
    boolean var76 = var55.isAncestorOf((java.awt.Component)var72);
    java.awt.Component var77 = var2.add("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", (java.awt.Component)var55);
    java.awt.event.InputMethodListener[] var78 = var2.getInputMethodListeners();
    boolean var79 = var2.isFontSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);

  }

  public void test56() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test56");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var13 = var12.getPreferredSize();
    java.awt.Point var14 = var12.getMousePosition();
    var12.revalidate();
    var12.transferFocus();
    java.awt.Toolkit var17 = var12.getToolkit();
    boolean var18 = var12.isFocusTraversalPolicySet();
    java.awt.Component var19 = var2.add("PanelUI", (java.awt.Component)var12);
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var22.transferFocus();
    var22.show();
    var22.disable();
    java.awt.Dimension var26 = var22.size();
    var2.setPreferredSize(var26);
    java.awt.GraphicsConfiguration var28 = var2.getGraphicsConfiguration();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test57() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test57");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.beans.PropertyChangeListener[] var5 = var2.getPropertyChangeListeners();
    var2.setOpaque(true);
    java.awt.Insets var8 = var2.insets();
    boolean var9 = var2.isOptimizedDrawingEnabled();
    javax.swing.InputVerifier var10 = var2.getInputVerifier();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", 24, 0);
    boolean var15 = var2.isOptimizedDrawingEnabled();
    java.awt.Point var17 = var2.getMousePosition(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test58() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test58");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    var2.invalidate();
    java.awt.event.FocusListener[] var6 = var2.getFocusListeners();
    boolean var7 = var2.isPaintingForPrint();
    var2.setFocusTraversalKeysEnabled(true);
    boolean var10 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var2);
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var14 = var13.isMaximumSizeSet();
    boolean var15 = var13.isOpaque();
    java.awt.event.HierarchyListener[] var16 = var13.getHierarchyListeners();
    int var17 = var13.getWidth();
    java.awt.Container var18 = var13.getTopLevelAncestor();
    var13.nextFocus();
    boolean var20 = var13.isBackgroundSet();
    java.awt.Point var22 = var13.getMousePosition(true);
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var26 = var25.getPreferredSize();
    boolean var29 = var25.contains(10, 1);
    var25.setAlignmentX((-1.0f));
    java.awt.Point var32 = var25.getLocation();
    java.awt.Point var33 = var25.getLocation();
    java.awt.Point var34 = var13.getLocation(var33);
    boolean var35 = var13.isMaximumSizeSet();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("hi!", 10);
    java.lang.Object var39 = var38.getTreeLock();
    boolean var40 = var38.isFontSet();
    float var41 = var38.getAlignmentX();
    bierse.view.RunningMessagePanel var44 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var45 = var44.getPreferredSize();
    boolean var46 = var44.isPreferredSizeSet();
    var44.enable();
    javax.accessibility.AccessibleContext var48 = var44.getAccessibleContext();
    var44.setFocusable(false);
    var44.setIgnoreRepaint(false);
    java.awt.event.MouseWheelListener[] var53 = var44.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var56 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var57 = var56.getPreferredSize();
    boolean var60 = var56.contains(10, 1);
    var56.setFocusTraversalPolicyProvider(false);
    float var63 = var56.getAlignmentX();
    java.awt.Component.BaselineResizeBehavior var64 = var56.getBaselineResizeBehavior();
    java.awt.dnd.DropTarget var65 = var56.getDropTarget();
    var56.layout();
    var56.setDebugGraphicsOptions(996);
    java.awt.Graphics var69 = var56.getGraphics();
    var44.printAll(var69);
    var38.paint(var69);
    var13.paint(var69);
    var2.printAll(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test59() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test59");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", 1);
    bierse.view.RunningMessagePanel var5 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var6 = var5.isMaximumSizeSet();
    boolean var7 = var5.isOpaque();
    java.awt.event.HierarchyListener[] var8 = var5.getHierarchyListeners();
    java.awt.peer.ComponentPeer var9 = var5.getPeer();
    var5.transferFocusDownCycle();
    var5.transferFocusUpCycle();
    float var12 = var5.getAlignmentY();
    javax.swing.InputVerifier var13 = var5.getInputVerifier();
    int var14 = var5.getComponentCount();
    java.lang.Object var15 = var2.getClientProperty((java.lang.Object)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test60() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test60");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    int var7 = var2.countComponents();
    java.awt.Point var9 = var2.getMousePosition(true);
    var2.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var12 = var2.toString();
    java.awt.Font var13 = var2.getFont();
    java.awt.Point var14 = var2.getLocation();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var12,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var12.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var12,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test61() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test61");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var8 = var2.isFocusable();
    java.awt.event.MouseMotionListener[] var9 = var2.getMouseMotionListeners();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var13 = var12.getPreferredSize();
    boolean var14 = var12.isPreferredSizeSet();
    boolean var15 = var2.isAncestorOf((java.awt.Component)var12);
    java.lang.String var16 = var2.toString();
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var21 = var20.isMaximumSizeSet();
    boolean var22 = var20.isOpaque();
    boolean var23 = var20.isPreferredSizeSet();
    var20.nextFocus();
    var20.removeAll();
    java.awt.Component var26 = var2.add("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var20);
    var2.transferFocusBackward();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var16,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var16.equals("bierse.view.RunningMessagePanel[,0,0,0var16,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test62() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test62");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    java.awt.Image var11 = var2.createImage(24, 24);
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var15 = var14.getPreferredSize();
    java.awt.Dimension var16 = var14.getMaximumSize();
    var14.repaint();
    var14.disable();
    java.awt.Rectangle var19 = var14.getBounds();
    java.awt.Rectangle var20 = var2.getBounds(var19);
    var2.removeAll();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var25 = var24.getPreferredSize();
    boolean var28 = var24.contains(10, 1);
    var24.setAlignmentX((-1.0f));
    java.awt.Point var31 = var24.getLocation();
    java.awt.Point var32 = var24.getLocation();
    boolean var33 = var2.contains(var32);
    int var34 = var2.getX();
    var2.setInheritsPopupMenu(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);

  }

  public void test63() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test63");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var3 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var4 = var3.isMaximumSizeSet();
    boolean var5 = var3.isOpaque();
    java.beans.PropertyChangeListener[] var6 = var3.getPropertyChangeListeners();
    var3.setOpaque(true);
    var3.setRequestFocusEnabled(false);
    var0.insertElementAt((java.lang.Object)var3, 1);
    var3.setName("PanelUI");
    javax.accessibility.AccessibleContext var15 = var3.getAccessibleContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test64() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test64");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    boolean var21 = var15.isValidateRoot();
    java.awt.Insets var22 = var15.getInsets();
    var15.list();
    var15.revalidate();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    bierse.view.RunningMessagePanel var41 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var42 = var41.isMaximumSizeSet();
    var41.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var47 = var41.getTransferHandler();
    boolean var48 = var41.hasFocus();
    javax.swing.event.AncestorListener[] var49 = var41.getAncestorListeners();
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var53 = var52.isMaximumSizeSet();
    var52.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var58 = var52.getTransferHandler();
    boolean var59 = var52.hasFocus();
    var52.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var62 = var52.getPreferredSize();
    java.awt.ComponentOrientation var63 = var52.getComponentOrientation();
    var27.add((java.awt.Component)var41, (java.lang.Object)var52);
    boolean var65 = var52.isDoubleBuffered();
    var52.setEnabled(true);
    var52.disable();
    var52.hide();
    java.lang.String var70 = var52.getToolTipText();
    java.awt.Graphics var71 = var52.getGraphics();
    boolean var72 = var52.isOpaque();
    bierse.view.RunningMessagePanel var75 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var76 = var75.getPreferredSize();
    boolean var79 = var75.contains(10, 1);
    java.awt.im.InputMethodRequests var80 = var75.getInputMethodRequests();
    var75.revalidate();
    var75.firePropertyChange("hi!", (short)100, (short)0);
    java.awt.Component var88 = var75.getComponentAt(0, (-1));
    var75.setRequestFocusEnabled(false);
    java.awt.Component var93 = var75.getComponentAt(0, 24);
    boolean var94 = var52.isAncestorOf((java.awt.Component)var75);
    java.util.Locale var95 = javax.swing.JComponent.getDefaultLocale();
    var52.setLocale(var95);
    var15.setLocale(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test65() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test65");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    var11.transferFocus();
    var11.setToolTipText("");
    java.awt.Container var31 = var11.getTopLevelAncestor();
    boolean var32 = var11.getFocusTraversalKeysEnabled();
    var11.enable(false);
    var11.setFocusable(false);
    int var37 = var11.getY();
    java.lang.String var38 = var11.getToolTipText();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + ""+ "'", var38.equals(""));

  }

  public void test66() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test66");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    var2.enable(false);
    java.awt.Dimension var13 = var2.minimumSize();
    java.awt.GraphicsConfiguration var14 = var2.getGraphicsConfiguration();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var18 = var17.isMaximumSizeSet();
    var17.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var23 = var17.getTransferHandler();
    boolean var24 = var17.hasFocus();
    javax.swing.event.AncestorListener[] var25 = var17.getAncestorListeners();
    java.awt.Dimension var26 = var17.getMinimumSize();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var31 = var30.getPreferredSize();
    java.awt.Dimension var32 = var30.getMaximumSize();
    var30.disable();
    var17.putClientProperty((java.lang.Object)100, (java.lang.Object)var30);
    java.awt.image.VolatileImage var37 = var30.createVolatileImage(100, 24);
    bierse.view.RunningMessagePanel var40 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var41 = var40.getPreferredSize();
    var30.setMinimumSize(var41);
    var2.setMinimumSize(var41);
    var2.setFocusTraversalKeysEnabled(false);
    var2.setToolTipText("PanelUI");
    var2.setEnabled(false);
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", 24);
    java.awt.LayoutManager var53 = var52.getLayout();
    boolean var54 = var52.isMaximumSizeSet();
    javax.swing.plaf.PanelUI var55 = var52.getUI();
    var2.setUI(var55);
    bierse.view.RunningMessagePanel var59 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var59.transferFocus();
    var59.show();
    boolean var62 = var59.isMaximumSizeSet();
    java.awt.Dimension var63 = var59.preferredSize();
    var59.setDebugGraphicsOptions(1);
    var59.setIgnoreRepaint(false);
    bierse.view.RunningMessagePanel var70 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var71 = var70.isMaximumSizeSet();
    var70.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var76 = var70.getTransferHandler();
    boolean var77 = var70.hasFocus();
    var70.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var80 = var70.getPreferredSize();
    java.awt.ComponentOrientation var81 = var70.getComponentOrientation();
    var59.applyComponentOrientation(var81);
    var2.setComponentOrientation(var81);
    java.awt.event.ContainerListener[] var84 = var2.getContainerListeners();
    var2.enable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test67() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test67");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    var2.enable(false);
    java.awt.Dimension var13 = var2.minimumSize();
    java.awt.GraphicsConfiguration var14 = var2.getGraphicsConfiguration();
    java.lang.String var15 = var2.getToolTipText();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test68() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test68");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    float var5 = var2.getAlignmentX();
    var2.repaint(0L, 10, 0, 10, (-1));
    boolean var12 = var2.isEnabled();
    java.lang.Object var13 = var2.getTreeLock();
    java.lang.String var14 = var2.toString();
    boolean var15 = var2.isRequestFocusEnabled();
    var2.setEnabled(false);
    var2.transferFocusUpCycle();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var14,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var14.equals("bierse.view.RunningMessagePanel[,0,0,0var14,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);

  }

  public void test69() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test69");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    javax.swing.InputMap var5 = var2.getInputMap();
    java.beans.PropertyChangeListener[] var7 = var2.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var8 = var2.getComponentOrientation();
    java.awt.peer.ComponentPeer var9 = var2.getPeer();
    boolean var10 = var2.isBackgroundSet();
    var2.show();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test70() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test70");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    var2.enable();
    javax.accessibility.AccessibleContext var6 = var2.getAccessibleContext();
    var2.setFocusable(false);
    java.awt.Container var9 = var2.getTopLevelAncestor();
    int var10 = var2.getX();
    java.awt.Insets var11 = var2.getInsets();
    var2.revalidate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test71() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test71");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    int var12 = var2.getDebugGraphicsOptions();
    java.awt.event.MouseWheelListener[] var13 = var2.getMouseWheelListeners();
    java.awt.Color var14 = var2.getBackground();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var18 = var17.isMaximumSizeSet();
    boolean var19 = var17.isOpaque();
    java.awt.event.HierarchyListener[] var20 = var17.getHierarchyListeners();
    int var21 = var17.getWidth();
    java.awt.event.ContainerListener[] var22 = var17.getContainerListeners();
    java.awt.Dimension var23 = var17.getMaximumSize();
    boolean var24 = var17.isRequestFocusEnabled();
    boolean var25 = var17.requestDefaultFocus();
    float var26 = var17.getAlignmentX();
    java.awt.ComponentOrientation var27 = var17.getComponentOrientation();
    var2.setComponentOrientation(var27);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var30 = var2.getFocusTraversalKeys(13);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test72() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test72");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    java.lang.String var14 = var2.getName();
    var2.repaint();
    bierse.view.RunningMessagePanel var18 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var19 = var18.isMaximumSizeSet();
    var18.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var24 = var18.getTransferHandler();
    boolean var25 = var18.hasFocus();
    var18.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var28 = var18.getPreferredSize();
    java.awt.GraphicsConfiguration var29 = var18.getGraphicsConfiguration();
    var18.firePropertyChange("", 1L, 10L);
    java.awt.Component var36 = var18.findComponentAt((-1), 996);
    java.awt.Point var37 = var18.getLocation();
    var2.setLocation(var37);
    var2.firePropertyChange("PanelUI", '4', ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test73() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test73");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.revalidate();
    var2.invalidate();
    boolean var7 = var2.isManagingFocus();
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var11 = var10.isMaximumSizeSet();
    boolean var12 = var10.isOpaque();
    java.awt.event.HierarchyListener[] var13 = var10.getHierarchyListeners();
    int var14 = var10.countComponents();
    java.awt.event.HierarchyBoundsListener[] var15 = var10.getHierarchyBoundsListeners();
    boolean var17 = var10.areFocusTraversalKeysSet(1);
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var21 = var20.getPreferredSize();
    javax.swing.JPopupMenu var22 = var20.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var26 = var25.getPreferredSize();
    javax.swing.JPopupMenu var27 = var25.getComponentPopupMenu();
    java.awt.Rectangle var28 = var25.bounds();
    var20.computeVisibleRect(var28);
    var10.setBounds(var28);
    var2.paintImmediately(var28);
    javax.swing.InputMap var32 = var2.getInputMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test74() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test74");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    float var5 = var2.getAlignmentX();
    var2.repaint(0L, 10, 0, 10, (-1));
    boolean var12 = var2.isEnabled();
    java.lang.Object var13 = var2.getTreeLock();
    java.awt.ComponentOrientation var14 = var2.getComponentOrientation();
    javax.swing.KeyStroke[] var15 = var2.getRegisteredKeyStrokes();
    bierse.view.RunningMessagePanel var18 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var19 = var18.isMaximumSizeSet();
    var18.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var18.invalidate();
    java.awt.Dimension var25 = var18.getPreferredSize();
    var18.show(false);
    boolean var28 = var18.isMaximumSizeSet();
    var18.firePropertyChange("PanelUI", 10L, 100L);
    boolean var33 = var18.isFocusTraversalPolicySet();
    boolean var34 = var18.requestFocusInWindow();
    javax.swing.InputVerifier var35 = var18.getInputVerifier();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var39 = var38.getPreferredSize();
    boolean var42 = var38.contains(10, 1);
    var38.setFocusTraversalPolicyProvider(false);
    float var45 = var38.getAlignmentX();
    java.awt.Component.BaselineResizeBehavior var46 = var38.getBaselineResizeBehavior();
    java.awt.dnd.DropTarget var47 = var38.getDropTarget();
    var38.layout();
    var38.setDebugGraphicsOptions(996);
    java.awt.Graphics var51 = var38.getGraphics();
    var18.update(var51);
    var2.paintComponents(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test75() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test75");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.Insets var7 = var2.getInsets();
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var11 = var10.isMaximumSizeSet();
    var10.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var16 = var10.getTransferHandler();
    boolean var17 = var10.hasFocus();
    var10.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var20 = var10.getPreferredSize();
    java.awt.ComponentOrientation var21 = var10.getComponentOrientation();
    var10.transferFocus();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    var25.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var31 = var25.getTransferHandler();
    boolean var32 = var25.hasFocus();
    javax.swing.event.AncestorListener[] var33 = var25.getAncestorListeners();
    java.awt.Dimension var34 = var25.getMinimumSize();
    boolean var35 = var25.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var39 = var38.isMaximumSizeSet();
    var38.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var44 = var38.getTransferHandler();
    boolean var45 = var38.hasFocus();
    var38.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var48 = var38.getPreferredSize();
    java.awt.Dimension var49 = var25.getSize(var48);
    var10.setSize(var48);
    var2.setSize(var48);
    int var52 = var2.getHeight();
    var2.disable();
    java.awt.Container var54 = var2.getTopLevelAncestor();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);

  }

  public void test76() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test76");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    java.awt.im.InputMethodRequests var9 = var2.getInputMethodRequests();
    java.awt.im.InputContext var10 = var2.getInputContext();
    javax.swing.event.AncestorListener[] var11 = var2.getAncestorListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test77() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test77");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    var2.enable(false);
    java.awt.Dimension var13 = var2.minimumSize();
    java.awt.GraphicsConfiguration var14 = var2.getGraphicsConfiguration();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var18 = var17.isMaximumSizeSet();
    var17.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var23 = var17.getTransferHandler();
    boolean var24 = var17.hasFocus();
    javax.swing.event.AncestorListener[] var25 = var17.getAncestorListeners();
    java.awt.Dimension var26 = var17.getMinimumSize();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var31 = var30.getPreferredSize();
    java.awt.Dimension var32 = var30.getMaximumSize();
    var30.disable();
    var17.putClientProperty((java.lang.Object)100, (java.lang.Object)var30);
    java.awt.image.VolatileImage var37 = var30.createVolatileImage(100, 24);
    bierse.view.RunningMessagePanel var40 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var41 = var40.getPreferredSize();
    var30.setMinimumSize(var41);
    var2.setMinimumSize(var41);
    var2.setFocusTraversalKeysEnabled(false);
    var2.addNotify();
    boolean var47 = var2.getVerifyInputWhenFocusTarget();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);

  }

  public void test78() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test78");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    boolean var21 = var15.getInheritsPopupMenu();
    boolean var22 = var15.isFocusCycleRoot();
    int var23 = var15.getY();
    boolean var24 = var15.isFocusTraversalPolicyProvider();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var27.invalidate();
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var37 = var36.isMaximumSizeSet();
    var36.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var44 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var45 = var44.isMaximumSizeSet();
    var44.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var50 = var44.getWidth();
    java.awt.Component[] var51 = var44.getComponents();
    var27.putClientProperty((java.lang.Object)var36, (java.lang.Object)var51);
    var36.transferFocus();
    var36.setToolTipText("");
    boolean var58 = var36.contains((-1), 12);
    java.lang.String var59 = var36.getName();
    java.awt.Color var60 = var36.getBackground();
    var15.setForeground(var60);
    int var62 = var15.getHeight();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);

  }

  public void test79() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test79");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    boolean var5 = var2.isMaximumSizeSet();
    var2.setLocation(996, 12);
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (short)1, (short)1);
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var16 = var15.isMaximumSizeSet();
    boolean var17 = var15.isOpaque();
    java.beans.PropertyChangeListener[] var18 = var15.getPropertyChangeListeners();
    var15.setOpaque(true);
    java.awt.Insets var21 = var15.insets();
    boolean var22 = var15.isOptimizedDrawingEnabled();
    var15.setEnabled(true);
    java.awt.Font var25 = var15.getFont();
    var15.transferFocus();
    bierse.view.RunningMessagePanel var29 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var30 = var29.isMaximumSizeSet();
    var29.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var29.invalidate();
    java.awt.Dimension var36 = var29.getPreferredSize();
    var15.setPreferredSize(var36);
    java.lang.Object var38 = var2.getClientProperty((java.lang.Object)var36);
    boolean var39 = var2.isPaintingTile();
    java.awt.Color var40 = var2.getForeground();
    boolean var41 = var2.isCursorSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test80() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test80");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", 24);
    java.awt.LayoutManager var3 = var2.getLayout();
    boolean var4 = var2.isMaximumSizeSet();
    var2.invalidate();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var9 = var8.getPreferredSize();
    javax.swing.JPopupMenu var10 = var8.getComponentPopupMenu();
    java.awt.Rectangle var11 = var8.bounds();
    var8.setSize(0, 24);
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var18 = var17.isMaximumSizeSet();
    var17.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var23 = var17.getTransferHandler();
    boolean var24 = var17.hasFocus();
    javax.swing.event.AncestorListener[] var25 = var17.getAncestorListeners();
    java.awt.Dimension var26 = var17.getMinimumSize();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var31 = var30.getPreferredSize();
    java.awt.Dimension var32 = var30.getMaximumSize();
    var30.disable();
    var17.putClientProperty((java.lang.Object)100, (java.lang.Object)var30);
    javax.swing.InputVerifier var35 = var30.getInputVerifier();
    boolean var36 = var30.getInheritsPopupMenu();
    var30.setLocation(0, 100);
    boolean var40 = var30.isFocusTraversalPolicyProvider();
    var30.list();
    javax.swing.event.AncestorListener[] var42 = var30.getAncestorListeners();
    var30.repaint(100L);
    int var45 = var8.getComponentZOrder((java.awt.Component)var30);
    boolean var46 = var30.isFocusable();
    boolean var47 = var2.isAncestorOf((java.awt.Component)var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);

  }

  public void test81() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test81");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    java.awt.Container var7 = var2.getTopLevelAncestor();
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var11 = var10.isMaximumSizeSet();
    var10.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var10.invalidate();
    java.awt.Dimension var17 = var10.getPreferredSize();
    int var18 = var10.getWidth();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isMaximumSizeSet();
    var21.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var27 = var21.getTransferHandler();
    boolean var28 = var21.hasFocus();
    var21.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var31 = var21.getPreferredSize();
    java.awt.ComponentOrientation var32 = var21.getComponentOrientation();
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var36 = var35.isMaximumSizeSet();
    var35.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var41 = var35.getTransferHandler();
    boolean var42 = var35.hasFocus();
    javax.swing.event.AncestorListener[] var43 = var35.getAncestorListeners();
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var47 = var46.isMaximumSizeSet();
    var46.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var52 = var46.getTransferHandler();
    boolean var53 = var46.hasFocus();
    var46.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var56 = var46.getPreferredSize();
    java.awt.ComponentOrientation var57 = var46.getComponentOrientation();
    var21.add((java.awt.Component)var35, (java.lang.Object)var46);
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var62 = var61.getPreferredSize();
    java.awt.Dimension var63 = var61.getMaximumSize();
    var10.add((java.awt.Component)var35, (java.lang.Object)var61, (-1));
    bierse.view.RunningMessagePanel var68 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var68.transferFocus();
    var68.show();
    float var71 = var68.getAlignmentX();
    boolean var74 = var68.contains(0, 24);
    java.awt.Color var75 = var68.getForeground();
    var10.setForeground(var75);
    var2.setBackground(var75);
    boolean var78 = var2.isFocusOwner();
    bierse.view.RunningMessagePanel var81 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var81.transferFocus();
    java.awt.image.ColorModel var83 = var81.getColorModel();
    java.beans.PropertyChangeListener[] var84 = var81.getPropertyChangeListeners();
    int var85 = var81.getHeight();
    var2.setNextFocusableComponent((java.awt.Component)var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0);

  }

  public void test82() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test82");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var8 = var7.isMaximumSizeSet();
    boolean var9 = var7.isOpaque();
    java.beans.PropertyChangeListener[] var10 = var7.getPropertyChangeListeners();
    var7.setOpaque(true);
    java.awt.Insets var13 = var7.insets();
    java.awt.Insets var14 = var2.getInsets(var13);
    var2.resetKeyboardActions();
    boolean var16 = var2.isDoubleBuffered();
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var20 = var19.getPreferredSize();
    boolean var23 = var19.contains(10, 1);
    java.awt.Insets var24 = var19.getInsets();
    javax.swing.JToolTip var25 = var19.createToolTip();
    var19.invalidate();
    var19.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", false, true);
    boolean var31 = var2.isFocusCycleRoot((java.awt.Container)var19);
    java.awt.peer.ComponentPeer var32 = var2.getPeer();
    boolean var33 = var2.isFocusOwner();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test83() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test83");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    boolean var21 = var15.isValidateRoot();
    java.awt.Insets var22 = var15.getInsets();
    java.awt.event.FocusListener[] var23 = var15.getFocusListeners();
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var27 = var26.isMaximumSizeSet();
    var26.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var32 = var26.getTransferHandler();
    boolean var33 = var26.hasFocus();
    javax.swing.event.AncestorListener[] var34 = var26.getAncestorListeners();
    java.awt.Dimension var35 = var26.getMinimumSize();
    bierse.view.RunningMessagePanel var39 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var40 = var39.getPreferredSize();
    java.awt.Dimension var41 = var39.getMaximumSize();
    var39.disable();
    var26.putClientProperty((java.lang.Object)100, (java.lang.Object)var39);
    javax.swing.InputVerifier var44 = var39.getInputVerifier();
    boolean var45 = var39.isValidateRoot();
    java.awt.Insets var46 = var39.getInsets();
    java.awt.Image var49 = var39.createImage(100, 996);
    bierse.view.KeyMapComboBoxModel var50 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var54 = var53.getPreferredSize();
    java.awt.Point var55 = var53.getMousePosition();
    var53.revalidate();
    var53.invalidate();
    int var58 = var50.getIndexOf((java.lang.Object)var53);
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var62 = var61.isMaximumSizeSet();
    var61.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var67 = var61.isFocusTraversalPolicySet();
    java.awt.event.FocusListener[] var68 = var61.getFocusListeners();
    boolean var69 = var61.isFontSet();
    bierse.view.RunningMessagePanel var72 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var73 = var72.isMaximumSizeSet();
    boolean var74 = var72.isOpaque();
    java.awt.event.HierarchyListener[] var75 = var72.getHierarchyListeners();
    int var76 = var72.getWidth();
    int var77 = var72.countComponents();
    java.awt.Point var79 = var72.getMousePosition(true);
    var72.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var82 = var72.toString();
    java.awt.Font var83 = var72.getFont();
    java.awt.FontMetrics var84 = var61.getFontMetrics(var83);
    var53.setFont(var83);
    var39.setFont(var83);
    var15.setFont(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var82,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var82.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var82,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test84() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test84");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var8 = var7.isMaximumSizeSet();
    var7.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var13 = var7.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var17 = var16.getPreferredSize();
    boolean var18 = var16.isPreferredSizeSet();
    var16.enable();
    var16.transferFocusBackward();
    int var21 = var7.getComponentZOrder((java.awt.Component)var16);
    var7.setEnabled(false);
    java.awt.Graphics var24 = var7.getGraphics();
    var2.remove((java.awt.Component)var7);
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var29 = var28.getPreferredSize();
    boolean var32 = var28.contains(10, 1);
    java.awt.Insets var33 = var28.getInsets();
    javax.swing.JToolTip var34 = var28.createToolTip();
    var28.invalidate();
    var2.remove((java.awt.Component)var28);
    bierse.view.RunningMessagePanel var39 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var40 = var39.getPreferredSize();
    boolean var43 = var39.contains(10, 1);
    java.awt.Insets var44 = var39.getInsets();
    java.awt.Insets var45 = var2.getInsets(var44);
    java.lang.Object var46 = var2.getTreeLock();
    int var47 = var2.getWidth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);

  }

  public void test85() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test85");


    bierse.view.MyKeyMap var2 = new bierse.view.MyKeyMap("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);

  }

  public void test86() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test86");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    var2.disable();
    java.awt.Dimension var6 = var2.size();
    java.awt.dnd.DropTarget var7 = var2.getDropTarget();
    java.lang.String var8 = var2.getUIClassID();
    javax.swing.event.AncestorListener[] var9 = var2.getAncestorListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "PanelUI"+ "'", var8.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test87() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test87");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    int var7 = var2.countComponents();
    java.awt.Point var9 = var2.getMousePosition(true);
    var2.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var12 = var2.toString();
    java.awt.Font var13 = var2.getFont();
    javax.swing.plaf.PanelUI var14 = var2.getUI();
    java.awt.Dimension var15 = var2.getPreferredSize();
    var2.firePropertyChange("", (-1), 1);
    java.awt.Rectangle var20 = var2.getBounds();
    var2.setBounds(10, 10, 11, 15);
    boolean var26 = var2.isDoubleBuffered();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var12,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var12.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var12,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);

  }

  public void test88() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test88");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    var2.revalidate();
    java.awt.event.HierarchyListener[] var9 = var2.getHierarchyListeners();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var13 = var12.isMaximumSizeSet();
    boolean var14 = var12.isOpaque();
    java.awt.event.HierarchyListener[] var15 = var12.getHierarchyListeners();
    java.awt.peer.ComponentPeer var16 = var12.getPeer();
    var12.transferFocusDownCycle();
    var12.transferFocusUpCycle();
    java.awt.Dimension var19 = var12.minimumSize();
    var2.setPreferredSize(var19);
    var2.setFocusTraversalKeysEnabled(true);
    boolean var23 = var2.isRequestFocusEnabled();
    boolean var24 = var2.isPaintingForPrint();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    javax.swing.JRootPane var38 = var27.getRootPane();
    var27.setRequestFocusEnabled(false);
    java.awt.Dimension var41 = var27.preferredSize();
    java.awt.Dimension var42 = var27.getPreferredSize();
    int var43 = var27.getDebugGraphicsOptions();
    java.awt.Component var46 = var27.findComponentAt(24, 24);
    java.awt.Cursor var47 = var27.getCursor();
    var2.setCursor(var47);
    java.awt.Dimension var49 = var2.minimumSize();
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var53 = var52.isMaximumSizeSet();
    var52.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var58 = var52.getTransferHandler();
    boolean var59 = var52.hasFocus();
    var52.setVerifyInputWhenFocusTarget(false);
    int var62 = var52.getDebugGraphicsOptions();
    java.awt.event.FocusListener[] var63 = var52.getFocusListeners();
    bierse.view.RunningMessagePanel var66 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var66.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var73 = var66.location();
    boolean var74 = var52.contains(var73);
    bierse.view.RunningMessagePanel var77 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var78 = var77.getPreferredSize();
    java.awt.Point var79 = var77.getMousePosition();
    var77.revalidate();
    java.awt.Dimension var81 = var77.getMaximumSize();
    var52.setPreferredSize(var81);
    var2.setMaximumSize(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test89() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test89");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    java.awt.dnd.DropTarget var21 = var15.getDropTarget();
    java.awt.FocusTraversalPolicy var22 = var15.getFocusTraversalPolicy();
    var15.list();
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var27 = var26.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var30.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var37 = var30.location();
    java.awt.Component var38 = var26.findComponentAt(var37);
    var26.setEnabled(true);
    bierse.view.RunningMessagePanel var43 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var43.transferFocus();
    var43.show();
    float var46 = var43.getAlignmentX();
    boolean var49 = var43.contains(0, 24);
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var53 = var52.getPreferredSize();
    java.awt.Dimension var54 = var52.getMaximumSize();
    java.awt.event.FocusListener[] var55 = var52.getFocusListeners();
    bierse.view.RunningMessagePanel var58 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var59 = var58.getPreferredSize();
    boolean var62 = var58.contains(10, 1);
    java.awt.im.InputMethodRequests var63 = var58.getInputMethodRequests();
    java.awt.Font var64 = var58.getFont();
    var52.setFont(var64);
    java.awt.FontMetrics var66 = var43.getFontMetrics(var64);
    java.awt.FontMetrics var67 = var26.getFontMetrics(var64);
    java.awt.FocusTraversalPolicy var68 = var26.getFocusTraversalPolicy();
    int var69 = var26.getDebugGraphicsOptions();
    bierse.view.RunningMessagePanel var72 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var73 = var72.isMaximumSizeSet();
    var72.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var78 = var72.getWidth();
    java.awt.Image var81 = var72.createImage(24, 24);
    bierse.view.RunningMessagePanel var84 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var85 = var84.getPreferredSize();
    java.awt.Dimension var86 = var84.getMaximumSize();
    var84.repaint();
    var84.disable();
    java.awt.Rectangle var89 = var84.getBounds();
    java.awt.Rectangle var90 = var72.getBounds(var89);
    var26.paintImmediately(var90);
    var15.setBounds(var90);
    java.awt.Dimension var93 = var15.preferredSize();
    boolean var94 = var15.requestFocusInWindow();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);

  }

  public void test90() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test90");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    var16.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var26 = var16.getPreferredSize();
    java.awt.Dimension var27 = var2.getSize(var26);
    boolean var28 = var2.requestDefaultFocus();
    java.awt.Container var29 = var2.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test91() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test91");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    javax.swing.InputMap var5 = var2.getInputMap();
    java.beans.PropertyChangeListener[] var7 = var2.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var8 = var2.getComponentOrientation();
    java.awt.event.ContainerListener[] var9 = var2.getContainerListeners();
    java.awt.Toolkit var10 = var2.getToolkit();
    java.awt.Point var11 = var2.location();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var15 = var14.getPreferredSize();
    boolean var18 = var14.contains(10, 1);
    java.awt.im.InputMethodRequests var19 = var14.getInputMethodRequests();
    var14.revalidate();
    java.awt.event.HierarchyListener[] var21 = var14.getHierarchyListeners();
    var14.invalidate();
    java.awt.LayoutManager var23 = var14.getLayout();
    var14.setToolTipText("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]");
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var29 = var28.getPreferredSize();
    boolean var30 = var28.isPreferredSizeSet();
    var28.enable();
    javax.accessibility.AccessibleContext var32 = var28.getAccessibleContext();
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var35.transferFocus();
    var35.show();
    float var38 = var35.getAlignmentX();
    var35.repaint(0L, 10, 0, 10, (-1));
    boolean var45 = var35.isEnabled();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var49 = var48.getPreferredSize();
    javax.swing.JPopupMenu var50 = var48.getComponentPopupMenu();
    java.awt.Rectangle var51 = var48.bounds();
    java.awt.Rectangle var52 = var35.getBounds(var51);
    var28.computeVisibleRect(var52);
    java.awt.Insets var54 = var28.getInsets();
    java.awt.event.ContainerListener[] var55 = var28.getContainerListeners();
    int var56 = var28.getHeight();
    bierse.view.RunningMessagePanel var59 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var60 = var59.getPreferredSize();
    boolean var61 = var59.isPreferredSizeSet();
    var59.enable();
    javax.accessibility.AccessibleContext var63 = var59.getAccessibleContext();
    var59.setFocusable(false);
    var59.setIgnoreRepaint(false);
    java.awt.event.MouseWheelListener[] var68 = var59.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var71 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var72 = var71.getPreferredSize();
    boolean var75 = var71.contains(10, 1);
    var71.setFocusTraversalPolicyProvider(false);
    float var78 = var71.getAlignmentX();
    java.awt.Component.BaselineResizeBehavior var79 = var71.getBaselineResizeBehavior();
    java.awt.dnd.DropTarget var80 = var71.getDropTarget();
    var71.layout();
    var71.setDebugGraphicsOptions(996);
    java.awt.Graphics var84 = var71.getGraphics();
    var59.printAll(var84);
    var28.printComponents(var84);
    var14.print(var84);
    var2.printAll(var84);
    boolean var89 = var2.getIgnoreRepaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);

  }

  public void test92() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test92");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    var2.revalidate();
    boolean var6 = var2.isFocusOwner();
    float var7 = var2.getAlignmentX();
    java.beans.VetoableChangeListener[] var8 = var2.getVetoableChangeListeners();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var11.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var18 = var11.location();
    var11.setAlignmentX(0.5f);
    var11.requestFocus();
    java.awt.Toolkit var22 = var11.getToolkit();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    var25.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var31 = var25.getWidth();
    boolean var34 = var25.inside(24, 1);
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    var37.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var47 = var37.getPreferredSize();
    java.awt.ComponentOrientation var48 = var37.getComponentOrientation();
    var25.setComponentOrientation(var48);
    var11.applyComponentOrientation(var48);
    int var51 = var11.getHeight();
    java.awt.Color var52 = var11.getBackground();
    var2.setForeground(var52);
    java.lang.String var54 = var2.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);

  }

  public void test93() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test93");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    var2.enable();
    var2.transferFocusBackward();
    java.awt.event.MouseListener[] var7 = var2.getMouseListeners();
    java.awt.Component.BaselineResizeBehavior var8 = var2.getBaselineResizeBehavior();
    boolean var9 = var2.isMinimumSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test94() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test94");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var8 = var7.getPreferredSize();
    javax.swing.JPopupMenu var9 = var7.getComponentPopupMenu();
    java.awt.Rectangle var10 = var7.bounds();
    var2.computeVisibleRect(var10);
    java.awt.event.ComponentListener[] var12 = var2.getComponentListeners();
    var2.setDebugGraphicsOptions(10);
    var2.setAlignmentY(0.5f);
    int var17 = var2.getWidth();
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var21 = var20.isMaximumSizeSet();
    var20.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var26 = var20.getTransferHandler();
    boolean var27 = var20.hasFocus();
    var20.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var30 = var20.getPreferredSize();
    java.awt.ComponentOrientation var31 = var20.getComponentOrientation();
    java.lang.String var32 = var20.getName();
    var20.repaint();
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var37 = var36.isMaximumSizeSet();
    var36.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var42 = var36.getTransferHandler();
    boolean var43 = var36.hasFocus();
    var36.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var46 = var36.getPreferredSize();
    java.awt.GraphicsConfiguration var47 = var36.getGraphicsConfiguration();
    var36.firePropertyChange("", 1L, 10L);
    java.awt.Component var54 = var36.findComponentAt((-1), 996);
    java.awt.Point var55 = var36.getLocation();
    var20.setLocation(var55);
    java.awt.Point var57 = var2.getLocation(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test95() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test95");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.Insets var7 = var2.getInsets();
    javax.swing.JToolTip var8 = var2.createToolTip();
    var2.invalidate();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", false, true);
    java.awt.Dimension var14 = var2.getMaximumSize();
    java.lang.String var15 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var15,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var15.equals("bierse.view.RunningMessagePanel[,0,0,0var15,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));

  }

  public void test96() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test96");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    boolean var40 = var27.isDoubleBuffered();
    bierse.view.RunningMessagePanel var43 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var43.transferFocus();
    var43.show();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var49 = var48.getPreferredSize();
    boolean var52 = var48.contains(10, 1);
    java.awt.im.InputMethodRequests var53 = var48.getInputMethodRequests();
    java.awt.Font var54 = var48.getFont();
    var43.setFont(var54);
    var27.setFont(var54);
    var27.setDoubleBuffered(false);
    java.awt.Component var61 = var27.findComponentAt(12, 11);
    var27.grabFocus();
    var27.repaint();
    boolean var64 = var27.isFocusTraversable();
    java.awt.Rectangle var65 = var27.getVisibleRect();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test97() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test97");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.countComponents();
    java.awt.event.HierarchyBoundsListener[] var7 = var2.getHierarchyBoundsListeners();
    java.awt.Rectangle var8 = var2.getBounds();
    javax.swing.plaf.PanelUI var9 = var2.getUI();
    java.awt.dnd.DropTarget var10 = var2.getDropTarget();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test98() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test98");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var3 = var2.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var6 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var6.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var13 = var6.location();
    java.awt.Component var14 = var2.findComponentAt(var13);
    var2.setEnabled(true);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var19.transferFocus();
    var19.show();
    float var22 = var19.getAlignmentX();
    boolean var25 = var19.contains(0, 24);
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var29 = var28.getPreferredSize();
    java.awt.Dimension var30 = var28.getMaximumSize();
    java.awt.event.FocusListener[] var31 = var28.getFocusListeners();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var35 = var34.getPreferredSize();
    boolean var38 = var34.contains(10, 1);
    java.awt.im.InputMethodRequests var39 = var34.getInputMethodRequests();
    java.awt.Font var40 = var34.getFont();
    var28.setFont(var40);
    java.awt.FontMetrics var42 = var19.getFontMetrics(var40);
    java.awt.FontMetrics var43 = var2.getFontMetrics(var40);
    int var44 = var2.getWidth();
    var2.setOpaque(false);
    var2.setIgnoreRepaint(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);

  }

  public void test99() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test99");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    var2.repaint((-1L), 1, (-1), 1, 24);
    java.awt.Container var14 = var2.getTopLevelAncestor();
    java.awt.Container var15 = var2.getTopLevelAncestor();
    boolean var16 = var2.isValid();
    var2.show();
    var2.show(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test100() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test100");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    boolean var13 = var11.isOpaque();
    java.awt.event.HierarchyListener[] var14 = var11.getHierarchyListeners();
    int var15 = var11.countComponents();
    java.awt.event.HierarchyBoundsListener[] var16 = var11.getHierarchyBoundsListeners();
    boolean var18 = var11.areFocusTraversalKeysSet(1);
    boolean var19 = var2.isAncestorOf((java.awt.Component)var11);
    var2.requestFocus();
    java.awt.Dimension var21 = var2.getMinimumSize();
    var2.requestFocus();
    java.awt.Dimension var23 = var2.getPreferredSize();
    java.awt.Dimension var24 = var2.getSize();
    boolean var25 = var2.isFocusTraversable();
    java.awt.Cursor var26 = var2.getCursor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test101() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test101");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.beans.PropertyChangeListener[] var5 = var2.getPropertyChangeListeners();
    var2.setOpaque(true);
    java.awt.Insets var8 = var2.insets();
    boolean var9 = var2.isOptimizedDrawingEnabled();
    var2.disable();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var13.repaint(1L, (-1), (-1), 0, 100);
    boolean var20 = var13.isFocusTraversable();
    javax.swing.ActionMap var21 = var13.getActionMap();
    var2.setActionMap(var21);
    boolean var23 = var2.isMinimumSizeSet();
    java.awt.Container var24 = var2.getParent();
    var2.setOpaque(true);
    javax.swing.KeyStroke[] var27 = var2.getRegisteredKeyStrokes();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (short)1, (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test102() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test102");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    java.awt.event.ContainerListener[] var7 = var2.getContainerListeners();
    java.awt.Dimension var8 = var2.getMaximumSize();
    boolean var9 = var2.isRequestFocusEnabled();
    boolean var10 = var2.isCursorSet();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    boolean var16 = var14.isOpaque();
    java.beans.PropertyChangeListener[] var17 = var14.getPropertyChangeListeners();
    var14.setOpaque(true);
    java.awt.Component var20 = var2.add("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var14);
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var23.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var30 = var23.location();
    java.awt.Font var31 = var23.getFont();
    boolean var32 = var23.requestFocusInWindow();
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var36 = var35.isMaximumSizeSet();
    var35.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var41 = var35.getTransferHandler();
    boolean var42 = var35.hasFocus();
    javax.swing.event.AncestorListener[] var43 = var35.getAncestorListeners();
    java.awt.Dimension var44 = var35.getMinimumSize();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var49 = var48.getPreferredSize();
    java.awt.Dimension var50 = var48.getMaximumSize();
    var48.disable();
    var35.putClientProperty((java.lang.Object)100, (java.lang.Object)var48);
    int var53 = var35.getHeight();
    bierse.view.RunningMessagePanel var56 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var56.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var63 = var56.location();
    boolean var64 = var35.contains(var63);
    java.awt.Component var65 = var23.getComponentAt(var63);
    java.awt.Component var66 = var2.getComponentAt(var63);
    boolean var69 = var2.contains(13, 0);
    bierse.view.RunningMessagePanel var73 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var74 = var73.getPreferredSize();
    boolean var75 = var73.isPreferredSizeSet();
    bierse.view.RunningMessagePanel var78 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var79 = var78.isMaximumSizeSet();
    boolean var80 = var78.isOpaque();
    java.beans.PropertyChangeListener[] var81 = var78.getPropertyChangeListeners();
    var78.setOpaque(true);
    java.awt.Insets var84 = var78.insets();
    java.awt.Insets var85 = var73.getInsets(var84);
    var73.resetKeyboardActions();
    java.awt.Color var87 = var73.getBackground();
    java.util.Set var89 = var73.getFocusTraversalKeys(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setFocusTraversalKeys(12, var89);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test103() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test103");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    boolean var21 = var15.getInheritsPopupMenu();
    var15.setLocation(0, 100);
    boolean var25 = var15.isFocusTraversalPolicyProvider();
    var15.list();
    javax.swing.event.AncestorListener[] var27 = var15.getAncestorListeners();
    java.awt.Cursor var28 = var15.getCursor();
    bierse.view.RunningMessagePanel var31 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var32 = var31.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var35.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var42 = var35.location();
    java.awt.Component var43 = var31.findComponentAt(var42);
    var31.setEnabled(true);
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var48.transferFocus();
    var48.show();
    float var51 = var48.getAlignmentX();
    boolean var54 = var48.contains(0, 24);
    bierse.view.RunningMessagePanel var57 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var58 = var57.getPreferredSize();
    java.awt.Dimension var59 = var57.getMaximumSize();
    java.awt.event.FocusListener[] var60 = var57.getFocusListeners();
    bierse.view.RunningMessagePanel var63 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var64 = var63.getPreferredSize();
    boolean var67 = var63.contains(10, 1);
    java.awt.im.InputMethodRequests var68 = var63.getInputMethodRequests();
    java.awt.Font var69 = var63.getFont();
    var57.setFont(var69);
    java.awt.FontMetrics var71 = var48.getFontMetrics(var69);
    java.awt.FontMetrics var72 = var31.getFontMetrics(var69);
    java.awt.FontMetrics var73 = var15.getFontMetrics(var69);
    bierse.view.RunningMessagePanel var76 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var77 = var76.getPreferredSize();
    boolean var80 = var76.contains(10, 1);
    java.awt.Insets var81 = var76.getInsets();
    javax.swing.JToolTip var82 = var76.createToolTip();
    var76.invalidate();
    bierse.view.RunningMessagePanel var86 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var87 = var86.getPreferredSize();
    java.awt.Point var88 = var86.getMousePosition();
    var86.revalidate();
    boolean var90 = var76.isFocusCycleRoot((java.awt.Container)var86);
    java.awt.Point var91 = var76.location();
    java.awt.Point var92 = var15.getLocation(var91);
    var15.setInheritsPopupMenu(true);
    int var97 = var15.getBaseline(996, 11);
    boolean var98 = var15.getAutoscrolls();
    boolean var99 = var15.isFocusable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == true);

  }

  public void test104() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test104");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    javax.swing.JRootPane var13 = var2.getRootPane();
    var2.setRequestFocusEnabled(false);
    java.awt.Dimension var16 = var2.preferredSize();
    java.awt.Dimension var17 = var2.getPreferredSize();
    var2.addNotify();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", (byte)10, (byte)100);
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=8,maximumSize=,minimumSize=,preferredSize=]", (short)0, (short)0);
    java.awt.Container var27 = var2.getParent();
    boolean var28 = var2.isOpaque();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);

  }

  public void test105() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test105");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.revalidate();
    var2.invalidate();
    boolean var7 = var2.isManagingFocus();
    var2.firePropertyChange("", (short)100, (short)10);
    java.awt.Font var12 = var2.getFont();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test106() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test106");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    var2.revalidate();
    var2.enable(true);
    java.awt.Point var11 = var2.location();
    java.awt.event.FocusListener[] var12 = var2.getFocusListeners();
    boolean var13 = var2.isFocusTraversable();
    float var14 = var2.getAlignmentY();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var18 = var17.isMaximumSizeSet();
    var17.layout();
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var23 = var22.isMaximumSizeSet();
    boolean var24 = var22.isOpaque();
    java.awt.event.HierarchyListener[] var25 = var22.getHierarchyListeners();
    int var26 = var22.countComponents();
    java.awt.event.HierarchyBoundsListener[] var27 = var22.getHierarchyBoundsListeners();
    boolean var29 = var22.areFocusTraversalKeysSet(1);
    bierse.view.RunningMessagePanel var32 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var33 = var32.getPreferredSize();
    javax.swing.JPopupMenu var34 = var32.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var38 = var37.getPreferredSize();
    javax.swing.JPopupMenu var39 = var37.getComponentPopupMenu();
    java.awt.Rectangle var40 = var37.bounds();
    var32.computeVisibleRect(var40);
    var22.setBounds(var40);
    var17.repaint(var40);
    java.awt.Component var46 = var17.getComponentAt(1, 100);
    int var47 = var17.getY();
    java.awt.Rectangle var48 = var17.getVisibleRect();
    var2.setBounds(var48);
    boolean var50 = var2.isMaximumSizeSet();
    float var51 = var2.getAlignmentX();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0.5f);

  }

  public void test107() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test107");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    java.awt.Component var5 = var2.getNextFocusableComponent();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var10 = var9.isMaximumSizeSet();
    var9.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var15 = var9.getTransferHandler();
    boolean var16 = var9.hasFocus();
    var9.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var19 = var9.getPreferredSize();
    java.awt.ComponentOrientation var20 = var9.getComponentOrientation();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var24 = var23.isMaximumSizeSet();
    var23.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var29 = var23.getTransferHandler();
    boolean var30 = var23.hasFocus();
    javax.swing.event.AncestorListener[] var31 = var23.getAncestorListeners();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var35 = var34.isMaximumSizeSet();
    var34.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var40 = var34.getTransferHandler();
    boolean var41 = var34.hasFocus();
    var34.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var44 = var34.getPreferredSize();
    java.awt.ComponentOrientation var45 = var34.getComponentOrientation();
    var9.add((java.awt.Component)var23, (java.lang.Object)var34);
    boolean var47 = var34.isDoubleBuffered();
    var34.setEnabled(true);
    var34.disable();
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var54 = var53.isMaximumSizeSet();
    var53.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var53.invalidate();
    bierse.view.RunningMessagePanel var62 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var63 = var62.isMaximumSizeSet();
    var62.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var70 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var71 = var70.isMaximumSizeSet();
    var70.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var76 = var70.getWidth();
    java.awt.Component[] var77 = var70.getComponents();
    var53.putClientProperty((java.lang.Object)var62, (java.lang.Object)var77);
    var62.transferFocus();
    var62.setToolTipText("");
    var62.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (byte)0, (byte)1);
    boolean var86 = var62.isValidateRoot();
    var62.setDoubleBuffered(false);
    boolean var89 = var34.isFocusCycleRoot((java.awt.Container)var62);
    java.util.Set var91 = var62.getFocusTraversalKeys(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setFocusTraversalKeys(14, var91);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test108() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test108");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    var11.transferFocus();
    var11.setToolTipText("");
    boolean var33 = var11.contains((-1), 12);
    java.lang.String var34 = var11.getName();
    boolean var37 = var11.inside(12, 100);
    boolean var38 = var11.isFocusTraversalPolicyProvider();
    var11.repaint(100, (-1), 13, 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test109() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test109");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var3 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var4 = var3.isMaximumSizeSet();
    var3.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var9 = var3.getTransferHandler();
    boolean var10 = var3.hasFocus();
    javax.swing.event.AncestorListener[] var11 = var3.getAncestorListeners();
    java.awt.Dimension var12 = var3.getMinimumSize();
    boolean var13 = var3.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    var16.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var26 = var16.getPreferredSize();
    java.awt.Dimension var27 = var3.getSize(var26);
    int var28 = var0.getIndexOf((java.lang.Object)var3);
    java.lang.Object var30 = var0.getElementAt(0);
    var0.removeAllElements();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var35 = var34.isMaximumSizeSet();
    var34.layout();
    var34.revalidate();
    boolean var38 = var34.isFocusOwner();
    float var39 = var34.getAlignmentX();
    javax.swing.JToolTip var40 = var34.createToolTip();
    java.awt.event.MouseMotionListener[] var41 = var34.getMouseMotionListeners();
    var0.addElement((java.lang.Object)var41);
    javax.swing.event.ListDataListener[] var43 = var0.getListDataListeners();
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var47 = var46.isMaximumSizeSet();
    var46.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var52 = var46.getTransferHandler();
    boolean var53 = var46.hasFocus();
    var46.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var56 = var46.getPreferredSize();
    java.awt.ComponentOrientation var57 = var46.getComponentOrientation();
    bierse.view.RunningMessagePanel var60 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var61 = var60.isMaximumSizeSet();
    var60.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var66 = var60.getTransferHandler();
    boolean var67 = var60.hasFocus();
    var60.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var70 = var60.getPreferredSize();
    java.awt.Dimension var71 = var46.getSize(var70);
    boolean var72 = var46.requestDefaultFocus();
    boolean var73 = var46.requestDefaultFocus();
    var46.firePropertyChange("", 12, (-1));
    boolean var78 = var46.getVerifyInputWhenFocusTarget();
    java.beans.PropertyChangeListener[] var79 = var46.getPropertyChangeListeners();
    java.beans.PropertyChangeListener[] var80 = var46.getPropertyChangeListeners();
    var0.addElement((java.lang.Object)var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test110() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test110");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    javax.accessibility.AccessibleContext var11 = var2.getAccessibleContext();
    int var12 = var2.getHeight();
    java.awt.Image var15 = var2.createImage(12, 24);
    int var16 = var2.getHeight();
    javax.swing.InputVerifier var17 = var2.getInputVerifier();
    var2.setVisible(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test111() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test111");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.setDoubleBuffered(false);
    var2.setFocusTraversalKeysEnabled(false);
    java.awt.Point var10 = var2.getMousePosition(false);
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var14 = var13.isMaximumSizeSet();
    boolean var15 = var13.isOpaque();
    java.awt.event.HierarchyListener[] var16 = var13.getHierarchyListeners();
    int var17 = var13.getWidth();
    int var18 = var13.countComponents();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var22 = var21.getPreferredSize();
    boolean var25 = var21.contains(10, 1);
    java.awt.im.InputMethodRequests var26 = var21.getInputMethodRequests();
    boolean var29 = var21.inside((-1), 100);
    bierse.view.RunningMessagePanel var32 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var33 = var32.getPreferredSize();
    boolean var36 = var32.contains(10, 1);
    var32.setAlignmentX((-1.0f));
    java.awt.Point var39 = var32.getLocation();
    java.awt.Point var40 = var21.getLocation(var39);
    boolean var41 = var13.contains(var40);
    var2.setLocation(var40);
    boolean var44 = var2.requestFocus(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test112() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test112");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    var2.revalidate();
    var2.enable(true);
    java.awt.Point var11 = var2.location();
    var2.paintImmediately(10, 13, 996, 996);
    int var17 = var2.getComponentCount();
    boolean var20 = var2.contains((-1), 11);
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var24 = var23.getPreferredSize();
    java.awt.Dimension var25 = var23.getMaximumSize();
    java.awt.Insets var26 = var23.getInsets();
    java.beans.PropertyChangeListener[] var28 = var23.getPropertyChangeListeners("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    int var29 = var23.getX();
    bierse.view.RunningMessagePanel var32 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var33 = var32.getPreferredSize();
    boolean var34 = var32.isPreferredSizeSet();
    var32.enable();
    javax.accessibility.AccessibleContext var36 = var32.getAccessibleContext();
    var32.setFocusable(false);
    var32.setIgnoreRepaint(false);
    java.awt.event.MouseWheelListener[] var41 = var32.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var44 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var45 = var44.getPreferredSize();
    boolean var48 = var44.contains(10, 1);
    var44.setFocusTraversalPolicyProvider(false);
    float var51 = var44.getAlignmentX();
    java.awt.Component.BaselineResizeBehavior var52 = var44.getBaselineResizeBehavior();
    java.awt.dnd.DropTarget var53 = var44.getDropTarget();
    var44.layout();
    var44.setDebugGraphicsOptions(996);
    java.awt.Graphics var57 = var44.getGraphics();
    var32.printAll(var57);
    var23.update(var57);
    var2.setNextFocusableComponent((java.awt.Component)var23);
    var2.removeAll();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test113() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test113");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    javax.swing.event.ListDataListener[] var1 = var0.getListDataListeners();
    bierse.view.RunningMessagePanel var4 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var4.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var11 = var4.location();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    var14.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var20 = var14.getTransferHandler();
    boolean var21 = var14.hasFocus();
    javax.swing.event.AncestorListener[] var22 = var14.getAncestorListeners();
    java.awt.Dimension var23 = var14.getMinimumSize();
    var4.resize(var23);
    int var25 = var0.getIndexOf((java.lang.Object)var23);
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var29 = var28.isMaximumSizeSet();
    var28.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var34 = var28.getTransferHandler();
    java.awt.Component var37 = var28.getComponentAt(0, 0);
    var0.insertElementAt((java.lang.Object)var28, 0);
    javax.swing.event.ListDataListener[] var40 = var0.getListDataListeners();
    int var41 = var0.getSize();
    java.lang.Object var43 = var0.getElementAt(13);
    int var44 = var0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 13);

  }

  public void test114() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test114");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    var2.revalidate();
    boolean var6 = var2.isFocusOwner();
    float var7 = var2.getAlignmentX();
    java.beans.VetoableChangeListener[] var8 = var2.getVetoableChangeListeners();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var17 = var11.getTransferHandler();
    boolean var18 = var11.hasFocus();
    javax.swing.event.AncestorListener[] var19 = var11.getAncestorListeners();
    java.awt.Dimension var20 = var11.getMinimumSize();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var25 = var24.getPreferredSize();
    java.awt.Dimension var26 = var24.getMaximumSize();
    var24.disable();
    var11.putClientProperty((java.lang.Object)100, (java.lang.Object)var24);
    javax.swing.InputVerifier var29 = var24.getInputVerifier();
    boolean var30 = var24.getInheritsPopupMenu();
    boolean var31 = var24.isFocusCycleRoot();
    int var32 = var24.getY();
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var35.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var42 = var35.location();
    bierse.view.RunningMessagePanel var45 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var46 = var45.isMaximumSizeSet();
    var45.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var51 = var45.getTransferHandler();
    boolean var52 = var45.hasFocus();
    javax.swing.event.AncestorListener[] var53 = var45.getAncestorListeners();
    java.awt.Dimension var54 = var45.getMinimumSize();
    var35.resize(var54);
    var35.repaint(100L, 1, (-1), 100, 24);
    java.awt.event.HierarchyBoundsListener[] var62 = var35.getHierarchyBoundsListeners();
    java.awt.Color var63 = var35.getBackground();
    var24.setBackground(var63);
    boolean var65 = var2.isAncestorOf((java.awt.Component)var24);
    java.lang.String var66 = var24.getUIClassID();
    java.awt.Dimension var67 = var24.getMaximumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "PanelUI"+ "'", var66.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test115() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test115");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.repaint(1L, (-1), (-1), 0, 100);
    boolean var9 = var2.isFocusTraversable();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var13 = var12.getPreferredSize();
    boolean var16 = var12.contains(10, 1);
    java.awt.im.InputMethodRequests var17 = var12.getInputMethodRequests();
    var12.revalidate();
    var12.firePropertyChange("hi!", (short)100, (short)0);
    var2.setNextFocusableComponent((java.awt.Component)var12);
    boolean var24 = var2.isFocusable();
    var2.nextFocus();
    java.awt.Insets var26 = var2.getInsets();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test116() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test116");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    java.awt.Image var11 = var2.createImage(24, 24);
    boolean var12 = var2.getInheritsPopupMenu();
    boolean var13 = var2.isBackgroundSet();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.layout();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isMaximumSizeSet();
    boolean var23 = var21.isOpaque();
    java.awt.event.HierarchyListener[] var24 = var21.getHierarchyListeners();
    int var25 = var21.countComponents();
    java.awt.event.HierarchyBoundsListener[] var26 = var21.getHierarchyBoundsListeners();
    boolean var28 = var21.areFocusTraversalKeysSet(1);
    bierse.view.RunningMessagePanel var31 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var32 = var31.getPreferredSize();
    javax.swing.JPopupMenu var33 = var31.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var37 = var36.getPreferredSize();
    javax.swing.JPopupMenu var38 = var36.getComponentPopupMenu();
    java.awt.Rectangle var39 = var36.bounds();
    var31.computeVisibleRect(var39);
    var21.setBounds(var39);
    var16.repaint(var39);
    var2.paintImmediately(var39);
    java.util.Locale var44 = var2.getLocale();
    java.awt.Insets var45 = var2.getInsets();
    boolean var46 = var2.getIgnoreRepaint();
    var2.setFocusCycleRoot(false);
    java.awt.Graphics var49 = var2.getGraphics();
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var53 = var52.isMaximumSizeSet();
    boolean var54 = var52.isOpaque();
    java.awt.event.HierarchyListener[] var55 = var52.getHierarchyListeners();
    int var56 = var52.getWidth();
    int var57 = var52.countComponents();
    java.awt.Point var59 = var52.getMousePosition(true);
    var52.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var62 = var52.toString();
    java.awt.Font var63 = var52.getFont();
    javax.swing.plaf.PanelUI var64 = var52.getUI();
    javax.swing.KeyStroke[] var65 = var52.getRegisteredKeyStrokes();
    java.awt.Rectangle var66 = var52.bounds();
    var2.computeVisibleRect(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var62,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var62.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var62,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test117() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test117");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    var2.disable();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var9 = var8.isMaximumSizeSet();
    boolean var10 = var8.isOpaque();
    java.awt.event.HierarchyListener[] var11 = var8.getHierarchyListeners();
    int var12 = var8.getWidth();
    int var13 = var8.countComponents();
    java.awt.Point var15 = var8.getMousePosition(true);
    var8.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var18 = var8.toString();
    java.awt.Font var19 = var8.getFont();
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var23 = var22.getPreferredSize();
    boolean var26 = var22.contains(10, 1);
    java.awt.im.InputMethodRequests var27 = var22.getInputMethodRequests();
    boolean var28 = var22.getInheritsPopupMenu();
    java.lang.String var29 = var22.toString();
    java.awt.Rectangle var30 = var22.bounds();
    var8.setBounds(var30);
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var35 = var34.isMaximumSizeSet();
    var34.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var40 = var34.getTransferHandler();
    boolean var41 = var34.hasFocus();
    javax.swing.event.AncestorListener[] var42 = var34.getAncestorListeners();
    java.awt.Dimension var43 = var34.getMinimumSize();
    bierse.view.RunningMessagePanel var47 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var48 = var47.getPreferredSize();
    java.awt.Dimension var49 = var47.getMaximumSize();
    var47.disable();
    var34.putClientProperty((java.lang.Object)100, (java.lang.Object)var47);
    javax.swing.InputVerifier var52 = var47.getInputVerifier();
    boolean var53 = var47.getInheritsPopupMenu();
    var47.setLocation(0, 100);
    javax.swing.plaf.PanelUI var57 = var47.getUI();
    var8.setUI(var57);
    var2.setUI(var57);
    var2.setIgnoreRepaint(true);
    int var64 = var2.getBaseline(100, 100);
    java.awt.ComponentOrientation var65 = var2.getComponentOrientation();
    var2.requestFocus();
    java.awt.event.MouseMotionListener[] var67 = var2.getMouseMotionListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var18,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var18.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var18,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var29,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var29.equals("bierse.view.RunningMessagePanel[,0,0,0var29,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test118() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test118");


    bierse.view.MyKeyMap var2 = new bierse.view.MyKeyMap("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=8,maximumSize=,minimumSize=,preferredSize=]", 13);

  }

  public void test119() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test119");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    var24.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var24.invalidate();
    java.awt.Dimension var31 = var24.getPreferredSize();
    int var32 = var24.getWidth();
    java.awt.Component var33 = var15.add("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var24);
    java.awt.Rectangle var34 = var24.getVisibleRect();
    java.awt.event.MouseMotionListener[] var35 = var24.getMouseMotionListeners();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var39 = var38.isMaximumSizeSet();
    var38.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var44 = var38.getTransferHandler();
    boolean var45 = var38.hasFocus();
    var38.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var48 = var38.getPreferredSize();
    javax.swing.JRootPane var49 = var38.getRootPane();
    var38.setRequestFocusEnabled(false);
    java.awt.Dimension var52 = var38.preferredSize();
    java.awt.Dimension var53 = var38.getPreferredSize();
    var38.addNotify();
    boolean var55 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var38);
    int var56 = var24.getComponentZOrder((java.awt.Component)var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == (-1));

  }

  public void test120() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test120");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    javax.swing.JRootPane var13 = var2.getRootPane();
    var2.setRequestFocusEnabled(false);
    java.awt.Dimension var16 = var2.preferredSize();
    var2.setDebugGraphicsOptions((-1));
    boolean var19 = var2.isMaximumSizeSet();
    var2.resetKeyboardActions();
    var2.transferFocus();
    int var22 = var2.getWidth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);

  }

  public void test121() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test121");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    java.awt.Rectangle var5 = var2.bounds();
    var2.setSize(0, 24);
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var17 = var11.getTransferHandler();
    boolean var18 = var11.hasFocus();
    javax.swing.event.AncestorListener[] var19 = var11.getAncestorListeners();
    java.awt.Dimension var20 = var11.getMinimumSize();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var25 = var24.getPreferredSize();
    java.awt.Dimension var26 = var24.getMaximumSize();
    var24.disable();
    var11.putClientProperty((java.lang.Object)100, (java.lang.Object)var24);
    javax.swing.InputVerifier var29 = var24.getInputVerifier();
    boolean var30 = var24.getInheritsPopupMenu();
    var24.setLocation(0, 100);
    boolean var34 = var24.isFocusTraversalPolicyProvider();
    var24.list();
    javax.swing.event.AncestorListener[] var36 = var24.getAncestorListeners();
    var24.repaint(100L);
    int var39 = var2.getComponentZOrder((java.awt.Component)var24);
    boolean var40 = var24.isFocusable();
    java.beans.PropertyChangeListener[] var41 = var24.getPropertyChangeListeners();
    bierse.view.RunningMessagePanel var44 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var45 = var44.isMaximumSizeSet();
    var44.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var44.invalidate();
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var54 = var53.isMaximumSizeSet();
    boolean var55 = var53.isOpaque();
    java.awt.event.HierarchyListener[] var56 = var53.getHierarchyListeners();
    int var57 = var53.countComponents();
    java.awt.event.HierarchyBoundsListener[] var58 = var53.getHierarchyBoundsListeners();
    boolean var60 = var53.areFocusTraversalKeysSet(1);
    boolean var61 = var44.isAncestorOf((java.awt.Component)var53);
    var44.requestFocus();
    java.awt.Dimension var63 = var44.getMinimumSize();
    var44.requestFocus();
    java.awt.Dimension var65 = var44.getPreferredSize();
    java.awt.Dimension var66 = var24.getSize(var65);
    java.awt.Image var69 = var24.createImage(996, 996);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);

  }

  public void test122() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test122");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    boolean var8 = var2.getInheritsPopupMenu();
    java.lang.String var9 = var2.toString();
    java.awt.Rectangle var10 = var2.bounds();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    var14.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var20 = var14.getTransferHandler();
    boolean var21 = var14.hasFocus();
    javax.swing.event.AncestorListener[] var22 = var14.getAncestorListeners();
    var14.enable(false);
    java.awt.Dimension var25 = var14.minimumSize();
    java.awt.GraphicsConfiguration var26 = var14.getGraphicsConfiguration();
    bierse.view.RunningMessagePanel var29 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var30 = var29.isMaximumSizeSet();
    var29.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var35 = var29.getTransferHandler();
    boolean var36 = var29.hasFocus();
    javax.swing.event.AncestorListener[] var37 = var29.getAncestorListeners();
    java.awt.Dimension var38 = var29.getMinimumSize();
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var43 = var42.getPreferredSize();
    java.awt.Dimension var44 = var42.getMaximumSize();
    var42.disable();
    var29.putClientProperty((java.lang.Object)100, (java.lang.Object)var42);
    java.awt.image.VolatileImage var49 = var42.createVolatileImage(100, 24);
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var53 = var52.getPreferredSize();
    var42.setMinimumSize(var53);
    var14.setMinimumSize(var53);
    var14.setFocusTraversalKeysEnabled(false);
    var14.hide();
    bierse.view.RunningMessagePanel var62 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var63 = var62.getPreferredSize();
    boolean var66 = var62.contains(10, 1);
    java.awt.im.InputMethodRequests var67 = var62.getInputMethodRequests();
    java.awt.event.FocusListener[] var68 = var62.getFocusListeners();
    java.awt.Font var69 = var62.getFont();
    var62.enable();
    boolean var71 = var62.getIgnoreRepaint();
    var62.removeNotify();
    bierse.view.RunningMessagePanel var75 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var76 = var75.getPreferredSize();
    java.awt.Point var77 = var75.getMousePosition();
    var75.invalidate();
    java.lang.Object var79 = var62.getClientProperty((java.lang.Object)var75);
    java.util.Set var81 = var62.getFocusTraversalKeys(1);
    var14.setFocusTraversalKeys(1, var81);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setFocusTraversalKeys(32767, var81);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var9,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var9.equals("bierse.view.RunningMessagePanel[,0,0,0var9,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test123() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test123");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isLightweight();
    java.awt.event.KeyListener[] var4 = var2.getKeyListeners();
    var2.enable(true);
    java.awt.GraphicsConfiguration var7 = var2.getGraphicsConfiguration();
    var2.repaint((-1L), 100, 11, 11, 24);
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    var16.setVerifyInputWhenFocusTarget(false);
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var29 = var28.isMaximumSizeSet();
    boolean var30 = var28.isOpaque();
    javax.swing.InputMap var31 = var28.getInputMap();
    java.beans.PropertyChangeListener[] var33 = var28.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var34 = var28.getComponentOrientation();
    var16.applyComponentOrientation(var34);
    java.awt.Dimension var36 = var16.getMinimumSize();
    java.awt.Component var39 = var16.findComponentAt(24, 12);
    java.awt.Rectangle var40 = var16.getVisibleRect();
    var2.scrollRectToVisible(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test124() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test124");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    var2.disable();
    boolean var8 = var2.isManagingFocus();
    java.awt.Cursor var9 = var2.getCursor();
    java.awt.event.KeyListener[] var10 = var2.getKeyListeners();
    boolean var11 = var2.isPaintingForPrint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test125() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test125");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    var2.enable(false);
    boolean var13 = var2.isPaintingTile();
    boolean var16 = var2.contains(12, 12);
    boolean var17 = var2.isManagingFocus();
    boolean var18 = var2.isPreferredSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test126() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test126");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    int var9 = var2.getHeight();
    var2.setIgnoreRepaint(true);
    var2.grabFocus();
    java.awt.Color var13 = var2.getBackground();
    var2.invalidate();
    java.awt.Component[] var15 = var2.getComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test127() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test127");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    var2.revalidate();
    java.awt.event.HierarchyListener[] var9 = var2.getHierarchyListeners();
    var2.invalidate();
    java.lang.String var11 = var2.getUIClassID();
    int var12 = var2.getStringWidth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "PanelUI"+ "'", var11.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 996);

  }

  public void test128() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test128");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    boolean var13 = var11.isOpaque();
    java.awt.event.HierarchyListener[] var14 = var11.getHierarchyListeners();
    int var15 = var11.countComponents();
    java.awt.event.HierarchyBoundsListener[] var16 = var11.getHierarchyBoundsListeners();
    boolean var18 = var11.areFocusTraversalKeysSet(1);
    boolean var19 = var2.isAncestorOf((java.awt.Component)var11);
    var2.requestFocus();
    java.awt.Dimension var21 = var2.getMinimumSize();
    var2.setSpeed(0);
    javax.swing.ActionMap var24 = var2.getActionMap();
    java.awt.event.ComponentListener[] var25 = var2.getComponentListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test129() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test129");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var3 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var4 = var3.isMaximumSizeSet();
    boolean var5 = var3.isOpaque();
    java.beans.PropertyChangeListener[] var6 = var3.getPropertyChangeListeners();
    var3.setOpaque(true);
    var3.setRequestFocusEnabled(false);
    var0.insertElementAt((java.lang.Object)var3, 1);
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var16 = var15.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var19.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var26 = var19.location();
    java.awt.Component var27 = var15.findComponentAt(var26);
    var15.setEnabled(true);
    bierse.view.RunningMessagePanel var32 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var32.transferFocus();
    var32.show();
    float var35 = var32.getAlignmentX();
    boolean var38 = var32.contains(0, 24);
    bierse.view.RunningMessagePanel var41 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var42 = var41.getPreferredSize();
    java.awt.Dimension var43 = var41.getMaximumSize();
    java.awt.event.FocusListener[] var44 = var41.getFocusListeners();
    bierse.view.RunningMessagePanel var47 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var48 = var47.getPreferredSize();
    boolean var51 = var47.contains(10, 1);
    java.awt.im.InputMethodRequests var52 = var47.getInputMethodRequests();
    java.awt.Font var53 = var47.getFont();
    var41.setFont(var53);
    java.awt.FontMetrics var55 = var32.getFontMetrics(var53);
    java.awt.FontMetrics var56 = var15.getFontMetrics(var53);
    int var57 = var15.getWidth();
    var0.addElement((java.lang.Object)var57);
    var0.removeAllElements();
    java.lang.Object var60 = var0.getSelectedItem();
    var0.removeAllElements();
    java.lang.Object var62 = var0.getSelectedItem();
    javax.swing.event.ListDataListener[] var63 = var0.getListDataListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test130() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test130");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Dimension var4 = var2.getMaximumSize();
    java.awt.event.FocusListener[] var5 = var2.getFocusListeners();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var9 = var8.getPreferredSize();
    boolean var12 = var8.contains(10, 1);
    java.awt.im.InputMethodRequests var13 = var8.getInputMethodRequests();
    java.awt.Font var14 = var8.getFont();
    var2.setFont(var14);
    java.beans.VetoableChangeListener[] var16 = var2.getVetoableChangeListeners();
    boolean var17 = var2.isMaximumSizeSet();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", (short)0, (short)10);
    java.awt.Container var22 = var2.getParent();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var26 = var25.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var29 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var29.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var36 = var29.location();
    java.awt.Component var37 = var25.findComponentAt(var36);
    var25.setEnabled(true);
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var42.transferFocus();
    var42.show();
    float var45 = var42.getAlignmentX();
    boolean var48 = var42.contains(0, 24);
    bierse.view.RunningMessagePanel var51 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var52 = var51.getPreferredSize();
    java.awt.Dimension var53 = var51.getMaximumSize();
    java.awt.event.FocusListener[] var54 = var51.getFocusListeners();
    bierse.view.RunningMessagePanel var57 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var58 = var57.getPreferredSize();
    boolean var61 = var57.contains(10, 1);
    java.awt.im.InputMethodRequests var62 = var57.getInputMethodRequests();
    java.awt.Font var63 = var57.getFont();
    var51.setFont(var63);
    java.awt.FontMetrics var65 = var42.getFontMetrics(var63);
    java.awt.FontMetrics var66 = var25.getFontMetrics(var63);
    java.awt.FocusTraversalPolicy var67 = var25.getFocusTraversalPolicy();
    boolean var68 = var25.getIgnoreRepaint();
    boolean var69 = var25.isFocusTraversalPolicyProvider();
    java.awt.Cursor var70 = var25.getCursor();
    java.awt.Rectangle var71 = var25.getBounds();
    var2.computeVisibleRect(var71);
    var2.move(24, 32767);
    java.awt.Container var76 = var2.getTopLevelAncestor();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);

  }

  public void test131() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test131");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    var24.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var24.invalidate();
    java.awt.Dimension var31 = var24.getPreferredSize();
    int var32 = var24.getWidth();
    java.awt.Component var33 = var15.add("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var24);
    java.awt.Rectangle var34 = var24.getVisibleRect();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    javax.swing.event.AncestorListener[] var45 = var37.getAncestorListeners();
    var37.enable(false);
    java.awt.Dimension var48 = var37.minimumSize();
    java.awt.GraphicsConfiguration var49 = var37.getGraphicsConfiguration();
    java.awt.event.MouseMotionListener[] var50 = var37.getMouseMotionListeners();
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var54 = var53.isMaximumSizeSet();
    boolean var55 = var53.isOpaque();
    java.awt.event.HierarchyListener[] var56 = var53.getHierarchyListeners();
    int var57 = var53.getWidth();
    int var58 = var53.countComponents();
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var62 = var61.getPreferredSize();
    boolean var65 = var61.contains(10, 1);
    java.awt.im.InputMethodRequests var66 = var61.getInputMethodRequests();
    boolean var69 = var61.inside((-1), 100);
    bierse.view.RunningMessagePanel var72 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var73 = var72.getPreferredSize();
    boolean var76 = var72.contains(10, 1);
    var72.setAlignmentX((-1.0f));
    java.awt.Point var79 = var72.getLocation();
    java.awt.Point var80 = var61.getLocation(var79);
    boolean var81 = var53.contains(var80);
    java.awt.Component var82 = var37.getComponentAt(var80);
    var24.setNextFocusableComponent((java.awt.Component)var37);
    var24.setBounds(0, 0, 100, 996);
    var24.repaint(10L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);

  }

  public void test132() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test132");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    var16.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var26 = var16.getPreferredSize();
    java.awt.Dimension var27 = var2.getSize(var26);
    java.awt.image.VolatileImage var30 = var2.createVolatileImage((-1), (-1));
    var2.repaint(100L);
    java.awt.ComponentOrientation var33 = var2.getComponentOrientation();
    float var34 = var2.getAlignmentX();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    javax.swing.event.AncestorListener[] var45 = var37.getAncestorListeners();
    var37.enable(false);
    boolean var48 = var37.isPaintingTile();
    var37.setMessage("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var54 = var53.isMaximumSizeSet();
    var53.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var53.invalidate();
    java.awt.Dimension var60 = var53.getPreferredSize();
    bierse.view.RunningMessagePanel var63 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var63.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var70 = var63.location();
    java.awt.Point var71 = var53.getLocation(var70);
    java.awt.Point var72 = var37.getLocation(var70);
    java.awt.Dimension var73 = var37.getPreferredSize();
    var2.resize(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test133() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test133");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    int var7 = var2.countComponents();
    java.awt.Point var9 = var2.getMousePosition(true);
    var2.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var12 = var2.toString();
    java.awt.Font var13 = var2.getFont();
    javax.swing.plaf.PanelUI var14 = var2.getUI();
    java.awt.Dimension var15 = var2.getPreferredSize();
    var2.firePropertyChange("", (-1), 1);
    var2.setVerifyInputWhenFocusTarget(true);
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    boolean var26 = var24.isOpaque();
    java.awt.event.HierarchyListener[] var27 = var24.getHierarchyListeners();
    int var28 = var24.countComponents();
    java.awt.FocusTraversalPolicy var29 = var24.getFocusTraversalPolicy();
    var24.setDebugGraphicsOptions(11);
    java.awt.Rectangle var32 = var24.bounds();
    java.awt.Color var33 = var24.getForeground();
    var2.setBackground(var33);
    var2.repaint(0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var12,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var12.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var12,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test134() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test134");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    javax.swing.InputMap var5 = var2.getInputMap();
    java.beans.PropertyChangeListener[] var7 = var2.getPropertyChangeListeners("");
    java.lang.String var8 = var2.toString();
    boolean var9 = var2.isValid();
    int var10 = var2.getWidth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var8,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]"+ "'", var8.equals("bierse.view.RunningMessagePanel[,0,0,0var8,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);

  }

  public void test135() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test135");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    var11.transferFocus();
    var11.setToolTipText("");
    boolean var33 = var11.contains((-1), 12);
    java.lang.String var34 = var11.getName();
    java.awt.Dimension var35 = var11.getMinimumSize();
    boolean var36 = var11.requestFocusInWindow();
    bierse.view.RunningMessagePanel var39 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var39.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var46 = var39.location();
    java.awt.Component var47 = var11.getComponentAt(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);

  }

  public void test136() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test136");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Dimension var4 = var2.getMaximumSize();
    var2.disable();
    var2.transferFocusDownCycle();
    java.awt.Dimension var7 = var2.getPreferredSize();
    java.awt.Color var8 = var2.getForeground();
    var2.disable();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var14 = var13.isMaximumSizeSet();
    var13.layout();
    var13.invalidate();
    java.awt.event.FocusListener[] var17 = var13.getFocusListeners();
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var21 = var20.isMaximumSizeSet();
    var20.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var26 = var20.getTransferHandler();
    boolean var27 = var20.hasFocus();
    var20.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var30 = var20.getPreferredSize();
    java.awt.ComponentOrientation var31 = var20.getComponentOrientation();
    var20.transferFocus();
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var36 = var35.isMaximumSizeSet();
    var35.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var41 = var35.getTransferHandler();
    boolean var42 = var35.hasFocus();
    javax.swing.event.AncestorListener[] var43 = var35.getAncestorListeners();
    java.awt.Dimension var44 = var35.getMinimumSize();
    boolean var45 = var35.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var49 = var48.isMaximumSizeSet();
    var48.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var54 = var48.getTransferHandler();
    boolean var55 = var48.hasFocus();
    var48.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var58 = var48.getPreferredSize();
    java.awt.Dimension var59 = var35.getSize(var58);
    var20.setSize(var58);
    bierse.view.RunningMessagePanel var63 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var64 = var63.getPreferredSize();
    boolean var67 = var63.contains(10, 1);
    java.awt.Insets var68 = var63.getInsets();
    javax.swing.JToolTip var69 = var63.createToolTip();
    bierse.view.RunningMessagePanel var72 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var73 = var72.isMaximumSizeSet();
    var72.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var78 = var72.getTransferHandler();
    boolean var79 = var72.hasFocus();
    javax.swing.event.AncestorListener[] var80 = var72.getAncestorListeners();
    var72.enable(false);
    int var83 = var69.getComponentZOrder((java.awt.Component)var72);
    boolean var84 = var69.requestFocusInWindow();
    boolean var85 = var69.isOptimizedDrawingEnabled();
    var13.add((java.awt.Component)var20, (java.lang.Object)var69);
    float var87 = var69.getAlignmentY();
    boolean var88 = var69.getIgnoreRepaint();
    java.awt.Component var89 = var2.add("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var69);
    var69.validate();
    java.awt.LayoutManager var91 = var69.getLayout();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);

  }

  public void test137() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test137");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    boolean var40 = var2.getFocusTraversalKeysEnabled();
    bierse.view.RunningMessagePanel var44 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var44.repaint(1L, (-1), (-1), 0, 100);
    boolean var51 = var44.isFocusTraversable();
    var44.show(false);
    java.awt.Dimension var54 = var44.preferredSize();
    java.awt.Component var55 = var2.add("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var44);
    bierse.view.RunningMessagePanel var58 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var59 = var58.getPreferredSize();
    boolean var62 = var58.contains(10, 1);
    java.awt.im.InputMethodRequests var63 = var58.getInputMethodRequests();
    boolean var64 = var58.getInheritsPopupMenu();
    java.lang.String var65 = var58.toString();
    java.awt.Rectangle var66 = var58.bounds();
    java.awt.GraphicsConfiguration var67 = var58.getGraphicsConfiguration();
    var58.setDoubleBuffered(false);
    var58.nextFocus();
    boolean var71 = var2.isAncestorOf((java.awt.Component)var58);
    var58.setEnabled(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var65,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var65.equals("bierse.view.RunningMessagePanel[,0,0,0var65,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);

  }

  public void test138() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test138");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var9 = var2.location();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", ' ', 'a');
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    java.awt.Dimension var25 = var16.getMinimumSize();
    bierse.view.RunningMessagePanel var29 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var30 = var29.getPreferredSize();
    java.awt.Dimension var31 = var29.getMaximumSize();
    var29.disable();
    var16.putClientProperty((java.lang.Object)100, (java.lang.Object)var29);
    var29.setEnabled(false);
    boolean var36 = var29.isMinimumSizeSet();
    javax.swing.KeyStroke[] var37 = var29.getRegisteredKeyStrokes();
    bierse.view.RunningMessagePanel var40 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var41 = var40.isMaximumSizeSet();
    boolean var42 = var40.isOpaque();
    java.awt.event.HierarchyListener[] var43 = var40.getHierarchyListeners();
    int var44 = var40.countComponents();
    java.awt.event.HierarchyBoundsListener[] var45 = var40.getHierarchyBoundsListeners();
    boolean var47 = var40.areFocusTraversalKeysSet(1);
    bierse.view.RunningMessagePanel var50 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var51 = var50.getPreferredSize();
    javax.swing.JPopupMenu var52 = var50.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var55 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var56 = var55.getPreferredSize();
    javax.swing.JPopupMenu var57 = var55.getComponentPopupMenu();
    java.awt.Rectangle var58 = var55.bounds();
    var50.computeVisibleRect(var58);
    var40.setBounds(var58);
    boolean var61 = var40.isMaximumSizeSet();
    var40.transferFocusBackward();
    java.awt.Insets var63 = var40.getInsets();
    java.awt.Insets var64 = var29.getInsets(var63);
    java.awt.Insets var65 = var2.getInsets(var63);
    var2.updateUI();
    javax.swing.JToolTip var67 = var2.createToolTip();
    java.awt.Dimension var68 = var67.minimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test139() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test139");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    javax.swing.event.AncestorListener[] var40 = var2.getAncestorListeners();
    javax.swing.JToolTip var41 = var2.createToolTip();
    bierse.view.KeyMapComboBoxModel var42 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var45 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var46 = var45.getPreferredSize();
    javax.swing.JPopupMenu var47 = var45.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var50 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var51 = var50.getPreferredSize();
    javax.swing.JPopupMenu var52 = var50.getComponentPopupMenu();
    java.awt.Rectangle var53 = var50.bounds();
    var45.computeVisibleRect(var53);
    int var55 = var42.getIndexOf((java.lang.Object)var45);
    java.awt.Rectangle var56 = var45.bounds();
    var41.repaint(var56);
    var41.setFocusTraversalPolicyProvider(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test140() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test140");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Container var4 = var2.getParent();
    float var5 = var2.getAlignmentY();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var9 = var8.isMaximumSizeSet();
    var8.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var14 = var8.getWidth();
    java.awt.Image var17 = var8.createImage(24, 24);
    boolean var18 = var8.getInheritsPopupMenu();
    boolean var19 = var8.isBackgroundSet();
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var23 = var22.isMaximumSizeSet();
    var22.layout();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    boolean var29 = var27.isOpaque();
    java.awt.event.HierarchyListener[] var30 = var27.getHierarchyListeners();
    int var31 = var27.countComponents();
    java.awt.event.HierarchyBoundsListener[] var32 = var27.getHierarchyBoundsListeners();
    boolean var34 = var27.areFocusTraversalKeysSet(1);
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var38 = var37.getPreferredSize();
    javax.swing.JPopupMenu var39 = var37.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var43 = var42.getPreferredSize();
    javax.swing.JPopupMenu var44 = var42.getComponentPopupMenu();
    java.awt.Rectangle var45 = var42.bounds();
    var37.computeVisibleRect(var45);
    var27.setBounds(var45);
    var22.repaint(var45);
    var8.paintImmediately(var45);
    java.util.Locale var50 = var8.getLocale();
    var2.setLocale(var50);
    java.awt.Component var54 = var2.getComponentAt(13, 0);
    var2.setMessage("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]");
    boolean var57 = var2.isPaintingTile();
    var2.setEnabled(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);

  }

  public void test141() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test141");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Dimension var4 = var2.getMaximumSize();
    java.awt.event.FocusListener[] var5 = var2.getFocusListeners();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var9 = var8.getPreferredSize();
    boolean var12 = var8.contains(10, 1);
    java.awt.im.InputMethodRequests var13 = var8.getInputMethodRequests();
    java.awt.Font var14 = var8.getFont();
    var2.setFont(var14);
    java.beans.VetoableChangeListener[] var16 = var2.getVetoableChangeListeners();
    boolean var17 = var2.isMaximumSizeSet();
    boolean var18 = var2.requestFocusInWindow();
    var2.repaint();
    int var20 = var2.getHeight();
    java.awt.image.VolatileImage var23 = var2.createVolatileImage((-1), 996);
    java.lang.String var24 = var2.toString();
    var2.resetKeyboardActions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var24,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var24.equals("bierse.view.RunningMessagePanel[,0,0,0var24,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));

  }

  public void test142() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test142");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    var2.enable();
    var2.transferFocusBackward();
    java.awt.Dimension var7 = var2.size();
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var11 = var10.isMaximumSizeSet();
    var10.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var16 = var10.getTransferHandler();
    boolean var17 = var10.hasFocus();
    javax.swing.event.AncestorListener[] var18 = var10.getAncestorListeners();
    java.awt.Dimension var19 = var10.getMinimumSize();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var24 = var23.getPreferredSize();
    java.awt.Dimension var25 = var23.getMaximumSize();
    var23.disable();
    var10.putClientProperty((java.lang.Object)100, (java.lang.Object)var23);
    var23.setEnabled(false);
    boolean var30 = var23.isMinimumSizeSet();
    float var31 = var23.getAlignmentY();
    java.awt.Rectangle var32 = var23.getBounds();
    java.awt.Rectangle var33 = var2.getBounds(var32);
    boolean var34 = var2.getIgnoreRepaint();
    java.util.Locale var35 = var2.getLocale();
    java.awt.Dimension var36 = var2.preferredSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test143() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test143");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var8 = var2.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var12 = var11.getPreferredSize();
    boolean var13 = var11.isPreferredSizeSet();
    var11.enable();
    var11.transferFocusBackward();
    int var16 = var2.getComponentZOrder((java.awt.Component)var11);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var19.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var26 = var19.location();
    boolean var27 = var11.contains(var26);
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var31 = var30.getPreferredSize();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var35 = var34.isMaximumSizeSet();
    var34.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var34.invalidate();
    java.awt.Dimension var41 = var34.getPreferredSize();
    var30.setPreferredSize(var41);
    var11.setPreferredSize(var41);
    java.beans.PropertyChangeListener[] var44 = var11.getPropertyChangeListeners();
    javax.swing.InputMap var45 = var11.getInputMap();
    int var46 = var11.getStringHeight();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 24);

  }

  public void test144() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test144");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Dimension var4 = var2.getMaximumSize();
    var2.repaint();
    var2.disable();
    java.awt.Rectangle var7 = var2.getBounds();
    java.awt.Point var8 = var2.getMousePosition();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var17 = var11.getTransferHandler();
    boolean var18 = var11.hasFocus();
    javax.swing.event.AncestorListener[] var19 = var11.getAncestorListeners();
    var11.enable(false);
    java.awt.Dimension var22 = var11.minimumSize();
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var27 = var26.isMaximumSizeSet();
    boolean var28 = var26.isOpaque();
    java.beans.PropertyChangeListener[] var29 = var26.getPropertyChangeListeners();
    var26.setOpaque(true);
    java.awt.Insets var32 = var26.insets();
    boolean var33 = var26.isOptimizedDrawingEnabled();
    var26.disable();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var37.repaint(1L, (-1), (-1), 0, 100);
    boolean var44 = var37.isFocusTraversable();
    javax.swing.ActionMap var45 = var37.getActionMap();
    var26.setActionMap(var45);
    java.awt.Component var47 = var11.add("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", (java.awt.Component)var26);
    float var48 = var26.getAlignmentY();
    boolean var49 = var26.isDoubleBuffered();
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var53 = var52.getPreferredSize();
    java.awt.Dimension var54 = var52.getMaximumSize();
    java.awt.Insets var55 = var52.getInsets();
    java.beans.PropertyChangeListener[] var57 = var52.getPropertyChangeListeners("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    int var58 = var52.getX();
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var62 = var61.getPreferredSize();
    boolean var63 = var61.isPreferredSizeSet();
    var61.enable();
    javax.accessibility.AccessibleContext var65 = var61.getAccessibleContext();
    var61.setFocusable(false);
    var61.setIgnoreRepaint(false);
    java.awt.event.MouseWheelListener[] var70 = var61.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var73 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var74 = var73.getPreferredSize();
    boolean var77 = var73.contains(10, 1);
    var73.setFocusTraversalPolicyProvider(false);
    float var80 = var73.getAlignmentX();
    java.awt.Component.BaselineResizeBehavior var81 = var73.getBaselineResizeBehavior();
    java.awt.dnd.DropTarget var82 = var73.getDropTarget();
    var73.layout();
    var73.setDebugGraphicsOptions(996);
    java.awt.Graphics var86 = var73.getGraphics();
    var61.printAll(var86);
    var52.update(var86);
    var26.print(var86);
    var2.printAll(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test145() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test145");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isLightweight();
    java.beans.VetoableChangeListener[] var4 = var2.getVetoableChangeListeners();
    float var5 = var2.getAlignmentY();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var9 = var8.isMaximumSizeSet();
    var8.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var8.invalidate();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var18 = var17.isMaximumSizeSet();
    var17.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    var25.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var31 = var25.getWidth();
    java.awt.Component[] var32 = var25.getComponents();
    var8.putClientProperty((java.lang.Object)var17, (java.lang.Object)var32);
    java.util.Locale var34 = var17.getLocale();
    javax.swing.JComponent.setDefaultLocale(var34);
    var2.setLocale(var34);
    var2.repaint();
    java.awt.Component var40 = var2.locate(100, 24);
    java.awt.Dimension var41 = var2.getSize();
    var2.requestFocus();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      javax.swing.InputMap var44 = var2.getInputMap(24);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test146() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test146");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    int var7 = var2.countComponents();
    java.awt.Point var9 = var2.getMousePosition(true);
    var2.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var12 = var2.toString();
    java.awt.Font var13 = var2.getFont();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var17 = var16.getPreferredSize();
    boolean var20 = var16.contains(10, 1);
    java.awt.im.InputMethodRequests var21 = var16.getInputMethodRequests();
    boolean var22 = var16.getInheritsPopupMenu();
    java.lang.String var23 = var16.toString();
    java.awt.Rectangle var24 = var16.bounds();
    var2.setBounds(var24);
    boolean var26 = var2.isPaintingTile();
    java.awt.Dimension var27 = var2.getMaximumSize();
    javax.swing.JPopupMenu var28 = var2.getComponentPopupMenu();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var12,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var12.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var12,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var23,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var23.equals("bierse.view.RunningMessagePanel[,0,0,0var23,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test147() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test147");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.event.HierarchyBoundsListener[] var7 = var2.getHierarchyBoundsListeners();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (short)(-1), (short)100);
    var2.invalidate();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    boolean var17 = var15.isPreferredSizeSet();
    var15.enable();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var22 = var21.getPreferredSize();
    boolean var23 = var21.isPreferredSizeSet();
    var21.enable();
    var21.transferFocusBackward();
    java.awt.Dimension var26 = var21.size();
    boolean var27 = var21.isFocusable();
    var21.enableInputMethods(false);
    java.awt.Cursor var30 = var21.getCursor();
    var2.putClientProperty((java.lang.Object)var15, (java.lang.Object)var30);
    java.awt.im.InputContext var32 = var2.getInputContext();
    var2.resize(32767, 996);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);

  }

  public void test148() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test148");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    boolean var5 = var2.isMaximumSizeSet();
    java.awt.Dimension var6 = var2.preferredSize();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", ' ', ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test149() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test149");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    java.awt.Dimension var9 = var2.getPreferredSize();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var12.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var19 = var12.location();
    java.awt.Point var20 = var2.getLocation(var19);
    var2.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", 1L, 0L);
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    bierse.view.RunningMessagePanel var31 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var32 = var31.isMaximumSizeSet();
    boolean var33 = var31.isOpaque();
    java.awt.event.HierarchyListener[] var34 = var31.getHierarchyListeners();
    int var35 = var31.countComponents();
    java.awt.event.HierarchyBoundsListener[] var36 = var31.getHierarchyBoundsListeners();
    bierse.view.RunningMessagePanel var39 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var40 = var39.isMaximumSizeSet();
    boolean var41 = var39.isOpaque();
    java.awt.event.HierarchyListener[] var42 = var39.getHierarchyListeners();
    int var43 = var39.getWidth();
    java.awt.event.ContainerListener[] var44 = var39.getContainerListeners();
    java.awt.Dimension var45 = var39.getMaximumSize();
    var31.setMinimumSize(var45);
    java.awt.Dimension var47 = var27.getSize(var45);
    bierse.view.RunningMessagePanel var50 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var50.repaint(1L, (-1), (-1), 0, 100);
    boolean var57 = var50.isFocusTraversable();
    javax.swing.ActionMap var58 = var50.getActionMap();
    var27.setActionMap(var58);
    var27.move(996, 24);
    java.awt.Graphics var63 = var27.getGraphics();
    bierse.view.RunningMessagePanel var66 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var67 = var66.getPreferredSize();
    javax.swing.JPopupMenu var68 = var66.getComponentPopupMenu();
    java.awt.Rectangle var69 = var66.bounds();
    java.awt.Insets var70 = var66.insets();
    java.awt.Point var71 = var66.location();
    java.awt.Point var72 = var27.getLocation(var71);
    java.awt.Component var73 = var2.findComponentAt(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);

  }

  public void test150() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test150");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var3 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var4 = var3.getPreferredSize();
    javax.swing.JPopupMenu var5 = var3.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var9 = var8.getPreferredSize();
    javax.swing.JPopupMenu var10 = var8.getComponentPopupMenu();
    java.awt.Rectangle var11 = var8.bounds();
    var3.computeVisibleRect(var11);
    int var13 = var0.getIndexOf((java.lang.Object)var3);
    var3.hide();
    var3.show(true);
    boolean var17 = var3.hasFocus();
    java.awt.im.InputMethodRequests var18 = var3.getInputMethodRequests();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test151() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test151");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    var2.firePropertyChange("hi!", 100.0f, (-1.0f));
    javax.swing.JToolTip var13 = var2.createToolTip();
    java.awt.im.InputMethodRequests var14 = var13.getInputMethodRequests();
    java.awt.Insets var15 = var13.getInsets();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      javax.swing.InputMap var17 = var13.getInputMap(13);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test152() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test152");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    boolean var13 = var11.isOpaque();
    java.awt.event.HierarchyListener[] var14 = var11.getHierarchyListeners();
    int var15 = var11.countComponents();
    java.awt.event.HierarchyBoundsListener[] var16 = var11.getHierarchyBoundsListeners();
    boolean var18 = var11.areFocusTraversalKeysSet(1);
    boolean var19 = var2.isAncestorOf((java.awt.Component)var11);
    var2.enable();
    var2.setInheritsPopupMenu(true);
    int var23 = var2.getStringHeight();
    java.awt.Dimension var24 = var2.getSize();
    java.awt.Dimension var25 = var2.getPreferredSize();
    boolean var26 = var2.isForegroundSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);

  }

  public void test153() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test153");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.GraphicsConfiguration var13 = var2.getGraphicsConfiguration();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    boolean var18 = var16.isOpaque();
    javax.swing.InputMap var19 = var16.getInputMap();
    java.beans.PropertyChangeListener[] var21 = var16.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var22 = var16.getComponentOrientation();
    var2.applyComponentOrientation(var22);
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var27 = var26.getPreferredSize();
    javax.swing.JPopupMenu var28 = var26.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var31 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var32 = var31.getPreferredSize();
    javax.swing.JPopupMenu var33 = var31.getComponentPopupMenu();
    java.awt.Rectangle var34 = var31.bounds();
    var26.computeVisibleRect(var34);
    boolean var36 = var26.isManagingFocus();
    int var37 = var26.getHeight();
    var26.firePropertyChange("", ' ', ' ');
    var2.setNextFocusableComponent((java.awt.Component)var26);
    java.awt.Graphics var43 = var26.getGraphics();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);

  }

  public void test154() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test154");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    javax.swing.JRootPane var13 = var2.getRootPane();
    var2.setRequestFocusEnabled(false);
    java.awt.Dimension var16 = var2.preferredSize();
    java.awt.Dimension var17 = var2.getPreferredSize();
    var2.addNotify();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var21.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var28 = var21.location();
    java.awt.Font var29 = var21.getFont();
    boolean var30 = var21.requestFocusInWindow();
    bierse.view.RunningMessagePanel var33 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var34 = var33.isMaximumSizeSet();
    var33.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var39 = var33.getTransferHandler();
    boolean var40 = var33.hasFocus();
    javax.swing.event.AncestorListener[] var41 = var33.getAncestorListeners();
    java.awt.Dimension var42 = var33.getMinimumSize();
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var47 = var46.getPreferredSize();
    java.awt.Dimension var48 = var46.getMaximumSize();
    var46.disable();
    var33.putClientProperty((java.lang.Object)100, (java.lang.Object)var46);
    int var51 = var33.getHeight();
    bierse.view.RunningMessagePanel var54 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var54.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var61 = var54.location();
    boolean var62 = var33.contains(var61);
    java.awt.Component var63 = var21.getComponentAt(var61);
    var2.setLocation(var61);
    var2.transferFocusBackward();
    int var66 = var2.getY();
    var2.hide();
    boolean var69 = var2.requestFocus(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);

  }

  public void test155() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test155");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.GraphicsConfiguration var13 = var2.getGraphicsConfiguration();
    java.awt.Dimension var14 = var2.getSize();
    int var15 = var2.getComponentCount();
    java.awt.Dimension var16 = var2.getPreferredSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test156() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test156");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    boolean var40 = var27.isDoubleBuffered();
    bierse.view.RunningMessagePanel var43 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var43.transferFocus();
    var43.show();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var49 = var48.getPreferredSize();
    boolean var52 = var48.contains(10, 1);
    java.awt.im.InputMethodRequests var53 = var48.getInputMethodRequests();
    java.awt.Font var54 = var48.getFont();
    var43.setFont(var54);
    var27.setFont(var54);
    var27.setDoubleBuffered(false);
    var27.setBounds(1, 0, 12, (-1));
    bierse.view.RunningMessagePanel var66 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var67 = var66.isMaximumSizeSet();
    var66.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var72 = var66.getTransferHandler();
    boolean var73 = var66.hasFocus();
    javax.swing.event.AncestorListener[] var74 = var66.getAncestorListeners();
    java.awt.Dimension var75 = var66.getMinimumSize();
    java.awt.Point var76 = var66.getLocation();
    java.lang.Object var77 = var27.getClientProperty((java.lang.Object)var66);
    var66.setVerifyInputWhenFocusTarget(false);
    java.awt.Point var80 = var66.location();
    boolean var81 = var66.getFocusTraversalKeysEnabled();
    java.awt.Dimension var82 = var66.getMinimumSize();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var66.remove(13);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test157() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test157");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.countComponents();
    java.awt.event.HierarchyBoundsListener[] var7 = var2.getHierarchyBoundsListeners();
    java.awt.Rectangle var8 = var2.getBounds();
    int var9 = var2.getComponentCount();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var13 = var12.isMaximumSizeSet();
    boolean var14 = var12.isOpaque();
    java.awt.event.HierarchyListener[] var15 = var12.getHierarchyListeners();
    java.awt.peer.ComponentPeer var16 = var12.getPeer();
    var12.transferFocusDownCycle();
    var12.transferFocusUpCycle();
    java.awt.Dimension var19 = var12.minimumSize();
    java.awt.Component[] var20 = var12.getComponents();
    var12.resetKeyboardActions();
    java.awt.Component var22 = var2.add((java.awt.Component)var12);
    boolean var23 = var2.hasFocus();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var25 = var2.areFocusTraversalKeysSet(11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test158() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test158");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("hi!", 10);
    java.lang.Object var3 = var2.getTreeLock();
    boolean var4 = var2.isFontSet();
    java.awt.Dimension var5 = var2.getMinimumSize();
    var2.enable(true);
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    boolean var13 = var11.isOpaque();
    java.beans.PropertyChangeListener[] var14 = var11.getPropertyChangeListeners();
    var11.setOpaque(true);
    java.awt.Insets var17 = var11.insets();
    int var18 = var11.getStringHeight();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isMaximumSizeSet();
    var21.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var27 = var21.getTransferHandler();
    boolean var28 = var21.hasFocus();
    var21.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var31 = var21.getPreferredSize();
    java.awt.ComponentOrientation var32 = var21.getComponentOrientation();
    var11.setComponentOrientation(var32);
    java.util.Set var35 = var11.getFocusTraversalKeys(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setFocusTraversalKeys(0, var35);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test159() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test159");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    javax.swing.JRootPane var13 = var2.getRootPane();
    var2.setRequestFocusEnabled(false);
    java.awt.Dimension var16 = var2.preferredSize();
    java.awt.Dimension var17 = var2.getPreferredSize();
    var2.addNotify();
    java.awt.Dimension var19 = var2.getSize();
    var2.resetKeyboardActions();
    javax.swing.event.AncestorListener[] var21 = var2.getAncestorListeners();
    int var24 = var2.getBaseline(13, 12);
    java.awt.event.KeyListener[] var25 = var2.getKeyListeners();
    var2.transferFocusDownCycle();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test160() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test160");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Dimension var4 = var2.getMaximumSize();
    java.awt.event.FocusListener[] var5 = var2.getFocusListeners();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var9 = var8.getPreferredSize();
    boolean var12 = var8.contains(10, 1);
    java.awt.im.InputMethodRequests var13 = var8.getInputMethodRequests();
    java.awt.Font var14 = var8.getFont();
    var2.setFont(var14);
    java.beans.VetoableChangeListener[] var16 = var2.getVetoableChangeListeners();
    boolean var17 = var2.isMaximumSizeSet();
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var20.transferFocus();
    var20.show();
    float var23 = var20.getAlignmentX();
    var20.repaint(0L, 10, 0, 10, (-1));
    boolean var30 = var20.isEnabled();
    bierse.view.RunningMessagePanel var33 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var34 = var33.getPreferredSize();
    javax.swing.JPopupMenu var35 = var33.getComponentPopupMenu();
    java.awt.Rectangle var36 = var33.bounds();
    java.awt.Rectangle var37 = var20.getBounds(var36);
    var2.paintImmediately(var37);
    var2.repaint((-1), 100, (-1), 24);
    java.awt.peer.ComponentPeer var44 = var2.getPeer();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (short)1, (short)1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);

  }

  public void test161() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test161");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    java.awt.Font var9 = var2.getFont();
    java.beans.PropertyChangeListener[] var11 = var2.getPropertyChangeListeners("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    boolean var12 = var2.isValidateRoot();
    java.awt.Toolkit var13 = var2.getToolkit();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var16.invalidate();
    java.awt.Dimension var23 = var16.getPreferredSize();
    var2.setMaximumSize(var23);
    java.awt.event.HierarchyBoundsListener[] var25 = var2.getHierarchyBoundsListeners();
    boolean var27 = var2.areFocusTraversalKeysSet(0);
    java.awt.Color var28 = var2.getForeground();
    bierse.view.RunningMessagePanel var31 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var32 = var31.isMaximumSizeSet();
    var31.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var37 = var31.getWidth();
    java.awt.Image var40 = var31.createImage(24, 24);
    var31.repaint(0, 24, 10, (-1));
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var49 = var48.isMaximumSizeSet();
    boolean var50 = var48.isOpaque();
    java.awt.event.HierarchyListener[] var51 = var48.getHierarchyListeners();
    int var52 = var48.getWidth();
    var31.remove((java.awt.Component)var48);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setComponentZOrder((java.awt.Component)var31, 32767);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);

  }

  public void test162() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test162");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    var2.enable();
    var2.transferFocusBackward();
    var2.setRequestFocusEnabled(true);
    var2.transferFocusBackward();
    java.util.Locale var10 = var2.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test163() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test163");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    var16.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var26 = var16.getPreferredSize();
    java.awt.Dimension var27 = var2.getSize(var26);
    java.awt.image.VolatileImage var30 = var2.createVolatileImage((-1), (-1));
    javax.swing.TransferHandler var31 = var2.getTransferHandler();
    java.awt.LayoutManager var32 = var2.getLayout();
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var36 = var35.getPreferredSize();
    boolean var39 = var35.contains(10, 1);
    java.awt.im.InputMethodRequests var40 = var35.getInputMethodRequests();
    java.awt.event.FocusListener[] var41 = var35.getFocusListeners();
    java.awt.Font var42 = var35.getFont();
    var35.enable();
    boolean var44 = var35.getIgnoreRepaint();
    var35.removeNotify();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var49 = var48.getPreferredSize();
    java.awt.Point var50 = var48.getMousePosition();
    var48.invalidate();
    java.lang.Object var52 = var35.getClientProperty((java.lang.Object)var48);
    java.awt.Point var53 = var48.getLocation();
    java.awt.Component var54 = var2.findComponentAt(var53);
    java.awt.Dimension var55 = var2.getMinimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test164() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test164");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.beans.PropertyChangeListener[] var5 = var2.getPropertyChangeListeners();
    var2.setOpaque(true);
    java.awt.Insets var8 = var2.insets();
    boolean var9 = var2.isOptimizedDrawingEnabled();
    var2.disable();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var13.repaint(1L, (-1), (-1), 0, 100);
    boolean var20 = var13.isFocusTraversable();
    javax.swing.ActionMap var21 = var13.getActionMap();
    var2.setActionMap(var21);
    boolean var23 = var2.isMinimumSizeSet();
    java.awt.Container var24 = var2.getParent();
    var2.disable();
    java.awt.ComponentOrientation var26 = var2.getComponentOrientation();
    var2.enable();
    javax.swing.border.Border var28 = var2.getBorder();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test165() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test165");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    float var5 = var2.getAlignmentX();
    var2.repaint(0L, 10, 0, 10, (-1));
    boolean var12 = var2.isEnabled();
    java.lang.Object var13 = var2.getTreeLock();
    java.lang.String var14 = var2.toString();
    int var15 = var2.getStringHeight();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var14,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var14.equals("bierse.view.RunningMessagePanel[,0,0,0var14,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 24);

  }

  public void test166() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test166");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    bierse.view.RunningMessagePanel var6 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var7 = var6.isMaximumSizeSet();
    boolean var8 = var6.isOpaque();
    java.awt.event.HierarchyListener[] var9 = var6.getHierarchyListeners();
    int var10 = var6.countComponents();
    java.awt.event.HierarchyBoundsListener[] var11 = var6.getHierarchyBoundsListeners();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    boolean var16 = var14.isOpaque();
    java.awt.event.HierarchyListener[] var17 = var14.getHierarchyListeners();
    int var18 = var14.getWidth();
    java.awt.event.ContainerListener[] var19 = var14.getContainerListeners();
    java.awt.Dimension var20 = var14.getMaximumSize();
    var6.setMinimumSize(var20);
    java.awt.Dimension var22 = var2.getSize(var20);
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var25.repaint(1L, (-1), (-1), 0, 100);
    boolean var32 = var25.isFocusTraversable();
    javax.swing.ActionMap var33 = var25.getActionMap();
    var2.setActionMap(var33);
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var37.invalidate();
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var47 = var46.isMaximumSizeSet();
    var46.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var54 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var55 = var54.isMaximumSizeSet();
    var54.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var60 = var54.getWidth();
    java.awt.Component[] var61 = var54.getComponents();
    var37.putClientProperty((java.lang.Object)var46, (java.lang.Object)var61);
    boolean var64 = var37.requestFocus(false);
    javax.swing.InputMap var65 = var37.getInputMap();
    var37.reshape(996, 100, 12, 996);
    int var71 = var2.getComponentZOrder((java.awt.Component)var37);
    var2.grabFocus();
    java.awt.Dimension var73 = var2.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test167() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test167");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    boolean var10 = var2.inside((-1), 100);
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var14 = var13.getPreferredSize();
    boolean var17 = var13.contains(10, 1);
    var13.setAlignmentX((-1.0f));
    java.awt.Point var20 = var13.getLocation();
    java.awt.Point var21 = var2.getLocation(var20);
    boolean var24 = var2.contains(100, 0);
    int var25 = var2.countComponents();
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var29 = var28.getPreferredSize();
    boolean var32 = var28.contains(10, 1);
    java.awt.im.InputMethodRequests var33 = var28.getInputMethodRequests();
    java.awt.event.FocusListener[] var34 = var28.getFocusListeners();
    java.awt.Font var35 = var28.getFont();
    java.awt.Cursor var36 = var28.getCursor();
    bierse.view.RunningMessagePanel var39 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var40 = var39.getPreferredSize();
    var28.resize(var40);
    java.awt.Dimension var42 = var2.getSize(var40);
    java.awt.Point var44 = var2.getMousePosition(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);

  }

  public void test168() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test168");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    java.util.Locale var28 = var11.getLocale();
    boolean var29 = var11.getIgnoreRepaint();
    var11.setLocation(13, (-1));
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var36 = var35.getPreferredSize();
    boolean var37 = var35.isPreferredSizeSet();
    var35.enable();
    var35.transferFocusBackward();
    var35.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (byte)10, (byte)1);
    java.awt.event.MouseWheelListener[] var44 = var35.getMouseWheelListeners();
    boolean var45 = var35.isFontSet();
    java.awt.Dimension var46 = var35.getMaximumSize();
    var11.setMinimumSize(var46);
    boolean var48 = var11.isManagingFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);

  }

  public void test169() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test169");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    var2.setAlignmentY(10.0f);
    var2.setInheritsPopupMenu(false);
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var21 = var20.getPreferredSize();
    boolean var24 = var20.contains(10, 1);
    java.awt.im.InputMethodRequests var25 = var20.getInputMethodRequests();
    java.awt.event.FocusListener[] var26 = var20.getFocusListeners();
    java.awt.Font var27 = var20.getFont();
    java.beans.PropertyChangeListener[] var29 = var20.getPropertyChangeListeners("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    boolean var30 = var20.isValidateRoot();
    java.awt.Toolkit var31 = var20.getToolkit();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var35 = var34.isMaximumSizeSet();
    var34.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var34.invalidate();
    java.awt.Dimension var41 = var34.getPreferredSize();
    var20.setMaximumSize(var41);
    java.awt.event.HierarchyBoundsListener[] var43 = var20.getHierarchyBoundsListeners();
    java.awt.Point var44 = var20.location();
    var20.validate();
    var20.enableInputMethods(true);
    var20.setEnabled(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var51 = var2.add((java.awt.Component)var20, 100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test170() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test170");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var3 = var2.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var6 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var6.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var13 = var6.location();
    java.awt.Component var14 = var2.findComponentAt(var13);
    var2.setEnabled(true);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var19.transferFocus();
    var19.show();
    float var22 = var19.getAlignmentX();
    boolean var25 = var19.contains(0, 24);
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var29 = var28.getPreferredSize();
    java.awt.Dimension var30 = var28.getMaximumSize();
    java.awt.event.FocusListener[] var31 = var28.getFocusListeners();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var35 = var34.getPreferredSize();
    boolean var38 = var34.contains(10, 1);
    java.awt.im.InputMethodRequests var39 = var34.getInputMethodRequests();
    java.awt.Font var40 = var34.getFont();
    var28.setFont(var40);
    java.awt.FontMetrics var42 = var19.getFontMetrics(var40);
    java.awt.FontMetrics var43 = var2.getFontMetrics(var40);
    java.awt.FocusTraversalPolicy var44 = var2.getFocusTraversalPolicy();
    boolean var45 = var2.getIgnoreRepaint();
    boolean var46 = var2.isFocusTraversalPolicyProvider();
    var2.nextFocus();
    bierse.view.RunningMessagePanel var50 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var51 = var50.isMaximumSizeSet();
    var50.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var56 = var50.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var59 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var60 = var59.getPreferredSize();
    boolean var61 = var59.isPreferredSizeSet();
    var59.enable();
    var59.transferFocusBackward();
    int var64 = var50.getComponentZOrder((java.awt.Component)var59);
    var50.setEnabled(false);
    java.awt.Graphics var67 = var50.getGraphics();
    var50.transferFocus();
    bierse.view.RunningMessagePanel var71 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.KeyListener[] var72 = var71.getKeyListeners();
    javax.swing.JRootPane var73 = var71.getRootPane();
    var2.add((java.awt.Component)var50, (java.lang.Object)var71);
    var71.setRequestFocusEnabled(false);
    var71.resetKeyboardActions();
    var71.nextFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);

  }

  public void test171() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test171");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var3 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var4 = var3.getPreferredSize();
    javax.swing.JPopupMenu var5 = var3.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var9 = var8.getPreferredSize();
    javax.swing.JPopupMenu var10 = var8.getComponentPopupMenu();
    java.awt.Rectangle var11 = var8.bounds();
    var3.computeVisibleRect(var11);
    int var13 = var0.getIndexOf((java.lang.Object)var3);
    var3.invalidate();
    java.awt.GraphicsConfiguration var15 = var3.getGraphicsConfiguration();
    javax.swing.JToolTip var16 = var3.createToolTip();
    javax.swing.JToolTip var17 = var16.createToolTip();
    boolean var18 = var17.isShowing();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isMaximumSizeSet();
    var21.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var27 = var21.getTransferHandler();
    boolean var28 = var21.hasFocus();
    javax.swing.event.AncestorListener[] var29 = var21.getAncestorListeners();
    java.awt.Dimension var30 = var21.getMinimumSize();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var35 = var34.getPreferredSize();
    java.awt.Dimension var36 = var34.getMaximumSize();
    var34.disable();
    var21.putClientProperty((java.lang.Object)100, (java.lang.Object)var34);
    javax.swing.InputVerifier var39 = var34.getInputVerifier();
    java.awt.dnd.DropTarget var40 = var34.getDropTarget();
    java.awt.Dimension var41 = var34.getMinimumSize();
    var17.resize(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test172() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test172");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    java.awt.peer.ComponentPeer var6 = var2.getPeer();
    var2.transferFocus();
    java.lang.String var8 = var2.getToolTipText();
    int var9 = var2.getY();
    int var10 = var2.getHeight();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var14 = var13.isMaximumSizeSet();
    var13.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var19 = var13.getTransferHandler();
    boolean var20 = var13.hasFocus();
    var13.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var23 = var13.getPreferredSize();
    java.awt.ComponentOrientation var24 = var13.getComponentOrientation();
    java.lang.String var25 = var13.getName();
    java.awt.Font var26 = var13.getFont();
    var2.setFont(var26);
    java.awt.Graphics var28 = var2.getGraphics();
    boolean var29 = var2.isShowing();
    bierse.view.RunningMessagePanel var32 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var33 = var32.isMaximumSizeSet();
    var32.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var38 = var32.getTransferHandler();
    boolean var39 = var32.hasFocus();
    javax.swing.event.AncestorListener[] var40 = var32.getAncestorListeners();
    java.awt.Dimension var41 = var32.getMinimumSize();
    bierse.view.RunningMessagePanel var45 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var46 = var45.getPreferredSize();
    java.awt.Dimension var47 = var45.getMaximumSize();
    var45.disable();
    var32.putClientProperty((java.lang.Object)100, (java.lang.Object)var45);
    javax.swing.InputVerifier var50 = var45.getInputVerifier();
    bierse.view.RunningMessagePanel var54 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var55 = var54.isMaximumSizeSet();
    var54.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var54.invalidate();
    java.awt.Dimension var61 = var54.getPreferredSize();
    int var62 = var54.getWidth();
    java.awt.Component var63 = var45.add("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var54);
    java.awt.Rectangle var64 = var54.getVisibleRect();
    java.awt.peer.ComponentPeer var65 = var54.getPeer();
    bierse.view.RunningMessagePanel var69 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var70 = var69.isMaximumSizeSet();
    var69.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var75 = var69.getWidth();
    boolean var78 = var69.inside(24, 1);
    bierse.view.RunningMessagePanel var81 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var82 = var81.isMaximumSizeSet();
    var81.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var87 = var81.getTransferHandler();
    boolean var88 = var81.hasFocus();
    var81.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var91 = var81.getPreferredSize();
    java.awt.ComponentOrientation var92 = var81.getComponentOrientation();
    var69.setComponentOrientation(var92);
    java.awt.LayoutManager var94 = var69.getLayout();
    java.awt.Component var95 = var54.add("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var69);
    var69.nextFocus();
    java.awt.Point var97 = var69.location();
    java.awt.Point var98 = var2.getLocation(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test173() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test173");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    int var12 = var2.getDebugGraphicsOptions();
    java.awt.Component var15 = var2.locate(24, 100);
    bierse.view.RunningMessagePanel var18 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var19 = var18.isMaximumSizeSet();
    var18.layout();
    var18.revalidate();
    boolean var22 = var18.isFocusOwner();
    float var23 = var18.getAlignmentX();
    java.awt.Color var24 = var18.getForeground();
    var2.setForeground(var24);
    var2.setFocusTraversalPolicyProvider(true);
    javax.swing.border.Border var28 = var2.getBorder();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test174() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test174");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.setDebugGraphicsOptions(10);
    java.lang.Object var5 = var2.getTreeLock();
    int var6 = var2.getWidth();
    var2.layout();
    java.awt.GraphicsConfiguration var8 = var2.getGraphicsConfiguration();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test175() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test175");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    java.awt.Font var9 = var2.getFont();
    var2.enable();
    boolean var11 = var2.getIgnoreRepaint();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", 10, 11);
    bierse.view.RunningMessagePanel var18 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var19 = var18.isMaximumSizeSet();
    var18.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var24 = var18.getTransferHandler();
    boolean var25 = var18.hasFocus();
    var18.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var28 = var18.getPreferredSize();
    java.awt.ComponentOrientation var29 = var18.getComponentOrientation();
    bierse.view.RunningMessagePanel var32 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var33 = var32.isMaximumSizeSet();
    var32.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var38 = var32.getTransferHandler();
    boolean var39 = var32.hasFocus();
    javax.swing.event.AncestorListener[] var40 = var32.getAncestorListeners();
    bierse.view.RunningMessagePanel var43 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var44 = var43.isMaximumSizeSet();
    var43.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var49 = var43.getTransferHandler();
    boolean var50 = var43.hasFocus();
    var43.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var53 = var43.getPreferredSize();
    java.awt.ComponentOrientation var54 = var43.getComponentOrientation();
    var18.add((java.awt.Component)var32, (java.lang.Object)var43);
    bierse.view.RunningMessagePanel var58 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var59 = var58.getPreferredSize();
    boolean var62 = var58.contains(10, 1);
    java.awt.im.InputMethodRequests var63 = var58.getInputMethodRequests();
    var58.revalidate();
    var58.enable(true);
    java.awt.Point var67 = var58.location();
    java.awt.Component var68 = var32.getComponentAt(var67);
    javax.swing.JRootPane var69 = var32.getRootPane();
    var32.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", false, true);
    java.lang.Object var74 = var2.getClientProperty((java.lang.Object)var32);
    var32.setFocusTraversalPolicyProvider(true);
    boolean var77 = var32.requestFocusInWindow();
    var32.setAlignmentY(0.0f);
    boolean var80 = var32.getAutoscrolls();
    var32.setName("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    boolean var83 = var32.isShowing();
    float var84 = var32.getAlignmentX();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0.5f);

  }

  public void test176() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test176");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    var2.revalidate();
    var2.enable(true);
    var2.disable();
    java.awt.Dimension var12 = var2.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test177() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test177");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.repaint(1L, (-1), (-1), 0, 100);
    boolean var9 = var2.isFocusTraversable();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var13 = var12.getPreferredSize();
    boolean var16 = var12.contains(10, 1);
    java.awt.im.InputMethodRequests var17 = var12.getInputMethodRequests();
    var12.revalidate();
    var12.firePropertyChange("hi!", (short)100, (short)0);
    var2.setNextFocusableComponent((java.awt.Component)var12);
    var2.list();
    boolean var26 = var2.areFocusTraversalKeysSet(0);
    java.lang.String var27 = var2.getName();
    java.awt.Toolkit var28 = var2.getToolkit();
    java.awt.Font var29 = var2.getFont();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test178() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test178");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    boolean var21 = var15.getInheritsPopupMenu();
    boolean var22 = var15.getInheritsPopupMenu();
    var15.list();
    java.awt.event.KeyListener[] var24 = var15.getKeyListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test179() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test179");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    var11.setName("PanelUI");
    bierse.view.RunningMessagePanel var32 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var32.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var39 = var32.location();
    java.awt.Font var40 = var32.getFont();
    var11.setFont(var40);
    boolean var42 = var11.isFocusTraversalPolicyProvider();
    var11.resize(100, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test180() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test180");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    int var40 = var16.getHeight();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);

  }

  public void test181() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test181");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    javax.accessibility.AccessibleContext var11 = var2.getAccessibleContext();
    int var12 = var2.getHeight();
    var2.invalidate();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var17 = var16.getPreferredSize();
    boolean var18 = var16.isPreferredSizeSet();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isMaximumSizeSet();
    boolean var23 = var21.isOpaque();
    java.beans.PropertyChangeListener[] var24 = var21.getPropertyChangeListeners();
    var21.setOpaque(true);
    java.awt.Insets var27 = var21.insets();
    java.awt.Insets var28 = var16.getInsets(var27);
    var16.resetKeyboardActions();
    java.awt.im.InputContext var30 = var16.getInputContext();
    java.awt.Dimension var31 = var16.getPreferredSize();
    var2.remove((java.awt.Component)var16);
    var16.firePropertyChange("PanelUI", 10.0f, (-1.0f));
    var16.removeNotify();
    int var38 = var16.getX();
    boolean var39 = var16.requestFocusInWindow();
    var16.setDoubleBuffered(true);
    float var42 = var16.getAlignmentX();
    java.awt.Font var43 = var16.getFont();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test182() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test182");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    var2.enable();
    javax.accessibility.AccessibleContext var6 = var2.getAccessibleContext();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var9.transferFocus();
    var9.show();
    float var12 = var9.getAlignmentX();
    var9.repaint(0L, 10, 0, 10, (-1));
    boolean var19 = var9.isEnabled();
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var23 = var22.getPreferredSize();
    javax.swing.JPopupMenu var24 = var22.getComponentPopupMenu();
    java.awt.Rectangle var25 = var22.bounds();
    java.awt.Rectangle var26 = var9.getBounds(var25);
    var2.computeVisibleRect(var26);
    bierse.view.RunningMessagePanel var31 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var32 = var31.isMaximumSizeSet();
    boolean var33 = var31.isOpaque();
    java.awt.event.HierarchyListener[] var34 = var31.getHierarchyListeners();
    int var35 = var31.countComponents();
    java.awt.event.HierarchyBoundsListener[] var36 = var31.getHierarchyBoundsListeners();
    boolean var38 = var31.areFocusTraversalKeysSet(1);
    java.awt.Container var39 = var31.getParent();
    boolean var40 = var31.requestFocusInWindow();
    java.awt.Component var41 = var2.add("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var31);
    boolean var42 = var2.requestDefaultFocus();
    javax.swing.ActionMap var43 = var2.getActionMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test183() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test183");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    float var5 = var2.getAlignmentX();
    boolean var8 = var2.contains(0, 24);
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var12 = var11.getPreferredSize();
    java.awt.Dimension var13 = var11.getMaximumSize();
    java.awt.event.FocusListener[] var14 = var11.getFocusListeners();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var18 = var17.getPreferredSize();
    boolean var21 = var17.contains(10, 1);
    java.awt.im.InputMethodRequests var22 = var17.getInputMethodRequests();
    java.awt.Font var23 = var17.getFont();
    var11.setFont(var23);
    java.awt.FontMetrics var25 = var2.getFontMetrics(var23);
    java.awt.Cursor var26 = var2.getCursor();
    var2.setIgnoreRepaint(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test184() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test184");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    java.awt.Component[] var9 = var2.getComponents();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var13 = var12.isMaximumSizeSet();
    var12.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var18 = var12.getTransferHandler();
    boolean var19 = var12.hasFocus();
    var12.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var22 = var12.getPreferredSize();
    var2.setMaximumSize(var22);
    boolean var24 = var2.requestDefaultFocus();
    var2.transferFocusDownCycle();
    int var26 = var2.getDebugGraphicsOptions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);

  }

  public void test185() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test185");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    var2.enable();
    var2.transferFocusBackward();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (byte)10, (byte)1);
    java.awt.event.MouseWheelListener[] var11 = var2.getMouseWheelListeners();
    boolean var12 = var2.isFontSet();
    java.awt.Dimension var13 = var2.getMaximumSize();
    boolean var14 = var2.hasFocus();
    boolean var15 = var2.isMinimumSizeSet();
    bierse.view.RunningMessagePanel var18 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var18.repaint(1L, (-1), (-1), 0, 100);
    boolean var25 = var18.isFocusTraversable();
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var29 = var28.getPreferredSize();
    boolean var32 = var28.contains(10, 1);
    java.awt.im.InputMethodRequests var33 = var28.getInputMethodRequests();
    var28.revalidate();
    var28.firePropertyChange("hi!", (short)100, (short)0);
    var18.setNextFocusableComponent((java.awt.Component)var28);
    boolean var40 = var18.isFocusable();
    java.awt.event.KeyListener[] var41 = var18.getKeyListeners();
    bierse.view.RunningMessagePanel var44 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var44.transferFocus();
    var44.show();
    boolean var47 = var44.isMaximumSizeSet();
    java.awt.Dimension var48 = var44.preferredSize();
    java.awt.Color var49 = var44.getBackground();
    var18.setBackground(var49);
    var2.setForeground(var49);
    var2.hide();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test186() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test186");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    javax.swing.event.ListDataListener[] var1 = var0.getListDataListeners();
    bierse.view.RunningMessagePanel var4 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var4.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var11 = var4.location();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    var14.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var20 = var14.getTransferHandler();
    boolean var21 = var14.hasFocus();
    javax.swing.event.AncestorListener[] var22 = var14.getAncestorListeners();
    java.awt.Dimension var23 = var14.getMinimumSize();
    var4.resize(var23);
    int var25 = var0.getIndexOf((java.lang.Object)var23);
    int var26 = var0.getSize();
    bierse.view.RunningMessagePanel var29 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var30 = var29.isMaximumSizeSet();
    var29.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var35 = var29.getTransferHandler();
    boolean var36 = var29.hasFocus();
    var29.setVerifyInputWhenFocusTarget(false);
    int var39 = var29.getDebugGraphicsOptions();
    boolean var40 = var29.isEnabled();
    boolean var41 = var29.requestFocusInWindow();
    var0.removeElement((java.lang.Object)var41);
    int var43 = var0.getSize();
    java.lang.Object var45 = var0.getElementAt(12);
    var0.removeElementAt(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);

  }

  public void test187() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test187");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    var2.revalidate();
    boolean var6 = var2.isFocusOwner();
    float var7 = var2.getAlignmentX();
    java.beans.VetoableChangeListener[] var8 = var2.getVetoableChangeListeners();
    java.awt.Point var9 = var2.getMousePosition();
    var2.move(11, 10);
    boolean var13 = var2.isOpaque();
    javax.swing.InputMap var14 = var2.getInputMap();
    boolean var15 = var2.isFocusTraversable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);

  }

  public void test188() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test188");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    var2.setBounds(996, (-1), 100, 100);
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (byte)(-1), (byte)100);
    var2.setIgnoreRepaint(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test189() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test189");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isLightweight();
    java.beans.VetoableChangeListener[] var4 = var2.getVetoableChangeListeners();
    float var5 = var2.getAlignmentY();
    var2.setAlignmentX((-1.0f));
    java.awt.FocusTraversalPolicy var8 = var2.getFocusTraversalPolicy();
    javax.swing.border.Border var9 = var2.getBorder();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var13 = var12.isMaximumSizeSet();
    var12.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var18 = var12.getTransferHandler();
    boolean var19 = var12.hasFocus();
    javax.swing.event.AncestorListener[] var20 = var12.getAncestorListeners();
    java.awt.Dimension var21 = var12.getMinimumSize();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var26 = var25.getPreferredSize();
    java.awt.Dimension var27 = var25.getMaximumSize();
    var25.disable();
    var12.putClientProperty((java.lang.Object)100, (java.lang.Object)var25);
    javax.swing.InputVerifier var30 = var25.getInputVerifier();
    boolean var31 = var25.getInheritsPopupMenu();
    boolean var32 = var25.getInheritsPopupMenu();
    var25.setVerifyInputWhenFocusTarget(false);
    java.awt.LayoutManager var35 = var25.getLayout();
    var2.setLayout(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test190() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test190");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var3 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var4 = var3.getPreferredSize();
    java.awt.Point var5 = var3.getMousePosition();
    var3.revalidate();
    var3.invalidate();
    int var8 = var0.getIndexOf((java.lang.Object)var3);
    var0.removeAllElements();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var13 = var12.getPreferredSize();
    boolean var16 = var12.contains(10, 1);
    java.awt.im.InputMethodRequests var17 = var12.getInputMethodRequests();
    var12.revalidate();
    java.awt.event.HierarchyListener[] var19 = var12.getHierarchyListeners();
    var12.invalidate();
    java.awt.LayoutManager var21 = var12.getLayout();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    boolean var26 = var24.isOpaque();
    java.awt.event.HierarchyListener[] var27 = var24.getHierarchyListeners();
    int var28 = var24.countComponents();
    java.awt.event.HierarchyBoundsListener[] var29 = var24.getHierarchyBoundsListeners();
    bierse.view.RunningMessagePanel var32 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var33 = var32.getPreferredSize();
    boolean var34 = var32.isPreferredSizeSet();
    var32.enable();
    javax.accessibility.AccessibleContext var36 = var32.getAccessibleContext();
    bierse.view.RunningMessagePanel var39 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var39.transferFocus();
    var39.show();
    float var42 = var39.getAlignmentX();
    var39.repaint(0L, 10, 0, 10, (-1));
    boolean var49 = var39.isEnabled();
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var53 = var52.getPreferredSize();
    javax.swing.JPopupMenu var54 = var52.getComponentPopupMenu();
    java.awt.Rectangle var55 = var52.bounds();
    java.awt.Rectangle var56 = var39.getBounds(var55);
    var32.computeVisibleRect(var56);
    var24.scrollRectToVisible(var56);
    var12.scrollRectToVisible(var56);
    bierse.view.RunningMessagePanel var62 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var63 = var62.isMaximumSizeSet();
    boolean var64 = var62.isOpaque();
    java.awt.event.HierarchyListener[] var65 = var62.getHierarchyListeners();
    int var66 = var62.getWidth();
    int var67 = var62.countComponents();
    var62.enable(false);
    var12.setNextFocusableComponent((java.awt.Component)var62);
    boolean var71 = var62.isMaximumSizeSet();
    var62.layout();
    var62.setAlignmentY(100.0f);
    var0.setSelectedItem((java.lang.Object)var62);
    int var76 = var0.getSize();
    javax.swing.event.ListDataListener[] var77 = var0.getListDataListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test191() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test191");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    java.awt.Rectangle var5 = var2.bounds();
    var2.setSize(0, 24);
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var17 = var11.getTransferHandler();
    boolean var18 = var11.hasFocus();
    javax.swing.event.AncestorListener[] var19 = var11.getAncestorListeners();
    java.awt.Dimension var20 = var11.getMinimumSize();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var25 = var24.getPreferredSize();
    java.awt.Dimension var26 = var24.getMaximumSize();
    var24.disable();
    var11.putClientProperty((java.lang.Object)100, (java.lang.Object)var24);
    javax.swing.InputVerifier var29 = var24.getInputVerifier();
    boolean var30 = var24.getInheritsPopupMenu();
    var24.setLocation(0, 100);
    boolean var34 = var24.isFocusTraversalPolicyProvider();
    var24.list();
    javax.swing.event.AncestorListener[] var36 = var24.getAncestorListeners();
    var24.repaint(100L);
    int var39 = var2.getComponentZOrder((java.awt.Component)var24);
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var43 = var42.isMaximumSizeSet();
    var42.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var48 = var42.getTransferHandler();
    boolean var49 = var42.hasFocus();
    javax.swing.event.AncestorListener[] var50 = var42.getAncestorListeners();
    java.awt.Dimension var51 = var42.getMinimumSize();
    bierse.view.RunningMessagePanel var55 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var56 = var55.getPreferredSize();
    java.awt.Dimension var57 = var55.getMaximumSize();
    var55.disable();
    var42.putClientProperty((java.lang.Object)100, (java.lang.Object)var55);
    javax.swing.InputVerifier var60 = var55.getInputVerifier();
    bierse.view.RunningMessagePanel var64 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var65 = var64.isMaximumSizeSet();
    var64.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var64.invalidate();
    java.awt.Dimension var71 = var64.getPreferredSize();
    int var72 = var64.getWidth();
    java.awt.Component var73 = var55.add("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var64);
    java.awt.Rectangle var74 = var64.getVisibleRect();
    var24.setBounds(var74);
    var24.list();
    boolean var79 = var24.inside(996, 13);
    boolean var80 = var24.isForegroundSet();
    int var81 = var24.countComponents();
    boolean var82 = var24.getVerifyInputWhenFocusTarget();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);

  }

  public void test192() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test192");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    java.awt.event.ContainerListener[] var7 = var2.getContainerListeners();
    java.awt.Dimension var8 = var2.getMaximumSize();
    boolean var9 = var2.isRequestFocusEnabled();
    boolean var10 = var2.requestDefaultFocus();
    int var11 = var2.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);

  }

  public void test193() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test193");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var3 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var4 = var3.getPreferredSize();
    javax.swing.JPopupMenu var5 = var3.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var9 = var8.getPreferredSize();
    javax.swing.JPopupMenu var10 = var8.getComponentPopupMenu();
    java.awt.Rectangle var11 = var8.bounds();
    var3.computeVisibleRect(var11);
    int var13 = var0.getIndexOf((java.lang.Object)var3);
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var17 = var16.getPreferredSize();
    boolean var20 = var16.contains(10, 1);
    java.awt.Insets var21 = var16.getInsets();
    javax.swing.JToolTip var22 = var16.createToolTip();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    var25.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var31 = var25.getTransferHandler();
    boolean var32 = var25.hasFocus();
    javax.swing.event.AncestorListener[] var33 = var25.getAncestorListeners();
    var25.enable(false);
    int var36 = var22.getComponentZOrder((java.awt.Component)var25);
    boolean var37 = var22.requestFocusInWindow();
    boolean var38 = var22.isOptimizedDrawingEnabled();
    java.awt.Component var41 = var22.locate(0, (-1));
    java.awt.Dimension var42 = var22.getMaximumSize();
    var0.insertElementAt((java.lang.Object)var22, 1);
    boolean var45 = var22.isMaximumSizeSet();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var49 = var48.isMaximumSizeSet();
    var48.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var54 = var48.getWidth();
    boolean var57 = var48.inside(24, 1);
    bierse.view.RunningMessagePanel var60 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var61 = var60.isMaximumSizeSet();
    var60.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var66 = var60.getTransferHandler();
    boolean var67 = var60.hasFocus();
    var60.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var70 = var60.getPreferredSize();
    java.awt.ComponentOrientation var71 = var60.getComponentOrientation();
    var48.setComponentOrientation(var71);
    var22.setComponentOrientation(var71);
    java.awt.Component.BaselineResizeBehavior var74 = var22.getBaselineResizeBehavior();
    var22.firePropertyChange("PanelUI", (short)10, (short)100);
    var22.repaint(0L, 1, 11, 0, 24);
    var22.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=java.awt.Dimension[width=10,height=10],preferredSize=]", 'a', '4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test194() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test194");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    var2.revalidate();
    java.awt.event.HierarchyListener[] var9 = var2.getHierarchyListeners();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var13 = var12.isMaximumSizeSet();
    boolean var14 = var12.isOpaque();
    java.awt.event.HierarchyListener[] var15 = var12.getHierarchyListeners();
    java.awt.peer.ComponentPeer var16 = var12.getPeer();
    var12.transferFocusDownCycle();
    var12.transferFocusUpCycle();
    java.awt.Dimension var19 = var12.minimumSize();
    var2.setPreferredSize(var19);
    java.awt.event.MouseWheelListener[] var21 = var2.getMouseWheelListeners();
    javax.swing.border.Border var22 = var2.getBorder();
    boolean var25 = var2.contains(1, 12);
    boolean var26 = var2.requestFocusInWindow();
    bierse.view.RunningMessagePanel var29 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var30 = var29.isMaximumSizeSet();
    boolean var31 = var29.isOpaque();
    java.awt.event.HierarchyListener[] var32 = var29.getHierarchyListeners();
    java.awt.peer.ComponentPeer var33 = var29.getPeer();
    var29.transferFocusDownCycle();
    var29.transferFocusUpCycle();
    java.awt.Dimension var36 = var29.minimumSize();
    var29.setVerifyInputWhenFocusTarget(true);
    java.awt.Dimension var39 = var29.size();
    java.awt.Color var40 = var29.getBackground();
    var2.setForeground(var40);
    java.awt.Point var43 = var2.getMousePosition(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);

  }

  public void test195() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test195");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    var2.setFocusable(false);
    java.util.Locale var10 = var2.getLocale();
    javax.swing.JComponent.setDefaultLocale(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test196() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test196");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    var2.revalidate();
    var2.enable(true);
    java.awt.Point var11 = var2.location();
    java.awt.event.FocusListener[] var12 = var2.getFocusListeners();
    boolean var13 = var2.isFocusTraversable();
    float var14 = var2.getAlignmentY();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var18 = var17.isMaximumSizeSet();
    var17.layout();
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var23 = var22.isMaximumSizeSet();
    boolean var24 = var22.isOpaque();
    java.awt.event.HierarchyListener[] var25 = var22.getHierarchyListeners();
    int var26 = var22.countComponents();
    java.awt.event.HierarchyBoundsListener[] var27 = var22.getHierarchyBoundsListeners();
    boolean var29 = var22.areFocusTraversalKeysSet(1);
    bierse.view.RunningMessagePanel var32 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var33 = var32.getPreferredSize();
    javax.swing.JPopupMenu var34 = var32.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var38 = var37.getPreferredSize();
    javax.swing.JPopupMenu var39 = var37.getComponentPopupMenu();
    java.awt.Rectangle var40 = var37.bounds();
    var32.computeVisibleRect(var40);
    var22.setBounds(var40);
    var17.repaint(var40);
    java.awt.Component var46 = var17.getComponentAt(1, 100);
    int var47 = var17.getY();
    java.awt.Rectangle var48 = var17.getVisibleRect();
    var2.setBounds(var48);
    java.awt.Container var50 = var2.getTopLevelAncestor();
    var2.setMessage("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    var2.removeAll();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);

  }

  public void test197() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test197");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.Insets var7 = var2.getInsets();
    javax.swing.JToolTip var8 = var2.createToolTip();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var17 = var11.getTransferHandler();
    boolean var18 = var11.hasFocus();
    var11.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var21 = var11.getPreferredSize();
    java.awt.ComponentOrientation var22 = var11.getComponentOrientation();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    var25.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var31 = var25.getTransferHandler();
    boolean var32 = var25.hasFocus();
    javax.swing.event.AncestorListener[] var33 = var25.getAncestorListeners();
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var37 = var36.isMaximumSizeSet();
    var36.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var42 = var36.getTransferHandler();
    boolean var43 = var36.hasFocus();
    var36.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var46 = var36.getPreferredSize();
    java.awt.ComponentOrientation var47 = var36.getComponentOrientation();
    var11.add((java.awt.Component)var25, (java.lang.Object)var36);
    bierse.view.RunningMessagePanel var51 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var52 = var51.getPreferredSize();
    java.awt.Dimension var53 = var51.getMaximumSize();
    var36.resize(var53);
    var8.setPreferredSize(var53);
    bierse.view.RunningMessagePanel var58 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var59 = var58.isMaximumSizeSet();
    boolean var60 = var58.isOpaque();
    java.awt.event.HierarchyListener[] var61 = var58.getHierarchyListeners();
    int var62 = var58.getWidth();
    java.awt.event.ContainerListener[] var63 = var58.getContainerListeners();
    java.awt.Dimension var64 = var58.getMaximumSize();
    boolean var65 = var58.isBackgroundSet();
    var8.remove((java.awt.Component)var58);
    var58.setVisible(false);
    var58.enable(true);
    var58.setToolTipText("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    boolean var73 = var58.isDoubleBuffered();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);

  }

  public void test198() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test198");


    bierse.view.MyKeyMap var2 = new bierse.view.MyKeyMap("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 996);
    java.lang.String var3 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD"+ "'", var3.equals("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD"));

  }

  public void test199() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test199");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    java.awt.Dimension var9 = var2.getPreferredSize();
    int var10 = var2.getWidth();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var14 = var13.isMaximumSizeSet();
    var13.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var19 = var13.getTransferHandler();
    boolean var20 = var13.hasFocus();
    var13.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var23 = var13.getPreferredSize();
    java.awt.ComponentOrientation var24 = var13.getComponentOrientation();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    javax.swing.event.AncestorListener[] var35 = var27.getAncestorListeners();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var39 = var38.isMaximumSizeSet();
    var38.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var44 = var38.getTransferHandler();
    boolean var45 = var38.hasFocus();
    var38.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var48 = var38.getPreferredSize();
    java.awt.ComponentOrientation var49 = var38.getComponentOrientation();
    var13.add((java.awt.Component)var27, (java.lang.Object)var38);
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var54 = var53.getPreferredSize();
    java.awt.Dimension var55 = var53.getMaximumSize();
    var2.add((java.awt.Component)var27, (java.lang.Object)var53, (-1));
    java.awt.Dimension var58 = var2.getSize();
    java.awt.im.InputContext var59 = var2.getInputContext();
    var2.disable();
    boolean var61 = var2.getAutoscrolls();
    var2.setFocusCycleRoot(false);
    java.awt.Dimension var64 = var2.getPreferredSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test200() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test200");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    int var7 = var2.countComponents();
    java.awt.Point var9 = var2.getMousePosition(true);
    var2.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var12 = var2.toString();
    java.awt.Font var13 = var2.getFont();
    javax.swing.plaf.PanelUI var14 = var2.getUI();
    java.awt.Dimension var15 = var2.getPreferredSize();
    var2.firePropertyChange("", (-1), 1);
    var2.show(true);
    boolean var22 = var2.isFocusable();
    var2.validate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var12,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var12.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var12,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);

  }

  public void test201() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test201");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    boolean var5 = var2.isMaximumSizeSet();
    java.awt.Dimension var6 = var2.preferredSize();
    java.awt.Image var9 = var2.createImage(13, 13);
    var2.show(false);
    int var12 = var2.getHeight();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var16 = var15.isMaximumSizeSet();
    var15.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var21 = var15.getTransferHandler();
    boolean var22 = var15.hasFocus();
    var15.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var25 = var15.getPreferredSize();
    java.awt.ComponentOrientation var26 = var15.getComponentOrientation();
    bierse.view.RunningMessagePanel var29 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var30 = var29.isMaximumSizeSet();
    var29.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var35 = var29.getTransferHandler();
    boolean var36 = var29.hasFocus();
    javax.swing.event.AncestorListener[] var37 = var29.getAncestorListeners();
    bierse.view.RunningMessagePanel var40 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var41 = var40.isMaximumSizeSet();
    var40.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var46 = var40.getTransferHandler();
    boolean var47 = var40.hasFocus();
    var40.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var50 = var40.getPreferredSize();
    java.awt.ComponentOrientation var51 = var40.getComponentOrientation();
    var15.add((java.awt.Component)var29, (java.lang.Object)var40);
    boolean var53 = var40.isDoubleBuffered();
    var40.setEnabled(true);
    var40.disable();
    var40.hide();
    int var58 = var2.getComponentZOrder((java.awt.Component)var40);
    java.awt.event.KeyListener[] var59 = var2.getKeyListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test202() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test202");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    boolean var21 = var15.isValidateRoot();
    java.awt.Insets var22 = var15.getInsets();
    var15.layout();
    var15.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.5,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", 32767, 0);
    boolean var28 = var15.isForegroundSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);

  }

  public void test203() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test203");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    java.lang.String var14 = var2.getName();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var18 = var17.getPreferredSize();
    boolean var19 = var17.isPreferredSizeSet();
    var17.enable();
    var17.transferFocusBackward();
    java.awt.event.MouseListener[] var22 = var17.getMouseListeners();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    var25.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var31 = var25.getTransferHandler();
    boolean var32 = var25.hasFocus();
    javax.swing.event.AncestorListener[] var33 = var25.getAncestorListeners();
    java.awt.Dimension var34 = var25.getMinimumSize();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var39 = var38.getPreferredSize();
    java.awt.Dimension var40 = var38.getMaximumSize();
    var38.disable();
    var25.putClientProperty((java.lang.Object)100, (java.lang.Object)var38);
    javax.swing.InputVerifier var43 = var38.getInputVerifier();
    boolean var44 = var38.getInheritsPopupMenu();
    var38.setLocation(0, 100);
    boolean var48 = var38.isFocusTraversalPolicyProvider();
    var38.list();
    javax.swing.event.AncestorListener[] var50 = var38.getAncestorListeners();
    java.awt.Cursor var51 = var38.getCursor();
    int var52 = var38.getY();
    bierse.view.RunningMessagePanel var55 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var55.transferFocus();
    var55.show();
    float var58 = var55.getAlignmentX();
    var55.repaint(0L, 10, 0, 10, (-1));
    boolean var65 = var55.isEnabled();
    bierse.view.RunningMessagePanel var68 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var69 = var68.getPreferredSize();
    javax.swing.JPopupMenu var70 = var68.getComponentPopupMenu();
    java.awt.Rectangle var71 = var68.bounds();
    java.awt.Rectangle var72 = var55.getBounds(var71);
    var38.setBounds(var72);
    java.awt.Rectangle var74 = var17.getBounds(var72);
    var2.computeVisibleRect(var74);
    boolean var76 = var2.isMaximumSizeSet();
    int var77 = var2.getHeight();
    var2.hide();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);

  }

  public void test204() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test204");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    var2.invalidate();
    java.awt.event.FocusListener[] var6 = var2.getFocusListeners();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var10 = var9.isMaximumSizeSet();
    var9.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var15 = var9.getTransferHandler();
    boolean var16 = var9.hasFocus();
    var9.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var19 = var9.getPreferredSize();
    java.awt.ComponentOrientation var20 = var9.getComponentOrientation();
    var9.transferFocus();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    var24.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var30 = var24.getTransferHandler();
    boolean var31 = var24.hasFocus();
    javax.swing.event.AncestorListener[] var32 = var24.getAncestorListeners();
    java.awt.Dimension var33 = var24.getMinimumSize();
    boolean var34 = var24.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    var37.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var47 = var37.getPreferredSize();
    java.awt.Dimension var48 = var24.getSize(var47);
    var9.setSize(var47);
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var53 = var52.getPreferredSize();
    boolean var56 = var52.contains(10, 1);
    java.awt.Insets var57 = var52.getInsets();
    javax.swing.JToolTip var58 = var52.createToolTip();
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var62 = var61.isMaximumSizeSet();
    var61.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var67 = var61.getTransferHandler();
    boolean var68 = var61.hasFocus();
    javax.swing.event.AncestorListener[] var69 = var61.getAncestorListeners();
    var61.enable(false);
    int var72 = var58.getComponentZOrder((java.awt.Component)var61);
    boolean var73 = var58.requestFocusInWindow();
    boolean var74 = var58.isOptimizedDrawingEnabled();
    var2.add((java.awt.Component)var9, (java.lang.Object)var58);
    java.beans.PropertyChangeListener[] var77 = var58.getPropertyChangeListeners("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    boolean var78 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var58);
    java.awt.Insets var79 = var58.insets();
    boolean var80 = var58.isRequestFocusEnabled();
    var58.transferFocusDownCycle();
    var58.repaint(13, 996, 15, 0);
    boolean var87 = var58.isValidateRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);

  }

  public void test205() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test205");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    var11.transferFocus();
    var11.setToolTipText("");
    boolean var33 = var11.contains((-1), 12);
    java.lang.String var34 = var11.getName();
    boolean var37 = var11.inside(12, 100);
    javax.swing.TransferHandler var38 = var11.getTransferHandler();
    java.awt.Component var41 = var11.locate(1, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);

  }

  public void test206() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test206");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    javax.swing.JRootPane var13 = var2.getRootPane();
    var2.setRequestFocusEnabled(false);
    java.awt.Dimension var16 = var2.preferredSize();
    var2.setDebugGraphicsOptions((-1));
    var2.enable();
    java.awt.Dimension var20 = var2.getMaximumSize();
    var2.setDebugGraphicsOptions(11);
    boolean var24 = var2.areFocusTraversalKeysSet(1);
    java.lang.String var25 = var2.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test207() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test207");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    java.awt.event.ContainerListener[] var7 = var2.getContainerListeners();
    java.awt.Dimension var8 = var2.getMaximumSize();
    boolean var9 = var2.isBackgroundSet();
    float var10 = var2.getAlignmentX();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var14 = var13.isMaximumSizeSet();
    var13.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var19 = var13.getTransferHandler();
    boolean var20 = var13.hasFocus();
    javax.swing.event.AncestorListener[] var21 = var13.getAncestorListeners();
    java.awt.Dimension var22 = var13.getMinimumSize();
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var27 = var26.getPreferredSize();
    java.awt.Dimension var28 = var26.getMaximumSize();
    var26.disable();
    var13.putClientProperty((java.lang.Object)100, (java.lang.Object)var26);
    int var31 = var13.getHeight();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var34.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var41 = var34.location();
    boolean var42 = var13.contains(var41);
    float var43 = var13.getAlignmentX();
    var13.grabFocus();
    boolean var45 = var13.getAutoscrolls();
    java.awt.Insets var46 = var13.getInsets();
    float var47 = var13.getAlignmentX();
    java.awt.Component.BaselineResizeBehavior var48 = var13.getBaselineResizeBehavior();
    boolean var49 = var2.isAncestorOf((java.awt.Component)var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);

  }

  public void test208() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test208");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    var16.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var26 = var16.getPreferredSize();
    java.awt.Dimension var27 = var2.getSize(var26);
    var2.repaint(100L, 1, 0, 100, 24);
    var2.updateUI();
    var2.removeNotify();
    float var36 = var2.getAlignmentX();
    javax.swing.event.AncestorListener[] var37 = var2.getAncestorListeners();
    boolean var38 = var2.isFontSet();
    boolean var39 = var2.isRequestFocusEnabled();
    var2.setLocation(0, 14);
    java.awt.Color var43 = var2.getBackground();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test209() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test209");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var3 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var4 = var3.getPreferredSize();
    javax.swing.JPopupMenu var5 = var3.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var9 = var8.getPreferredSize();
    javax.swing.JPopupMenu var10 = var8.getComponentPopupMenu();
    java.awt.Rectangle var11 = var8.bounds();
    var3.computeVisibleRect(var11);
    int var13 = var0.getIndexOf((java.lang.Object)var3);
    java.awt.Rectangle var14 = var3.bounds();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var18 = var17.isMaximumSizeSet();
    var17.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var17.invalidate();
    java.awt.Dimension var24 = var17.getPreferredSize();
    var17.show(false);
    boolean var27 = var17.isMaximumSizeSet();
    var17.firePropertyChange("PanelUI", 10L, 100L);
    java.awt.event.HierarchyListener[] var32 = var17.getHierarchyListeners();
    var17.setIgnoreRepaint(true);
    int var35 = var17.getHeight();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var39 = var38.isMaximumSizeSet();
    var38.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var44 = var38.getTransferHandler();
    boolean var45 = var38.hasFocus();
    javax.swing.event.AncestorListener[] var46 = var38.getAncestorListeners();
    javax.accessibility.AccessibleContext var47 = var38.getAccessibleContext();
    var38.setOpaque(false);
    java.awt.Component.BaselineResizeBehavior var50 = var38.getBaselineResizeBehavior();
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var54 = var53.isMaximumSizeSet();
    boolean var55 = var53.isOpaque();
    java.awt.event.HierarchyListener[] var56 = var53.getHierarchyListeners();
    int var57 = var53.getWidth();
    int var58 = var53.countComponents();
    java.awt.Point var60 = var53.getMousePosition(true);
    var53.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var63 = var53.toString();
    java.awt.Font var64 = var53.getFont();
    javax.swing.plaf.PanelUI var65 = var53.getUI();
    java.awt.Dimension var66 = var53.getPreferredSize();
    var53.firePropertyChange("", (-1), 1);
    bierse.view.RunningMessagePanel var73 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var74 = var73.getPreferredSize();
    boolean var77 = var73.contains(10, 1);
    var73.setFocusTraversalPolicyProvider(false);
    float var80 = var73.getAlignmentX();
    java.awt.Component.BaselineResizeBehavior var81 = var73.getBaselineResizeBehavior();
    java.awt.dnd.DropTarget var82 = var73.getDropTarget();
    var73.layout();
    var73.setDebugGraphicsOptions(996);
    java.awt.Graphics var86 = var73.getGraphics();
    var53.print(var86);
    var38.update(var86);
    var17.update(var86);
    var3.print(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var63,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var63.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var63,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test210() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test210");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    var2.setAlignmentY(10.0f);
    java.awt.event.ComponentListener[] var16 = var2.getComponentListeners();
    var2.repaint((-1L), 12, 24, 100, 13);
    float var23 = var2.getAlignmentY();
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var27 = var26.isMaximumSizeSet();
    var26.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var32 = var26.getTransferHandler();
    boolean var33 = var26.hasFocus();
    var26.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var36 = var26.getPreferredSize();
    java.awt.ComponentOrientation var37 = var26.getComponentOrientation();
    bierse.view.RunningMessagePanel var40 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var41 = var40.isMaximumSizeSet();
    var40.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var46 = var40.getTransferHandler();
    boolean var47 = var40.hasFocus();
    javax.swing.event.AncestorListener[] var48 = var40.getAncestorListeners();
    bierse.view.RunningMessagePanel var51 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var52 = var51.isMaximumSizeSet();
    var51.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var57 = var51.getTransferHandler();
    boolean var58 = var51.hasFocus();
    var51.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var61 = var51.getPreferredSize();
    java.awt.ComponentOrientation var62 = var51.getComponentOrientation();
    var26.add((java.awt.Component)var40, (java.lang.Object)var51);
    bierse.view.RunningMessagePanel var66 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var67 = var66.getPreferredSize();
    java.awt.Dimension var68 = var66.getMaximumSize();
    var51.resize(var68);
    int var72 = var51.getBaseline(1, 996);
    bierse.view.RunningMessagePanel var75 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var75.transferFocus();
    var75.show();
    boolean var78 = var75.isMaximumSizeSet();
    java.awt.Dimension var79 = var75.preferredSize();
    java.awt.Color var80 = var75.getBackground();
    var51.setForeground(var80);
    java.awt.Dimension var82 = var51.size();
    var2.setMaximumSize(var82);
    float var84 = var2.getAlignmentX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0.5f);

  }

  public void test211() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test211");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.countComponents();
    java.awt.dnd.DropTarget var7 = var2.getDropTarget();
    boolean var8 = var2.hasFocus();
    var2.setInheritsPopupMenu(false);
    boolean var11 = var2.requestFocusInWindow();
    boolean var12 = var2.getInheritsPopupMenu();
    java.awt.Dimension var13 = var2.getPreferredSize();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    boolean var18 = var16.isOpaque();
    javax.swing.InputMap var19 = var16.getInputMap();
    java.beans.PropertyChangeListener[] var21 = var16.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var22 = var16.getComponentOrientation();
    var16.transferFocusBackward();
    boolean var24 = var16.isFocusTraversalPolicyProvider();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var28 = var27.getPreferredSize();
    java.awt.Dimension var29 = var27.getMaximumSize();
    java.awt.event.FocusListener[] var30 = var27.getFocusListeners();
    bierse.view.RunningMessagePanel var33 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var34 = var33.getPreferredSize();
    boolean var37 = var33.contains(10, 1);
    java.awt.im.InputMethodRequests var38 = var33.getInputMethodRequests();
    java.awt.Font var39 = var33.getFont();
    var27.setFont(var39);
    java.beans.VetoableChangeListener[] var41 = var27.getVetoableChangeListeners();
    boolean var42 = var27.isMaximumSizeSet();
    bierse.view.RunningMessagePanel var45 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var45.transferFocus();
    var45.show();
    float var48 = var45.getAlignmentX();
    var45.repaint(0L, 10, 0, 10, (-1));
    boolean var55 = var45.isEnabled();
    bierse.view.RunningMessagePanel var58 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var59 = var58.getPreferredSize();
    javax.swing.JPopupMenu var60 = var58.getComponentPopupMenu();
    java.awt.Rectangle var61 = var58.bounds();
    java.awt.Rectangle var62 = var45.getBounds(var61);
    var27.paintImmediately(var62);
    bierse.view.RunningMessagePanel var66 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var67 = var66.isMaximumSizeSet();
    var66.layout();
    bierse.view.RunningMessagePanel var71 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var72 = var71.isMaximumSizeSet();
    boolean var73 = var71.isOpaque();
    java.awt.event.HierarchyListener[] var74 = var71.getHierarchyListeners();
    int var75 = var71.countComponents();
    java.awt.event.HierarchyBoundsListener[] var76 = var71.getHierarchyBoundsListeners();
    boolean var78 = var71.areFocusTraversalKeysSet(1);
    bierse.view.RunningMessagePanel var81 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var82 = var81.getPreferredSize();
    javax.swing.JPopupMenu var83 = var81.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var86 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var87 = var86.getPreferredSize();
    javax.swing.JPopupMenu var88 = var86.getComponentPopupMenu();
    java.awt.Rectangle var89 = var86.bounds();
    var81.computeVisibleRect(var89);
    var71.setBounds(var89);
    var66.repaint(var89);
    java.awt.Rectangle var93 = var27.getBounds(var89);
    java.awt.Rectangle var94 = var16.getBounds(var93);
    java.awt.Rectangle var95 = var2.getBounds(var94);
    javax.accessibility.AccessibleContext var96 = var2.getAccessibleContext();
    java.awt.im.InputContext var97 = var2.getInputContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var97);

  }

  public void test212() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test212");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var3 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var4 = var3.getPreferredSize();
    boolean var7 = var3.contains(10, 1);
    java.awt.im.InputMethodRequests var8 = var3.getInputMethodRequests();
    boolean var9 = var3.getInheritsPopupMenu();
    java.lang.String var10 = var3.toString();
    var3.enable();
    java.awt.Image var14 = var3.createImage(0, (-1));
    int var15 = var0.getIndexOf((java.lang.Object)(-1));
    java.lang.Object var16 = var0.getSelectedItem();
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    boolean var21 = var19.isOpaque();
    java.awt.event.HierarchyListener[] var22 = var19.getHierarchyListeners();
    int var23 = var19.countComponents();
    java.awt.event.HierarchyBoundsListener[] var24 = var19.getHierarchyBoundsListeners();
    java.awt.Rectangle var25 = var19.getBounds();
    java.awt.event.HierarchyBoundsListener[] var26 = var19.getHierarchyBoundsListeners();
    java.awt.Toolkit var27 = var19.getToolkit();
    var0.setSelectedItem((java.lang.Object)var19);
    var19.setLocation(11, 11);
    boolean var32 = var19.requestFocusInWindow();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var10,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var10.equals("bierse.view.RunningMessagePanel[,0,0,0var10,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test213() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test213");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    var2.invalidate();
    java.awt.event.FocusListener[] var6 = var2.getFocusListeners();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var10 = var9.isMaximumSizeSet();
    var9.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var15 = var9.getTransferHandler();
    boolean var16 = var9.hasFocus();
    var9.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var19 = var9.getPreferredSize();
    java.awt.ComponentOrientation var20 = var9.getComponentOrientation();
    var9.transferFocus();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    var24.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var30 = var24.getTransferHandler();
    boolean var31 = var24.hasFocus();
    javax.swing.event.AncestorListener[] var32 = var24.getAncestorListeners();
    java.awt.Dimension var33 = var24.getMinimumSize();
    boolean var34 = var24.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    var37.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var47 = var37.getPreferredSize();
    java.awt.Dimension var48 = var24.getSize(var47);
    var9.setSize(var47);
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var53 = var52.getPreferredSize();
    boolean var56 = var52.contains(10, 1);
    java.awt.Insets var57 = var52.getInsets();
    javax.swing.JToolTip var58 = var52.createToolTip();
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var62 = var61.isMaximumSizeSet();
    var61.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var67 = var61.getTransferHandler();
    boolean var68 = var61.hasFocus();
    javax.swing.event.AncestorListener[] var69 = var61.getAncestorListeners();
    var61.enable(false);
    int var72 = var58.getComponentZOrder((java.awt.Component)var61);
    boolean var73 = var58.requestFocusInWindow();
    boolean var74 = var58.isOptimizedDrawingEnabled();
    var2.add((java.awt.Component)var9, (java.lang.Object)var58);
    var9.setVisible(false);
    var9.setToolTipText("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    var9.enable();
    boolean var81 = var9.isManagingFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);

  }

  public void test214() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test214");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    float var5 = var2.getAlignmentX();
    var2.repaint(0L, 10, 0, 10, (-1));
    boolean var12 = var2.isEnabled();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    javax.swing.JPopupMenu var17 = var15.getComponentPopupMenu();
    java.awt.Rectangle var18 = var15.bounds();
    java.awt.Rectangle var19 = var2.getBounds(var18);
    var2.setFocusable(false);
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var25 = var24.getPreferredSize();
    java.awt.Dimension var26 = var24.getMaximumSize();
    var2.setMinimumSize(var26);
    javax.swing.ActionMap var28 = var2.getActionMap();
    bierse.view.RunningMessagePanel var31 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var32 = var31.isMaximumSizeSet();
    var31.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var31.invalidate();
    java.awt.Dimension var38 = var31.getPreferredSize();
    bierse.view.RunningMessagePanel var41 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var41.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var48 = var41.location();
    java.awt.Point var49 = var31.getLocation(var48);
    var31.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", 1L, 0L);
    bierse.view.RunningMessagePanel var56 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var56.repaint(1L, (-1), (-1), 0, 100);
    boolean var63 = var56.isFocusTraversable();
    javax.swing.ActionMap var64 = var56.getActionMap();
    var31.setActionMap(var64);
    var2.setActionMap(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test215() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test215");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    var2.enable();
    var2.transferFocusBackward();
    java.awt.event.MouseListener[] var7 = var2.getMouseListeners();
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var11 = var10.isMaximumSizeSet();
    var10.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var16 = var10.getTransferHandler();
    boolean var17 = var10.hasFocus();
    javax.swing.event.AncestorListener[] var18 = var10.getAncestorListeners();
    java.awt.Dimension var19 = var10.getMinimumSize();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var24 = var23.getPreferredSize();
    java.awt.Dimension var25 = var23.getMaximumSize();
    var23.disable();
    var10.putClientProperty((java.lang.Object)100, (java.lang.Object)var23);
    javax.swing.InputVerifier var28 = var23.getInputVerifier();
    boolean var29 = var23.getInheritsPopupMenu();
    var23.setLocation(0, 100);
    boolean var33 = var23.isFocusTraversalPolicyProvider();
    var23.list();
    javax.swing.event.AncestorListener[] var35 = var23.getAncestorListeners();
    java.awt.Cursor var36 = var23.getCursor();
    int var37 = var23.getY();
    bierse.view.RunningMessagePanel var40 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var40.transferFocus();
    var40.show();
    float var43 = var40.getAlignmentX();
    var40.repaint(0L, 10, 0, 10, (-1));
    boolean var50 = var40.isEnabled();
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var54 = var53.getPreferredSize();
    javax.swing.JPopupMenu var55 = var53.getComponentPopupMenu();
    java.awt.Rectangle var56 = var53.bounds();
    java.awt.Rectangle var57 = var40.getBounds(var56);
    var23.setBounds(var57);
    java.awt.Rectangle var59 = var2.getBounds(var57);
    javax.swing.JToolTip var60 = var2.createToolTip();
    java.awt.Dimension var61 = var2.getMinimumSize();
    int var64 = var2.getBaseline(996, 11);
    var2.invalidate();
    var2.setToolTipText("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]");
    java.awt.Container var68 = var2.getTopLevelAncestor();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);

  }

  public void test216() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test216");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    java.awt.Component[] var9 = var2.getComponents();
    var2.enable(true);
    var2.revalidate();
    javax.swing.plaf.PanelUI var13 = var2.getUI();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    java.awt.Dimension var25 = var16.getMinimumSize();
    boolean var26 = var16.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var29 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var30 = var29.isMaximumSizeSet();
    var29.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var35 = var29.getTransferHandler();
    boolean var36 = var29.hasFocus();
    var29.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var39 = var29.getPreferredSize();
    java.awt.Dimension var40 = var16.getSize(var39);
    javax.swing.JRootPane var41 = var16.getRootPane();
    int var42 = var16.getHeight();
    java.awt.Insets var43 = var16.getInsets();
    java.awt.Insets var44 = var2.getInsets(var43);
    java.awt.peer.ComponentPeer var45 = var2.getPeer();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var49 = var48.isMaximumSizeSet();
    boolean var50 = var48.isOpaque();
    java.awt.event.HierarchyListener[] var51 = var48.getHierarchyListeners();
    int var52 = var48.getWidth();
    var48.firePropertyChange("hi!", ' ', ' ');
    javax.accessibility.AccessibleContext var57 = var48.getAccessibleContext();
    bierse.view.RunningMessagePanel var60 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var61 = var60.isMaximumSizeSet();
    boolean var62 = var60.isOpaque();
    java.awt.event.HierarchyListener[] var63 = var60.getHierarchyListeners();
    boolean var64 = var60.isValid();
    bierse.view.RunningMessagePanel var67 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var68 = var67.isMaximumSizeSet();
    var67.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var73 = var67.getTransferHandler();
    boolean var74 = var67.hasFocus();
    javax.swing.event.AncestorListener[] var75 = var67.getAncestorListeners();
    var48.add((java.awt.Component)var60, (java.lang.Object)var75);
    boolean var77 = var48.isFontSet();
    var48.nextFocus();
    int var79 = var48.getComponentCount();
    java.awt.Component var80 = var2.add((java.awt.Component)var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test217() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test217");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    boolean var21 = var15.isValidateRoot();
    var15.repaint();
    boolean var24 = var15.requestFocus(true);
    java.awt.event.HierarchyListener[] var25 = var15.getHierarchyListeners();
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var29 = var28.isMaximumSizeSet();
    boolean var30 = var28.isOpaque();
    java.beans.PropertyChangeListener[] var31 = var28.getPropertyChangeListeners();
    var28.setOpaque(true);
    java.awt.Insets var34 = var28.insets();
    java.awt.Component var37 = var28.locate(0, 13);
    boolean var38 = var28.isMinimumSizeSet();
    var28.repaint(0L, 100, (-1), 10, 11);
    java.awt.Component.BaselineResizeBehavior var45 = var28.getBaselineResizeBehavior();
    var15.remove((java.awt.Component)var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test218() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test218");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.Insets var7 = var2.getInsets();
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var11 = var10.isMaximumSizeSet();
    var10.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var16 = var10.getTransferHandler();
    boolean var17 = var10.hasFocus();
    var10.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var20 = var10.getPreferredSize();
    java.awt.ComponentOrientation var21 = var10.getComponentOrientation();
    var10.transferFocus();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    var25.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var31 = var25.getTransferHandler();
    boolean var32 = var25.hasFocus();
    javax.swing.event.AncestorListener[] var33 = var25.getAncestorListeners();
    java.awt.Dimension var34 = var25.getMinimumSize();
    boolean var35 = var25.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var39 = var38.isMaximumSizeSet();
    var38.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var44 = var38.getTransferHandler();
    boolean var45 = var38.hasFocus();
    var38.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var48 = var38.getPreferredSize();
    java.awt.Dimension var49 = var25.getSize(var48);
    var10.setSize(var48);
    var2.setSize(var48);
    bierse.view.RunningMessagePanel var55 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    javax.swing.InputVerifier var56 = var55.getInputVerifier();
    var55.removeAll();
    boolean var58 = var55.getFocusTraversalKeysEnabled();
    java.awt.Dimension var59 = var55.preferredSize();
    java.awt.Component var60 = var2.add("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var55);
    javax.swing.KeyStroke[] var61 = var2.getRegisteredKeyStrokes();
    bierse.view.RunningMessagePanel var64 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var65 = var64.isMaximumSizeSet();
    boolean var66 = var64.isOpaque();
    java.awt.event.HierarchyListener[] var67 = var64.getHierarchyListeners();
    java.awt.peer.ComponentPeer var68 = var64.getPeer();
    var64.transferFocusDownCycle();
    var64.transferFocusUpCycle();
    float var71 = var64.getAlignmentY();
    javax.swing.InputVerifier var72 = var64.getInputVerifier();
    int var73 = var64.getComponentCount();
    bierse.view.RunningMessagePanel var76 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var77 = var76.getPreferredSize();
    boolean var80 = var76.contains(10, 1);
    var76.disable();
    boolean var82 = var76.isManagingFocus();
    java.awt.Cursor var83 = var76.getCursor();
    var2.add((java.awt.Component)var64, (java.lang.Object)var76);
    var76.repaint(11, 24, 24, 0);
    var76.setEnabled(true);
    boolean var92 = var76.isCursorSet();
    int var95 = var76.getBaseline(996, 14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == (-1));

  }

  public void test219() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test219");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var13 = var12.getPreferredSize();
    java.awt.Point var14 = var12.getMousePosition();
    var12.revalidate();
    var12.transferFocus();
    java.awt.Toolkit var17 = var12.getToolkit();
    boolean var18 = var12.isFocusTraversalPolicySet();
    java.awt.Component var19 = var2.add("PanelUI", (java.awt.Component)var12);
    int var20 = var2.getX();
    var2.repaint(24, 14, 24, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);

  }

  public void test220() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test220");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    java.awt.Font var9 = var2.getFont();
    var2.enable();
    boolean var11 = var2.getIgnoreRepaint();
    java.awt.Rectangle var12 = var2.getVisibleRect();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var16 = var15.isMaximumSizeSet();
    boolean var17 = var15.isOpaque();
    java.awt.event.HierarchyListener[] var18 = var15.getHierarchyListeners();
    int var19 = var15.getWidth();
    int var20 = var15.countComponents();
    var15.enable(false);
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var26 = var25.getPreferredSize();
    boolean var29 = var25.contains(10, 1);
    java.awt.Insets var30 = var25.getInsets();
    java.awt.Insets var31 = var15.getInsets(var30);
    bierse.view.KeyMapComboBoxModel var32 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var36 = var35.getPreferredSize();
    javax.swing.JPopupMenu var37 = var35.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var40 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var41 = var40.getPreferredSize();
    javax.swing.JPopupMenu var42 = var40.getComponentPopupMenu();
    java.awt.Rectangle var43 = var40.bounds();
    var35.computeVisibleRect(var43);
    int var45 = var32.getIndexOf((java.lang.Object)var35);
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var49 = var48.isMaximumSizeSet();
    var48.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var54 = var48.getTransferHandler();
    boolean var55 = var48.hasFocus();
    javax.swing.event.AncestorListener[] var56 = var48.getAncestorListeners();
    java.awt.Dimension var57 = var48.getMinimumSize();
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var62 = var61.getPreferredSize();
    java.awt.Dimension var63 = var61.getMaximumSize();
    var61.disable();
    var48.putClientProperty((java.lang.Object)100, (java.lang.Object)var61);
    javax.swing.InputVerifier var66 = var61.getInputVerifier();
    bierse.view.RunningMessagePanel var70 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var71 = var70.isMaximumSizeSet();
    var70.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var70.invalidate();
    java.awt.Dimension var77 = var70.getPreferredSize();
    int var78 = var70.getWidth();
    java.awt.Component var79 = var61.add("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var70);
    java.awt.Rectangle var80 = var70.getVisibleRect();
    java.awt.Rectangle var81 = var35.getBounds(var80);
    var15.scrollRectToVisible(var81);
    var2.setBounds(var81);
    boolean var84 = var2.getAutoscrolls();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);

  }

  public void test221() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test221");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    java.awt.event.ContainerListener[] var7 = var2.getContainerListeners();
    java.awt.Dimension var8 = var2.getMaximumSize();
    boolean var9 = var2.isRequestFocusEnabled();
    var2.transferFocus();
    var2.removeNotify();
    boolean var12 = var2.isFocusTraversable();
    java.awt.Color var13 = var2.getBackground();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test222() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test222");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    var11.transferFocus();
    java.awt.Dimension var29 = var11.getMinimumSize();
    bierse.view.RunningMessagePanel var32 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var33 = var32.getPreferredSize();
    java.awt.Dimension var34 = var32.getMaximumSize();
    var32.disable();
    boolean var36 = var32.isEnabled();
    bierse.view.RunningMessagePanel var39 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var40 = var39.getPreferredSize();
    boolean var43 = var39.contains(10, 1);
    var39.setAlignmentX((-1.0f));
    java.awt.Toolkit var46 = var39.getToolkit();
    java.awt.Rectangle var47 = var39.getBounds();
    var32.repaint(var47);
    var32.setAlignmentX(1.0f);
    boolean var51 = var32.isPreferredSizeSet();
    java.awt.Insets var52 = var32.insets();
    bierse.view.RunningMessagePanel var55 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var56 = var55.getPreferredSize();
    java.awt.Point var57 = var55.getMousePosition();
    var55.revalidate();
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var62 = var61.isMaximumSizeSet();
    var61.layout();
    var61.invalidate();
    var55.setNextFocusableComponent((java.awt.Component)var61);
    boolean var66 = var55.isValidateRoot();
    var55.transferFocus();
    java.awt.event.MouseListener[] var68 = var55.getMouseListeners();
    float var69 = var55.getAlignmentY();
    bierse.view.RunningMessagePanel var72 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var73 = var72.isMaximumSizeSet();
    var72.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var78 = var72.getWidth();
    java.awt.Component[] var79 = var72.getComponents();
    bierse.view.RunningMessagePanel var82 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var83 = var82.getPreferredSize();
    boolean var86 = var82.contains(10, 1);
    java.awt.im.InputMethodRequests var87 = var82.getInputMethodRequests();
    java.awt.event.FocusListener[] var88 = var82.getFocusListeners();
    java.awt.Font var89 = var82.getFont();
    java.awt.Cursor var90 = var82.getCursor();
    bierse.view.RunningMessagePanel var93 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var94 = var93.getPreferredSize();
    var82.resize(var94);
    java.awt.Dimension var96 = var72.getSize(var94);
    java.awt.Dimension var97 = var55.getSize(var94);
    java.awt.Dimension var98 = var32.getSize(var97);
    var11.setMaximumSize(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test223() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test223");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    boolean var13 = var11.isOpaque();
    java.awt.event.HierarchyListener[] var14 = var11.getHierarchyListeners();
    int var15 = var11.countComponents();
    java.awt.event.HierarchyBoundsListener[] var16 = var11.getHierarchyBoundsListeners();
    boolean var18 = var11.areFocusTraversalKeysSet(1);
    boolean var19 = var2.isAncestorOf((java.awt.Component)var11);
    var2.requestFocus();
    java.awt.Dimension var21 = var2.getMinimumSize();
    var2.requestFocus();
    java.awt.Dimension var23 = var2.getPreferredSize();
    java.awt.Dimension var24 = var2.getSize();
    var2.paintImmediately(24, 12, 13, 10);
    var2.setFocusable(false);
    javax.swing.JPopupMenu var32 = var2.getComponentPopupMenu();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);

  }

  public void test224() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test224");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    var2.setAlignmentY(10.0f);
    java.awt.event.ComponentListener[] var16 = var2.getComponentListeners();
    var2.repaint((-1L), 12, 24, 100, 13);
    java.awt.Toolkit var23 = var2.getToolkit();
    int var26 = var2.getBaseline(1, 13);
    int var27 = var2.getStringWidth();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var30.transferFocus();
    var30.show();
    boolean var33 = var30.isValid();
    int var34 = var30.getStringHeight();
    int var35 = var30.getComponentCount();
    java.awt.event.HierarchyListener[] var36 = var30.getHierarchyListeners();
    boolean var37 = var2.isFocusCycleRoot((java.awt.Container)var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 996);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test225() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test225");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    java.awt.Dimension var9 = var2.getPreferredSize();
    int var10 = var2.getWidth();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var14 = var13.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var17.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var24 = var17.location();
    java.awt.Component var25 = var13.findComponentAt(var24);
    var13.setEnabled(true);
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var30.transferFocus();
    var30.show();
    float var33 = var30.getAlignmentX();
    boolean var36 = var30.contains(0, 24);
    bierse.view.RunningMessagePanel var39 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var40 = var39.getPreferredSize();
    java.awt.Dimension var41 = var39.getMaximumSize();
    java.awt.event.FocusListener[] var42 = var39.getFocusListeners();
    bierse.view.RunningMessagePanel var45 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var46 = var45.getPreferredSize();
    boolean var49 = var45.contains(10, 1);
    java.awt.im.InputMethodRequests var50 = var45.getInputMethodRequests();
    java.awt.Font var51 = var45.getFont();
    var39.setFont(var51);
    java.awt.FontMetrics var53 = var30.getFontMetrics(var51);
    java.awt.FontMetrics var54 = var13.getFontMetrics(var51);
    int var55 = var13.getWidth();
    java.awt.Insets var56 = var13.getInsets();
    java.awt.Insets var57 = var2.getInsets(var56);
    java.awt.event.ComponentListener[] var58 = var2.getComponentListeners();
    javax.swing.JToolTip var59 = var2.createToolTip();
    java.awt.image.ColorModel var60 = var2.getColorModel();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test226() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test226");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var8 = var2.isFocusTraversalPolicySet();
    java.awt.event.FocusListener[] var9 = var2.getFocusListeners();
    java.awt.Point var10 = var2.getMousePosition();
    var2.setFocusable(false);
    java.awt.Rectangle var13 = var2.bounds();
    java.awt.Image var16 = var2.createImage((-1), 1);
    javax.swing.TransferHandler var17 = var2.getTransferHandler();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test227() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test227");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    javax.swing.InputMap var5 = var2.getInputMap();
    java.beans.PropertyChangeListener[] var7 = var2.getPropertyChangeListeners("");
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var11 = var10.getPreferredSize();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    var14.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var14.invalidate();
    java.awt.Dimension var21 = var14.getPreferredSize();
    var10.setPreferredSize(var21);
    java.awt.Dimension var23 = var2.getSize(var21);
    java.lang.String var24 = var2.getUIClassID();
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var29 = var28.isMaximumSizeSet();
    var28.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var34 = var28.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var38 = var37.getPreferredSize();
    boolean var39 = var37.isPreferredSizeSet();
    var37.enable();
    var37.transferFocusBackward();
    int var42 = var28.getComponentZOrder((java.awt.Component)var37);
    var28.setEnabled(false);
    java.util.Set var46 = var28.getFocusTraversalKeys(0);
    var2.setFocusTraversalKeys(0, var46);
    int var48 = var2.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "PanelUI"+ "'", var24.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);

  }

  public void test228() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test228");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    var2.setFocusTraversalPolicyProvider(false);
    float var9 = var2.getAlignmentX();
    java.awt.Component.BaselineResizeBehavior var10 = var2.getBaselineResizeBehavior();
    var2.setAlignmentX(10.0f);
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var16 = var15.isMaximumSizeSet();
    var15.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var21 = var15.getTransferHandler();
    boolean var22 = var15.hasFocus();
    var15.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var25 = var15.getPreferredSize();
    java.awt.ComponentOrientation var26 = var15.getComponentOrientation();
    bierse.view.RunningMessagePanel var29 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var30 = var29.isMaximumSizeSet();
    var29.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var35 = var29.getTransferHandler();
    boolean var36 = var29.hasFocus();
    var29.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var39 = var29.getPreferredSize();
    java.awt.Dimension var40 = var15.getSize(var39);
    java.awt.image.VolatileImage var43 = var15.createVolatileImage((-1), (-1));
    var15.repaint(100L);
    java.awt.im.InputMethodRequests var46 = var15.getInputMethodRequests();
    javax.swing.ActionMap var47 = var15.getActionMap();
    var2.setActionMap(var47);
    var2.enable();
    java.lang.String var50 = var2.getUIClassID();
    boolean var51 = var2.isShowing();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "PanelUI"+ "'", var50.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test229() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test229");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    int var7 = var2.countComponents();
    java.awt.Point var9 = var2.getMousePosition(true);
    var2.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var12 = var2.toString();
    java.awt.Font var13 = var2.getFont();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    java.awt.Dimension var25 = var16.getMinimumSize();
    boolean var26 = var2.isAncestorOf((java.awt.Component)var16);
    var2.setLocation(0, 1);
    int var30 = var2.getStringWidth();
    int var31 = var2.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var12,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var12.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var12,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 996);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);

  }

  public void test230() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test230");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.countComponents();
    java.awt.event.HierarchyBoundsListener[] var7 = var2.getHierarchyBoundsListeners();
    java.lang.String var8 = var2.toString();
    java.awt.im.InputMethodRequests var9 = var2.getInputMethodRequests();
    float var10 = var2.getAlignmentY();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var14 = var13.isMaximumSizeSet();
    boolean var15 = var13.isOpaque();
    java.beans.PropertyChangeListener[] var16 = var13.getPropertyChangeListeners();
    var13.setOpaque(true);
    java.awt.Insets var19 = var13.insets();
    boolean var20 = var13.isOptimizedDrawingEnabled();
    javax.swing.InputVerifier var21 = var13.getInputVerifier();
    var13.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", 24, 0);
    java.awt.Dimension var26 = var13.preferredSize();
    var2.setMinimumSize(var26);
    var2.setFocusTraversalKeysEnabled(true);
    var2.setLocation(0, 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var8,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var8.equals("bierse.view.RunningMessagePanel[,0,0,0var8,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test231() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test231");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    boolean var21 = var15.getInheritsPopupMenu();
    var15.setLocation(0, 100);
    javax.swing.plaf.PanelUI var25 = var15.getUI();
    java.awt.Rectangle var26 = var15.bounds();
    var15.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", 10.0d, 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test232() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test232");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.revalidate();
    java.awt.Component[] var6 = var2.getComponents();
    var2.resetKeyboardActions();
    boolean var8 = var2.getAutoscrolls();
    java.awt.ComponentOrientation var9 = var2.getComponentOrientation();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test233() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test233");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", 100);
    java.awt.Point var3 = var2.getLocation();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test234() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test234");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    java.awt.peer.ComponentPeer var6 = var2.getPeer();
    var2.transferFocusDownCycle();
    var2.transferFocusUpCycle();
    java.awt.Dimension var9 = var2.minimumSize();
    boolean var10 = var2.isVisible();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var13.transferFocus();
    var13.show();
    float var16 = var13.getAlignmentX();
    boolean var19 = var13.contains(0, 24);
    java.awt.Color var20 = var13.getForeground();
    var2.setForeground(var20);
    boolean var22 = var2.isShowing();
    int var23 = var2.getHeight();
    float var24 = var2.getAlignmentX();
    java.awt.Dimension var25 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var29 = var28.isMaximumSizeSet();
    var28.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var28.invalidate();
    java.awt.Dimension var35 = var28.getPreferredSize();
    var28.show(false);
    boolean var38 = var28.isMaximumSizeSet();
    var28.firePropertyChange("PanelUI", 10L, 100L);
    java.awt.event.HierarchyListener[] var43 = var28.getHierarchyListeners();
    java.lang.String var44 = var28.getName();
    bierse.view.RunningMessagePanel var47 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var48 = var47.getPreferredSize();
    java.awt.Dimension var49 = var47.getMaximumSize();
    var47.disable();
    var47.transferFocusDownCycle();
    java.awt.Dimension var52 = var47.getPreferredSize();
    java.awt.Color var53 = var47.getForeground();
    var28.setBackground(var53);
    var2.setForeground(var53);
    java.awt.event.HierarchyBoundsListener[] var56 = var2.getHierarchyBoundsListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test235() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test235");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    var2.revalidate();
    var2.firePropertyChange("hi!", (short)100, (short)0);
    java.awt.Component var15 = var2.getComponentAt(0, (-1));
    bierse.view.RunningMessagePanel var18 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var19 = var18.isMaximumSizeSet();
    var18.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var24 = var18.getTransferHandler();
    boolean var25 = var18.hasFocus();
    javax.swing.event.AncestorListener[] var26 = var18.getAncestorListeners();
    java.awt.Dimension var27 = var18.getMinimumSize();
    bierse.view.RunningMessagePanel var31 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var32 = var31.getPreferredSize();
    java.awt.Dimension var33 = var31.getMaximumSize();
    var31.disable();
    var18.putClientProperty((java.lang.Object)100, (java.lang.Object)var31);
    javax.swing.InputVerifier var36 = var31.getInputVerifier();
    boolean var37 = var31.getInheritsPopupMenu();
    var31.setLocation(0, 100);
    boolean var41 = var31.isFocusTraversalPolicyProvider();
    var31.list();
    javax.swing.event.AncestorListener[] var43 = var31.getAncestorListeners();
    java.awt.Cursor var44 = var31.getCursor();
    var2.setCursor(var44);
    var2.requestFocus();
    boolean var47 = var2.getIgnoreRepaint();
    java.awt.event.ComponentListener[] var48 = var2.getComponentListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test236() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test236");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    javax.accessibility.AccessibleContext var11 = var2.getAccessibleContext();
    int var12 = var2.getHeight();
    var2.invalidate();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var17 = var16.getPreferredSize();
    boolean var18 = var16.isPreferredSizeSet();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isMaximumSizeSet();
    boolean var23 = var21.isOpaque();
    java.beans.PropertyChangeListener[] var24 = var21.getPropertyChangeListeners();
    var21.setOpaque(true);
    java.awt.Insets var27 = var21.insets();
    java.awt.Insets var28 = var16.getInsets(var27);
    var16.resetKeyboardActions();
    java.awt.im.InputContext var30 = var16.getInputContext();
    java.awt.Dimension var31 = var16.getPreferredSize();
    var2.remove((java.awt.Component)var16);
    var16.firePropertyChange("PanelUI", 10.0f, (-1.0f));
    var16.removeNotify();
    int var38 = var16.getX();
    boolean var39 = var16.requestFocusInWindow();
    int var40 = var16.getDebugGraphicsOptions();
    bierse.view.RunningMessagePanel var43 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var44 = var43.getPreferredSize();
    boolean var47 = var43.contains(10, 1);
    java.awt.Insets var48 = var43.getInsets();
    javax.swing.JToolTip var49 = var43.createToolTip();
    int var50 = var49.getDebugGraphicsOptions();
    boolean var51 = var49.hasFocus();
    bierse.view.RunningMessagePanel var54 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var55 = var54.getPreferredSize();
    boolean var58 = var54.contains(10, 1);
    java.awt.event.HierarchyBoundsListener[] var59 = var54.getHierarchyBoundsListeners();
    var54.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (short)(-1), (short)100);
    var54.invalidate();
    bierse.view.RunningMessagePanel var67 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var68 = var67.getPreferredSize();
    boolean var69 = var67.isPreferredSizeSet();
    var67.enable();
    bierse.view.RunningMessagePanel var73 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var74 = var73.getPreferredSize();
    boolean var75 = var73.isPreferredSizeSet();
    var73.enable();
    var73.transferFocusBackward();
    java.awt.Dimension var78 = var73.size();
    boolean var79 = var73.isFocusable();
    var73.enableInputMethods(false);
    java.awt.Cursor var82 = var73.getCursor();
    var54.putClientProperty((java.lang.Object)var67, (java.lang.Object)var82);
    var54.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (short)100, (short)1);
    java.awt.Insets var88 = var54.insets();
    java.awt.Insets var89 = var49.getInsets(var88);
    java.awt.Insets var90 = var16.getInsets(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test237() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test237");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    var16.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var26 = var16.getPreferredSize();
    java.awt.Dimension var27 = var2.getSize(var26);
    java.awt.image.VolatileImage var30 = var2.createVolatileImage((-1), (-1));
    var2.repaint(100L);
    javax.swing.InputMap var33 = var2.getInputMap();
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var37 = var36.isMaximumSizeSet();
    bierse.view.RunningMessagePanel var40 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var41 = var40.isMaximumSizeSet();
    boolean var42 = var40.isOpaque();
    java.awt.event.HierarchyListener[] var43 = var40.getHierarchyListeners();
    int var44 = var40.countComponents();
    java.awt.event.HierarchyBoundsListener[] var45 = var40.getHierarchyBoundsListeners();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var49 = var48.isMaximumSizeSet();
    boolean var50 = var48.isOpaque();
    java.awt.event.HierarchyListener[] var51 = var48.getHierarchyListeners();
    int var52 = var48.getWidth();
    java.awt.event.ContainerListener[] var53 = var48.getContainerListeners();
    java.awt.Dimension var54 = var48.getMaximumSize();
    var40.setMinimumSize(var54);
    java.awt.Dimension var56 = var36.getSize(var54);
    bierse.view.RunningMessagePanel var59 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var59.repaint(1L, (-1), (-1), 0, 100);
    boolean var66 = var59.isFocusTraversable();
    javax.swing.ActionMap var67 = var59.getActionMap();
    var36.setActionMap(var67);
    boolean var69 = var36.isMaximumSizeSet();
    java.awt.Dimension var70 = var36.size();
    java.awt.Dimension var71 = var2.getSize(var70);
    boolean var72 = var2.requestFocusInWindow();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (-1), 15);
    java.awt.Insets var77 = var2.getInsets();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test238() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test238");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var3 = var2.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var6 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var6.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var13 = var6.location();
    java.awt.Component var14 = var2.findComponentAt(var13);
    var2.setEnabled(true);
    var2.show();
    float var18 = var2.getAlignmentY();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var22 = var21.getPreferredSize();
    boolean var25 = var21.contains(10, 1);
    java.awt.im.InputMethodRequests var26 = var21.getInputMethodRequests();
    boolean var27 = var21.getInheritsPopupMenu();
    java.awt.Dimension var28 = var21.getSize();
    java.awt.Dimension var29 = var2.getSize(var28);
    java.awt.Point var30 = var2.getMousePosition();
    bierse.view.RunningMessagePanel var33 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var34 = var33.isMaximumSizeSet();
    var33.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var33.invalidate();
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var43 = var42.isMaximumSizeSet();
    var42.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var50 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var51 = var50.isMaximumSizeSet();
    var50.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var56 = var50.getWidth();
    java.awt.Component[] var57 = var50.getComponents();
    var33.putClientProperty((java.lang.Object)var42, (java.lang.Object)var57);
    var42.transferFocus();
    var42.setToolTipText("");
    java.awt.event.InputMethodListener[] var62 = var42.getInputMethodListeners();
    bierse.view.RunningMessagePanel var65 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var66 = var65.getPreferredSize();
    boolean var69 = var65.contains(10, 1);
    java.awt.im.InputMethodRequests var70 = var65.getInputMethodRequests();
    boolean var71 = var65.getInheritsPopupMenu();
    java.lang.String var72 = var65.toString();
    java.awt.Rectangle var73 = var65.bounds();
    var42.computeVisibleRect(var73);
    var2.setBounds(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var72,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var72.equals("bierse.view.RunningMessagePanel[,0,0,0var72,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test239() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test239");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    boolean var40 = var2.isDoubleBuffered();
    java.awt.Container var41 = var2.getFocusCycleRootAncestor();
    var2.setRequestFocusEnabled(true);
    javax.swing.border.Border var44 = var2.getBorder();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);

  }

  public void test240() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test240");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    var2.revalidate();
    boolean var9 = var2.isBackgroundSet();
    java.awt.Component[] var10 = var2.getComponents();
    java.awt.GraphicsConfiguration var11 = var2.getGraphicsConfiguration();
    java.awt.im.InputContext var12 = var2.getInputContext();
    int var13 = var2.getStringHeight();
    javax.swing.InputVerifier var14 = var2.getInputVerifier();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test241() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test241");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    boolean var40 = var2.isDoubleBuffered();
    java.beans.PropertyChangeListener[] var42 = var2.getPropertyChangeListeners("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    var2.addNotify();
    java.awt.Dimension var44 = var2.getMinimumSize();
    boolean var45 = var2.isDoubleBuffered();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);

  }

  public void test242() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test242");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    int var20 = var2.getHeight();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var23.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var30 = var23.location();
    boolean var31 = var2.contains(var30);
    java.awt.event.InputMethodListener[] var32 = var2.getInputMethodListeners();
    boolean var33 = var2.requestDefaultFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test243() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test243");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    javax.swing.InputMap var5 = var2.getInputMap();
    java.lang.String var6 = var2.getName();
    var2.setFocusTraversalPolicyProvider(true);
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.layout();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var22 = var16.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var26 = var25.getPreferredSize();
    boolean var27 = var25.isPreferredSizeSet();
    var25.enable();
    var25.transferFocusBackward();
    int var30 = var16.getComponentZOrder((java.awt.Component)var25);
    var16.setEnabled(false);
    java.awt.Graphics var33 = var16.getGraphics();
    var11.remove((java.awt.Component)var16);
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var38 = var37.getPreferredSize();
    boolean var41 = var37.contains(10, 1);
    java.awt.Insets var42 = var37.getInsets();
    bierse.view.RunningMessagePanel var45 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var46 = var45.getPreferredSize();
    java.awt.Point var47 = var45.getMousePosition();
    var45.revalidate();
    java.awt.Component[] var49 = var45.getComponents();
    java.awt.event.KeyListener[] var50 = var45.getKeyListeners();
    var11.putClientProperty((java.lang.Object)var37, (java.lang.Object)var50);
    java.awt.Dimension var52 = var11.getSize();
    var2.setMinimumSize(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test244() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test244");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.beans.PropertyChangeListener[] var5 = var2.getPropertyChangeListeners();
    boolean var6 = var2.isFocusCycleRoot();
    boolean var7 = var2.getIgnoreRepaint();
    var2.enable();
    var2.revalidate();
    var2.show();
    var2.transferFocusBackward();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test245() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test245");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.setDebugGraphicsOptions(10);
    java.lang.Object var5 = var2.getTreeLock();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var9 = var8.isMaximumSizeSet();
    var8.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var14 = var8.getTransferHandler();
    boolean var15 = var8.hasFocus();
    javax.swing.event.AncestorListener[] var16 = var8.getAncestorListeners();
    java.awt.Dimension var17 = var8.getMinimumSize();
    var2.setPreferredSize(var17);
    java.awt.FocusTraversalPolicy var19 = var2.getFocusTraversalPolicy();
    var2.setLocation(0, 100);
    java.awt.Component var25 = var2.findComponentAt(0, 100);
    var2.setAlignmentX(1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test246() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test246");


    bierse.view.MyKeyMap var2 = new bierse.view.MyKeyMap("hi!", 1);
    java.lang.String var3 = var2.getText();
    java.lang.String var4 = var2.getText();
    java.lang.String var5 = var2.toString();
    int var6 = var2.getCode();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "hi!"+ "'", var3.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);

  }

  public void test247() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test247");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    var2.enable();
    javax.accessibility.AccessibleContext var6 = var2.getAccessibleContext();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var9.transferFocus();
    var9.show();
    float var12 = var9.getAlignmentX();
    var9.repaint(0L, 10, 0, 10, (-1));
    boolean var19 = var9.isEnabled();
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var23 = var22.getPreferredSize();
    javax.swing.JPopupMenu var24 = var22.getComponentPopupMenu();
    java.awt.Rectangle var25 = var22.bounds();
    java.awt.Rectangle var26 = var9.getBounds(var25);
    var2.computeVisibleRect(var26);
    bierse.view.RunningMessagePanel var31 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var32 = var31.isMaximumSizeSet();
    boolean var33 = var31.isOpaque();
    java.awt.event.HierarchyListener[] var34 = var31.getHierarchyListeners();
    int var35 = var31.countComponents();
    java.awt.event.HierarchyBoundsListener[] var36 = var31.getHierarchyBoundsListeners();
    boolean var38 = var31.areFocusTraversalKeysSet(1);
    java.awt.Container var39 = var31.getParent();
    boolean var40 = var31.requestFocusInWindow();
    java.awt.Component var41 = var2.add("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var31);
    java.lang.String var42 = var31.getToolTipText();
    bierse.view.RunningMessagePanel var45 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var46 = var45.isFocusTraversable();
    bierse.view.RunningMessagePanel var49 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var50 = var49.getPreferredSize();
    boolean var53 = var49.contains(10, 1);
    java.awt.im.InputMethodRequests var54 = var49.getInputMethodRequests();
    java.awt.event.FocusListener[] var55 = var49.getFocusListeners();
    java.awt.Font var56 = var49.getFont();
    java.beans.PropertyChangeListener[] var58 = var49.getPropertyChangeListeners("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    boolean var59 = var49.isValidateRoot();
    java.awt.Toolkit var60 = var49.getToolkit();
    bierse.view.RunningMessagePanel var63 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var64 = var63.isMaximumSizeSet();
    var63.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var63.invalidate();
    java.awt.Dimension var70 = var63.getPreferredSize();
    var49.setMaximumSize(var70);
    var45.setSize(var70);
    bierse.view.RunningMessagePanel var75 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var76 = var75.getPreferredSize();
    boolean var79 = var75.contains(10, 1);
    java.awt.im.InputMethodRequests var80 = var75.getInputMethodRequests();
    java.awt.Font var81 = var75.getFont();
    var45.setFont(var81);
    boolean var83 = var45.getIgnoreRepaint();
    boolean var84 = var45.isCursorSet();
    boolean var85 = var31.isFocusCycleRoot((java.awt.Container)var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);

  }

  public void test248() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test248");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    int var12 = var2.getDebugGraphicsOptions();
    java.awt.Component var15 = var2.locate(24, 100);
    bierse.view.RunningMessagePanel var18 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var19 = var18.getPreferredSize();
    boolean var22 = var18.contains(10, 1);
    java.awt.im.InputMethodRequests var23 = var18.getInputMethodRequests();
    java.awt.event.FocusListener[] var24 = var18.getFocusListeners();
    java.awt.Font var25 = var18.getFont();
    javax.swing.plaf.PanelUI var26 = var18.getUI();
    var2.setUI(var26);
    java.awt.Dimension var28 = var2.getSize();
    var2.setAlignmentX(0.0f);
    boolean var31 = var2.requestFocusInWindow();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var35 = var34.getPreferredSize();
    java.awt.Dimension var36 = var34.getMaximumSize();
    var34.disable();
    boolean var38 = var34.isEnabled();
    bierse.view.RunningMessagePanel var41 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var42 = var41.getPreferredSize();
    boolean var45 = var41.contains(10, 1);
    var41.setAlignmentX((-1.0f));
    java.awt.Toolkit var48 = var41.getToolkit();
    java.awt.Rectangle var49 = var41.getBounds();
    var34.repaint(var49);
    var34.paintImmediately(0, (-1), 12, 24);
    bierse.view.RunningMessagePanel var58 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var58.repaint(1L, (-1), (-1), 0, 100);
    boolean var65 = var58.isFocusTraversable();
    var58.show(false);
    java.awt.Dimension var68 = var58.preferredSize();
    java.awt.Dimension var69 = var34.getSize(var68);
    java.awt.Dimension var70 = var2.getSize(var69);
    var2.repaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test249() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test249");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.beans.PropertyChangeListener[] var5 = var2.getPropertyChangeListeners();
    boolean var6 = var2.isFocusCycleRoot();
    java.awt.Toolkit var7 = var2.getToolkit();
    java.lang.String var8 = var2.getToolTipText();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test250() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test250");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    javax.swing.InputMap var5 = var2.getInputMap();
    java.lang.String var6 = var2.getName();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var10 = var9.isMaximumSizeSet();
    var9.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var15 = var9.getTransferHandler();
    boolean var16 = var9.hasFocus();
    var9.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var19 = var9.getPreferredSize();
    java.awt.ComponentOrientation var20 = var9.getComponentOrientation();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var24 = var23.isMaximumSizeSet();
    var23.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var29 = var23.getTransferHandler();
    boolean var30 = var23.hasFocus();
    javax.swing.event.AncestorListener[] var31 = var23.getAncestorListeners();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var35 = var34.isMaximumSizeSet();
    var34.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var40 = var34.getTransferHandler();
    boolean var41 = var34.hasFocus();
    var34.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var44 = var34.getPreferredSize();
    java.awt.ComponentOrientation var45 = var34.getComponentOrientation();
    var9.add((java.awt.Component)var23, (java.lang.Object)var34);
    boolean var47 = var34.isDoubleBuffered();
    var34.setEnabled(true);
    boolean var50 = var2.isAncestorOf((java.awt.Component)var34);
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var54 = var53.isMaximumSizeSet();
    boolean var55 = var53.isOpaque();
    java.awt.event.HierarchyListener[] var56 = var53.getHierarchyListeners();
    int var57 = var53.countComponents();
    java.awt.event.HierarchyBoundsListener[] var58 = var53.getHierarchyBoundsListeners();
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var62 = var61.isMaximumSizeSet();
    boolean var63 = var61.isOpaque();
    java.awt.event.HierarchyListener[] var64 = var61.getHierarchyListeners();
    int var65 = var61.getWidth();
    java.awt.event.ContainerListener[] var66 = var61.getContainerListeners();
    java.awt.Dimension var67 = var61.getMaximumSize();
    var53.setMinimumSize(var67);
    var2.setPreferredSize(var67);
    var2.disable();
    boolean var71 = var2.isLightweight();
    javax.swing.JToolTip var72 = var2.createToolTip();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test251() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test251");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    var2.firePropertyChange("hi!", ' ', ' ');
    javax.accessibility.AccessibleContext var11 = var2.getAccessibleContext();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    boolean var16 = var14.isOpaque();
    java.awt.event.HierarchyListener[] var17 = var14.getHierarchyListeners();
    boolean var18 = var14.isValid();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isMaximumSizeSet();
    var21.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var27 = var21.getTransferHandler();
    boolean var28 = var21.hasFocus();
    javax.swing.event.AncestorListener[] var29 = var21.getAncestorListeners();
    var2.add((java.awt.Component)var14, (java.lang.Object)var29);
    boolean var31 = var2.isFontSet();
    var2.nextFocus();
    int var33 = var2.getY();
    boolean var34 = var2.isOpaque();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);

  }

  public void test252() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test252");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    float var5 = var2.getAlignmentX();
    var2.repaint(0L, 10, 0, 10, (-1));
    boolean var12 = var2.isEnabled();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    javax.swing.JPopupMenu var17 = var15.getComponentPopupMenu();
    java.awt.Rectangle var18 = var15.bounds();
    java.awt.Rectangle var19 = var2.getBounds(var18);
    var2.setFocusable(false);
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var25 = var24.getPreferredSize();
    java.awt.Dimension var26 = var24.getMaximumSize();
    var2.setMinimumSize(var26);
    var2.setLocation(13, (-1));
    bierse.view.RunningMessagePanel var33 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var34 = var33.isMaximumSizeSet();
    var33.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var39 = var33.getTransferHandler();
    boolean var40 = var33.hasFocus();
    var33.setVerifyInputWhenFocusTarget(false);
    int var43 = var33.getDebugGraphicsOptions();
    java.awt.Component var46 = var33.locate(24, 100);
    bierse.view.RunningMessagePanel var49 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var50 = var49.isMaximumSizeSet();
    var49.layout();
    var49.revalidate();
    boolean var53 = var49.isFocusOwner();
    float var54 = var49.getAlignmentX();
    java.awt.Color var55 = var49.getForeground();
    var33.setForeground(var55);
    var33.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", (-1), (-1));
    boolean var61 = var33.isEnabled();
    bierse.view.RunningMessagePanel var64 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var65 = var64.getPreferredSize();
    boolean var66 = var64.isPreferredSizeSet();
    var64.enable();
    javax.accessibility.AccessibleContext var68 = var64.getAccessibleContext();
    var64.setFocusable(false);
    var64.setIgnoreRepaint(false);
    java.awt.event.MouseWheelListener[] var73 = var64.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var76 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var77 = var76.getPreferredSize();
    boolean var80 = var76.contains(10, 1);
    var76.setFocusTraversalPolicyProvider(false);
    float var83 = var76.getAlignmentX();
    java.awt.Component.BaselineResizeBehavior var84 = var76.getBaselineResizeBehavior();
    java.awt.dnd.DropTarget var85 = var76.getDropTarget();
    var76.layout();
    var76.setDebugGraphicsOptions(996);
    java.awt.Graphics var89 = var76.getGraphics();
    var64.printAll(var89);
    var33.paintComponents(var89);
    var2.update(var89);
    var2.setFocusable(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test253() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test253");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    int var7 = var2.countComponents();
    java.awt.Point var9 = var2.getMousePosition(true);
    var2.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var12 = var2.toString();
    java.awt.Font var13 = var2.getFont();
    javax.swing.plaf.PanelUI var14 = var2.getUI();
    float var15 = var2.getAlignmentY();
    java.beans.PropertyChangeListener[] var16 = var2.getPropertyChangeListeners();
    var2.setFocusCycleRoot(false);
    boolean var19 = var2.isVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var12,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var12.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var12,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);

  }

  public void test254() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test254");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.beans.PropertyChangeListener[] var5 = var2.getPropertyChangeListeners();
    var2.setOpaque(true);
    java.awt.Insets var8 = var2.insets();
    boolean var9 = var2.isOptimizedDrawingEnabled();
    var2.disable();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var13.repaint(1L, (-1), (-1), 0, 100);
    boolean var20 = var13.isFocusTraversable();
    javax.swing.ActionMap var21 = var13.getActionMap();
    var2.setActionMap(var21);
    boolean var23 = var2.isVisible();
    var2.setName("PanelUI");
    java.awt.Rectangle var26 = var2.bounds();
    var2.setVerifyInputWhenFocusTarget(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test255() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test255");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    java.awt.Container var7 = var2.getTopLevelAncestor();
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var11 = var10.isMaximumSizeSet();
    var10.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var10.invalidate();
    java.awt.Dimension var17 = var10.getPreferredSize();
    int var18 = var10.getWidth();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isMaximumSizeSet();
    var21.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var27 = var21.getTransferHandler();
    boolean var28 = var21.hasFocus();
    var21.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var31 = var21.getPreferredSize();
    java.awt.ComponentOrientation var32 = var21.getComponentOrientation();
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var36 = var35.isMaximumSizeSet();
    var35.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var41 = var35.getTransferHandler();
    boolean var42 = var35.hasFocus();
    javax.swing.event.AncestorListener[] var43 = var35.getAncestorListeners();
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var47 = var46.isMaximumSizeSet();
    var46.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var52 = var46.getTransferHandler();
    boolean var53 = var46.hasFocus();
    var46.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var56 = var46.getPreferredSize();
    java.awt.ComponentOrientation var57 = var46.getComponentOrientation();
    var21.add((java.awt.Component)var35, (java.lang.Object)var46);
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var62 = var61.getPreferredSize();
    java.awt.Dimension var63 = var61.getMaximumSize();
    var10.add((java.awt.Component)var35, (java.lang.Object)var61, (-1));
    bierse.view.RunningMessagePanel var68 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var68.transferFocus();
    var68.show();
    float var71 = var68.getAlignmentX();
    boolean var74 = var68.contains(0, 24);
    java.awt.Color var75 = var68.getForeground();
    var10.setForeground(var75);
    var2.setBackground(var75);
    boolean var78 = var2.isFocusOwner();
    javax.swing.border.Border var79 = var2.getBorder();
    var2.setInheritsPopupMenu(true);
    javax.swing.JRootPane var82 = var2.getRootPane();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);

  }

  public void test256() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test256");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    java.awt.event.ContainerListener[] var7 = var2.getContainerListeners();
    java.awt.Dimension var8 = var2.getMaximumSize();
    boolean var9 = var2.isRequestFocusEnabled();
    boolean var10 = var2.requestDefaultFocus();
    float var11 = var2.getAlignmentX();
    java.awt.Point var12 = var2.location();
    float var13 = var2.getAlignmentY();
    java.awt.Component var16 = var2.getComponentAt(13, 996);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var25 = var19.getTransferHandler();
    boolean var26 = var19.hasFocus();
    var19.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var29 = var19.getPreferredSize();
    java.awt.GraphicsConfiguration var30 = var19.getGraphicsConfiguration();
    var19.removeNotify();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var35 = var34.getPreferredSize();
    boolean var38 = var34.contains(10, 1);
    java.awt.im.InputMethodRequests var39 = var34.getInputMethodRequests();
    var34.revalidate();
    java.awt.Component.BaselineResizeBehavior var41 = var34.getBaselineResizeBehavior();
    bierse.view.RunningMessagePanel var44 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var44.setDebugGraphicsOptions(10);
    java.lang.Object var47 = var44.getTreeLock();
    java.awt.Cursor var48 = var44.getCursor();
    java.awt.Dimension var49 = var44.getMaximumSize();
    var19.putClientProperty((java.lang.Object)var34, (java.lang.Object)var49);
    boolean var51 = var2.isAncestorOf((java.awt.Component)var19);
    float var52 = var2.getAlignmentX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0.5f);

  }

  public void test257() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test257");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    boolean var40 = var27.isDoubleBuffered();
    bierse.view.RunningMessagePanel var43 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var43.transferFocus();
    var43.show();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var49 = var48.getPreferredSize();
    boolean var52 = var48.contains(10, 1);
    java.awt.im.InputMethodRequests var53 = var48.getInputMethodRequests();
    java.awt.Font var54 = var48.getFont();
    var43.setFont(var54);
    var27.setFont(var54);
    var27.setDoubleBuffered(false);
    java.awt.Component var61 = var27.findComponentAt(12, 11);
    var27.grabFocus();
    boolean var63 = var27.isValidateRoot();
    javax.swing.TransferHandler var64 = var27.getTransferHandler();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);

  }

  public void test258() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test258");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    java.awt.Dimension var9 = var2.getPreferredSize();
    var2.show(false);
    boolean var12 = var2.isMaximumSizeSet();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var16 = var15.isMaximumSizeSet();
    var15.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var21 = var15.getTransferHandler();
    boolean var22 = var15.hasFocus();
    javax.swing.event.AncestorListener[] var23 = var15.getAncestorListeners();
    var15.enable(false);
    java.awt.Dimension var26 = var15.minimumSize();
    java.awt.Dimension var27 = var15.minimumSize();
    java.awt.Dimension var28 = var2.getSize(var27);
    boolean var29 = var2.isForegroundSet();
    var2.revalidate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);

  }

  public void test259() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test259");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    boolean var21 = var15.getInheritsPopupMenu();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var25 = var24.getPreferredSize();
    boolean var28 = var24.contains(10, 1);
    java.awt.im.InputMethodRequests var29 = var24.getInputMethodRequests();
    var24.revalidate();
    var24.firePropertyChange("hi!", (short)100, (short)0);
    java.awt.Component var37 = var24.getComponentAt(0, (-1));
    var24.setRequestFocusEnabled(false);
    var15.remove((java.awt.Component)var24);
    var24.setToolTipText("bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    var24.grabFocus();
    boolean var44 = var24.isFocusTraversalPolicyProvider();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);

  }

  public void test260() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test260");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    javax.accessibility.AccessibleContext var11 = var2.getAccessibleContext();
    int var12 = var2.getHeight();
    var2.invalidate();
    java.awt.Container var14 = var2.getTopLevelAncestor();
    java.awt.Insets var15 = var2.getInsets();
    java.awt.image.ColorModel var16 = var2.getColorModel();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test261() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test261");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var3 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var4 = var3.getPreferredSize();
    javax.swing.JPopupMenu var5 = var3.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var9 = var8.getPreferredSize();
    javax.swing.JPopupMenu var10 = var8.getComponentPopupMenu();
    java.awt.Rectangle var11 = var8.bounds();
    var3.computeVisibleRect(var11);
    int var13 = var0.getIndexOf((java.lang.Object)var3);
    var0.removeElementAt(0);
    java.lang.Object var16 = var0.getSelectedItem();
    int var17 = var0.getSize();
    var0.removeAllElements();
    var0.removeAllElements();
    int var20 = var0.getSize();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var24 = var23.isMaximumSizeSet();
    var23.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var29 = var23.getWidth();
    java.awt.Image var32 = var23.createImage(24, 24);
    var23.repaint(0, 24, 10, (-1));
    int var38 = var23.getY();
    bierse.view.RunningMessagePanel var41 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var42 = var41.isMaximumSizeSet();
    boolean var43 = var41.isOpaque();
    javax.swing.InputMap var44 = var41.getInputMap();
    java.lang.String var45 = var41.getName();
    var41.setFocusTraversalPolicyProvider(true);
    bierse.view.RunningMessagePanel var50 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var50.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var57 = var50.location();
    java.awt.Component var58 = var41.findComponentAt(var57);
    java.awt.LayoutManager var59 = var41.getLayout();
    var23.setLayout(var59);
    var23.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=16777225,maximumSize=,minimumSize=,preferredSize=]", 100L, 1L);
    int var65 = var0.getIndexOf((java.lang.Object)1L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == (-1));

  }

  public void test262() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test262");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    var2.enable(false);
    java.awt.Dimension var13 = var2.minimumSize();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var18 = var17.isMaximumSizeSet();
    boolean var19 = var17.isOpaque();
    java.beans.PropertyChangeListener[] var20 = var17.getPropertyChangeListeners();
    var17.setOpaque(true);
    java.awt.Insets var23 = var17.insets();
    boolean var24 = var17.isOptimizedDrawingEnabled();
    var17.disable();
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var28.repaint(1L, (-1), (-1), 0, 100);
    boolean var35 = var28.isFocusTraversable();
    javax.swing.ActionMap var36 = var28.getActionMap();
    var17.setActionMap(var36);
    java.awt.Component var38 = var2.add("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", (java.awt.Component)var17);
    float var39 = var17.getAlignmentY();
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var43 = var42.isMaximumSizeSet();
    boolean var44 = var42.isOpaque();
    java.awt.event.HierarchyListener[] var45 = var42.getHierarchyListeners();
    int var46 = var42.getWidth();
    java.awt.Container var47 = var42.getTopLevelAncestor();
    boolean var48 = var17.isFocusCycleRoot((java.awt.Container)var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);

  }

  public void test263() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test263");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    bierse.view.RunningMessagePanel var6 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var7 = var6.isMaximumSizeSet();
    boolean var8 = var6.isOpaque();
    java.awt.event.HierarchyListener[] var9 = var6.getHierarchyListeners();
    int var10 = var6.countComponents();
    java.awt.event.HierarchyBoundsListener[] var11 = var6.getHierarchyBoundsListeners();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    boolean var16 = var14.isOpaque();
    java.awt.event.HierarchyListener[] var17 = var14.getHierarchyListeners();
    int var18 = var14.getWidth();
    java.awt.event.ContainerListener[] var19 = var14.getContainerListeners();
    java.awt.Dimension var20 = var14.getMaximumSize();
    var6.setMinimumSize(var20);
    java.awt.Dimension var22 = var2.getSize(var20);
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var25.repaint(1L, (-1), (-1), 0, 100);
    boolean var32 = var25.isFocusTraversable();
    javax.swing.ActionMap var33 = var25.getActionMap();
    var2.setActionMap(var33);
    boolean var35 = var2.isMaximumSizeSet();
    boolean var36 = var2.isBackgroundSet();
    java.awt.im.InputMethodRequests var37 = var2.getInputMethodRequests();
    boolean var38 = var2.getVerifyInputWhenFocusTarget();
    bierse.view.RunningMessagePanel var41 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var41.setDebugGraphicsOptions(10);
    java.lang.Object var44 = var41.getTreeLock();
    bierse.view.RunningMessagePanel var47 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var48 = var47.isMaximumSizeSet();
    var47.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var53 = var47.getTransferHandler();
    boolean var54 = var47.hasFocus();
    javax.swing.event.AncestorListener[] var55 = var47.getAncestorListeners();
    java.awt.Dimension var56 = var47.getMinimumSize();
    var41.setPreferredSize(var56);
    int var58 = var41.getDebugGraphicsOptions();
    var41.revalidate();
    java.awt.Dimension var60 = var41.getPreferredSize();
    var2.setPreferredSize(var60);
    boolean var62 = var2.getFocusTraversalKeysEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);

  }

  public void test264() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test264");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var3 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var4 = var3.getPreferredSize();
    javax.swing.JPopupMenu var5 = var3.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var9 = var8.getPreferredSize();
    javax.swing.JPopupMenu var10 = var8.getComponentPopupMenu();
    java.awt.Rectangle var11 = var8.bounds();
    var3.computeVisibleRect(var11);
    int var13 = var0.getIndexOf((java.lang.Object)var3);
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var17 = var16.getPreferredSize();
    boolean var20 = var16.contains(10, 1);
    java.awt.Insets var21 = var16.getInsets();
    javax.swing.JToolTip var22 = var16.createToolTip();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    var25.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var31 = var25.getTransferHandler();
    boolean var32 = var25.hasFocus();
    javax.swing.event.AncestorListener[] var33 = var25.getAncestorListeners();
    var25.enable(false);
    int var36 = var22.getComponentZOrder((java.awt.Component)var25);
    boolean var37 = var22.requestFocusInWindow();
    boolean var38 = var22.isOptimizedDrawingEnabled();
    java.awt.Component var41 = var22.locate(0, (-1));
    java.awt.Dimension var42 = var22.getMaximumSize();
    var0.insertElementAt((java.lang.Object)var22, 1);
    bierse.view.RunningMessagePanel var47 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var48 = var47.getPreferredSize();
    boolean var51 = var47.contains(10, 1);
    java.awt.im.InputMethodRequests var52 = var47.getInputMethodRequests();
    boolean var53 = var47.getInheritsPopupMenu();
    java.lang.String var54 = var47.toString();
    var47.enable();
    var0.removeElement((java.lang.Object)var47);
    var47.layout();
    boolean var58 = var47.isFocusOwner();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var54,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var54.equals("bierse.view.RunningMessagePanel[,0,0,0var54,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);

  }

  public void test265() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test265");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    var2.setAlignmentX((-1.0f));
    java.awt.Toolkit var9 = var2.getToolkit();
    var2.setFocusTraversalKeysEnabled(false);
    var2.setName("");
    int var14 = var2.countComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);

  }

  public void test266() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test266");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.repaint(1L, (-1), (-1), 0, 100);
    boolean var9 = var2.isFocusTraversable();
    java.beans.PropertyChangeListener[] var10 = var2.getPropertyChangeListeners();
    var2.setName("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    boolean var13 = var2.isPaintingTile();
    var2.requestFocus();
    java.awt.event.MouseWheelListener[] var15 = var2.getMouseWheelListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test267() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test267");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    javax.swing.InputMap var5 = var2.getInputMap();
    java.lang.String var6 = var2.getName();
    var2.setFocusTraversalPolicyProvider(true);
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var11.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var18 = var11.location();
    java.awt.Component var19 = var2.findComponentAt(var18);
    java.awt.LayoutManager var20 = var2.getLayout();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var24 = var23.isMaximumSizeSet();
    boolean var25 = var23.isOpaque();
    javax.swing.InputMap var26 = var23.getInputMap();
    java.beans.PropertyChangeListener[] var28 = var23.getPropertyChangeListeners("");
    java.lang.String var29 = var23.toString();
    boolean var30 = var2.isFocusCycleRoot((java.awt.Container)var23);
    bierse.view.RunningMessagePanel var33 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var33.transferFocus();
    var33.show();
    float var36 = var33.getAlignmentX();
    boolean var39 = var33.contains(0, 24);
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var43 = var42.getPreferredSize();
    java.awt.Dimension var44 = var42.getMaximumSize();
    java.awt.event.FocusListener[] var45 = var42.getFocusListeners();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var49 = var48.getPreferredSize();
    boolean var52 = var48.contains(10, 1);
    java.awt.im.InputMethodRequests var53 = var48.getInputMethodRequests();
    java.awt.Font var54 = var48.getFont();
    var42.setFont(var54);
    java.awt.FontMetrics var56 = var33.getFontMetrics(var54);
    java.awt.Cursor var57 = var33.getCursor();
    var2.setCursor(var57);
    var2.requestFocus();
    boolean var60 = var2.isPaintingForPrint();
    boolean var61 = var2.isCursorSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var29,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]"+ "'", var29.equals("bierse.view.RunningMessagePanel[,0,0,0var29,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);

  }

  public void test268() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test268");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.setDebugGraphicsOptions(10);
    java.lang.Object var5 = var2.getTreeLock();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var9 = var8.isMaximumSizeSet();
    var8.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var14 = var8.getTransferHandler();
    boolean var15 = var8.hasFocus();
    javax.swing.event.AncestorListener[] var16 = var8.getAncestorListeners();
    java.awt.Dimension var17 = var8.getMinimumSize();
    var2.setPreferredSize(var17);
    java.awt.FocusTraversalPolicy var19 = var2.getFocusTraversalPolicy();
    var2.setMessage("PanelUI");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test269() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test269");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    java.awt.Font var9 = var2.getFont();
    java.awt.Cursor var10 = var2.getCursor();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var14 = var13.getPreferredSize();
    var2.resize(var14);
    int var16 = var2.getHeight();
    java.awt.ComponentOrientation var17 = var2.getComponentOrientation();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test270() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test270");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    var11.setName("PanelUI");
    bierse.view.RunningMessagePanel var32 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var33 = var32.isMaximumSizeSet();
    var32.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var38 = var32.getTransferHandler();
    boolean var39 = var32.hasFocus();
    var32.setVerifyInputWhenFocusTarget(false);
    bierse.view.RunningMessagePanel var44 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var45 = var44.isMaximumSizeSet();
    boolean var46 = var44.isOpaque();
    javax.swing.InputMap var47 = var44.getInputMap();
    java.beans.PropertyChangeListener[] var49 = var44.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var50 = var44.getComponentOrientation();
    var32.applyComponentOrientation(var50);
    var11.setComponentOrientation(var50);
    bierse.view.RunningMessagePanel var55 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var56 = var55.isMaximumSizeSet();
    var55.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var61 = var55.getTransferHandler();
    boolean var62 = var55.hasFocus();
    var55.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var65 = var55.getPreferredSize();
    java.awt.ComponentOrientation var66 = var55.getComponentOrientation();
    java.lang.String var67 = var55.getName();
    java.awt.Font var68 = var55.getFont();
    javax.swing.ActionMap var69 = var55.getActionMap();
    var11.setActionMap(var69);
    boolean var71 = var11.isVisible();
    java.awt.Point var72 = var11.getMousePosition();
    var11.repaint((-1), 11, 996, 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);

  }

  public void test271() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test271");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.revalidate();
    var2.invalidate();
    boolean var7 = var2.isManagingFocus();
    var2.firePropertyChange("", (short)100, (short)10);
    var2.disable();
    boolean var13 = var2.isPaintingForPrint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test272() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test272");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    java.awt.Font var9 = var2.getFont();
    java.beans.PropertyChangeListener[] var11 = var2.getPropertyChangeListeners("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    boolean var12 = var2.isValidateRoot();
    java.awt.Toolkit var13 = var2.getToolkit();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var16.invalidate();
    java.awt.Dimension var23 = var16.getPreferredSize();
    var2.setMaximumSize(var23);
    boolean var25 = var2.isOpaque();
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var29 = var28.getPreferredSize();
    boolean var32 = var28.contains(10, 1);
    var28.setAlignmentX((-1.0f));
    java.awt.Point var35 = var28.getLocation();
    java.awt.Point var36 = var28.getLocation();
    var28.setFocusCycleRoot(false);
    java.awt.Insets var39 = var28.getInsets();
    java.awt.Insets var40 = var2.getInsets(var39);
    java.awt.LayoutManager var41 = var2.getLayout();
    var2.disable();
    var2.reshape(996, 24, 14, 12);
    var2.requestFocus();
    java.awt.event.KeyListener[] var49 = var2.getKeyListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test273() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test273");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    java.awt.dnd.DropTarget var21 = var15.getDropTarget();
    java.awt.FocusTraversalPolicy var22 = var15.getFocusTraversalPolicy();
    var15.list();
    var15.setToolTipText("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    var15.disable();
    java.lang.String var27 = var15.toString();
    java.awt.Dimension var28 = var15.getPreferredSize();
    boolean var30 = var15.requestFocus(false);
    java.awt.Rectangle var31 = var15.getBounds();
    boolean var32 = var15.isCursorSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var27,invalid,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var27.equals("bierse.view.RunningMessagePanel[,0,0,0var27,invalid,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test274() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test274");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    java.awt.peer.ComponentPeer var6 = var2.getPeer();
    var2.transferFocus();
    java.lang.String var8 = var2.getToolTipText();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    boolean var13 = var11.isOpaque();
    java.beans.PropertyChangeListener[] var14 = var11.getPropertyChangeListeners();
    var11.setOpaque(true);
    java.awt.Insets var17 = var11.insets();
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var21 = var20.isMaximumSizeSet();
    var20.layout();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    var25.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var31 = var25.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var35 = var34.getPreferredSize();
    boolean var36 = var34.isPreferredSizeSet();
    var34.enable();
    var34.transferFocusBackward();
    int var39 = var25.getComponentZOrder((java.awt.Component)var34);
    var25.setEnabled(false);
    java.awt.Graphics var42 = var25.getGraphics();
    var20.remove((java.awt.Component)var25);
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var47 = var46.getPreferredSize();
    boolean var50 = var46.contains(10, 1);
    java.awt.Insets var51 = var46.getInsets();
    javax.swing.JToolTip var52 = var46.createToolTip();
    var46.invalidate();
    var20.remove((java.awt.Component)var46);
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var46);
    boolean var56 = var2.isValid();
    int var57 = var2.getWidth();
    javax.swing.InputMap var58 = var2.getInputMap();
    var2.setRequestFocusEnabled(true);
    int var61 = var2.getComponentCount();
    int var62 = var2.getWidth();
    java.awt.Rectangle var63 = var2.getVisibleRect();
    java.awt.Dimension var64 = var2.getPreferredSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test275() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test275");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    javax.swing.JRootPane var13 = var2.getRootPane();
    var2.setRequestFocusEnabled(false);
    java.awt.Dimension var16 = var2.preferredSize();
    var2.setDebugGraphicsOptions((-1));
    var2.enable();
    java.awt.Insets var20 = var2.insets();
    javax.swing.InputVerifier var21 = var2.getInputVerifier();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    var24.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var24.invalidate();
    java.awt.Dimension var31 = var24.getPreferredSize();
    var24.show(false);
    boolean var34 = var24.isMaximumSizeSet();
    var24.firePropertyChange("PanelUI", 10L, 100L);
    boolean var39 = var24.isFocusTraversalPolicySet();
    boolean var40 = var24.requestFocusInWindow();
    javax.swing.InputVerifier var41 = var24.getInputVerifier();
    bierse.view.RunningMessagePanel var44 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var45 = var44.getPreferredSize();
    boolean var48 = var44.contains(10, 1);
    var44.setFocusTraversalPolicyProvider(false);
    float var51 = var44.getAlignmentX();
    java.awt.Component.BaselineResizeBehavior var52 = var44.getBaselineResizeBehavior();
    java.awt.dnd.DropTarget var53 = var44.getDropTarget();
    var44.layout();
    var44.setDebugGraphicsOptions(996);
    java.awt.Graphics var57 = var44.getGraphics();
    var24.update(var57);
    var2.printAll(var57);
    javax.swing.JRootPane var60 = var2.getRootPane();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);

  }

  public void test276() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test276");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    boolean var10 = var2.inside((-1), 100);
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var14 = var13.getPreferredSize();
    boolean var17 = var13.contains(10, 1);
    var13.setAlignmentX((-1.0f));
    java.awt.Point var20 = var13.getLocation();
    java.awt.Point var21 = var2.getLocation(var20);
    boolean var24 = var2.contains(100, 0);
    boolean var25 = var2.isBackgroundSet();
    java.awt.GraphicsConfiguration var26 = var2.getGraphicsConfiguration();
    var2.setToolTipText("PanelUI");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test277() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test277");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    boolean var40 = var2.getFocusTraversalKeysEnabled();
    bierse.view.RunningMessagePanel var44 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var44.repaint(1L, (-1), (-1), 0, 100);
    boolean var51 = var44.isFocusTraversable();
    var44.show(false);
    java.awt.Dimension var54 = var44.preferredSize();
    java.awt.Component var55 = var2.add("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var44);
    bierse.view.RunningMessagePanel var58 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var59 = var58.getPreferredSize();
    boolean var62 = var58.contains(10, 1);
    java.awt.im.InputMethodRequests var63 = var58.getInputMethodRequests();
    boolean var64 = var58.getInheritsPopupMenu();
    java.lang.String var65 = var58.toString();
    java.awt.Rectangle var66 = var58.bounds();
    java.awt.GraphicsConfiguration var67 = var58.getGraphicsConfiguration();
    var58.setDoubleBuffered(false);
    var58.nextFocus();
    boolean var71 = var2.isAncestorOf((java.awt.Component)var58);
    boolean var72 = var2.isManagingFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var65,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var65.equals("bierse.view.RunningMessagePanel[,0,0,0var65,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);

  }

  public void test278() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test278");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPaintingTile();
    var2.transferFocus();
    var2.repaint(100L, 100, 24, 13, 24);
    var2.setInheritsPopupMenu(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test279() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test279");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var3 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var4 = var3.getPreferredSize();
    javax.swing.JPopupMenu var5 = var3.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var9 = var8.getPreferredSize();
    javax.swing.JPopupMenu var10 = var8.getComponentPopupMenu();
    java.awt.Rectangle var11 = var8.bounds();
    var3.computeVisibleRect(var11);
    int var13 = var0.getIndexOf((java.lang.Object)var3);
    java.lang.Object var14 = var0.getSelectedItem();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var18 = var17.getPreferredSize();
    boolean var19 = var17.isPreferredSizeSet();
    var17.setOpaque(true);
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    var24.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var30 = var24.getTransferHandler();
    boolean var31 = var24.hasFocus();
    javax.swing.event.AncestorListener[] var32 = var24.getAncestorListeners();
    java.awt.Dimension var33 = var24.getMinimumSize();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var38 = var37.getPreferredSize();
    java.awt.Dimension var39 = var37.getMaximumSize();
    var37.disable();
    var24.putClientProperty((java.lang.Object)100, (java.lang.Object)var37);
    javax.swing.InputVerifier var42 = var37.getInputVerifier();
    boolean var43 = var37.getInheritsPopupMenu();
    var37.setLocation(0, 100);
    boolean var47 = var37.isFocusTraversalPolicyProvider();
    var37.list();
    bierse.view.RunningMessagePanel var51 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var51.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var58 = var51.location();
    java.awt.Font var59 = var51.getFont();
    var37.setFont(var59);
    java.awt.FontMetrics var61 = var17.getFontMetrics(var59);
    var17.removeAll();
    var17.hide();
    var0.setSelectedItem((java.lang.Object)var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test280() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test280");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    java.awt.Font var9 = var2.getFont();
    java.beans.PropertyChangeListener[] var11 = var2.getPropertyChangeListeners("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    boolean var12 = var2.isValidateRoot();
    java.awt.Toolkit var13 = var2.getToolkit();
    javax.swing.KeyStroke[] var14 = var2.getRegisteredKeyStrokes();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var18 = var17.isMaximumSizeSet();
    var17.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var23 = var17.getTransferHandler();
    boolean var24 = var17.hasFocus();
    var17.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var27 = var17.getPreferredSize();
    java.awt.ComponentOrientation var28 = var17.getComponentOrientation();
    java.lang.String var29 = var17.getName();
    java.awt.Font var30 = var17.getFont();
    javax.swing.ActionMap var31 = var17.getActionMap();
    java.awt.Component var33 = var2.add((java.awt.Component)var17, (-1));
    var17.setToolTipText("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    java.lang.String var36 = var17.getToolTipText();
    javax.swing.JRootPane var37 = var17.getRootPane();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var36,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var36.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var36,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);

  }

  public void test281() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test281");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    boolean var10 = var2.inside((-1), 100);
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var14 = var13.getPreferredSize();
    boolean var17 = var13.contains(10, 1);
    var13.setAlignmentX((-1.0f));
    java.awt.Point var20 = var13.getLocation();
    java.awt.Point var21 = var2.getLocation(var20);
    boolean var24 = var2.contains(100, 0);
    int var25 = var2.countComponents();
    java.awt.Insets var26 = var2.getInsets();
    int var27 = var2.getX();
    boolean var30 = var2.contains(100, (-1));
    int var31 = var2.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);

  }

  public void test282() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test282");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    var2.revalidate();
    java.awt.event.HierarchyListener[] var9 = var2.getHierarchyListeners();
    var2.invalidate();
    java.awt.LayoutManager var11 = var2.getLayout();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    boolean var16 = var14.isOpaque();
    java.awt.event.HierarchyListener[] var17 = var14.getHierarchyListeners();
    int var18 = var14.countComponents();
    java.awt.event.HierarchyBoundsListener[] var19 = var14.getHierarchyBoundsListeners();
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var23 = var22.getPreferredSize();
    boolean var24 = var22.isPreferredSizeSet();
    var22.enable();
    javax.accessibility.AccessibleContext var26 = var22.getAccessibleContext();
    bierse.view.RunningMessagePanel var29 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var29.transferFocus();
    var29.show();
    float var32 = var29.getAlignmentX();
    var29.repaint(0L, 10, 0, 10, (-1));
    boolean var39 = var29.isEnabled();
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var43 = var42.getPreferredSize();
    javax.swing.JPopupMenu var44 = var42.getComponentPopupMenu();
    java.awt.Rectangle var45 = var42.bounds();
    java.awt.Rectangle var46 = var29.getBounds(var45);
    var22.computeVisibleRect(var46);
    var14.scrollRectToVisible(var46);
    var2.scrollRectToVisible(var46);
    var2.setAlignmentX(100.0f);
    java.awt.Container var52 = var2.getFocusCycleRootAncestor();
    int var53 = var2.getY();
    var2.requestFocus();
    boolean var55 = var2.isValidateRoot();
    java.awt.image.ColorModel var56 = var2.getColorModel();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test283() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test283");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    var2.revalidate();
    boolean var6 = var2.isFocusOwner();
    float var7 = var2.getAlignmentX();
    java.beans.VetoableChangeListener[] var8 = var2.getVetoableChangeListeners();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var17 = var11.getTransferHandler();
    boolean var18 = var11.hasFocus();
    var11.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var21 = var11.getPreferredSize();
    java.awt.GraphicsConfiguration var22 = var11.getGraphicsConfiguration();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    boolean var27 = var25.isOpaque();
    javax.swing.InputMap var28 = var25.getInputMap();
    java.beans.PropertyChangeListener[] var30 = var25.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var31 = var25.getComponentOrientation();
    var11.applyComponentOrientation(var31);
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var36 = var35.isMaximumSizeSet();
    var35.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var41 = var35.getTransferHandler();
    boolean var42 = var35.hasFocus();
    javax.swing.event.AncestorListener[] var43 = var35.getAncestorListeners();
    var35.enable(false);
    java.awt.Dimension var46 = var35.minimumSize();
    java.awt.Dimension var47 = var11.getSize(var46);
    var2.setSize(var47);
    java.awt.Dimension var49 = var2.getMaximumSize();
    var2.doLayout();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test284() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test284");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    var2.revalidate();
    java.awt.event.HierarchyListener[] var9 = var2.getHierarchyListeners();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var13 = var12.isMaximumSizeSet();
    boolean var14 = var12.isOpaque();
    java.awt.event.HierarchyListener[] var15 = var12.getHierarchyListeners();
    java.awt.peer.ComponentPeer var16 = var12.getPeer();
    var12.transferFocusDownCycle();
    var12.transferFocusUpCycle();
    java.awt.Dimension var19 = var12.minimumSize();
    var2.setPreferredSize(var19);
    java.awt.event.MouseWheelListener[] var21 = var2.getMouseWheelListeners();
    javax.swing.border.Border var22 = var2.getBorder();
    boolean var25 = var2.contains(1, 12);
    var2.enableInputMethods(false);
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var31 = var30.getPreferredSize();
    boolean var34 = var30.contains(10, 1);
    java.awt.im.InputMethodRequests var35 = var30.getInputMethodRequests();
    boolean var36 = var30.getInheritsPopupMenu();
    java.lang.String var37 = var30.toString();
    java.awt.Rectangle var38 = var30.bounds();
    java.awt.GraphicsConfiguration var39 = var30.getGraphicsConfiguration();
    var30.setDoubleBuffered(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setComponentZOrder((java.awt.Component)var30, 996);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var37,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var37.equals("bierse.view.RunningMessagePanel[,0,0,0var37,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);

  }

  public void test285() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test285");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    var2.enable();
    javax.accessibility.AccessibleContext var6 = var2.getAccessibleContext();
    var2.setFocusable(false);
    var2.setIgnoreRepaint(false);
    boolean var11 = var2.isRequestFocusEnabled();
    java.awt.Component var14 = var2.getComponentAt(1, 10);
    int var15 = var2.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);

  }

  public void test286() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test286");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    java.awt.Component[] var9 = var2.getComponents();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var13 = var12.isMaximumSizeSet();
    var12.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var18 = var12.getTransferHandler();
    boolean var19 = var12.hasFocus();
    var12.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var22 = var12.getPreferredSize();
    var2.setMaximumSize(var22);
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var27 = var26.isMaximumSizeSet();
    var26.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var32 = var26.getWidth();
    boolean var35 = var26.inside(24, 1);
    java.awt.image.VolatileImage var38 = var26.createVolatileImage(0, 1);
    var26.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", 10, 100);
    boolean var45 = var26.contains((-1), 1);
    var26.setEnabled(false);
    boolean var48 = var2.isFocusCycleRoot((java.awt.Container)var26);
    bierse.view.RunningMessagePanel var51 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var52 = var51.getPreferredSize();
    javax.swing.JPopupMenu var53 = var51.getComponentPopupMenu();
    boolean var54 = var51.isEnabled();
    var26.remove((java.awt.Component)var51);
    bierse.view.RunningMessagePanel var58 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var58.transferFocus();
    var58.show();
    float var61 = var58.getAlignmentX();
    var58.repaint(0L, 10, 0, 10, (-1));
    boolean var68 = var58.isEnabled();
    int var69 = var58.getX();
    javax.swing.plaf.PanelUI var70 = var58.getUI();
    var26.setUI(var70);
    var26.validate();
    int var73 = var26.getHeight();
    var26.setVerifyInputWhenFocusTarget(true);
    var26.enable(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);

  }

  public void test287() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test287");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    var11.transferFocus();
    var11.setToolTipText("");
    var11.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (byte)0, (byte)1);
    boolean var35 = var11.isValidateRoot();
    java.awt.Component var38 = var11.locate(996, 11);
    javax.swing.plaf.PanelUI var39 = var11.getUI();
    boolean var40 = var11.isMaximumSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test288() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test288");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.setDebugGraphicsOptions(10);
    java.lang.Object var5 = var2.getTreeLock();
    boolean var6 = var2.isOpaque();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test289() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test289");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var16 = var15.isMaximumSizeSet();
    var15.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var21 = var15.getTransferHandler();
    boolean var22 = var15.hasFocus();
    var15.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var25 = var15.getPreferredSize();
    java.awt.ComponentOrientation var26 = var15.getComponentOrientation();
    var15.transferFocus();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var31 = var30.isMaximumSizeSet();
    var30.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var36 = var30.getTransferHandler();
    boolean var37 = var30.hasFocus();
    javax.swing.event.AncestorListener[] var38 = var30.getAncestorListeners();
    java.awt.Dimension var39 = var30.getMinimumSize();
    boolean var40 = var30.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var43 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var44 = var43.isMaximumSizeSet();
    var43.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var49 = var43.getTransferHandler();
    boolean var50 = var43.hasFocus();
    var43.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var53 = var43.getPreferredSize();
    java.awt.Dimension var54 = var30.getSize(var53);
    var15.setSize(var53);
    bierse.view.RunningMessagePanel var58 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var59 = var58.isMaximumSizeSet();
    var58.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var58.invalidate();
    java.awt.Dimension var65 = var58.getPreferredSize();
    bierse.view.RunningMessagePanel var68 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var68.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var75 = var68.location();
    java.awt.Point var76 = var58.getLocation(var75);
    java.awt.Point var77 = var15.getLocation(var75);
    var2.setLocation(var75);
    java.awt.LayoutManager var79 = var2.getLayout();
    var2.repaint(1L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test290() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test290");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.invalidate();
    var2.setFocusable(true);
    boolean var8 = var2.getVerifyInputWhenFocusTarget();
    int var11 = var2.getBaseline(1, 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));

  }

  public void test291() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test291");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var8 = var7.isMaximumSizeSet();
    boolean var9 = var7.isOpaque();
    java.beans.PropertyChangeListener[] var10 = var7.getPropertyChangeListeners();
    var7.setOpaque(true);
    java.awt.Insets var13 = var7.insets();
    java.awt.Insets var14 = var2.getInsets(var13);
    var2.show();
    java.lang.String var16 = var2.getUIClassID();
    java.awt.LayoutManager var17 = var2.getLayout();
    java.lang.Object var18 = var2.getTreeLock();
    var2.removeAll();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "PanelUI"+ "'", var16.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test292() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test292");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    boolean var29 = var2.requestFocus(false);
    var2.removeNotify();
    java.awt.ComponentOrientation var31 = var2.getComponentOrientation();
    int var32 = var2.getHeight();
    boolean var33 = var2.isLightweight();
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var37 = var36.isMaximumSizeSet();
    boolean var38 = var36.isOpaque();
    java.awt.event.HierarchyListener[] var39 = var36.getHierarchyListeners();
    int var40 = var36.countComponents();
    java.awt.event.HierarchyBoundsListener[] var41 = var36.getHierarchyBoundsListeners();
    boolean var43 = var36.areFocusTraversalKeysSet(1);
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var47 = var46.getPreferredSize();
    javax.swing.JPopupMenu var48 = var46.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var51 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var52 = var51.getPreferredSize();
    javax.swing.JPopupMenu var53 = var51.getComponentPopupMenu();
    java.awt.Rectangle var54 = var51.bounds();
    var46.computeVisibleRect(var54);
    var36.setBounds(var54);
    var36.removeAll();
    boolean var58 = var2.isAncestorOf((java.awt.Component)var36);
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", 10L, 1L);
    java.awt.LayoutManager var63 = var2.getLayout();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test293() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test293");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    var2.invalidate();
    java.awt.event.FocusListener[] var6 = var2.getFocusListeners();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var10 = var9.isMaximumSizeSet();
    var9.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var15 = var9.getTransferHandler();
    boolean var16 = var9.hasFocus();
    var9.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var19 = var9.getPreferredSize();
    java.awt.ComponentOrientation var20 = var9.getComponentOrientation();
    var9.transferFocus();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    var24.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var30 = var24.getTransferHandler();
    boolean var31 = var24.hasFocus();
    javax.swing.event.AncestorListener[] var32 = var24.getAncestorListeners();
    java.awt.Dimension var33 = var24.getMinimumSize();
    boolean var34 = var24.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    var37.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var47 = var37.getPreferredSize();
    java.awt.Dimension var48 = var24.getSize(var47);
    var9.setSize(var47);
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var53 = var52.getPreferredSize();
    boolean var56 = var52.contains(10, 1);
    java.awt.Insets var57 = var52.getInsets();
    javax.swing.JToolTip var58 = var52.createToolTip();
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var62 = var61.isMaximumSizeSet();
    var61.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var67 = var61.getTransferHandler();
    boolean var68 = var61.hasFocus();
    javax.swing.event.AncestorListener[] var69 = var61.getAncestorListeners();
    var61.enable(false);
    int var72 = var58.getComponentZOrder((java.awt.Component)var61);
    boolean var73 = var58.requestFocusInWindow();
    boolean var74 = var58.isOptimizedDrawingEnabled();
    var2.add((java.awt.Component)var9, (java.lang.Object)var58);
    var9.setVisible(false);
    var9.setToolTipText("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    var9.nextFocus();
    java.awt.Point var82 = var9.getMousePosition(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);

  }

  public void test294() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test294");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    boolean var21 = var15.isValidateRoot();
    var15.repaint();
    boolean var24 = var15.requestFocus(true);
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var33 = var27.getWidth();
    java.awt.Image var36 = var27.createImage(24, 24);
    boolean var37 = var27.getInheritsPopupMenu();
    boolean var38 = var27.isBackgroundSet();
    bierse.view.RunningMessagePanel var41 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var42 = var41.isMaximumSizeSet();
    var41.layout();
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var47 = var46.isMaximumSizeSet();
    boolean var48 = var46.isOpaque();
    java.awt.event.HierarchyListener[] var49 = var46.getHierarchyListeners();
    int var50 = var46.countComponents();
    java.awt.event.HierarchyBoundsListener[] var51 = var46.getHierarchyBoundsListeners();
    boolean var53 = var46.areFocusTraversalKeysSet(1);
    bierse.view.RunningMessagePanel var56 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var57 = var56.getPreferredSize();
    javax.swing.JPopupMenu var58 = var56.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var62 = var61.getPreferredSize();
    javax.swing.JPopupMenu var63 = var61.getComponentPopupMenu();
    java.awt.Rectangle var64 = var61.bounds();
    var56.computeVisibleRect(var64);
    var46.setBounds(var64);
    var41.repaint(var64);
    var27.paintImmediately(var64);
    float var69 = var27.getAlignmentY();
    var27.setSpeed(1);
    bierse.view.RunningMessagePanel var74 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var75 = var74.getPreferredSize();
    boolean var78 = var74.contains(10, 1);
    java.awt.im.InputMethodRequests var79 = var74.getInputMethodRequests();
    boolean var82 = var74.inside((-1), 100);
    bierse.view.RunningMessagePanel var85 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var86 = var85.getPreferredSize();
    boolean var89 = var85.contains(10, 1);
    var85.setAlignmentX((-1.0f));
    java.awt.Point var92 = var85.getLocation();
    java.awt.Point var93 = var74.getLocation(var92);
    java.awt.Point var94 = var27.getLocation(var92);
    java.awt.Point var95 = var15.getLocation(var94);
    var15.transferFocusBackward();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test295() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test295");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    float var5 = var2.getAlignmentX();
    var2.repaint(0L, 10, 0, 10, (-1));
    boolean var12 = var2.isEnabled();
    java.lang.Object var13 = var2.getTreeLock();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (byte)100, (byte)100);
    javax.swing.JPopupMenu var18 = var2.getComponentPopupMenu();
    java.awt.ComponentOrientation var19 = var2.getComponentOrientation();
    java.lang.String var20 = var2.getUIClassID();
    java.awt.Toolkit var21 = var2.getToolkit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "PanelUI"+ "'", var20.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test296() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test296");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    boolean var40 = var27.isDoubleBuffered();
    var27.setEnabled(true);
    var27.setAlignmentY(10.0f);
    var27.enable(false);
    var27.doLayout();
    java.awt.Cursor var48 = var27.getCursor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test297() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test297");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var3 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var4 = var3.isMaximumSizeSet();
    boolean var5 = var3.isOpaque();
    java.beans.PropertyChangeListener[] var6 = var3.getPropertyChangeListeners();
    var3.setOpaque(true);
    var3.setRequestFocusEnabled(false);
    var0.insertElementAt((java.lang.Object)var3, 1);
    java.awt.Insets var13 = var3.insets();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test298() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test298");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    java.awt.Component[] var9 = var2.getComponents();
    java.awt.event.HierarchyBoundsListener[] var10 = var2.getHierarchyBoundsListeners();
    int var11 = var2.getX();
    javax.swing.JToolTip var12 = var2.createToolTip();
    java.awt.Point var13 = var12.getMousePosition();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var17 = var16.getPreferredSize();
    boolean var20 = var16.contains(10, 1);
    java.awt.im.InputMethodRequests var21 = var16.getInputMethodRequests();
    var16.revalidate();
    var16.firePropertyChange("hi!", (short)100, (short)0);
    var16.resize(10, 10);
    java.awt.image.VolatileImage var32 = var16.createVolatileImage(24, 0);
    var16.enable();
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var37 = var36.getPreferredSize();
    boolean var38 = var36.isPreferredSizeSet();
    var36.enable();
    var36.transferFocusBackward();
    java.awt.Dimension var41 = var36.size();
    boolean var42 = var36.isFocusable();
    var36.enableInputMethods(false);
    int var45 = var16.getComponentZOrder((java.awt.Component)var36);
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var49 = var48.getPreferredSize();
    boolean var52 = var48.contains(10, 1);
    var48.setAlignmentX((-1.0f));
    java.awt.Toolkit var55 = var48.getToolkit();
    java.lang.String var56 = var48.toString();
    boolean var57 = var48.isFocusTraversalPolicySet();
    var48.move(12, 1);
    var48.hide();
    java.awt.Insets var62 = var48.getInsets();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var12.add((java.awt.Component)var36, (java.lang.Object)var48, 10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var56,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var56.equals("bierse.view.RunningMessagePanel[,0,0,0var56,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test299() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test299");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    boolean var29 = var2.requestFocus(false);
    var2.removeNotify();
    java.awt.ComponentOrientation var31 = var2.getComponentOrientation();
    int var32 = var2.getHeight();
    boolean var33 = var2.isLightweight();
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var37 = var36.isMaximumSizeSet();
    boolean var38 = var36.isOpaque();
    java.awt.event.HierarchyListener[] var39 = var36.getHierarchyListeners();
    int var40 = var36.countComponents();
    java.awt.event.HierarchyBoundsListener[] var41 = var36.getHierarchyBoundsListeners();
    boolean var43 = var36.areFocusTraversalKeysSet(1);
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var47 = var46.getPreferredSize();
    javax.swing.JPopupMenu var48 = var46.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var51 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var52 = var51.getPreferredSize();
    javax.swing.JPopupMenu var53 = var51.getComponentPopupMenu();
    java.awt.Rectangle var54 = var51.bounds();
    var46.computeVisibleRect(var54);
    var36.setBounds(var54);
    var36.removeAll();
    boolean var58 = var2.isAncestorOf((java.awt.Component)var36);
    java.awt.im.InputContext var59 = var2.getInputContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);

  }

  public void test300() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test300");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.countComponents();
    java.awt.event.HierarchyBoundsListener[] var7 = var2.getHierarchyBoundsListeners();
    java.awt.Rectangle var8 = var2.getBounds();
    java.awt.event.HierarchyBoundsListener[] var9 = var2.getHierarchyBoundsListeners();
    var2.repaint((-1L), 10, (-1), 13, (-1));
    float var16 = var2.getAlignmentY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);

  }

  public void test301() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test301");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPaintingTile();
    boolean var5 = var2.requestDefaultFocus();
    java.awt.Rectangle var6 = var2.bounds();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test302() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test302");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    bierse.view.RunningMessagePanel var6 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var7 = var6.isMaximumSizeSet();
    boolean var8 = var6.isOpaque();
    java.awt.event.HierarchyListener[] var9 = var6.getHierarchyListeners();
    int var10 = var6.countComponents();
    java.awt.event.HierarchyBoundsListener[] var11 = var6.getHierarchyBoundsListeners();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    boolean var16 = var14.isOpaque();
    java.awt.event.HierarchyListener[] var17 = var14.getHierarchyListeners();
    int var18 = var14.getWidth();
    java.awt.event.ContainerListener[] var19 = var14.getContainerListeners();
    java.awt.Dimension var20 = var14.getMaximumSize();
    var6.setMinimumSize(var20);
    java.awt.Dimension var22 = var2.getSize(var20);
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var25.repaint(1L, (-1), (-1), 0, 100);
    boolean var32 = var25.isFocusTraversable();
    javax.swing.ActionMap var33 = var25.getActionMap();
    var2.setActionMap(var33);
    boolean var35 = var2.isMaximumSizeSet();
    var2.setEnabled(false);
    var2.repaint(11, 10, 24, 12);
    var2.transferFocusDownCycle();
    java.awt.event.KeyListener[] var44 = var2.getKeyListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test303() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test303");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    java.awt.Container var7 = var2.getTopLevelAncestor();
    var2.nextFocus();
    boolean var9 = var2.isBackgroundSet();
    java.awt.Point var11 = var2.getMousePosition(true);
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var15 = var14.getPreferredSize();
    boolean var18 = var14.contains(10, 1);
    var14.setAlignmentX((-1.0f));
    java.awt.Point var21 = var14.getLocation();
    java.awt.Point var22 = var14.getLocation();
    java.awt.Point var23 = var2.getLocation(var22);
    var2.setFocusCycleRoot(false);
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var29 = var28.getPreferredSize();
    boolean var30 = var28.isPaintingTile();
    var28.transferFocus();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var35 = var34.isMaximumSizeSet();
    var34.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var40 = var34.getTransferHandler();
    boolean var41 = var34.hasFocus();
    javax.swing.event.AncestorListener[] var42 = var34.getAncestorListeners();
    javax.accessibility.AccessibleContext var43 = var34.getAccessibleContext();
    javax.swing.ActionMap var44 = var34.getActionMap();
    var28.setActionMap(var44);
    java.awt.Rectangle var46 = var28.getVisibleRect();
    var2.computeVisibleRect(var46);
    var2.setFocusTraversalKeysEnabled(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test304() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test304");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    java.awt.Component var11 = var2.getComponentAt(0, 0);
    java.awt.Dimension var12 = var2.minimumSize();
    boolean var13 = var2.isFocusable();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var17 = var16.getPreferredSize();
    javax.swing.JPopupMenu var18 = var16.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var22 = var21.getPreferredSize();
    javax.swing.JPopupMenu var23 = var21.getComponentPopupMenu();
    java.awt.Rectangle var24 = var21.bounds();
    var16.computeVisibleRect(var24);
    boolean var26 = var16.isManagingFocus();
    int var27 = var16.getHeight();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var31 = var30.isMaximumSizeSet();
    var30.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var36 = var30.getTransferHandler();
    boolean var37 = var30.hasFocus();
    javax.swing.event.AncestorListener[] var38 = var30.getAncestorListeners();
    java.awt.Dimension var39 = var30.getMinimumSize();
    boolean var40 = var30.isFocusTraversalPolicySet();
    var2.add((java.awt.Component)var16, (java.lang.Object)var30);
    bierse.view.RunningMessagePanel var45 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var46 = var45.isFocusTraversable();
    var45.setOpaque(true);
    java.awt.Dimension var49 = var45.getSize();
    var45.removeAll();
    java.awt.Component var51 = var16.add("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var45);
    boolean var54 = var45.contains(12, 100);
    boolean var55 = var45.getFocusTraversalKeysEnabled();
    int var56 = var45.getComponentCount();
    var45.repaint(12, 32767, 24, 14);
    java.awt.GraphicsConfiguration var62 = var45.getGraphicsConfiguration();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);

  }

  public void test305() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test305");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    var2.invalidate();
    java.awt.event.FocusListener[] var6 = var2.getFocusListeners();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var10 = var9.isMaximumSizeSet();
    var9.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var15 = var9.getTransferHandler();
    boolean var16 = var9.hasFocus();
    var9.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var19 = var9.getPreferredSize();
    java.awt.ComponentOrientation var20 = var9.getComponentOrientation();
    var9.transferFocus();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    var24.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var30 = var24.getTransferHandler();
    boolean var31 = var24.hasFocus();
    javax.swing.event.AncestorListener[] var32 = var24.getAncestorListeners();
    java.awt.Dimension var33 = var24.getMinimumSize();
    boolean var34 = var24.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    var37.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var47 = var37.getPreferredSize();
    java.awt.Dimension var48 = var24.getSize(var47);
    var9.setSize(var47);
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var53 = var52.getPreferredSize();
    boolean var56 = var52.contains(10, 1);
    java.awt.Insets var57 = var52.getInsets();
    javax.swing.JToolTip var58 = var52.createToolTip();
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var62 = var61.isMaximumSizeSet();
    var61.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var67 = var61.getTransferHandler();
    boolean var68 = var61.hasFocus();
    javax.swing.event.AncestorListener[] var69 = var61.getAncestorListeners();
    var61.enable(false);
    int var72 = var58.getComponentZOrder((java.awt.Component)var61);
    boolean var73 = var58.requestFocusInWindow();
    boolean var74 = var58.isOptimizedDrawingEnabled();
    var2.add((java.awt.Component)var9, (java.lang.Object)var58);
    boolean var76 = var58.isFontSet();
    java.awt.Dimension var77 = var58.getPreferredSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test306() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test306");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    boolean var21 = var15.getInheritsPopupMenu();
    var15.setLocation(0, 100);
    boolean var25 = var15.isFocusTraversalPolicyProvider();
    var15.list();
    javax.swing.event.AncestorListener[] var27 = var15.getAncestorListeners();
    var15.repaint(100L);
    java.awt.peer.ComponentPeer var30 = var15.getPeer();
    boolean var31 = var15.isManagingFocus();
    var15.validate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test307() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test307");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.countComponents();
    java.awt.FocusTraversalPolicy var7 = var2.getFocusTraversalPolicy();
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var10.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var17 = var10.location();
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var21 = var20.isMaximumSizeSet();
    var20.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var26 = var20.getTransferHandler();
    boolean var27 = var20.hasFocus();
    javax.swing.event.AncestorListener[] var28 = var20.getAncestorListeners();
    java.awt.Dimension var29 = var20.getMinimumSize();
    var10.resize(var29);
    var10.repaint(100L, 1, (-1), 100, 24);
    java.awt.event.HierarchyBoundsListener[] var37 = var10.getHierarchyBoundsListeners();
    java.awt.Color var38 = var10.getBackground();
    var2.setForeground(var38);
    int var40 = var2.getStringWidth();
    java.awt.LayoutManager var41 = var2.getLayout();
    java.awt.Rectangle var42 = var2.bounds();
    float var43 = var2.getAlignmentY();
    java.awt.Insets var44 = var2.getInsets();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 996);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test308() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test308");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    var2.setAlignmentX((-1.0f));
    java.awt.Toolkit var9 = var2.getToolkit();
    java.lang.String var10 = var2.toString();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", false, false);
    var2.layout();
    int var16 = var2.getStringWidth();
    var2.reshape(11, 100, 32767, 996);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var10,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var10.equals("bierse.view.RunningMessagePanel[,0,0,0var10,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 996);

  }

  public void test309() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test309");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    var24.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var24.invalidate();
    java.awt.Dimension var31 = var24.getPreferredSize();
    int var32 = var24.getWidth();
    java.awt.Component var33 = var15.add("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var24);
    var15.setAutoscrolls(true);
    var15.move(0, 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test310() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test310");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    var2.setVisible(true);
    var2.enable();
    var2.setBounds(996, 24, 996, 24);
    java.awt.Container var20 = var2.getTopLevelAncestor();
    java.beans.VetoableChangeListener[] var21 = var2.getVetoableChangeListeners();
    var2.transferFocusUpCycle();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test311() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test311");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.GraphicsConfiguration var13 = var2.getGraphicsConfiguration();
    java.awt.Dimension var14 = var2.getSize();
    int var17 = var2.getBaseline(996, 12);
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var21 = var20.getPreferredSize();
    boolean var24 = var20.contains(10, 1);
    java.awt.Insets var25 = var20.getInsets();
    javax.swing.JToolTip var26 = var20.createToolTip();
    bierse.view.RunningMessagePanel var29 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var30 = var29.isMaximumSizeSet();
    var29.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var35 = var29.getTransferHandler();
    boolean var36 = var29.hasFocus();
    var29.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var39 = var29.getPreferredSize();
    java.awt.ComponentOrientation var40 = var29.getComponentOrientation();
    bierse.view.RunningMessagePanel var43 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var44 = var43.isMaximumSizeSet();
    var43.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var49 = var43.getTransferHandler();
    boolean var50 = var43.hasFocus();
    javax.swing.event.AncestorListener[] var51 = var43.getAncestorListeners();
    bierse.view.RunningMessagePanel var54 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var55 = var54.isMaximumSizeSet();
    var54.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var60 = var54.getTransferHandler();
    boolean var61 = var54.hasFocus();
    var54.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var64 = var54.getPreferredSize();
    java.awt.ComponentOrientation var65 = var54.getComponentOrientation();
    var29.add((java.awt.Component)var43, (java.lang.Object)var54);
    bierse.view.RunningMessagePanel var69 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var70 = var69.getPreferredSize();
    java.awt.Dimension var71 = var69.getMaximumSize();
    var54.resize(var71);
    var26.setPreferredSize(var71);
    bierse.view.RunningMessagePanel var76 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var77 = var76.isMaximumSizeSet();
    boolean var78 = var76.isOpaque();
    java.awt.event.HierarchyListener[] var79 = var76.getHierarchyListeners();
    int var80 = var76.getWidth();
    java.awt.event.ContainerListener[] var81 = var76.getContainerListeners();
    java.awt.Dimension var82 = var76.getMaximumSize();
    boolean var83 = var76.isBackgroundSet();
    var26.remove((java.awt.Component)var76);
    java.awt.Point var85 = var26.getLocation();
    java.awt.Component var86 = var2.findComponentAt(var85);
    boolean var87 = var2.isFocusTraversalPolicyProvider();
    javax.swing.TransferHandler var88 = var2.getTransferHandler();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var90 = var2.getComponent(1);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);

  }

  public void test312() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test312");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    int var12 = var2.getDebugGraphicsOptions();
    boolean var13 = var2.isEnabled();
    boolean var14 = var2.requestFocusInWindow();
    java.awt.Insets var15 = var2.insets();
    var2.enableInputMethods(true);
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var20.transferFocus();
    java.awt.image.ColorModel var22 = var20.getColorModel();
    boolean var23 = var20.isPaintingTile();
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var27 = var26.getPreferredSize();
    var20.setMaximumSize(var27);
    var2.setPreferredSize(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test313() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test313");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var8 = var7.getPreferredSize();
    javax.swing.JPopupMenu var9 = var7.getComponentPopupMenu();
    java.awt.Rectangle var10 = var7.bounds();
    var2.computeVisibleRect(var10);
    boolean var12 = var2.isManagingFocus();
    var2.transferFocus();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", true, false);
    boolean var18 = var2.isFocusOwner();
    boolean var19 = var2.isMaximumSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test314() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test314");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    java.awt.Component[] var9 = var2.getComponents();
    var2.enable(true);
    boolean var12 = var2.isVisible();
    var2.enableInputMethods(true);
    boolean var17 = var2.inside(11, 12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test315() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test315");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.beans.PropertyChangeListener[] var5 = var2.getPropertyChangeListeners();
    java.awt.Graphics var6 = var2.getGraphics();
    var2.repaint(0, 12, 10, 0);
    boolean var12 = var2.isShowing();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    boolean var19 = var15.contains(10, 1);
    java.awt.im.InputMethodRequests var20 = var15.getInputMethodRequests();
    java.awt.event.FocusListener[] var21 = var15.getFocusListeners();
    java.awt.Font var22 = var15.getFont();
    java.beans.PropertyChangeListener[] var24 = var15.getPropertyChangeListeners("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    boolean var25 = var15.isValidateRoot();
    java.awt.Toolkit var26 = var15.getToolkit();
    bierse.view.RunningMessagePanel var29 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var30 = var29.isMaximumSizeSet();
    var29.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var29.invalidate();
    java.awt.Dimension var36 = var29.getPreferredSize();
    var15.setMaximumSize(var36);
    java.awt.event.HierarchyBoundsListener[] var38 = var15.getHierarchyBoundsListeners();
    java.awt.Point var39 = var15.location();
    var15.setAutoscrolls(true);
    java.beans.VetoableChangeListener[] var42 = var15.getVetoableChangeListeners();
    var15.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (byte)100, (byte)10);
    var15.setEnabled(false);
    bierse.view.RunningMessagePanel var51 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var52 = var51.getPreferredSize();
    boolean var53 = var51.isPreferredSizeSet();
    var51.setOpaque(true);
    java.awt.Point var56 = var51.location();
    java.awt.Component var57 = var15.findComponentAt(var56);
    java.awt.Component var58 = var2.getComponentAt(var56);
    var2.invalidate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);

  }

  public void test316() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test316");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    java.awt.Rectangle var5 = var2.bounds();
    var2.setSize(0, 24);
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var17 = var11.getTransferHandler();
    boolean var18 = var11.hasFocus();
    javax.swing.event.AncestorListener[] var19 = var11.getAncestorListeners();
    java.awt.Dimension var20 = var11.getMinimumSize();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var25 = var24.getPreferredSize();
    java.awt.Dimension var26 = var24.getMaximumSize();
    var24.disable();
    var11.putClientProperty((java.lang.Object)100, (java.lang.Object)var24);
    javax.swing.InputVerifier var29 = var24.getInputVerifier();
    boolean var30 = var24.getInheritsPopupMenu();
    var24.setLocation(0, 100);
    boolean var34 = var24.isFocusTraversalPolicyProvider();
    var24.list();
    javax.swing.event.AncestorListener[] var36 = var24.getAncestorListeners();
    var24.repaint(100L);
    int var39 = var2.getComponentZOrder((java.awt.Component)var24);
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var43 = var42.isMaximumSizeSet();
    var42.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var48 = var42.getTransferHandler();
    boolean var49 = var42.hasFocus();
    javax.swing.event.AncestorListener[] var50 = var42.getAncestorListeners();
    java.awt.Dimension var51 = var42.getMinimumSize();
    bierse.view.RunningMessagePanel var55 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var56 = var55.getPreferredSize();
    java.awt.Dimension var57 = var55.getMaximumSize();
    var55.disable();
    var42.putClientProperty((java.lang.Object)100, (java.lang.Object)var55);
    javax.swing.InputVerifier var60 = var55.getInputVerifier();
    bierse.view.RunningMessagePanel var64 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var65 = var64.isMaximumSizeSet();
    var64.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var64.invalidate();
    java.awt.Dimension var71 = var64.getPreferredSize();
    int var72 = var64.getWidth();
    java.awt.Component var73 = var55.add("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var64);
    java.awt.Rectangle var74 = var64.getVisibleRect();
    var24.setBounds(var74);
    var24.list();
    boolean var79 = var24.inside(996, 13);
    int var80 = var24.getStringHeight();
    java.awt.LayoutManager var81 = var24.getLayout();
    java.lang.Object var82 = var24.getTreeLock();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test317() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test317");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    boolean var5 = var2.isEnabled();
    javax.swing.JRootPane var6 = var2.getRootPane();
    var2.requestFocus();
    int var10 = var2.getBaseline(0, 12);
    var2.validate();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", 1, 24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));

  }

  public void test318() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test318");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var8 = var7.getPreferredSize();
    javax.swing.JPopupMenu var9 = var7.getComponentPopupMenu();
    java.awt.Rectangle var10 = var7.bounds();
    var2.computeVisibleRect(var10);
    java.awt.event.ComponentListener[] var12 = var2.getComponentListeners();
    java.awt.Container var13 = var2.getFocusCycleRootAncestor();
    java.awt.Font var14 = var2.getFont();
    int var15 = var2.getHeight();
    bierse.view.RunningMessagePanel var18 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var19 = var18.isMaximumSizeSet();
    var18.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var18.invalidate();
    java.awt.Dimension var25 = var18.getPreferredSize();
    var18.show(false);
    boolean var28 = var18.isMaximumSizeSet();
    var18.firePropertyChange("PanelUI", 10L, 100L);
    boolean var33 = var18.isFocusTraversalPolicySet();
    boolean var34 = var18.requestFocusInWindow();
    javax.swing.InputVerifier var35 = var18.getInputVerifier();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var39 = var38.getPreferredSize();
    boolean var42 = var38.contains(10, 1);
    var38.setFocusTraversalPolicyProvider(false);
    float var45 = var38.getAlignmentX();
    java.awt.Component.BaselineResizeBehavior var46 = var38.getBaselineResizeBehavior();
    java.awt.dnd.DropTarget var47 = var38.getDropTarget();
    var38.layout();
    var38.setDebugGraphicsOptions(996);
    java.awt.Graphics var51 = var38.getGraphics();
    var18.update(var51);
    var2.update(var51);
    boolean var54 = var2.isOptimizedDrawingEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);

  }

  public void test319() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test319");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var9 = var2.location();
    var2.setAlignmentX(0.5f);
    var2.removeNotify();
    java.awt.event.FocusListener[] var13 = var2.getFocusListeners();
    var2.disable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test320() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test320");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    java.awt.image.ColorModel var4 = var2.getColorModel();
    java.beans.PropertyChangeListener[] var5 = var2.getPropertyChangeListeners();
    int var6 = var2.getHeight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);

  }

  public void test321() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test321");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("", 12);
    java.util.Locale var3 = var2.getLocale();
    int var4 = var2.getHeight();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var8 = var7.isMaximumSizeSet();
    var7.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var13 = var7.getTransferHandler();
    boolean var14 = var7.hasFocus();
    javax.swing.event.AncestorListener[] var15 = var7.getAncestorListeners();
    java.awt.Dimension var16 = var7.getMinimumSize();
    boolean var17 = var7.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var21 = var20.isMaximumSizeSet();
    var20.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var26 = var20.getTransferHandler();
    boolean var27 = var20.hasFocus();
    var20.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var30 = var20.getPreferredSize();
    java.awt.Dimension var31 = var7.getSize(var30);
    java.awt.Dimension var32 = var2.getSize(var30);
    java.awt.GraphicsConfiguration var33 = var2.getGraphicsConfiguration();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (short)(-1), (short)0);
    var2.list();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);

  }

  public void test322() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test322");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    java.awt.peer.ComponentPeer var6 = var2.getPeer();
    java.awt.Dimension var7 = var2.preferredSize();
    boolean var8 = var2.isPreferredSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test323() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test323");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    bierse.view.RunningMessagePanel var6 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var7 = var6.isMaximumSizeSet();
    boolean var8 = var6.isOpaque();
    java.awt.event.HierarchyListener[] var9 = var6.getHierarchyListeners();
    int var10 = var6.countComponents();
    java.awt.event.HierarchyBoundsListener[] var11 = var6.getHierarchyBoundsListeners();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    boolean var16 = var14.isOpaque();
    java.awt.event.HierarchyListener[] var17 = var14.getHierarchyListeners();
    int var18 = var14.getWidth();
    java.awt.event.ContainerListener[] var19 = var14.getContainerListeners();
    java.awt.Dimension var20 = var14.getMaximumSize();
    var6.setMinimumSize(var20);
    java.awt.Dimension var22 = var2.getSize(var20);
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var25.repaint(1L, (-1), (-1), 0, 100);
    boolean var32 = var25.isFocusTraversable();
    javax.swing.ActionMap var33 = var25.getActionMap();
    var2.setActionMap(var33);
    boolean var35 = var2.isMaximumSizeSet();
    boolean var36 = var2.isBackgroundSet();
    boolean var37 = var2.isFontSet();
    var2.transferFocus();
    bierse.view.RunningMessagePanel var41 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var41.repaint(1L, (-1), (-1), 0, 100);
    boolean var48 = var41.isFocusTraversable();
    java.beans.PropertyChangeListener[] var49 = var41.getPropertyChangeListeners();
    java.awt.Dimension var50 = var41.getMaximumSize();
    var2.resize(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test324() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test324");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", 12);
    java.awt.Container var3 = var2.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test325() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test325");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    boolean var21 = var15.isValidateRoot();
    java.awt.Insets var22 = var15.getInsets();
    var15.disable();
    boolean var24 = var15.isShowing();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    boolean var29 = var27.isOpaque();
    java.awt.event.HierarchyListener[] var30 = var27.getHierarchyListeners();
    java.awt.peer.ComponentPeer var31 = var27.getPeer();
    var27.setAutoscrolls(false);
    int var34 = var27.getX();
    java.util.Locale var35 = var27.getLocale();
    var15.setLocale(var35);
    boolean var39 = var15.inside(100, 14);
    var15.setToolTipText("hi!");
    javax.swing.InputMap var42 = var15.getInputMap();
    java.awt.dnd.DropTarget var43 = var15.getDropTarget();
    javax.swing.event.AncestorListener[] var44 = var15.getAncestorListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test326() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test326");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var8 = var7.getPreferredSize();
    boolean var11 = var7.contains(10, 1);
    java.awt.im.InputMethodRequests var12 = var7.getInputMethodRequests();
    java.awt.Font var13 = var7.getFont();
    var2.setFont(var13);
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", 'a', '#');
    var2.resetKeyboardActions();
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var23 = var22.isFocusTraversable();
    java.awt.event.HierarchyListener[] var24 = var22.getHierarchyListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var28 = var27.getPreferredSize();
    boolean var31 = var27.contains(10, 1);
    java.awt.im.InputMethodRequests var32 = var27.getInputMethodRequests();
    boolean var35 = var27.inside((-1), 100);
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var39 = var38.getPreferredSize();
    boolean var42 = var38.contains(10, 1);
    var38.setAlignmentX((-1.0f));
    java.awt.Point var45 = var38.getLocation();
    java.awt.Point var46 = var27.getLocation(var45);
    java.awt.Component var47 = var22.findComponentAt(var46);
    java.awt.Component var48 = var2.findComponentAt(var46);
    bierse.view.RunningMessagePanel var51 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var52 = var51.getPreferredSize();
    boolean var55 = var51.contains(10, 1);
    boolean var56 = var51.isFocusTraversalPolicySet();
    var51.enable();
    java.awt.Color var58 = var51.getForeground();
    java.awt.Dimension var59 = var51.getSize();
    java.awt.Dimension var60 = var2.getSize(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test327() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test327");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    java.awt.event.ContainerListener[] var7 = var2.getContainerListeners();
    java.awt.Dimension var8 = var2.getMaximumSize();
    java.awt.GraphicsConfiguration var9 = var2.getGraphicsConfiguration();
    java.awt.Dimension var10 = var2.getMaximumSize();
    int var13 = var2.getBaseline(32767, 24);
    var2.invalidate();
    var2.setIgnoreRepaint(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));

  }

  public void test328() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test328");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    java.awt.Font var9 = var2.getFont();
    java.awt.Cursor var10 = var2.getCursor();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var14 = var13.getPreferredSize();
    var2.resize(var14);
    var2.firePropertyChange("PanelUI", 24, 1);
    java.awt.Cursor var20 = var2.getCursor();
    java.awt.Toolkit var21 = var2.getToolkit();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test329() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test329");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    var11.transferFocus();
    var11.setToolTipText("");
    java.awt.event.InputMethodListener[] var31 = var11.getInputMethodListeners();
    boolean var32 = var11.isFocusTraversable();
    var11.layout();
    java.awt.LayoutManager var34 = var11.getLayout();
    java.awt.Dimension var35 = var11.getMinimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test330() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test330");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    javax.swing.event.ListDataListener[] var1 = var0.getListDataListeners();
    bierse.view.RunningMessagePanel var4 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var4.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var11 = var4.location();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    var14.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var20 = var14.getTransferHandler();
    boolean var21 = var14.hasFocus();
    javax.swing.event.AncestorListener[] var22 = var14.getAncestorListeners();
    java.awt.Dimension var23 = var14.getMinimumSize();
    var4.resize(var23);
    int var25 = var0.getIndexOf((java.lang.Object)var23);
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var29 = var28.getPreferredSize();
    boolean var32 = var28.contains(10, 1);
    java.awt.im.InputMethodRequests var33 = var28.getInputMethodRequests();
    var28.revalidate();
    java.awt.event.HierarchyListener[] var35 = var28.getHierarchyListeners();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var39 = var38.isMaximumSizeSet();
    boolean var40 = var38.isOpaque();
    java.awt.event.HierarchyListener[] var41 = var38.getHierarchyListeners();
    java.awt.peer.ComponentPeer var42 = var38.getPeer();
    var38.transferFocusDownCycle();
    var38.transferFocusUpCycle();
    java.awt.Dimension var45 = var38.minimumSize();
    var28.setPreferredSize(var45);
    java.awt.event.MouseWheelListener[] var47 = var28.getMouseWheelListeners();
    var0.addElement((java.lang.Object)var28);
    java.awt.Container var49 = var28.getTopLevelAncestor();
    boolean var50 = var28.isFocusTraversable();
    java.awt.event.FocusListener[] var51 = var28.getFocusListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test331() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test331");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.countComponents();
    java.awt.event.HierarchyBoundsListener[] var7 = var2.getHierarchyBoundsListeners();
    boolean var9 = var2.areFocusTraversalKeysSet(1);
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var13 = var12.getPreferredSize();
    javax.swing.JPopupMenu var14 = var12.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var18 = var17.getPreferredSize();
    javax.swing.JPopupMenu var19 = var17.getComponentPopupMenu();
    java.awt.Rectangle var20 = var17.bounds();
    var12.computeVisibleRect(var20);
    var2.setBounds(var20);
    boolean var23 = var2.isMaximumSizeSet();
    var2.transferFocusBackward();
    java.awt.Insets var25 = var2.getInsets();
    boolean var26 = var2.isPaintingForPrint();
    bierse.view.RunningMessagePanel var29 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var30 = var29.getPreferredSize();
    boolean var33 = var29.contains(10, 1);
    java.awt.im.InputMethodRequests var34 = var29.getInputMethodRequests();
    boolean var37 = var29.inside((-1), 100);
    bierse.view.RunningMessagePanel var40 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var41 = var40.getPreferredSize();
    boolean var44 = var40.contains(10, 1);
    var40.setAlignmentX((-1.0f));
    java.awt.Point var47 = var40.getLocation();
    java.awt.Point var48 = var29.getLocation(var47);
    boolean var51 = var29.contains(100, 0);
    bierse.view.RunningMessagePanel var54 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var55 = var54.isMaximumSizeSet();
    boolean var56 = var54.isOpaque();
    javax.swing.InputMap var57 = var54.getInputMap();
    java.lang.String var58 = var54.getName();
    var54.setFocusTraversalPolicyProvider(true);
    bierse.view.RunningMessagePanel var63 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var63.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var70 = var63.location();
    java.awt.Component var71 = var54.findComponentAt(var70);
    java.awt.Dimension var72 = var54.minimumSize();
    var29.setMaximumSize(var72);
    java.lang.Object var74 = var2.getClientProperty((java.lang.Object)var29);
    java.awt.Container var75 = var2.getFocusCycleRootAncestor();
    var2.revalidate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);

  }

  public void test332() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test332");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    javax.accessibility.AccessibleContext var11 = var2.getAccessibleContext();
    int var12 = var2.getHeight();
    var2.invalidate();
    java.awt.Container var14 = var2.getTopLevelAncestor();
    java.awt.Insets var15 = var2.getInsets();
    boolean var16 = var2.isCursorSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test333() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test333");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    bierse.view.RunningMessagePanel var6 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var7 = var6.isMaximumSizeSet();
    boolean var8 = var6.isOpaque();
    java.awt.event.HierarchyListener[] var9 = var6.getHierarchyListeners();
    int var10 = var6.countComponents();
    java.awt.event.HierarchyBoundsListener[] var11 = var6.getHierarchyBoundsListeners();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    boolean var16 = var14.isOpaque();
    java.awt.event.HierarchyListener[] var17 = var14.getHierarchyListeners();
    int var18 = var14.getWidth();
    java.awt.event.ContainerListener[] var19 = var14.getContainerListeners();
    java.awt.Dimension var20 = var14.getMaximumSize();
    var6.setMinimumSize(var20);
    java.awt.Dimension var22 = var2.getSize(var20);
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var25.repaint(1L, (-1), (-1), 0, 100);
    boolean var32 = var25.isFocusTraversable();
    javax.swing.ActionMap var33 = var25.getActionMap();
    var2.setActionMap(var33);
    boolean var35 = var2.isMaximumSizeSet();
    boolean var36 = var2.isBackgroundSet();
    boolean var37 = var2.isFontSet();
    java.awt.Container var38 = var2.getFocusCycleRootAncestor();
    javax.swing.plaf.PanelUI var39 = var2.getUI();
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var43 = var42.isMaximumSizeSet();
    var42.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var48 = var42.getTransferHandler();
    boolean var49 = var42.hasFocus();
    javax.swing.event.AncestorListener[] var50 = var42.getAncestorListeners();
    javax.accessibility.AccessibleContext var51 = var42.getAccessibleContext();
    int var52 = var42.getHeight();
    var42.invalidate();
    var42.setOpaque(false);
    java.awt.Insets var56 = var42.insets();
    java.awt.Insets var57 = var2.getInsets(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test334() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test334");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    java.awt.Component var11 = var2.getComponentAt(0, 0);
    java.awt.Dimension var12 = var2.minimumSize();
    boolean var13 = var2.isFocusable();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var17 = var16.getPreferredSize();
    javax.swing.JPopupMenu var18 = var16.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var22 = var21.getPreferredSize();
    javax.swing.JPopupMenu var23 = var21.getComponentPopupMenu();
    java.awt.Rectangle var24 = var21.bounds();
    var16.computeVisibleRect(var24);
    boolean var26 = var16.isManagingFocus();
    int var27 = var16.getHeight();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var31 = var30.isMaximumSizeSet();
    var30.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var36 = var30.getTransferHandler();
    boolean var37 = var30.hasFocus();
    javax.swing.event.AncestorListener[] var38 = var30.getAncestorListeners();
    java.awt.Dimension var39 = var30.getMinimumSize();
    boolean var40 = var30.isFocusTraversalPolicySet();
    var2.add((java.awt.Component)var16, (java.lang.Object)var30);
    boolean var42 = var2.isCursorSet();
    var2.setAlignmentY(1.0f);
    var2.requestFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test335() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test335");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.revalidate();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var9 = var8.isMaximumSizeSet();
    var8.layout();
    var8.invalidate();
    var2.setNextFocusableComponent((java.awt.Component)var8);
    boolean var13 = var2.isValidateRoot();
    var2.show();
    var2.layout();
    java.awt.Container var16 = var2.getFocusCycleRootAncestor();
    var2.updateUI();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test336() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test336");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    javax.swing.InputMap var5 = var2.getInputMap();
    java.lang.String var6 = var2.getName();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var10 = var9.isMaximumSizeSet();
    var9.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var15 = var9.getTransferHandler();
    boolean var16 = var9.hasFocus();
    var9.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var19 = var9.getPreferredSize();
    java.awt.ComponentOrientation var20 = var9.getComponentOrientation();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var24 = var23.isMaximumSizeSet();
    var23.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var29 = var23.getTransferHandler();
    boolean var30 = var23.hasFocus();
    javax.swing.event.AncestorListener[] var31 = var23.getAncestorListeners();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var35 = var34.isMaximumSizeSet();
    var34.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var40 = var34.getTransferHandler();
    boolean var41 = var34.hasFocus();
    var34.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var44 = var34.getPreferredSize();
    java.awt.ComponentOrientation var45 = var34.getComponentOrientation();
    var9.add((java.awt.Component)var23, (java.lang.Object)var34);
    boolean var47 = var34.isDoubleBuffered();
    var34.setEnabled(true);
    boolean var50 = var2.isAncestorOf((java.awt.Component)var34);
    java.awt.image.ColorModel var51 = var2.getColorModel();
    java.awt.Dimension var52 = var2.getPreferredSize();
    var2.setFocusTraversalKeysEnabled(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test337() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test337");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    int var12 = var2.getDebugGraphicsOptions();
    java.awt.Component var15 = var2.locate(24, 100);
    bierse.view.RunningMessagePanel var18 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var19 = var18.getPreferredSize();
    boolean var22 = var18.contains(10, 1);
    java.awt.im.InputMethodRequests var23 = var18.getInputMethodRequests();
    java.awt.event.FocusListener[] var24 = var18.getFocusListeners();
    java.awt.Font var25 = var18.getFont();
    javax.swing.plaf.PanelUI var26 = var18.getUI();
    var2.setUI(var26);
    java.awt.Dimension var28 = var2.getSize();
    var2.setAlignmentX(0.0f);
    java.awt.image.ColorModel var31 = var2.getColorModel();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var35 = var34.isMaximumSizeSet();
    boolean var36 = var34.isOpaque();
    javax.swing.InputMap var37 = var34.getInputMap();
    java.lang.String var38 = var34.getName();
    bierse.view.RunningMessagePanel var41 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var42 = var41.isMaximumSizeSet();
    var41.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var47 = var41.getTransferHandler();
    boolean var48 = var41.hasFocus();
    var41.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var51 = var41.getPreferredSize();
    java.awt.ComponentOrientation var52 = var41.getComponentOrientation();
    bierse.view.RunningMessagePanel var55 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var56 = var55.isMaximumSizeSet();
    var55.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var61 = var55.getTransferHandler();
    boolean var62 = var55.hasFocus();
    javax.swing.event.AncestorListener[] var63 = var55.getAncestorListeners();
    bierse.view.RunningMessagePanel var66 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var67 = var66.isMaximumSizeSet();
    var66.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var72 = var66.getTransferHandler();
    boolean var73 = var66.hasFocus();
    var66.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var76 = var66.getPreferredSize();
    java.awt.ComponentOrientation var77 = var66.getComponentOrientation();
    var41.add((java.awt.Component)var55, (java.lang.Object)var66);
    boolean var79 = var66.isDoubleBuffered();
    var66.setEnabled(true);
    boolean var82 = var34.isAncestorOf((java.awt.Component)var66);
    java.awt.GraphicsConfiguration var83 = var34.getGraphicsConfiguration();
    boolean var84 = var34.isPaintingTile();
    bierse.view.RunningMessagePanel var87 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var88 = var87.isMaximumSizeSet();
    var87.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var93 = var87.getTransferHandler();
    java.awt.Component var96 = var87.getComponentAt(0, 0);
    java.awt.Dimension var97 = var87.minimumSize();
    var2.putClientProperty((java.lang.Object)var34, (java.lang.Object)var97);
    var34.doLayout();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test338() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test338");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    javax.swing.InputMap var5 = var2.getInputMap();
    java.beans.PropertyChangeListener[] var7 = var2.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var8 = var2.getComponentOrientation();
    var2.transferFocusBackward();
    boolean var10 = var2.isFocusTraversalPolicyProvider();
    var2.disable();
    boolean var12 = var2.isFocusable();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=java.awt.Dimension[width=10,height=10],preferredSize=]", 15, (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test339() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test339");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.Insets var7 = var2.getInsets();
    javax.swing.JToolTip var8 = var2.createToolTip();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var17 = var11.getTransferHandler();
    boolean var18 = var11.hasFocus();
    javax.swing.event.AncestorListener[] var19 = var11.getAncestorListeners();
    var11.enable(false);
    int var22 = var8.getComponentZOrder((java.awt.Component)var11);
    java.awt.Container var23 = var11.getFocusCycleRootAncestor();
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var27 = var26.isMaximumSizeSet();
    var26.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var26.invalidate();
    java.awt.Dimension var33 = var26.getPreferredSize();
    var26.show(false);
    boolean var36 = var26.isMaximumSizeSet();
    bierse.view.RunningMessagePanel var39 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var40 = var39.isMaximumSizeSet();
    var39.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var45 = var39.getTransferHandler();
    boolean var46 = var39.hasFocus();
    javax.swing.event.AncestorListener[] var47 = var39.getAncestorListeners();
    var39.enable(false);
    java.awt.Dimension var50 = var39.minimumSize();
    java.awt.Dimension var51 = var39.minimumSize();
    java.awt.Dimension var52 = var26.getSize(var51);
    var11.setPreferredSize(var51);
    java.awt.Insets var54 = var11.getInsets();
    float var55 = var11.getAlignmentX();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0.5f);

  }

  public void test340() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test340");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var3 = var2.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var6 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var6.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var13 = var6.location();
    java.awt.Component var14 = var2.findComponentAt(var13);
    var2.setEnabled(true);
    var2.show();
    float var18 = var2.getAlignmentY();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var22 = var21.getPreferredSize();
    boolean var25 = var21.contains(10, 1);
    java.awt.im.InputMethodRequests var26 = var21.getInputMethodRequests();
    boolean var27 = var21.getInheritsPopupMenu();
    java.awt.Dimension var28 = var21.getSize();
    java.awt.Dimension var29 = var2.getSize(var28);
    java.awt.Point var30 = var2.getMousePosition();
    var2.layout();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);

  }

  public void test341() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test341");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    java.awt.event.ContainerListener[] var7 = var2.getContainerListeners();
    java.awt.Dimension var8 = var2.getMaximumSize();
    boolean var9 = var2.isRequestFocusEnabled();
    boolean var10 = var2.isCursorSet();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    boolean var16 = var14.isOpaque();
    java.beans.PropertyChangeListener[] var17 = var14.getPropertyChangeListeners();
    var14.setOpaque(true);
    java.awt.Component var20 = var2.add("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var14);
    var14.enable();
    java.awt.dnd.DropTarget var22 = var14.getDropTarget();
    java.awt.Cursor var23 = var14.getCursor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test342() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test342");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    var11.transferFocus();
    var11.setToolTipText("");
    boolean var33 = var11.contains((-1), 12);
    var11.firePropertyChange("", 1.0f, 10.0f);
    java.awt.event.InputMethodListener[] var38 = var11.getInputMethodListeners();
    var11.removeAll();
    java.util.Locale var40 = var11.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test343() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test343");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    javax.swing.JRootPane var13 = var2.getRootPane();
    var2.setRequestFocusEnabled(false);
    java.awt.Dimension var16 = var2.preferredSize();
    var2.setDebugGraphicsOptions((-1));
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isMaximumSizeSet();
    var21.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var27 = var21.getTransferHandler();
    boolean var28 = var21.hasFocus();
    var21.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var31 = var21.getPreferredSize();
    java.awt.ComponentOrientation var32 = var21.getComponentOrientation();
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var36 = var35.isMaximumSizeSet();
    var35.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var41 = var35.getTransferHandler();
    boolean var42 = var35.hasFocus();
    javax.swing.event.AncestorListener[] var43 = var35.getAncestorListeners();
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var47 = var46.isMaximumSizeSet();
    var46.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var52 = var46.getTransferHandler();
    boolean var53 = var46.hasFocus();
    var46.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var56 = var46.getPreferredSize();
    java.awt.ComponentOrientation var57 = var46.getComponentOrientation();
    var21.add((java.awt.Component)var35, (java.lang.Object)var46);
    java.awt.Component var60 = var2.add((java.awt.Component)var21, 0);
    java.awt.event.FocusListener[] var61 = var60.getFocusListeners();
    var60.transferFocusBackward();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test344() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test344");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    var2.invalidate();
    java.awt.event.FocusListener[] var6 = var2.getFocusListeners();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var10 = var9.isMaximumSizeSet();
    var9.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var15 = var9.getTransferHandler();
    boolean var16 = var9.hasFocus();
    var9.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var19 = var9.getPreferredSize();
    java.awt.ComponentOrientation var20 = var9.getComponentOrientation();
    var9.transferFocus();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    var24.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var30 = var24.getTransferHandler();
    boolean var31 = var24.hasFocus();
    javax.swing.event.AncestorListener[] var32 = var24.getAncestorListeners();
    java.awt.Dimension var33 = var24.getMinimumSize();
    boolean var34 = var24.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    var37.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var47 = var37.getPreferredSize();
    java.awt.Dimension var48 = var24.getSize(var47);
    var9.setSize(var47);
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var53 = var52.getPreferredSize();
    boolean var56 = var52.contains(10, 1);
    java.awt.Insets var57 = var52.getInsets();
    javax.swing.JToolTip var58 = var52.createToolTip();
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var62 = var61.isMaximumSizeSet();
    var61.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var67 = var61.getTransferHandler();
    boolean var68 = var61.hasFocus();
    javax.swing.event.AncestorListener[] var69 = var61.getAncestorListeners();
    var61.enable(false);
    int var72 = var58.getComponentZOrder((java.awt.Component)var61);
    boolean var73 = var58.requestFocusInWindow();
    boolean var74 = var58.isOptimizedDrawingEnabled();
    var2.add((java.awt.Component)var9, (java.lang.Object)var58);
    javax.swing.JRootPane var76 = var9.getRootPane();
    var9.enable(true);
    java.awt.event.HierarchyBoundsListener[] var79 = var9.getHierarchyBoundsListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test345() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test345");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    java.awt.Rectangle var5 = var2.bounds();
    var2.setSize(0, 24);
    int var9 = var2.getStringHeight();
    boolean var10 = var2.isLightweight();
    var2.setVerifyInputWhenFocusTarget(true);
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var16 = var15.isMaximumSizeSet();
    boolean var17 = var15.isOpaque();
    java.awt.event.HierarchyListener[] var18 = var15.getHierarchyListeners();
    int var19 = var15.getWidth();
    int var20 = var15.countComponents();
    var15.enable(false);
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    var25.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var31 = var25.getTransferHandler();
    boolean var32 = var25.hasFocus();
    var25.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var35 = var25.getPreferredSize();
    java.awt.ComponentOrientation var36 = var25.getComponentOrientation();
    java.lang.String var37 = var25.getName();
    var25.repaint();
    bierse.view.RunningMessagePanel var41 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var42 = var41.isMaximumSizeSet();
    var41.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var47 = var41.getTransferHandler();
    boolean var48 = var41.hasFocus();
    var41.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var51 = var41.getPreferredSize();
    java.awt.GraphicsConfiguration var52 = var41.getGraphicsConfiguration();
    var41.firePropertyChange("", 1L, 10L);
    java.awt.Component var59 = var41.findComponentAt((-1), 996);
    java.awt.Point var60 = var41.getLocation();
    var25.setLocation(var60);
    var15.setLocation(var60);
    boolean var63 = var2.contains(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test346() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test346");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    var11.setName("PanelUI");
    var11.enable(true);
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var35 = var34.isMaximumSizeSet();
    var34.layout();
    var34.invalidate();
    java.awt.event.FocusListener[] var38 = var34.getFocusListeners();
    javax.swing.plaf.PanelUI var39 = var34.getUI();
    var11.setUI(var39);
    bierse.view.RunningMessagePanel var43 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var44 = var43.isMaximumSizeSet();
    var43.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var49 = var43.getTransferHandler();
    boolean var50 = var43.hasFocus();
    var43.setVerifyInputWhenFocusTarget(false);
    bierse.view.RunningMessagePanel var55 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var56 = var55.isMaximumSizeSet();
    boolean var57 = var55.isOpaque();
    javax.swing.InputMap var58 = var55.getInputMap();
    java.beans.PropertyChangeListener[] var60 = var55.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var61 = var55.getComponentOrientation();
    var43.applyComponentOrientation(var61);
    var11.applyComponentOrientation(var61);
    var11.setEnabled(true);
    bierse.view.RunningMessagePanel var69 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var69.transferFocus();
    var69.show();
    float var72 = var69.getAlignmentX();
    var69.repaint(0L, 10, 0, 10, (-1));
    boolean var79 = var69.isEnabled();
    java.lang.Object var80 = var69.getTreeLock();
    java.lang.String var81 = var69.toString();
    java.beans.PropertyChangeListener[] var82 = var69.getPropertyChangeListeners();
    java.awt.Component var83 = var11.add("", (java.awt.Component)var69);
    java.awt.ComponentOrientation var84 = var69.getComponentOrientation();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var81,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var81.equals("bierse.view.RunningMessagePanel[,0,0,0var81,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test347() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test347");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    java.awt.Component var30 = var11.locate(24, 1);
    var11.setVisible(true);
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    var35.reshape(100, 100, 1, 0);
    java.awt.Dimension var41 = var35.getMaximumSize();
    var11.remove((java.awt.Component)var35);
    javax.swing.KeyStroke[] var43 = var11.getRegisteredKeyStrokes();
    var11.setAlignmentX(1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test348() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test348");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    var2.enable(false);
    java.awt.Dimension var13 = var2.minimumSize();
    java.awt.GraphicsConfiguration var14 = var2.getGraphicsConfiguration();
    java.awt.event.MouseMotionListener[] var15 = var2.getMouseMotionListeners();
    var2.setFocusTraversalKeysEnabled(false);
    java.awt.im.InputMethodRequests var18 = var2.getInputMethodRequests();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test349() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test349");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Dimension var4 = var2.getMaximumSize();
    var2.repaint();
    var2.disable();
    var2.enable();
    java.lang.String var8 = var2.getUIClassID();
    java.awt.event.InputMethodListener[] var9 = var2.getInputMethodListeners();
    var2.enable();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var14 = var13.isMaximumSizeSet();
    var13.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var19 = var13.getTransferHandler();
    boolean var20 = var13.hasFocus();
    javax.swing.event.AncestorListener[] var21 = var13.getAncestorListeners();
    java.awt.Dimension var22 = var13.getMinimumSize();
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var27 = var26.getPreferredSize();
    java.awt.Dimension var28 = var26.getMaximumSize();
    var26.disable();
    var13.putClientProperty((java.lang.Object)100, (java.lang.Object)var26);
    javax.swing.InputVerifier var31 = var26.getInputVerifier();
    java.awt.dnd.DropTarget var32 = var26.getDropTarget();
    java.awt.FocusTraversalPolicy var33 = var26.getFocusTraversalPolicy();
    var26.list();
    int var35 = var2.getComponentZOrder((java.awt.Component)var26);
    boolean var36 = var2.isValid();
    boolean var37 = var2.getVerifyInputWhenFocusTarget();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "PanelUI"+ "'", var8.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);

  }

  public void test350() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test350");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    javax.swing.InputMap var5 = var2.getInputMap();
    java.beans.PropertyChangeListener[] var7 = var2.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var8 = var2.getComponentOrientation();
    var2.transferFocusBackward();
    boolean var10 = var2.isValid();
    int var13 = var2.getBaseline(15, 11);
    boolean var14 = var2.isEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test351() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test351");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    java.awt.Font var9 = var2.getFont();
    var2.enable();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var14 = var13.isMaximumSizeSet();
    var13.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var19 = var13.getTransferHandler();
    boolean var20 = var13.hasFocus();
    javax.swing.event.AncestorListener[] var21 = var13.getAncestorListeners();
    java.awt.Dimension var22 = var13.getMinimumSize();
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var27 = var26.getPreferredSize();
    java.awt.Dimension var28 = var26.getMaximumSize();
    var26.disable();
    var13.putClientProperty((java.lang.Object)100, (java.lang.Object)var26);
    java.awt.image.VolatileImage var33 = var26.createVolatileImage(100, 24);
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var37 = var36.getPreferredSize();
    var26.setMinimumSize(var37);
    boolean var39 = var26.isValid();
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var43 = var42.getPreferredSize();
    boolean var46 = var42.contains(10, 1);
    java.awt.im.InputMethodRequests var47 = var42.getInputMethodRequests();
    boolean var50 = var42.inside((-1), 100);
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var54 = var53.getPreferredSize();
    boolean var57 = var53.contains(10, 1);
    var53.setAlignmentX((-1.0f));
    java.awt.Point var60 = var53.getLocation();
    java.awt.Point var61 = var42.getLocation(var60);
    boolean var64 = var42.contains(100, 0);
    var2.add((java.awt.Component)var26, (java.lang.Object)var42);
    var2.setAutoscrolls(false);
    boolean var68 = var2.isDoubleBuffered();
    var2.transferFocusUpCycle();
    boolean var70 = var2.isValidateRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);

  }

  public void test352() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test352");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    boolean var12 = var2.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var16 = var15.isMaximumSizeSet();
    var15.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var21 = var15.getTransferHandler();
    boolean var22 = var15.hasFocus();
    var15.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var25 = var15.getPreferredSize();
    java.awt.Dimension var26 = var2.getSize(var25);
    java.awt.event.ComponentListener[] var27 = var2.getComponentListeners();
    var2.disable();
    bierse.view.RunningMessagePanel var31 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var32 = var31.isMaximumSizeSet();
    boolean var33 = var31.isOpaque();
    java.awt.event.HierarchyListener[] var34 = var31.getHierarchyListeners();
    int var35 = var31.countComponents();
    int var36 = var31.getStringHeight();
    java.awt.Point var37 = var31.location();
    var2.setLocation(var37);
    bierse.view.RunningMessagePanel var41 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.lang.Object var42 = var2.getClientProperty((java.lang.Object)var41);
    var41.enable(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);

  }

  public void test353() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test353");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    java.awt.Font var9 = var2.getFont();
    var2.enable();
    boolean var11 = var2.getIgnoreRepaint();
    boolean var12 = var2.requestFocusInWindow();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var16 = var15.isMaximumSizeSet();
    var15.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var15.invalidate();
    java.awt.Dimension var22 = var15.getPreferredSize();
    var15.show(false);
    boolean var25 = var15.isMaximumSizeSet();
    var15.firePropertyChange("PanelUI", 10L, 100L);
    java.awt.event.HierarchyListener[] var30 = var15.getHierarchyListeners();
    bierse.view.RunningMessagePanel var33 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var34 = var33.isMaximumSizeSet();
    boolean var35 = var33.isOpaque();
    java.awt.event.HierarchyListener[] var36 = var33.getHierarchyListeners();
    java.awt.peer.ComponentPeer var37 = var33.getPeer();
    var33.transferFocus();
    java.lang.String var39 = var33.getToolTipText();
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var43 = var42.isMaximumSizeSet();
    boolean var44 = var42.isOpaque();
    java.beans.PropertyChangeListener[] var45 = var42.getPropertyChangeListeners();
    var42.setOpaque(true);
    java.awt.Insets var48 = var42.insets();
    bierse.view.RunningMessagePanel var51 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var52 = var51.isMaximumSizeSet();
    var51.layout();
    bierse.view.RunningMessagePanel var56 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var57 = var56.isMaximumSizeSet();
    var56.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var62 = var56.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var65 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var66 = var65.getPreferredSize();
    boolean var67 = var65.isPreferredSizeSet();
    var65.enable();
    var65.transferFocusBackward();
    int var70 = var56.getComponentZOrder((java.awt.Component)var65);
    var56.setEnabled(false);
    java.awt.Graphics var73 = var56.getGraphics();
    var51.remove((java.awt.Component)var56);
    bierse.view.RunningMessagePanel var77 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var78 = var77.getPreferredSize();
    boolean var81 = var77.contains(10, 1);
    java.awt.Insets var82 = var77.getInsets();
    javax.swing.JToolTip var83 = var77.createToolTip();
    var77.invalidate();
    var51.remove((java.awt.Component)var77);
    var33.putClientProperty((java.lang.Object)var42, (java.lang.Object)var77);
    boolean var87 = var33.isValid();
    int var88 = var33.getWidth();
    var2.putClientProperty((java.lang.Object)var15, (java.lang.Object)var33);
    java.awt.Dimension var90 = var15.getMinimumSize();
    var15.move(14, 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test354() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test354");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    var2.transferFocus();
    boolean var15 = var2.isDoubleBuffered();
    java.awt.event.MouseMotionListener[] var16 = var2.getMouseMotionListeners();
    var2.requestFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test355() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test355");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    var2.enable();
    var2.transferFocusBackward();
    java.awt.event.MouseListener[] var7 = var2.getMouseListeners();
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var11 = var10.isMaximumSizeSet();
    var10.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var16 = var10.getTransferHandler();
    boolean var17 = var10.hasFocus();
    javax.swing.event.AncestorListener[] var18 = var10.getAncestorListeners();
    java.awt.Dimension var19 = var10.getMinimumSize();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var24 = var23.getPreferredSize();
    java.awt.Dimension var25 = var23.getMaximumSize();
    var23.disable();
    var10.putClientProperty((java.lang.Object)100, (java.lang.Object)var23);
    javax.swing.InputVerifier var28 = var23.getInputVerifier();
    boolean var29 = var23.getInheritsPopupMenu();
    var23.setLocation(0, 100);
    boolean var33 = var23.isFocusTraversalPolicyProvider();
    var23.list();
    javax.swing.event.AncestorListener[] var35 = var23.getAncestorListeners();
    java.awt.Cursor var36 = var23.getCursor();
    int var37 = var23.getY();
    bierse.view.RunningMessagePanel var40 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var40.transferFocus();
    var40.show();
    float var43 = var40.getAlignmentX();
    var40.repaint(0L, 10, 0, 10, (-1));
    boolean var50 = var40.isEnabled();
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var54 = var53.getPreferredSize();
    javax.swing.JPopupMenu var55 = var53.getComponentPopupMenu();
    java.awt.Rectangle var56 = var53.bounds();
    java.awt.Rectangle var57 = var40.getBounds(var56);
    var23.setBounds(var57);
    java.awt.Rectangle var59 = var2.getBounds(var57);
    var2.setSize((-1), 996);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test356() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test356");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.Insets var7 = var2.getInsets();
    javax.swing.JToolTip var8 = var2.createToolTip();
    int var9 = var8.getDebugGraphicsOptions();
    java.awt.peer.ComponentPeer var10 = var8.getPeer();
    javax.swing.event.AncestorListener[] var11 = var8.getAncestorListeners();
    boolean var12 = var8.isOpaque();
    java.awt.event.FocusListener[] var13 = var8.getFocusListeners();
    var8.enableInputMethods(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      javax.swing.InputMap var17 = var8.getInputMap(13);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test357() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test357");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    boolean var21 = var15.isEnabled();
    var15.repaint(100L);
    bierse.view.KeyMapComboBoxModel var24 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var28 = var27.getPreferredSize();
    java.awt.Point var29 = var27.getMousePosition();
    var27.revalidate();
    var27.invalidate();
    int var32 = var24.getIndexOf((java.lang.Object)var27);
    javax.swing.event.ListDataListener[] var33 = var24.getListDataListeners();
    java.lang.Object var35 = var24.getElementAt(0);
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var39 = var38.getPreferredSize();
    boolean var42 = var38.contains(10, 1);
    java.awt.im.InputMethodRequests var43 = var38.getInputMethodRequests();
    java.awt.event.FocusListener[] var44 = var38.getFocusListeners();
    java.awt.Font var45 = var38.getFont();
    java.beans.PropertyChangeListener[] var47 = var38.getPropertyChangeListeners("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    boolean var48 = var38.isValidateRoot();
    java.awt.Toolkit var49 = var38.getToolkit();
    var24.setSelectedItem((java.lang.Object)var38);
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var54 = var53.getPreferredSize();
    var53.doLayout();
    java.awt.event.MouseWheelListener[] var56 = var53.getMouseWheelListeners();
    var53.setDebugGraphicsOptions(12);
    var53.setAutoscrolls(false);
    bierse.view.RunningMessagePanel var63 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var64 = var63.getPreferredSize();
    boolean var65 = var63.isPreferredSizeSet();
    var63.enable();
    javax.accessibility.AccessibleContext var67 = var63.getAccessibleContext();
    var63.setFocusable(false);
    var63.setIgnoreRepaint(false);
    java.awt.event.MouseWheelListener[] var72 = var63.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var75 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var76 = var75.getPreferredSize();
    boolean var79 = var75.contains(10, 1);
    var75.setFocusTraversalPolicyProvider(false);
    float var82 = var75.getAlignmentX();
    java.awt.Component.BaselineResizeBehavior var83 = var75.getBaselineResizeBehavior();
    java.awt.dnd.DropTarget var84 = var75.getDropTarget();
    var75.layout();
    var75.setDebugGraphicsOptions(996);
    java.awt.Graphics var88 = var75.getGraphics();
    var63.printAll(var88);
    var53.update(var88);
    var38.print(var88);
    var15.update(var88);
    var15.firePropertyChange("", 10.0d, 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test358() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test358");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var3 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var4 = var3.isMaximumSizeSet();
    var3.layout();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var9 = var8.isMaximumSizeSet();
    var8.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var14 = var8.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var18 = var17.getPreferredSize();
    boolean var19 = var17.isPreferredSizeSet();
    var17.enable();
    var17.transferFocusBackward();
    int var22 = var8.getComponentZOrder((java.awt.Component)var17);
    var8.setEnabled(false);
    java.awt.Graphics var25 = var8.getGraphics();
    var3.remove((java.awt.Component)var8);
    bierse.view.RunningMessagePanel var29 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var30 = var29.getPreferredSize();
    boolean var33 = var29.contains(10, 1);
    java.awt.Insets var34 = var29.getInsets();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var38 = var37.getPreferredSize();
    java.awt.Point var39 = var37.getMousePosition();
    var37.revalidate();
    java.awt.Component[] var41 = var37.getComponents();
    java.awt.event.KeyListener[] var42 = var37.getKeyListeners();
    var3.putClientProperty((java.lang.Object)var29, (java.lang.Object)var42);
    var0.addElement((java.lang.Object)var29);
    java.lang.Object var45 = var0.getSelectedItem();
    java.lang.Object var47 = var0.getElementAt(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test359() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test359");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", 24);
    java.awt.LayoutManager var3 = var2.getLayout();
    var2.firePropertyChange("PanelUI", (short)10, (short)1);
    javax.swing.ActionMap var8 = var2.getActionMap();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var12 = var11.getPreferredSize();
    javax.swing.JPopupMenu var13 = var11.getComponentPopupMenu();
    java.awt.Rectangle var14 = var11.bounds();
    java.awt.Insets var15 = var11.insets();
    java.awt.Point var16 = var11.location();
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var25 = var19.getTransferHandler();
    boolean var26 = var19.hasFocus();
    javax.swing.event.AncestorListener[] var27 = var19.getAncestorListeners();
    java.awt.Dimension var28 = var19.getMinimumSize();
    bierse.view.RunningMessagePanel var32 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var33 = var32.getPreferredSize();
    java.awt.Dimension var34 = var32.getMaximumSize();
    var32.disable();
    var19.putClientProperty((java.lang.Object)100, (java.lang.Object)var32);
    javax.swing.InputVerifier var37 = var32.getInputVerifier();
    boolean var38 = var32.getInheritsPopupMenu();
    var32.setLocation(0, 100);
    boolean var42 = var32.isFocusTraversalPolicyProvider();
    var32.list();
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var46.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var53 = var46.location();
    java.awt.Font var54 = var46.getFont();
    var32.setFont(var54);
    var11.setFont(var54);
    var11.disable();
    boolean var58 = var2.isFocusCycleRoot((java.awt.Container)var11);
    javax.swing.InputMap var59 = var11.getInputMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test360() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test360");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    java.awt.Rectangle var5 = var2.bounds();
    java.awt.Insets var6 = var2.insets();
    java.awt.Point var7 = var2.location();
    var2.grabFocus();
    boolean var9 = var2.getAutoscrolls();
    boolean var10 = var2.getInheritsPopupMenu();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test361() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test361");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var3 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var4 = var3.getPreferredSize();
    java.awt.Point var5 = var3.getMousePosition();
    var3.revalidate();
    var3.invalidate();
    int var8 = var0.getIndexOf((java.lang.Object)var3);
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var17 = var11.getTransferHandler();
    boolean var18 = var11.hasFocus();
    javax.swing.event.AncestorListener[] var19 = var11.getAncestorListeners();
    java.awt.Dimension var20 = var11.getMinimumSize();
    int var21 = var0.getIndexOf((java.lang.Object)var11);
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    var24.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var24.invalidate();
    int var31 = var24.getHeight();
    var24.setIgnoreRepaint(true);
    var24.grabFocus();
    java.awt.Color var35 = var24.getBackground();
    var0.insertElementAt((java.lang.Object)var24, 10);
    var24.resetKeyboardActions();
    boolean var39 = var24.isValid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test362() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test362");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    boolean var11 = var2.inside(24, 1);
    java.awt.Dimension var12 = var2.size();
    int var13 = var2.getX();
    java.awt.Point var14 = var2.getMousePosition();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test363() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test363");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    boolean var40 = var2.getFocusTraversalKeysEnabled();
    var2.setAlignmentX(100.0f);
    var2.setMessage("");
    java.awt.Container var45 = var2.getFocusCycleRootAncestor();
    int var46 = var2.countComponents();
    javax.swing.TransferHandler var47 = var2.getTransferHandler();
    var2.transferFocusBackward();
    java.awt.Point var49 = var2.location();
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var53 = var52.getPreferredSize();
    javax.swing.JPopupMenu var54 = var52.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var57 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var58 = var57.getPreferredSize();
    javax.swing.JPopupMenu var59 = var57.getComponentPopupMenu();
    java.awt.Rectangle var60 = var57.bounds();
    var52.computeVisibleRect(var60);
    java.awt.Rectangle var62 = var2.getBounds(var60);
    boolean var65 = var2.inside(11, 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test364() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test364");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.setDebugGraphicsOptions(10);
    java.lang.Object var5 = var2.getTreeLock();
    int var6 = var2.getWidth();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var10 = var9.isMaximumSizeSet();
    var9.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var15 = var9.getTransferHandler();
    boolean var16 = var9.hasFocus();
    javax.swing.event.AncestorListener[] var17 = var9.getAncestorListeners();
    java.awt.Dimension var18 = var9.getMinimumSize();
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var23 = var22.getPreferredSize();
    java.awt.Dimension var24 = var22.getMaximumSize();
    var22.disable();
    var9.putClientProperty((java.lang.Object)100, (java.lang.Object)var22);
    javax.swing.InputVerifier var27 = var22.getInputVerifier();
    bierse.view.RunningMessagePanel var31 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var32 = var31.isMaximumSizeSet();
    var31.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var31.invalidate();
    java.awt.Dimension var38 = var31.getPreferredSize();
    int var39 = var31.getWidth();
    java.awt.Component var40 = var22.add("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var31);
    var31.setDebugGraphicsOptions(996);
    java.awt.Dimension var43 = var31.getSize();
    int var44 = var2.getComponentZOrder((java.awt.Component)var31);
    boolean var45 = var31.getIgnoreRepaint();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var49 = var48.isMaximumSizeSet();
    var48.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var54 = var48.getTransferHandler();
    boolean var55 = var48.hasFocus();
    var48.setVerifyInputWhenFocusTarget(false);
    int var58 = var48.getDebugGraphicsOptions();
    java.awt.Component var61 = var48.locate(24, 100);
    bierse.view.RunningMessagePanel var64 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var65 = var64.getPreferredSize();
    boolean var68 = var64.contains(10, 1);
    java.awt.im.InputMethodRequests var69 = var64.getInputMethodRequests();
    java.awt.event.FocusListener[] var70 = var64.getFocusListeners();
    java.awt.Font var71 = var64.getFont();
    javax.swing.plaf.PanelUI var72 = var64.getUI();
    var48.setUI(var72);
    java.awt.Dimension var74 = var48.getSize();
    var48.repaint(10L, 0, 12, 24, 1);
    var48.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (-1L), 0L);
    bierse.view.RunningMessagePanel var87 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var88 = var87.getPreferredSize();
    javax.swing.JPopupMenu var89 = var87.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var92 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var93 = var92.getPreferredSize();
    javax.swing.JPopupMenu var94 = var92.getComponentPopupMenu();
    java.awt.Rectangle var95 = var92.bounds();
    var87.computeVisibleRect(var95);
    var48.repaint(var95);
    java.awt.Rectangle var98 = var31.getBounds(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test365() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test365");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    var2.enable();
    javax.accessibility.AccessibleContext var6 = var2.getAccessibleContext();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var9.transferFocus();
    var9.show();
    float var12 = var9.getAlignmentX();
    var9.repaint(0L, 10, 0, 10, (-1));
    boolean var19 = var9.isEnabled();
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var23 = var22.getPreferredSize();
    javax.swing.JPopupMenu var24 = var22.getComponentPopupMenu();
    java.awt.Rectangle var25 = var22.bounds();
    java.awt.Rectangle var26 = var9.getBounds(var25);
    var2.computeVisibleRect(var26);
    boolean var29 = var2.requestFocus(false);
    bierse.view.RunningMessagePanel var32 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var33 = var32.getPreferredSize();
    boolean var36 = var32.contains(10, 1);
    java.awt.im.InputMethodRequests var37 = var32.getInputMethodRequests();
    boolean var40 = var32.inside((-1), 100);
    bierse.view.RunningMessagePanel var43 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var44 = var43.getPreferredSize();
    boolean var47 = var43.contains(10, 1);
    var43.setAlignmentX((-1.0f));
    java.awt.Point var50 = var43.getLocation();
    java.awt.Point var51 = var32.getLocation(var50);
    bierse.view.RunningMessagePanel var54 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var55 = var54.isMaximumSizeSet();
    boolean var56 = var54.isOpaque();
    java.awt.event.HierarchyListener[] var57 = var54.getHierarchyListeners();
    int var58 = var54.getWidth();
    int var59 = var54.countComponents();
    java.awt.Point var61 = var54.getMousePosition(true);
    var54.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var64 = var54.toString();
    java.awt.Font var65 = var54.getFont();
    bierse.view.RunningMessagePanel var68 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var69 = var68.getPreferredSize();
    boolean var72 = var68.contains(10, 1);
    java.awt.im.InputMethodRequests var73 = var68.getInputMethodRequests();
    boolean var74 = var68.getInheritsPopupMenu();
    java.lang.String var75 = var68.toString();
    java.awt.Rectangle var76 = var68.bounds();
    var54.setBounds(var76);
    java.awt.Rectangle var78 = var32.getBounds(var76);
    java.awt.Rectangle var79 = var2.getBounds(var76);
    boolean var80 = var2.isDoubleBuffered();
    java.lang.String var81 = var2.getName();
    java.awt.Dimension var82 = var2.getMaximumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var64,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var64.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var64,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var75,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var75.equals("bierse.view.RunningMessagePanel[,0,0,0var75,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test366() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test366");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    float var12 = var2.getAlignmentX();
    java.lang.String var13 = var2.getUIClassID();
    var2.setFocusable(false);
    var2.setVerifyInputWhenFocusTarget(false);
    javax.swing.JRootPane var18 = var2.getRootPane();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "PanelUI"+ "'", var13.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test367() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test367");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    int var7 = var2.countComponents();
    java.awt.Point var9 = var2.getMousePosition(true);
    var2.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var12 = var2.toString();
    java.awt.Font var13 = var2.getFont();
    javax.swing.plaf.PanelUI var14 = var2.getUI();
    java.awt.Dimension var15 = var2.getPreferredSize();
    var2.firePropertyChange("", (-1), 1);
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var23 = var22.getPreferredSize();
    java.awt.Dimension var24 = var22.getMaximumSize();
    var22.repaint();
    var22.disable();
    var22.enable();
    java.lang.String var28 = var22.getUIClassID();
    java.awt.event.InputMethodListener[] var29 = var22.getInputMethodListeners();
    var22.enable();
    int var31 = var2.getComponentZOrder((java.awt.Component)var22);
    var2.revalidate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var12,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var12.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var12,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "PanelUI"+ "'", var28.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));

  }

  public void test368() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test368");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    java.awt.event.ContainerListener[] var7 = var2.getContainerListeners();
    java.awt.Dimension var8 = var2.getMaximumSize();
    boolean var9 = var2.isRequestFocusEnabled();
    boolean var10 = var2.isCursorSet();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    boolean var16 = var14.isOpaque();
    java.beans.PropertyChangeListener[] var17 = var14.getPropertyChangeListeners();
    var14.setOpaque(true);
    java.awt.Component var20 = var2.add("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var14);
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var23.repaint(1L, (-1), (-1), 0, 100);
    boolean var30 = var23.isFocusTraversable();
    bierse.view.RunningMessagePanel var33 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var34 = var33.getPreferredSize();
    boolean var37 = var33.contains(10, 1);
    java.awt.im.InputMethodRequests var38 = var33.getInputMethodRequests();
    var33.revalidate();
    var33.firePropertyChange("hi!", (short)100, (short)0);
    var23.setNextFocusableComponent((java.awt.Component)var33);
    bierse.view.RunningMessagePanel var47 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var47.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var54 = var47.location();
    java.awt.Font var55 = var47.getFont();
    var23.setFont(var55);
    bierse.view.RunningMessagePanel var59 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var60 = var59.isMaximumSizeSet();
    boolean var61 = var59.isOpaque();
    java.awt.event.HierarchyListener[] var62 = var59.getHierarchyListeners();
    int var63 = var59.countComponents();
    java.awt.dnd.DropTarget var64 = var59.getDropTarget();
    boolean var65 = var59.isMinimumSizeSet();
    java.awt.Dimension var66 = var59.getSize();
    java.awt.Dimension var67 = var23.getSize(var66);
    int var68 = var23.getWidth();
    bierse.view.RunningMessagePanel var71 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var72 = var71.getPreferredSize();
    boolean var73 = var71.isPreferredSizeSet();
    var71.enable();
    javax.accessibility.AccessibleContext var75 = var71.getAccessibleContext();
    var71.setFocusable(false);
    var71.setIgnoreRepaint(false);
    java.awt.event.MouseWheelListener[] var80 = var71.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var83 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var84 = var83.getPreferredSize();
    boolean var87 = var83.contains(10, 1);
    var83.setFocusTraversalPolicyProvider(false);
    float var90 = var83.getAlignmentX();
    java.awt.Component.BaselineResizeBehavior var91 = var83.getBaselineResizeBehavior();
    java.awt.dnd.DropTarget var92 = var83.getDropTarget();
    var83.layout();
    var83.setDebugGraphicsOptions(996);
    java.awt.Graphics var96 = var83.getGraphics();
    var71.printAll(var96);
    var23.update(var96);
    var2.print(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test369() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test369");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    boolean var21 = var15.getInheritsPopupMenu();
    var15.setLocation(0, 100);
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    javax.swing.event.AncestorListener[] var35 = var27.getAncestorListeners();
    java.awt.Dimension var36 = var27.getMinimumSize();
    bierse.view.RunningMessagePanel var40 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var41 = var40.getPreferredSize();
    java.awt.Dimension var42 = var40.getMaximumSize();
    var40.disable();
    var27.putClientProperty((java.lang.Object)100, (java.lang.Object)var40);
    javax.swing.InputVerifier var45 = var40.getInputVerifier();
    boolean var46 = var40.getInheritsPopupMenu();
    var40.setLocation(0, 100);
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var53 = var52.isMaximumSizeSet();
    var52.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var58 = var52.getTransferHandler();
    boolean var59 = var52.hasFocus();
    javax.swing.event.AncestorListener[] var60 = var52.getAncestorListeners();
    java.awt.Dimension var61 = var52.getMinimumSize();
    boolean var62 = var52.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var65 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var66 = var65.isMaximumSizeSet();
    var65.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var71 = var65.getTransferHandler();
    boolean var72 = var65.hasFocus();
    var65.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var75 = var65.getPreferredSize();
    java.awt.Dimension var76 = var52.getSize(var75);
    var40.setPreferredSize(var76);
    var15.setSize(var76);
    var15.list();
    java.awt.event.HierarchyListener[] var80 = var15.getHierarchyListeners();
    bierse.view.RunningMessagePanel var83 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var84 = var83.getPreferredSize();
    boolean var85 = var83.isPaintingTile();
    var83.transferFocus();
    java.awt.Component var87 = var15.add((java.awt.Component)var83);
    boolean var89 = var83.requestFocus(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);

  }

  public void test370() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test370");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    java.awt.Dimension var9 = var2.getPreferredSize();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var12.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var19 = var12.location();
    java.awt.Point var20 = var2.getLocation(var19);
    var2.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", 1L, 0L);
    var2.setEnabled(false);
    boolean var27 = var2.isFocusOwner();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test371() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test371");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Dimension var4 = var2.getMaximumSize();
    var2.repaint();
    var2.disable();
    var2.enable();
    java.lang.String var8 = var2.getUIClassID();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var17 = var11.getTransferHandler();
    boolean var18 = var11.hasFocus();
    var11.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var21 = var11.getPreferredSize();
    java.awt.ComponentOrientation var22 = var11.getComponentOrientation();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    var25.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var31 = var25.getTransferHandler();
    boolean var32 = var25.hasFocus();
    var25.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var35 = var25.getPreferredSize();
    java.awt.Dimension var36 = var11.getSize(var35);
    java.awt.image.VolatileImage var39 = var11.createVolatileImage((-1), (-1));
    javax.swing.TransferHandler var40 = var11.getTransferHandler();
    java.awt.Dimension var41 = var11.preferredSize();
    var11.firePropertyChange("PanelUI", 'a', '4');
    java.awt.Rectangle var46 = var11.getBounds();
    java.awt.Rectangle var47 = var2.getBounds(var46);
    boolean var48 = var2.isBackgroundSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "PanelUI"+ "'", var8.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);

  }

  public void test372() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test372");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    var2.enable();
    javax.accessibility.AccessibleContext var6 = var2.getAccessibleContext();
    var2.setOpaque(false);
    var2.setRequestFocusEnabled(true);
    boolean var11 = var2.isDoubleBuffered();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    boolean var16 = var14.isOpaque();
    java.awt.event.HierarchyListener[] var17 = var14.getHierarchyListeners();
    java.awt.peer.ComponentPeer var18 = var14.getPeer();
    var14.transferFocusDownCycle();
    var14.transferFocusUpCycle();
    java.awt.Dimension var21 = var14.minimumSize();
    boolean var22 = var14.isVisible();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var25.transferFocus();
    var25.show();
    float var28 = var25.getAlignmentX();
    boolean var31 = var25.contains(0, 24);
    java.awt.Color var32 = var25.getForeground();
    var14.setForeground(var32);
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var37 = var36.isMaximumSizeSet();
    var36.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var42 = var36.getWidth();
    java.awt.Image var45 = var36.createImage(24, 24);
    boolean var46 = var36.getInheritsPopupMenu();
    boolean var47 = var36.isBackgroundSet();
    bierse.view.RunningMessagePanel var50 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var51 = var50.isMaximumSizeSet();
    var50.layout();
    bierse.view.RunningMessagePanel var55 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var56 = var55.isMaximumSizeSet();
    boolean var57 = var55.isOpaque();
    java.awt.event.HierarchyListener[] var58 = var55.getHierarchyListeners();
    int var59 = var55.countComponents();
    java.awt.event.HierarchyBoundsListener[] var60 = var55.getHierarchyBoundsListeners();
    boolean var62 = var55.areFocusTraversalKeysSet(1);
    bierse.view.RunningMessagePanel var65 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var66 = var65.getPreferredSize();
    javax.swing.JPopupMenu var67 = var65.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var70 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var71 = var70.getPreferredSize();
    javax.swing.JPopupMenu var72 = var70.getComponentPopupMenu();
    java.awt.Rectangle var73 = var70.bounds();
    var65.computeVisibleRect(var73);
    var55.setBounds(var73);
    var50.repaint(var73);
    var36.paintImmediately(var73);
    java.util.Locale var78 = var36.getLocale();
    javax.swing.ActionMap var79 = var36.getActionMap();
    var14.setActionMap(var79);
    var2.setActionMap(var79);
    var2.setFocusCycleRoot(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test373() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test373");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    javax.swing.InputVerifier var3 = var2.getInputVerifier();
    var2.setAlignmentY((-1.0f));
    java.awt.Toolkit var6 = var2.getToolkit();
    var2.setFocusCycleRoot(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test374() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test374");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var8 = var7.isMaximumSizeSet();
    var7.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var13 = var7.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var17 = var16.getPreferredSize();
    boolean var18 = var16.isPreferredSizeSet();
    var16.enable();
    var16.transferFocusBackward();
    int var21 = var7.getComponentZOrder((java.awt.Component)var16);
    var7.setEnabled(false);
    java.awt.Graphics var24 = var7.getGraphics();
    var2.remove((java.awt.Component)var7);
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var29 = var28.getPreferredSize();
    boolean var32 = var28.contains(10, 1);
    java.awt.Insets var33 = var28.getInsets();
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var37 = var36.getPreferredSize();
    java.awt.Point var38 = var36.getMousePosition();
    var36.revalidate();
    java.awt.Component[] var40 = var36.getComponents();
    java.awt.event.KeyListener[] var41 = var36.getKeyListeners();
    var2.putClientProperty((java.lang.Object)var28, (java.lang.Object)var41);
    bierse.view.RunningMessagePanel var45 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var46 = var45.getPreferredSize();
    java.awt.Dimension var47 = var45.getMaximumSize();
    java.awt.event.FocusListener[] var48 = var45.getFocusListeners();
    bierse.view.RunningMessagePanel var51 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var52 = var51.getPreferredSize();
    boolean var55 = var51.contains(10, 1);
    java.awt.im.InputMethodRequests var56 = var51.getInputMethodRequests();
    java.awt.Font var57 = var51.getFont();
    var45.setFont(var57);
    var28.setFont(var57);
    boolean var60 = var28.getAutoscrolls();
    java.awt.event.KeyListener[] var61 = var28.getKeyListeners();
    java.awt.image.VolatileImage var64 = var28.createVolatileImage(100, 11);
    var28.reshape(11, 24, 13, 24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);

  }

  public void test375() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test375");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    boolean var16 = var14.isOpaque();
    javax.swing.InputMap var17 = var14.getInputMap();
    java.beans.PropertyChangeListener[] var19 = var14.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var20 = var14.getComponentOrientation();
    var2.applyComponentOrientation(var20);
    java.awt.Dimension var22 = var2.getMinimumSize();
    int var23 = var2.getY();
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var27 = var26.getPreferredSize();
    boolean var30 = var26.contains(10, 1);
    var26.setAlignmentX((-1.0f));
    java.awt.Point var33 = var26.getLocation();
    java.awt.Component var34 = var2.getComponentAt(var33);
    java.awt.Image var37 = var2.createImage((-1), 100);
    java.awt.Insets var38 = var2.insets();
    int var39 = var2.getHeight();
    var2.removeAll();
    int var41 = var2.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);

  }

  public void test376() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test376");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.Font var8 = var2.getFont();
    var2.setMessage("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var14 = var13.isMaximumSizeSet();
    var13.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var19 = var13.getTransferHandler();
    boolean var20 = var13.hasFocus();
    var13.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var23 = var13.getPreferredSize();
    java.awt.GraphicsConfiguration var24 = var13.getGraphicsConfiguration();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    boolean var29 = var27.isOpaque();
    javax.swing.InputMap var30 = var27.getInputMap();
    java.beans.PropertyChangeListener[] var32 = var27.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var33 = var27.getComponentOrientation();
    var13.applyComponentOrientation(var33);
    java.lang.Object var35 = var2.getClientProperty((java.lang.Object)var13);
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var39 = var38.isMaximumSizeSet();
    boolean var40 = var38.isOpaque();
    java.awt.event.HierarchyListener[] var41 = var38.getHierarchyListeners();
    int var42 = var38.getWidth();
    java.awt.Container var43 = var38.getTopLevelAncestor();
    var38.nextFocus();
    boolean var45 = var38.isBackgroundSet();
    java.awt.Point var47 = var38.getMousePosition(true);
    bierse.view.RunningMessagePanel var50 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var51 = var50.getPreferredSize();
    boolean var54 = var50.contains(10, 1);
    var50.setAlignmentX((-1.0f));
    java.awt.Point var57 = var50.getLocation();
    java.awt.Point var58 = var50.getLocation();
    java.awt.Point var59 = var38.getLocation(var58);
    boolean var60 = var38.isMaximumSizeSet();
    bierse.view.RunningMessagePanel var63 = new bierse.view.RunningMessagePanel("hi!", 10);
    java.lang.Object var64 = var63.getTreeLock();
    boolean var65 = var63.isFontSet();
    float var66 = var63.getAlignmentX();
    bierse.view.RunningMessagePanel var69 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var70 = var69.getPreferredSize();
    boolean var71 = var69.isPreferredSizeSet();
    var69.enable();
    javax.accessibility.AccessibleContext var73 = var69.getAccessibleContext();
    var69.setFocusable(false);
    var69.setIgnoreRepaint(false);
    java.awt.event.MouseWheelListener[] var78 = var69.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var81 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var82 = var81.getPreferredSize();
    boolean var85 = var81.contains(10, 1);
    var81.setFocusTraversalPolicyProvider(false);
    float var88 = var81.getAlignmentX();
    java.awt.Component.BaselineResizeBehavior var89 = var81.getBaselineResizeBehavior();
    java.awt.dnd.DropTarget var90 = var81.getDropTarget();
    var81.layout();
    var81.setDebugGraphicsOptions(996);
    java.awt.Graphics var94 = var81.getGraphics();
    var69.printAll(var94);
    var63.paint(var94);
    var38.paint(var94);
    var2.printComponents(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test377() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test377");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    javax.swing.event.ListDataListener[] var1 = var0.getListDataListeners();
    bierse.view.RunningMessagePanel var4 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var4.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var11 = var4.location();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    var14.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var20 = var14.getTransferHandler();
    boolean var21 = var14.hasFocus();
    javax.swing.event.AncestorListener[] var22 = var14.getAncestorListeners();
    java.awt.Dimension var23 = var14.getMinimumSize();
    var4.resize(var23);
    int var25 = var0.getIndexOf((java.lang.Object)var23);
    int var26 = var0.getSize();
    var0.removeAllElements();
    java.lang.Object var29 = var0.getElementAt(996);
    javax.swing.event.ListDataListener[] var30 = var0.getListDataListeners();
    bierse.view.RunningMessagePanel var33 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var33.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var40 = var33.location();
    bierse.view.RunningMessagePanel var43 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var44 = var43.isMaximumSizeSet();
    var43.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var49 = var43.getTransferHandler();
    boolean var50 = var43.hasFocus();
    javax.swing.event.AncestorListener[] var51 = var43.getAncestorListeners();
    java.awt.Dimension var52 = var43.getMinimumSize();
    var33.resize(var52);
    var33.repaint(100L, 1, (-1), 100, 24);
    bierse.view.RunningMessagePanel var62 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var63 = var62.getPreferredSize();
    boolean var66 = var62.contains(10, 1);
    java.awt.Insets var67 = var62.getInsets();
    boolean var68 = var33.isFocusCycleRoot((java.awt.Container)var62);
    java.awt.Point var69 = var33.getMousePosition();
    var33.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (short)100, (short)(-1));
    int var74 = var33.getHeight();
    var0.addElement((java.lang.Object)var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 10);

  }

  public void test378() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test378");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    java.awt.Dimension var9 = var2.getPreferredSize();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var12.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var19 = var12.location();
    java.awt.Point var20 = var2.getLocation(var19);
    boolean var21 = var2.isPaintingTile();
    int var22 = var2.getWidth();
    int var23 = var2.getHeight();
    var2.setInheritsPopupMenu(false);
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=297,maximumSize=,minimumSize=,preferredSize=]", 10L, 10L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);

  }

  public void test379() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test379");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    boolean var10 = var2.inside((-1), 100);
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var14 = var13.getPreferredSize();
    boolean var17 = var13.contains(10, 1);
    var13.setAlignmentX((-1.0f));
    java.awt.Point var20 = var13.getLocation();
    java.awt.Point var21 = var2.getLocation(var20);
    boolean var24 = var2.contains(100, 0);
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    boolean var29 = var27.isOpaque();
    javax.swing.InputMap var30 = var27.getInputMap();
    java.lang.String var31 = var27.getName();
    var27.setFocusTraversalPolicyProvider(true);
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var36.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var43 = var36.location();
    java.awt.Component var44 = var27.findComponentAt(var43);
    java.awt.Dimension var45 = var27.minimumSize();
    var2.setMaximumSize(var45);
    float var47 = var2.getAlignmentX();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.5f);

  }

  public void test380() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test380");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    var11.transferFocus();
    var11.setToolTipText("");
    var11.show();
    var11.removeAll();
    var11.setLocation(24, 0);
    var11.setSize(10, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test381() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test381");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Dimension var4 = var2.getMaximumSize();
    java.awt.Insets var5 = var2.getInsets();
    java.beans.PropertyChangeListener[] var7 = var2.getPropertyChangeListeners("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    boolean var8 = var2.isShowing();
    javax.swing.ActionMap var9 = var2.getActionMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test382() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test382");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    float var5 = var2.getAlignmentX();
    var2.repaint(0L, 10, 0, 10, (-1));
    boolean var12 = var2.isEnabled();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    javax.swing.JPopupMenu var17 = var15.getComponentPopupMenu();
    java.awt.Rectangle var18 = var15.bounds();
    java.awt.Rectangle var19 = var2.getBounds(var18);
    var2.setFocusable(false);
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var25 = var24.getPreferredSize();
    java.awt.Dimension var26 = var24.getMaximumSize();
    var2.setMinimumSize(var26);
    javax.swing.ActionMap var28 = var2.getActionMap();
    java.awt.Image var31 = var2.createImage(11, 11);
    var2.layout();
    var2.show();
    var2.setAlignmentX(0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);

  }

  public void test383() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test383");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    java.awt.dnd.DropTarget var21 = var15.getDropTarget();
    java.awt.FocusTraversalPolicy var22 = var15.getFocusTraversalPolicy();
    var15.list();
    var15.setToolTipText("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    var15.disable();
    java.lang.String var27 = var15.toString();
    java.awt.Dimension var28 = var15.getPreferredSize();
    java.awt.Component.BaselineResizeBehavior var29 = var15.getBaselineResizeBehavior();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var27,invalid,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var27.equals("bierse.view.RunningMessagePanel[,0,0,0var27,invalid,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test384() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test384");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.setDebugGraphicsOptions(10);
    var2.hide();
    var2.resetKeyboardActions();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var9.repaint(1L, (-1), (-1), 0, 100);
    boolean var16 = var9.isFocusTraversable();
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var20 = var19.getPreferredSize();
    boolean var23 = var19.contains(10, 1);
    java.awt.im.InputMethodRequests var24 = var19.getInputMethodRequests();
    var19.revalidate();
    var19.firePropertyChange("hi!", (short)100, (short)0);
    var9.setNextFocusableComponent((java.awt.Component)var19);
    boolean var31 = var9.isFocusable();
    java.awt.event.KeyListener[] var32 = var9.getKeyListeners();
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var35.transferFocus();
    var35.show();
    boolean var38 = var35.isMaximumSizeSet();
    java.awt.Dimension var39 = var35.preferredSize();
    java.awt.Color var40 = var35.getBackground();
    var9.setBackground(var40);
    var2.setForeground(var40);
    java.lang.Object var43 = var2.getTreeLock();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test385() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test385");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.revalidate();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var9 = var8.isMaximumSizeSet();
    var8.layout();
    var8.disable();
    var8.invalidate();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    boolean var17 = var15.isPreferredSizeSet();
    var15.setOpaque(true);
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var23 = var22.isMaximumSizeSet();
    var22.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var28 = var22.getTransferHandler();
    boolean var29 = var22.hasFocus();
    javax.swing.event.AncestorListener[] var30 = var22.getAncestorListeners();
    java.awt.Dimension var31 = var22.getMinimumSize();
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var36 = var35.getPreferredSize();
    java.awt.Dimension var37 = var35.getMaximumSize();
    var35.disable();
    var22.putClientProperty((java.lang.Object)100, (java.lang.Object)var35);
    javax.swing.InputVerifier var40 = var35.getInputVerifier();
    boolean var41 = var35.getInheritsPopupMenu();
    var35.setLocation(0, 100);
    boolean var45 = var35.isFocusTraversalPolicyProvider();
    var35.list();
    bierse.view.RunningMessagePanel var49 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var49.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var56 = var49.location();
    java.awt.Font var57 = var49.getFont();
    var35.setFont(var57);
    java.awt.FontMetrics var59 = var15.getFontMetrics(var57);
    java.awt.FontMetrics var60 = var8.getFontMetrics(var57);
    java.awt.FontMetrics var61 = var2.getFontMetrics(var57);
    java.awt.dnd.DropTarget var62 = var2.getDropTarget();
    java.lang.String var63 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var63,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var63.equals("bierse.view.RunningMessagePanel[,0,0,0var63,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));

  }

  public void test386() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test386");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    boolean var21 = var15.isValidateRoot();
    java.awt.Insets var22 = var15.getInsets();
    boolean var24 = var15.requestFocus(true);
    var15.enable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test387() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test387");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Dimension var4 = var2.getMaximumSize();
    var2.repaint();
    var2.disable();
    var2.enable();
    java.lang.String var8 = var2.getUIClassID();
    java.awt.event.InputMethodListener[] var9 = var2.getInputMethodListeners();
    var2.enable();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    var14.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var20 = var14.getWidth();
    java.awt.Image var23 = var14.createImage(24, 24);
    var14.repaint(0, 24, 10, (-1));
    int var29 = var14.getY();
    bierse.view.RunningMessagePanel var32 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var33 = var32.isMaximumSizeSet();
    boolean var34 = var32.isOpaque();
    javax.swing.InputMap var35 = var32.getInputMap();
    java.lang.String var36 = var32.getName();
    var32.setFocusTraversalPolicyProvider(true);
    bierse.view.RunningMessagePanel var41 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var41.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var48 = var41.location();
    java.awt.Component var49 = var32.findComponentAt(var48);
    java.awt.LayoutManager var50 = var32.getLayout();
    var14.setLayout(var50);
    var2.setLayout(var50);
    var2.setRequestFocusEnabled(true);
    java.awt.Point var55 = var2.getLocation();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "PanelUI"+ "'", var8.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test388() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test388");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var8 = var7.isMaximumSizeSet();
    var7.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var13 = var7.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var17 = var16.getPreferredSize();
    boolean var18 = var16.isPreferredSizeSet();
    var16.enable();
    var16.transferFocusBackward();
    int var21 = var7.getComponentZOrder((java.awt.Component)var16);
    var7.setEnabled(false);
    java.awt.Graphics var24 = var7.getGraphics();
    var2.remove((java.awt.Component)var7);
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var29 = var28.getPreferredSize();
    boolean var32 = var28.contains(10, 1);
    java.awt.Insets var33 = var28.getInsets();
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var37 = var36.getPreferredSize();
    java.awt.Point var38 = var36.getMousePosition();
    var36.revalidate();
    java.awt.Component[] var40 = var36.getComponents();
    java.awt.event.KeyListener[] var41 = var36.getKeyListeners();
    var2.putClientProperty((java.lang.Object)var28, (java.lang.Object)var41);
    bierse.view.RunningMessagePanel var45 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var46 = var45.getPreferredSize();
    java.awt.Dimension var47 = var45.getMaximumSize();
    java.awt.event.FocusListener[] var48 = var45.getFocusListeners();
    bierse.view.RunningMessagePanel var51 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var52 = var51.getPreferredSize();
    boolean var55 = var51.contains(10, 1);
    java.awt.im.InputMethodRequests var56 = var51.getInputMethodRequests();
    java.awt.Font var57 = var51.getFont();
    var45.setFont(var57);
    var28.setFont(var57);
    java.awt.Dimension var60 = var28.getPreferredSize();
    java.awt.Point var61 = var28.location();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test389() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test389");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.beans.PropertyChangeListener[] var5 = var2.getPropertyChangeListeners();
    var2.setOpaque(true);
    java.awt.Insets var8 = var2.insets();
    boolean var9 = var2.isOptimizedDrawingEnabled();
    javax.swing.InputVerifier var10 = var2.getInputVerifier();
    java.awt.Insets var11 = var2.getInsets();
    java.awt.Dimension var12 = var2.getPreferredSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    boolean var19 = var15.contains(10, 1);
    java.awt.im.InputMethodRequests var20 = var15.getInputMethodRequests();
    var15.revalidate();
    var15.enable(true);
    java.awt.Point var24 = var15.location();
    java.awt.event.FocusListener[] var25 = var15.getFocusListeners();
    boolean var26 = var15.isFocusable();
    java.awt.Dimension var27 = var15.getPreferredSize();
    java.awt.Dimension var28 = var2.getSize(var27);
    java.awt.Dimension var29 = var2.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test390() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test390");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    int var12 = var2.getDebugGraphicsOptions();
    java.awt.event.MouseWheelListener[] var13 = var2.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    var16.setVerifyInputWhenFocusTarget(false);
    int var26 = var16.getDebugGraphicsOptions();
    java.awt.event.MouseWheelListener[] var27 = var16.getMouseWheelListeners();
    java.awt.Color var28 = var16.getBackground();
    var2.setForeground(var28);
    java.awt.Dimension var30 = var2.getMaximumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test391() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test391");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    javax.swing.InputMap var5 = var2.getInputMap();
    java.lang.String var6 = var2.getName();
    var2.setFocusTraversalPolicyProvider(true);
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var11.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var18 = var11.location();
    java.awt.Component var19 = var2.findComponentAt(var18);
    java.awt.LayoutManager var20 = var2.getLayout();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var24 = var23.isMaximumSizeSet();
    boolean var25 = var23.isOpaque();
    javax.swing.InputMap var26 = var23.getInputMap();
    java.beans.PropertyChangeListener[] var28 = var23.getPropertyChangeListeners("");
    java.lang.String var29 = var23.toString();
    boolean var30 = var2.isFocusCycleRoot((java.awt.Container)var23);
    var2.setFocusTraversalPolicyProvider(true);
    boolean var33 = var2.isMinimumSizeSet();
    int var34 = var2.getWidth();
    boolean var35 = var2.isDoubleBuffered();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var29,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]"+ "'", var29.equals("bierse.view.RunningMessagePanel[,0,0,0var29,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);

  }

  public void test392() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test392");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    javax.swing.InputMap var5 = var2.getInputMap();
    java.beans.PropertyChangeListener[] var7 = var2.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var8 = var2.getComponentOrientation();
    java.awt.Toolkit var9 = var2.getToolkit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test393() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test393");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    boolean var5 = var2.isEnabled();
    var2.setEnabled(false);
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var11 = var10.getPreferredSize();
    boolean var14 = var10.contains(10, 1);
    java.awt.Insets var15 = var10.getInsets();
    javax.swing.JToolTip var16 = var10.createToolTip();
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var25 = var19.getTransferHandler();
    boolean var26 = var19.hasFocus();
    javax.swing.event.AncestorListener[] var27 = var19.getAncestorListeners();
    var19.enable(false);
    int var30 = var16.getComponentZOrder((java.awt.Component)var19);
    bierse.view.RunningMessagePanel var33 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var34 = var33.isMaximumSizeSet();
    var33.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var39 = var33.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var43 = var42.getPreferredSize();
    boolean var44 = var42.isPreferredSizeSet();
    var42.enable();
    var42.transferFocusBackward();
    int var47 = var33.getComponentZOrder((java.awt.Component)var42);
    bierse.view.RunningMessagePanel var50 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var50.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var57 = var50.location();
    boolean var58 = var42.contains(var57);
    java.awt.Component var59 = var19.getComponentAt(var57);
    java.awt.Point var60 = var2.getLocation(var57);
    var2.setAutoscrolls(false);
    var2.revalidate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test394() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test394");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    var2.transferFocus();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var18 = var17.isMaximumSizeSet();
    var17.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var23 = var17.getTransferHandler();
    boolean var24 = var17.hasFocus();
    javax.swing.event.AncestorListener[] var25 = var17.getAncestorListeners();
    java.awt.Dimension var26 = var17.getMinimumSize();
    boolean var27 = var17.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var31 = var30.isMaximumSizeSet();
    var30.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var36 = var30.getTransferHandler();
    boolean var37 = var30.hasFocus();
    var30.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var40 = var30.getPreferredSize();
    java.awt.Dimension var41 = var17.getSize(var40);
    var2.setSize(var40);
    var2.nextFocus();
    boolean var44 = var2.isManagingFocus();
    var2.show(false);
    boolean var47 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var2);
    bierse.view.RunningMessagePanel var50 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var51 = var50.getPreferredSize();
    boolean var54 = var50.contains(10, 1);
    java.awt.im.InputMethodRequests var55 = var50.getInputMethodRequests();
    java.awt.event.FocusListener[] var56 = var50.getFocusListeners();
    java.awt.Font var57 = var50.getFont();
    java.beans.PropertyChangeListener[] var59 = var50.getPropertyChangeListeners("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    boolean var60 = var50.isValidateRoot();
    java.awt.Toolkit var61 = var50.getToolkit();
    javax.swing.KeyStroke[] var62 = var50.getRegisteredKeyStrokes();
    java.lang.String var63 = var50.toString();
    bierse.view.RunningMessagePanel var66 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var67 = var66.isMaximumSizeSet();
    var66.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var72 = var66.getTransferHandler();
    boolean var73 = var66.hasFocus();
    var66.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var76 = var66.getPreferredSize();
    java.awt.ComponentOrientation var77 = var66.getComponentOrientation();
    bierse.view.RunningMessagePanel var80 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var81 = var80.isMaximumSizeSet();
    var80.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var86 = var80.getTransferHandler();
    boolean var87 = var80.hasFocus();
    var80.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var90 = var80.getPreferredSize();
    java.awt.Dimension var91 = var66.getSize(var90);
    var50.setMaximumSize(var91);
    java.awt.Dimension var93 = var2.getSize(var91);
    float var94 = var2.getAlignmentY();
    boolean var95 = var2.requestDefaultFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var63,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var63.equals("bierse.view.RunningMessagePanel[,0,0,0var63,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);

  }

  public void test395() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test395");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    boolean var13 = var11.isOpaque();
    java.awt.event.HierarchyListener[] var14 = var11.getHierarchyListeners();
    int var15 = var11.countComponents();
    java.awt.event.HierarchyBoundsListener[] var16 = var11.getHierarchyBoundsListeners();
    boolean var18 = var11.areFocusTraversalKeysSet(1);
    boolean var19 = var2.isAncestorOf((java.awt.Component)var11);
    var2.requestFocus();
    java.awt.Dimension var21 = var2.getMinimumSize();
    boolean var22 = var2.isFocusTraversalPolicySet();
    boolean var23 = var2.getVerifyInputWhenFocusTarget();
    boolean var24 = var2.isPaintingForPrint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test396() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test396");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    var2.enable();
    javax.accessibility.AccessibleContext var6 = var2.getAccessibleContext();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var9.transferFocus();
    var9.show();
    float var12 = var9.getAlignmentX();
    var9.repaint(0L, 10, 0, 10, (-1));
    boolean var19 = var9.isEnabled();
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var23 = var22.getPreferredSize();
    javax.swing.JPopupMenu var24 = var22.getComponentPopupMenu();
    java.awt.Rectangle var25 = var22.bounds();
    java.awt.Rectangle var26 = var9.getBounds(var25);
    var2.computeVisibleRect(var26);
    bierse.view.RunningMessagePanel var31 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var32 = var31.isMaximumSizeSet();
    boolean var33 = var31.isOpaque();
    java.awt.event.HierarchyListener[] var34 = var31.getHierarchyListeners();
    int var35 = var31.countComponents();
    java.awt.event.HierarchyBoundsListener[] var36 = var31.getHierarchyBoundsListeners();
    boolean var38 = var31.areFocusTraversalKeysSet(1);
    java.awt.Container var39 = var31.getParent();
    boolean var40 = var31.requestFocusInWindow();
    java.awt.Component var41 = var2.add("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var31);
    java.awt.Rectangle var42 = var2.bounds();
    javax.swing.event.AncestorListener[] var43 = var2.getAncestorListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test397() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test397");


    java.util.Locale var0 = javax.swing.JComponent.getDefaultLocale();
    javax.swing.JComponent.setDefaultLocale(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test398() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test398");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    java.awt.Dimension var9 = var2.getPreferredSize();
    int var10 = var2.getWidth();
    java.awt.Dimension var11 = var2.getMaximumSize();
    var2.setOpaque(false);
    java.beans.PropertyChangeListener[] var15 = var2.getPropertyChangeListeners("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    boolean var16 = var2.isEnabled();
    java.awt.event.ContainerListener[] var17 = var2.getContainerListeners();
    var2.resetKeyboardActions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test399() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test399");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    java.awt.Component[] var9 = var2.getComponents();
    java.awt.event.HierarchyBoundsListener[] var10 = var2.getHierarchyBoundsListeners();
    int var11 = var2.getX();
    javax.swing.JToolTip var12 = var2.createToolTip();
    var2.disable();
    boolean var16 = var2.contains(100, 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test400() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test400");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    float var12 = var2.getAlignmentX();
    boolean var13 = var2.isMinimumSizeSet();
    var2.list();
    boolean var15 = var2.isMaximumSizeSet();
    bierse.view.RunningMessagePanel var18 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var19 = var18.getMouseWheelListeners();
    boolean var20 = var18.isLightweight();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var24 = var23.isMaximumSizeSet();
    var23.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var23.invalidate();
    bierse.view.RunningMessagePanel var32 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var33 = var32.isMaximumSizeSet();
    var32.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var40 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var41 = var40.isMaximumSizeSet();
    var40.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var46 = var40.getWidth();
    java.awt.Component[] var47 = var40.getComponents();
    var23.putClientProperty((java.lang.Object)var32, (java.lang.Object)var47);
    var32.transferFocus();
    var32.setToolTipText("");
    var32.show();
    int var53 = var32.getStringWidth();
    java.awt.Point var54 = var32.getLocation();
    var18.setLocation(var54);
    java.awt.Point var56 = var2.getLocation(var54);
    var2.transferFocusDownCycle();
    java.awt.event.ComponentListener[] var58 = var2.getComponentListeners();
    var2.enable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 996);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test401() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test401");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    var11.transferFocus();
    var11.setToolTipText("");
    java.awt.event.InputMethodListener[] var31 = var11.getInputMethodListeners();
    boolean var32 = var11.isFocusTraversable();
    java.awt.Insets var33 = var11.getInsets();
    var11.list();
    var11.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", false, true);
    int var39 = var11.getHeight();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);

  }

  public void test402() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test402");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    javax.accessibility.AccessibleContext var11 = var2.getAccessibleContext();
    int var12 = var2.getHeight();
    var2.invalidate();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var17 = var16.getPreferredSize();
    boolean var18 = var16.isPreferredSizeSet();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isMaximumSizeSet();
    boolean var23 = var21.isOpaque();
    java.beans.PropertyChangeListener[] var24 = var21.getPropertyChangeListeners();
    var21.setOpaque(true);
    java.awt.Insets var27 = var21.insets();
    java.awt.Insets var28 = var16.getInsets(var27);
    var16.resetKeyboardActions();
    java.awt.im.InputContext var30 = var16.getInputContext();
    java.awt.Dimension var31 = var16.getPreferredSize();
    var2.remove((java.awt.Component)var16);
    var16.firePropertyChange("PanelUI", 10.0f, (-1.0f));
    var16.removeNotify();
    int var38 = var16.getX();
    boolean var41 = var16.contains(12, 1);
    var16.setVisible(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test403() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test403");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    javax.swing.InputMap var5 = var2.getInputMap();
    java.lang.String var6 = var2.getName();
    boolean var7 = var2.isFocusCycleRoot();
    java.awt.event.ContainerListener[] var8 = var2.getContainerListeners();
    boolean var9 = var2.hasFocus();
    var2.removeAll();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test404() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test404");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.beans.PropertyChangeListener[] var5 = var2.getPropertyChangeListeners();
    var2.setOpaque(true);
    java.awt.Insets var8 = var2.insets();
    boolean var9 = var2.isOptimizedDrawingEnabled();
    var2.disable();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var13.repaint(1L, (-1), (-1), 0, 100);
    boolean var20 = var13.isFocusTraversable();
    javax.swing.ActionMap var21 = var13.getActionMap();
    var2.setActionMap(var21);
    java.awt.ComponentOrientation var23 = var2.getComponentOrientation();
    boolean var24 = var2.getInheritsPopupMenu();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test405() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test405");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    boolean var21 = var15.getInheritsPopupMenu();
    var15.setLocation(0, 100);
    boolean var25 = var15.isFocusTraversalPolicyProvider();
    var15.list();
    javax.swing.event.AncestorListener[] var27 = var15.getAncestorListeners();
    java.awt.Cursor var28 = var15.getCursor();
    bierse.view.RunningMessagePanel var31 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var32 = var31.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var35.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var42 = var35.location();
    java.awt.Component var43 = var31.findComponentAt(var42);
    var31.setEnabled(true);
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var48.transferFocus();
    var48.show();
    float var51 = var48.getAlignmentX();
    boolean var54 = var48.contains(0, 24);
    bierse.view.RunningMessagePanel var57 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var58 = var57.getPreferredSize();
    java.awt.Dimension var59 = var57.getMaximumSize();
    java.awt.event.FocusListener[] var60 = var57.getFocusListeners();
    bierse.view.RunningMessagePanel var63 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var64 = var63.getPreferredSize();
    boolean var67 = var63.contains(10, 1);
    java.awt.im.InputMethodRequests var68 = var63.getInputMethodRequests();
    java.awt.Font var69 = var63.getFont();
    var57.setFont(var69);
    java.awt.FontMetrics var71 = var48.getFontMetrics(var69);
    java.awt.FontMetrics var72 = var31.getFontMetrics(var69);
    java.awt.FontMetrics var73 = var15.getFontMetrics(var69);
    bierse.view.RunningMessagePanel var76 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var77 = var76.getPreferredSize();
    boolean var80 = var76.contains(10, 1);
    java.awt.Insets var81 = var76.getInsets();
    javax.swing.JToolTip var82 = var76.createToolTip();
    var76.invalidate();
    bierse.view.RunningMessagePanel var86 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var87 = var86.getPreferredSize();
    java.awt.Point var88 = var86.getMousePosition();
    var86.revalidate();
    boolean var90 = var76.isFocusCycleRoot((java.awt.Container)var86);
    java.awt.Point var91 = var76.location();
    java.awt.Point var92 = var15.getLocation(var91);
    var15.setAlignmentX(100.0f);
    java.awt.Rectangle var95 = var15.getBounds();
    var15.hide();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test406() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test406");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    boolean var28 = var11.isPaintingForPrint();
    javax.swing.event.AncestorListener[] var29 = var11.getAncestorListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test407() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test407");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.beans.PropertyChangeListener[] var5 = var2.getPropertyChangeListeners();
    var2.setOpaque(true);
    java.awt.Insets var8 = var2.insets();
    boolean var9 = var2.isOptimizedDrawingEnabled();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (-1.0d), 0.0d);
    java.awt.Dimension var14 = var2.getMinimumSize();
    var2.grabFocus();
    int var18 = var2.getBaseline(12, 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1));

  }

  public void test408() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test408");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    boolean var5 = var2.isMaximumSizeSet();
    var2.setLocation(996, 12);
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (short)1, (short)1);
    boolean var13 = var2.isForegroundSet();
    java.awt.Rectangle var14 = var2.bounds();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test409() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test409");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    javax.accessibility.AccessibleContext var11 = var2.getAccessibleContext();
    int var12 = var2.getHeight();
    var2.invalidate();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var17 = var16.getPreferredSize();
    boolean var18 = var16.isPreferredSizeSet();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isMaximumSizeSet();
    boolean var23 = var21.isOpaque();
    java.beans.PropertyChangeListener[] var24 = var21.getPropertyChangeListeners();
    var21.setOpaque(true);
    java.awt.Insets var27 = var21.insets();
    java.awt.Insets var28 = var16.getInsets(var27);
    var16.resetKeyboardActions();
    java.awt.im.InputContext var30 = var16.getInputContext();
    java.awt.Dimension var31 = var16.getPreferredSize();
    var2.remove((java.awt.Component)var16);
    var16.firePropertyChange("PanelUI", 10.0f, (-1.0f));
    var16.removeNotify();
    int var38 = var16.getX();
    boolean var39 = var16.isForegroundSet();
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var43 = var42.isMaximumSizeSet();
    var42.layout();
    bierse.view.RunningMessagePanel var47 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var48 = var47.isMaximumSizeSet();
    boolean var49 = var47.isOpaque();
    java.awt.event.HierarchyListener[] var50 = var47.getHierarchyListeners();
    int var51 = var47.countComponents();
    java.awt.event.HierarchyBoundsListener[] var52 = var47.getHierarchyBoundsListeners();
    boolean var54 = var47.areFocusTraversalKeysSet(1);
    bierse.view.RunningMessagePanel var57 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var58 = var57.getPreferredSize();
    javax.swing.JPopupMenu var59 = var57.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var62 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var63 = var62.getPreferredSize();
    javax.swing.JPopupMenu var64 = var62.getComponentPopupMenu();
    java.awt.Rectangle var65 = var62.bounds();
    var57.computeVisibleRect(var65);
    var47.setBounds(var65);
    var42.repaint(var65);
    java.awt.Component var71 = var42.getComponentAt(1, 100);
    int var72 = var42.getY();
    boolean var73 = var42.isBackgroundSet();
    bierse.view.RunningMessagePanel var76 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var77 = var76.isMaximumSizeSet();
    boolean var78 = var76.isOpaque();
    java.awt.event.HierarchyListener[] var79 = var76.getHierarchyListeners();
    int var80 = var76.getWidth();
    int var81 = var76.countComponents();
    java.awt.Point var83 = var76.getMousePosition(true);
    var76.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var86 = var76.toString();
    java.awt.Font var87 = var76.getFont();
    javax.swing.plaf.PanelUI var88 = var76.getUI();
    java.awt.Dimension var89 = var76.getPreferredSize();
    var42.resize(var89);
    java.awt.Dimension var91 = var16.getSize(var89);
    java.awt.Color var92 = var16.getForeground();
    var16.paintImmediately(24, 15, 32767, (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var86,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var86.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var86,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test410() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test410");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    java.awt.Dimension var9 = var2.getPreferredSize();
    java.awt.Component var10 = var2.getNextFocusableComponent();
    var2.removeNotify();
    boolean var12 = var2.requestDefaultFocus();
    var2.paintImmediately(12, 0, 11, (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test411() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test411");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.beans.PropertyChangeListener[] var5 = var2.getPropertyChangeListeners();
    boolean var6 = var2.isFocusCycleRoot();
    boolean var7 = var2.getIgnoreRepaint();
    var2.enable();
    var2.revalidate();
    boolean var10 = var2.isRequestFocusEnabled();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var14 = var13.isMaximumSizeSet();
    var13.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var13.invalidate();
    java.awt.Dimension var20 = var13.getPreferredSize();
    var13.show(false);
    java.awt.Image var25 = var13.createImage(14, 100);
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var29 = var28.isMaximumSizeSet();
    var28.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var34 = var28.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var38 = var37.getPreferredSize();
    boolean var39 = var37.isPreferredSizeSet();
    var37.enable();
    var37.transferFocusBackward();
    int var42 = var28.getComponentZOrder((java.awt.Component)var37);
    var28.setEnabled(false);
    var28.repaint(0L, 0, 100, 12, 24);
    boolean var51 = var28.isPaintingForPrint();
    java.awt.Rectangle var52 = var28.getVisibleRect();
    java.awt.Rectangle var53 = var13.getBounds(var52);
    java.awt.Rectangle var54 = var2.getBounds(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test412() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test412");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    javax.accessibility.AccessibleContext var11 = var2.getAccessibleContext();
    int var12 = var2.getHeight();
    java.awt.Image var15 = var2.createImage(12, 24);
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", (byte)(-1), (byte)100);
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var23 = var22.isMaximumSizeSet();
    var22.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var28 = var22.getTransferHandler();
    boolean var29 = var22.hasFocus();
    javax.swing.event.AncestorListener[] var30 = var22.getAncestorListeners();
    var22.enable(false);
    java.awt.Dimension var33 = var22.minimumSize();
    var2.setPreferredSize(var33);
    java.awt.Rectangle var35 = var2.getVisibleRect();
    var2.list();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test413() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test413");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    var15.setEnabled(false);
    var15.setInheritsPopupMenu(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test414() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test414");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    boolean var29 = var2.requestFocus(false);
    var2.removeNotify();
    java.awt.ComponentOrientation var31 = var2.getComponentOrientation();
    int var32 = var2.getHeight();
    boolean var33 = var2.isLightweight();
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var37 = var36.isMaximumSizeSet();
    boolean var38 = var36.isOpaque();
    java.awt.event.HierarchyListener[] var39 = var36.getHierarchyListeners();
    int var40 = var36.countComponents();
    java.awt.event.HierarchyBoundsListener[] var41 = var36.getHierarchyBoundsListeners();
    boolean var43 = var36.areFocusTraversalKeysSet(1);
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var47 = var46.getPreferredSize();
    javax.swing.JPopupMenu var48 = var46.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var51 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var52 = var51.getPreferredSize();
    javax.swing.JPopupMenu var53 = var51.getComponentPopupMenu();
    java.awt.Rectangle var54 = var51.bounds();
    var46.computeVisibleRect(var54);
    var36.setBounds(var54);
    var36.removeAll();
    boolean var58 = var2.isAncestorOf((java.awt.Component)var36);
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", 10L, 1L);
    int var65 = var2.getBaseline(15, 12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == (-1));

  }

  public void test415() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test415");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    javax.swing.InputMap var5 = var2.getInputMap();
    java.beans.PropertyChangeListener[] var7 = var2.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var8 = var2.getComponentOrientation();
    var2.transferFocusBackward();
    boolean var10 = var2.isFocusTraversalPolicyProvider();
    var2.disable();
    var2.enable(true);
    java.util.Locale var14 = var2.getLocale();
    java.lang.Object var15 = var2.getTreeLock();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test416() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test416");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    javax.swing.event.AncestorListener[] var40 = var2.getAncestorListeners();
    boolean var41 = var2.isVisible();
    var2.setAutoscrolls(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);

  }

  public void test417() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test417");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    java.awt.peer.ComponentPeer var6 = var2.getPeer();
    var2.transferFocusDownCycle();
    var2.transferFocusUpCycle();
    boolean var9 = var2.getIgnoreRepaint();
    boolean var10 = var2.isFontSet();
    boolean var11 = var2.isLightweight();
    int var12 = var2.getHeight();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);

  }

  public void test418() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test418");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.beans.PropertyChangeListener[] var5 = var2.getPropertyChangeListeners();
    var2.setOpaque(true);
    java.awt.Insets var8 = var2.insets();
    boolean var9 = var2.isOptimizedDrawingEnabled();
    boolean var10 = var2.isValidateRoot();
    var2.repaint((-1L), 1, 10, 100, 11);
    var2.setLocation(0, 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test419() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test419");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    boolean var10 = var2.inside((-1), 100);
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var14 = var13.getPreferredSize();
    boolean var17 = var13.contains(10, 1);
    var13.setAlignmentX((-1.0f));
    java.awt.Point var20 = var13.getLocation();
    java.awt.Point var21 = var2.getLocation(var20);
    boolean var24 = var2.contains(100, 0);
    int var25 = var2.countComponents();
    java.awt.Insets var26 = var2.getInsets();
    var2.validate();
    var2.removeNotify();
    var2.setFocusTraversalPolicyProvider(true);
    boolean var31 = var2.isFontSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);

  }

  public void test420() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test420");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var3 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var4 = var3.getPreferredSize();
    javax.swing.JPopupMenu var5 = var3.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var9 = var8.getPreferredSize();
    javax.swing.JPopupMenu var10 = var8.getComponentPopupMenu();
    java.awt.Rectangle var11 = var8.bounds();
    var3.computeVisibleRect(var11);
    int var13 = var0.getIndexOf((java.lang.Object)var3);
    var3.invalidate();
    java.awt.GraphicsConfiguration var15 = var3.getGraphicsConfiguration();
    javax.swing.JToolTip var16 = var3.createToolTip();
    java.awt.ComponentOrientation var17 = var3.getComponentOrientation();
    javax.swing.plaf.PanelUI var18 = var3.getUI();
    java.awt.Insets var19 = var3.getInsets();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test421() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test421");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    var16.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var26 = var16.getPreferredSize();
    java.awt.Dimension var27 = var2.getSize(var26);
    java.awt.im.InputContext var28 = var2.getInputContext();
    var2.disable();
    boolean var30 = var2.requestFocusInWindow();
    int var31 = var2.getDebugGraphicsOptions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);

  }

  public void test422() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test422");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.setDoubleBuffered(false);
    java.awt.GraphicsConfiguration var7 = var2.getGraphicsConfiguration();
    java.awt.Dimension var8 = var2.minimumSize();
    boolean var9 = var2.isCursorSet();
    java.awt.Dimension var10 = var2.minimumSize();
    var2.transferFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test423() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test423");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    boolean var40 = var27.isDoubleBuffered();
    bierse.view.RunningMessagePanel var43 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var43.transferFocus();
    var43.show();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var49 = var48.getPreferredSize();
    boolean var52 = var48.contains(10, 1);
    java.awt.im.InputMethodRequests var53 = var48.getInputMethodRequests();
    java.awt.Font var54 = var48.getFont();
    var43.setFont(var54);
    var27.setFont(var54);
    var27.setDoubleBuffered(false);
    java.awt.Component var61 = var27.findComponentAt(12, 11);
    bierse.view.RunningMessagePanel var64 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var65 = var64.getPreferredSize();
    javax.swing.JPopupMenu var66 = var64.getComponentPopupMenu();
    java.awt.Rectangle var67 = var64.bounds();
    var64.setSize(0, 24);
    javax.swing.TransferHandler var71 = var64.getTransferHandler();
    java.awt.Insets var72 = var64.getInsets();
    java.awt.Insets var73 = var27.getInsets(var72);
    javax.swing.JRootPane var74 = var27.getRootPane();
    int var75 = var27.getX();
    var27.setSize(996, 32767);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);

  }

  public void test424() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test424");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    javax.swing.InputMap var5 = var2.getInputMap();
    java.beans.PropertyChangeListener[] var7 = var2.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var8 = var2.getComponentOrientation();
    var2.transferFocusBackward();
    boolean var10 = var2.isFocusTraversalPolicyProvider();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var14 = var13.getPreferredSize();
    java.awt.Dimension var15 = var13.getMaximumSize();
    java.awt.event.FocusListener[] var16 = var13.getFocusListeners();
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var20 = var19.getPreferredSize();
    boolean var23 = var19.contains(10, 1);
    java.awt.im.InputMethodRequests var24 = var19.getInputMethodRequests();
    java.awt.Font var25 = var19.getFont();
    var13.setFont(var25);
    java.beans.VetoableChangeListener[] var27 = var13.getVetoableChangeListeners();
    boolean var28 = var13.isMaximumSizeSet();
    bierse.view.RunningMessagePanel var31 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var31.transferFocus();
    var31.show();
    float var34 = var31.getAlignmentX();
    var31.repaint(0L, 10, 0, 10, (-1));
    boolean var41 = var31.isEnabled();
    bierse.view.RunningMessagePanel var44 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var45 = var44.getPreferredSize();
    javax.swing.JPopupMenu var46 = var44.getComponentPopupMenu();
    java.awt.Rectangle var47 = var44.bounds();
    java.awt.Rectangle var48 = var31.getBounds(var47);
    var13.paintImmediately(var48);
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var53 = var52.isMaximumSizeSet();
    var52.layout();
    bierse.view.RunningMessagePanel var57 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var58 = var57.isMaximumSizeSet();
    boolean var59 = var57.isOpaque();
    java.awt.event.HierarchyListener[] var60 = var57.getHierarchyListeners();
    int var61 = var57.countComponents();
    java.awt.event.HierarchyBoundsListener[] var62 = var57.getHierarchyBoundsListeners();
    boolean var64 = var57.areFocusTraversalKeysSet(1);
    bierse.view.RunningMessagePanel var67 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var68 = var67.getPreferredSize();
    javax.swing.JPopupMenu var69 = var67.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var72 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var73 = var72.getPreferredSize();
    javax.swing.JPopupMenu var74 = var72.getComponentPopupMenu();
    java.awt.Rectangle var75 = var72.bounds();
    var67.computeVisibleRect(var75);
    var57.setBounds(var75);
    var52.repaint(var75);
    java.awt.Rectangle var79 = var13.getBounds(var75);
    java.awt.Rectangle var80 = var2.getBounds(var79);
    var2.disable();
    var2.transferFocusBackward();
    int var83 = var2.getX();
    java.awt.GraphicsConfiguration var84 = var2.getGraphicsConfiguration();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);

  }

  public void test425() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test425");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    boolean var5 = var2.isMaximumSizeSet();
    var2.setLocation(996, 12);
    var2.requestFocus();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var13 = var12.getPreferredSize();
    boolean var16 = var12.contains(10, 1);
    java.awt.im.InputMethodRequests var17 = var12.getInputMethodRequests();
    boolean var20 = var12.inside((-1), 100);
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var24 = var23.getPreferredSize();
    boolean var27 = var23.contains(10, 1);
    var23.setAlignmentX((-1.0f));
    java.awt.Point var30 = var23.getLocation();
    java.awt.Point var31 = var12.getLocation(var30);
    boolean var34 = var12.contains(100, 0);
    int var35 = var12.countComponents();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var39 = var38.getPreferredSize();
    boolean var42 = var38.contains(10, 1);
    java.awt.im.InputMethodRequests var43 = var38.getInputMethodRequests();
    java.awt.event.FocusListener[] var44 = var38.getFocusListeners();
    java.awt.Font var45 = var38.getFont();
    java.awt.Cursor var46 = var38.getCursor();
    bierse.view.RunningMessagePanel var49 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var50 = var49.getPreferredSize();
    var38.resize(var50);
    java.awt.Dimension var52 = var12.getSize(var50);
    var2.setPreferredSize(var52);
    java.awt.Dimension var54 = var2.preferredSize();
    java.awt.image.VolatileImage var57 = var2.createVolatileImage(1, 100);
    java.awt.event.FocusListener[] var58 = var2.getFocusListeners();
    java.awt.Dimension var59 = var2.getMaximumSize();
    boolean var60 = var2.isRequestFocusEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);

  }

  public void test426() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test426");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var8 = var7.getPreferredSize();
    javax.swing.JPopupMenu var9 = var7.getComponentPopupMenu();
    java.awt.Rectangle var10 = var7.bounds();
    var2.computeVisibleRect(var10);
    boolean var12 = var2.isManagingFocus();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var16 = var15.isMaximumSizeSet();
    var15.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var21 = var15.getTransferHandler();
    boolean var22 = var15.hasFocus();
    var15.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var25 = var15.getPreferredSize();
    java.awt.GraphicsConfiguration var26 = var15.getGraphicsConfiguration();
    bierse.view.RunningMessagePanel var29 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var30 = var29.isMaximumSizeSet();
    boolean var31 = var29.isOpaque();
    javax.swing.InputMap var32 = var29.getInputMap();
    java.beans.PropertyChangeListener[] var34 = var29.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var35 = var29.getComponentOrientation();
    var15.applyComponentOrientation(var35);
    var2.applyComponentOrientation(var35);
    var2.show(false);
    javax.accessibility.AccessibleContext var40 = var2.getAccessibleContext();
    java.awt.Dimension var41 = var2.getMinimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test427() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test427");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.beans.PropertyChangeListener[] var5 = var2.getPropertyChangeListeners();
    var2.setOpaque(true);
    java.awt.Insets var8 = var2.insets();
    boolean var9 = var2.isOptimizedDrawingEnabled();
    var2.disable();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var13.repaint(1L, (-1), (-1), 0, 100);
    boolean var20 = var13.isFocusTraversable();
    javax.swing.ActionMap var21 = var13.getActionMap();
    var2.setActionMap(var21);
    var2.setName("bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    java.beans.VetoableChangeListener[] var25 = var2.getVetoableChangeListeners();
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var29 = var28.isMaximumSizeSet();
    var28.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var34 = var28.getWidth();
    java.awt.Image var37 = var28.createImage(24, 24);
    boolean var38 = var28.getInheritsPopupMenu();
    boolean var39 = var28.isBackgroundSet();
    java.awt.Dimension var40 = var28.getPreferredSize();
    bierse.view.RunningMessagePanel var43 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var44 = var43.isMaximumSizeSet();
    var43.layout();
    var43.revalidate();
    boolean var47 = var43.isFocusOwner();
    float var48 = var43.getAlignmentX();
    java.awt.Color var49 = var43.getForeground();
    var43.firePropertyChange("", (-1L), 0L);
    var43.setOpaque(true);
    bierse.view.RunningMessagePanel var58 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var59 = var58.getPreferredSize();
    boolean var62 = var58.contains(10, 1);
    var58.setFocusTraversalPolicyProvider(false);
    float var65 = var58.getAlignmentX();
    java.awt.Component.BaselineResizeBehavior var66 = var58.getBaselineResizeBehavior();
    java.awt.dnd.DropTarget var67 = var58.getDropTarget();
    var58.layout();
    var58.setDebugGraphicsOptions(996);
    java.awt.Graphics var71 = var58.getGraphics();
    var43.printComponents(var71);
    var28.paintAll(var71);
    var2.printAll(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test428() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test428");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    int var12 = var2.getDebugGraphicsOptions();
    java.awt.Component var15 = var2.locate(24, 100);
    bierse.view.RunningMessagePanel var18 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var19 = var18.getPreferredSize();
    boolean var22 = var18.contains(10, 1);
    java.awt.im.InputMethodRequests var23 = var18.getInputMethodRequests();
    java.awt.event.FocusListener[] var24 = var18.getFocusListeners();
    java.awt.Font var25 = var18.getFont();
    javax.swing.plaf.PanelUI var26 = var18.getUI();
    var2.setUI(var26);
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var31 = var30.isMaximumSizeSet();
    boolean var32 = var30.isOpaque();
    java.awt.event.HierarchyListener[] var33 = var30.getHierarchyListeners();
    int var34 = var30.getWidth();
    int var35 = var30.countComponents();
    java.awt.Point var37 = var30.getMousePosition(true);
    var30.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var40 = var30.toString();
    java.awt.Font var41 = var30.getFont();
    bierse.view.RunningMessagePanel var44 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var45 = var44.getPreferredSize();
    boolean var48 = var44.contains(10, 1);
    java.awt.im.InputMethodRequests var49 = var44.getInputMethodRequests();
    boolean var50 = var44.getInheritsPopupMenu();
    java.lang.String var51 = var44.toString();
    java.awt.Rectangle var52 = var44.bounds();
    var30.setBounds(var52);
    var2.paintImmediately(var52);
    var2.firePropertyChange("hi!", 10.0f, 0.0f);
    float var59 = var2.getAlignmentX();
    javax.swing.plaf.PanelUI var60 = var2.getUI();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", '#', '4');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var40,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var40.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var40,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var51,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var51.equals("bierse.view.RunningMessagePanel[,0,0,0var51,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test429() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test429");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    java.awt.Rectangle var5 = var2.bounds();
    var2.setSize(0, 24);
    boolean var11 = var2.contains(0, (-1));
    java.awt.Component var12 = var2.getNextFocusableComponent();
    boolean var13 = var2.isBackgroundSet();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var16.repaint(1L, (-1), (-1), 0, 100);
    boolean var23 = var16.isFocusTraversable();
    java.beans.PropertyChangeListener[] var24 = var16.getPropertyChangeListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    javax.swing.event.AncestorListener[] var35 = var27.getAncestorListeners();
    java.awt.Dimension var36 = var27.getMinimumSize();
    bierse.view.RunningMessagePanel var40 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var41 = var40.getPreferredSize();
    java.awt.Dimension var42 = var40.getMaximumSize();
    var40.disable();
    var27.putClientProperty((java.lang.Object)100, (java.lang.Object)var40);
    javax.swing.InputVerifier var45 = var40.getInputVerifier();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var49 = var48.isMaximumSizeSet();
    var48.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var54 = var48.getTransferHandler();
    boolean var55 = var48.hasFocus();
    var48.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var58 = var48.getPreferredSize();
    java.awt.ComponentOrientation var59 = var48.getComponentOrientation();
    bierse.view.RunningMessagePanel var62 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var63 = var62.isMaximumSizeSet();
    var62.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var68 = var62.getTransferHandler();
    boolean var69 = var62.hasFocus();
    javax.swing.event.AncestorListener[] var70 = var62.getAncestorListeners();
    bierse.view.RunningMessagePanel var73 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var74 = var73.isMaximumSizeSet();
    var73.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var79 = var73.getTransferHandler();
    boolean var80 = var73.hasFocus();
    var73.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var83 = var73.getPreferredSize();
    java.awt.ComponentOrientation var84 = var73.getComponentOrientation();
    var48.add((java.awt.Component)var62, (java.lang.Object)var73);
    bierse.view.RunningMessagePanel var88 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var89 = var88.getPreferredSize();
    java.awt.Dimension var90 = var88.getMaximumSize();
    var73.resize(var90);
    var40.setNextFocusableComponent((java.awt.Component)var73);
    var73.nextFocus();
    var2.putClientProperty((java.lang.Object)var16, (java.lang.Object)var73);
    int var95 = var2.countComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == 0);

  }

  public void test430() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test430");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.repaint(1L, (-1), (-1), 0, 100);
    boolean var9 = var2.isFocusTraversable();
    java.beans.PropertyChangeListener[] var10 = var2.getPropertyChangeListeners();
    var2.transferFocus();
    java.awt.LayoutManager var12 = var2.getLayout();
    javax.swing.JToolTip var13 = var2.createToolTip();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test431() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test431");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    javax.swing.JRootPane var13 = var2.getRootPane();
    var2.setRequestFocusEnabled(false);
    java.awt.Dimension var16 = var2.preferredSize();
    java.awt.Dimension var17 = var2.getPreferredSize();
    var2.addNotify();
    boolean var19 = var2.isFontSet();
    java.awt.Component[] var20 = var2.getComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test432() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test432");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    int var7 = var2.countComponents();
    java.awt.Point var9 = var2.getMousePosition(true);
    var2.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    var2.requestFocus();
    var2.revalidate();
    var2.setDoubleBuffered(false);
    java.awt.Component var18 = var2.getComponentAt((-1), 13);
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isMaximumSizeSet();
    var21.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var27 = var21.getTransferHandler();
    boolean var28 = var21.hasFocus();
    var21.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var31 = var21.getPreferredSize();
    java.awt.ComponentOrientation var32 = var21.getComponentOrientation();
    boolean var35 = var21.contains(1, 1);
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var39 = var38.getPreferredSize();
    javax.swing.JPopupMenu var40 = var38.getComponentPopupMenu();
    java.awt.Rectangle var41 = var38.bounds();
    var38.setSize(0, 24);
    bierse.view.RunningMessagePanel var47 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var48 = var47.isMaximumSizeSet();
    var47.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var53 = var47.getTransferHandler();
    boolean var54 = var47.hasFocus();
    javax.swing.event.AncestorListener[] var55 = var47.getAncestorListeners();
    java.awt.Dimension var56 = var47.getMinimumSize();
    bierse.view.RunningMessagePanel var60 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var61 = var60.getPreferredSize();
    java.awt.Dimension var62 = var60.getMaximumSize();
    var60.disable();
    var47.putClientProperty((java.lang.Object)100, (java.lang.Object)var60);
    javax.swing.InputVerifier var65 = var60.getInputVerifier();
    boolean var66 = var60.getInheritsPopupMenu();
    var60.setLocation(0, 100);
    boolean var70 = var60.isFocusTraversalPolicyProvider();
    var60.list();
    javax.swing.event.AncestorListener[] var72 = var60.getAncestorListeners();
    var60.repaint(100L);
    int var75 = var38.getComponentZOrder((java.awt.Component)var60);
    bierse.view.RunningMessagePanel var78 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var78.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var85 = var78.location();
    java.awt.Font var86 = var78.getFont();
    java.awt.FontMetrics var87 = var60.getFontMetrics(var86);
    java.awt.FontMetrics var88 = var21.getFontMetrics(var86);
    java.awt.FontMetrics var89 = var2.getFontMetrics(var86);
    boolean var90 = var2.isBackgroundSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);

  }

  public void test433() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test433");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var8 = var2.isFocusTraversalPolicySet();
    java.awt.event.FocusListener[] var9 = var2.getFocusListeners();
    boolean var10 = var2.isFontSet();
    var2.setDebugGraphicsOptions((-1));
    var2.addNotify();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var17 = var16.getPreferredSize();
    boolean var18 = var16.isPreferredSizeSet();
    var16.enable();
    javax.accessibility.AccessibleContext var20 = var16.getAccessibleContext();
    var16.setOpaque(false);
    var16.setRequestFocusEnabled(true);
    bierse.view.KeyMapComboBoxModel var25 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var29 = var28.getPreferredSize();
    javax.swing.JPopupMenu var30 = var28.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var33 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var34 = var33.getPreferredSize();
    javax.swing.JPopupMenu var35 = var33.getComponentPopupMenu();
    java.awt.Rectangle var36 = var33.bounds();
    var28.computeVisibleRect(var36);
    int var38 = var25.getIndexOf((java.lang.Object)var28);
    var28.invalidate();
    java.awt.GraphicsConfiguration var40 = var28.getGraphicsConfiguration();
    javax.swing.JToolTip var41 = var28.createToolTip();
    java.awt.Font var42 = var28.getFont();
    var16.setFont(var42);
    java.awt.FontMetrics var44 = var2.getFontMetrics(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test434() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test434");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    int var20 = var2.getHeight();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var23.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var30 = var23.location();
    boolean var31 = var2.contains(var30);
    java.awt.event.InputMethodListener[] var32 = var2.getInputMethodListeners();
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var36 = var35.isMaximumSizeSet();
    boolean var37 = var35.isOpaque();
    javax.swing.InputMap var38 = var35.getInputMap();
    java.beans.PropertyChangeListener[] var40 = var35.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var41 = var35.getComponentOrientation();
    java.awt.event.ContainerListener[] var42 = var35.getContainerListeners();
    java.awt.Toolkit var43 = var35.getToolkit();
    java.awt.Point var44 = var35.location();
    java.awt.Component var45 = var2.getComponentAt(var44);
    java.awt.LayoutManager var46 = var2.getLayout();
    var2.paintImmediately(15, 0, (-1), 996);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test435() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test435");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    var16.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var26 = var16.getPreferredSize();
    java.awt.Dimension var27 = var2.getSize(var26);
    java.awt.image.VolatileImage var30 = var2.createVolatileImage((-1), (-1));
    var2.repaint(100L);
    java.awt.ComponentOrientation var33 = var2.getComponentOrientation();
    boolean var34 = var2.isFocusable();
    java.awt.LayoutManager var35 = var2.getLayout();
    java.lang.String var36 = var2.getUIClassID();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "PanelUI"+ "'", var36.equals("PanelUI"));

  }

  public void test436() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test436");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPaintingTile();
    var2.transferFocus();
    javax.swing.KeyStroke[] var6 = var2.getRegisteredKeyStrokes();
    var2.transferFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test437() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test437");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    java.awt.Font var9 = var2.getFont();
    javax.swing.plaf.PanelUI var10 = var2.getUI();
    java.awt.Component.BaselineResizeBehavior var11 = var2.getBaselineResizeBehavior();
    java.awt.Image var14 = var2.createImage(13, 996);
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var18 = var17.getPreferredSize();
    boolean var21 = var17.contains(10, 1);
    var17.setFocusTraversalPolicyProvider(false);
    float var24 = var17.getAlignmentX();
    java.awt.Component.BaselineResizeBehavior var25 = var17.getBaselineResizeBehavior();
    java.awt.peer.ComponentPeer var26 = var17.getPeer();
    var17.transferFocus();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var31 = var30.isMaximumSizeSet();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var35 = var34.isMaximumSizeSet();
    boolean var36 = var34.isOpaque();
    java.awt.event.HierarchyListener[] var37 = var34.getHierarchyListeners();
    int var38 = var34.countComponents();
    java.awt.event.HierarchyBoundsListener[] var39 = var34.getHierarchyBoundsListeners();
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var43 = var42.isMaximumSizeSet();
    boolean var44 = var42.isOpaque();
    java.awt.event.HierarchyListener[] var45 = var42.getHierarchyListeners();
    int var46 = var42.getWidth();
    java.awt.event.ContainerListener[] var47 = var42.getContainerListeners();
    java.awt.Dimension var48 = var42.getMaximumSize();
    var34.setMinimumSize(var48);
    java.awt.Dimension var50 = var30.getSize(var48);
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var53.repaint(1L, (-1), (-1), 0, 100);
    boolean var60 = var53.isFocusTraversable();
    javax.swing.ActionMap var61 = var53.getActionMap();
    var30.setActionMap(var61);
    var30.move(996, 24);
    java.awt.Graphics var66 = var30.getGraphics();
    bierse.view.RunningMessagePanel var69 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var70 = var69.getPreferredSize();
    javax.swing.JPopupMenu var71 = var69.getComponentPopupMenu();
    java.awt.Rectangle var72 = var69.bounds();
    java.awt.Insets var73 = var69.insets();
    java.awt.Point var74 = var69.location();
    java.awt.Point var75 = var30.getLocation(var74);
    java.awt.Point var76 = var17.getLocation(var75);
    boolean var77 = var2.contains(var75);
    int var78 = var2.getHeight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);

  }

  public void test438() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test438");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", 24);
    java.awt.LayoutManager var3 = var2.getLayout();
    boolean var4 = var2.isMaximumSizeSet();
    javax.swing.plaf.PanelUI var5 = var2.getUI();
    var2.enable(true);
    var2.setEnabled(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test439() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test439");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    java.awt.Font var9 = var2.getFont();
    var2.enable();
    boolean var11 = var2.getIgnoreRepaint();
    boolean var12 = var2.requestFocusInWindow();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var16 = var15.isMaximumSizeSet();
    var15.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var15.invalidate();
    java.awt.Dimension var22 = var15.getPreferredSize();
    var15.show(false);
    boolean var25 = var15.isMaximumSizeSet();
    var15.firePropertyChange("PanelUI", 10L, 100L);
    java.awt.event.HierarchyListener[] var30 = var15.getHierarchyListeners();
    bierse.view.RunningMessagePanel var33 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var34 = var33.isMaximumSizeSet();
    boolean var35 = var33.isOpaque();
    java.awt.event.HierarchyListener[] var36 = var33.getHierarchyListeners();
    java.awt.peer.ComponentPeer var37 = var33.getPeer();
    var33.transferFocus();
    java.lang.String var39 = var33.getToolTipText();
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var43 = var42.isMaximumSizeSet();
    boolean var44 = var42.isOpaque();
    java.beans.PropertyChangeListener[] var45 = var42.getPropertyChangeListeners();
    var42.setOpaque(true);
    java.awt.Insets var48 = var42.insets();
    bierse.view.RunningMessagePanel var51 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var52 = var51.isMaximumSizeSet();
    var51.layout();
    bierse.view.RunningMessagePanel var56 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var57 = var56.isMaximumSizeSet();
    var56.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var62 = var56.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var65 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var66 = var65.getPreferredSize();
    boolean var67 = var65.isPreferredSizeSet();
    var65.enable();
    var65.transferFocusBackward();
    int var70 = var56.getComponentZOrder((java.awt.Component)var65);
    var56.setEnabled(false);
    java.awt.Graphics var73 = var56.getGraphics();
    var51.remove((java.awt.Component)var56);
    bierse.view.RunningMessagePanel var77 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var78 = var77.getPreferredSize();
    boolean var81 = var77.contains(10, 1);
    java.awt.Insets var82 = var77.getInsets();
    javax.swing.JToolTip var83 = var77.createToolTip();
    var77.invalidate();
    var51.remove((java.awt.Component)var77);
    var33.putClientProperty((java.lang.Object)var42, (java.lang.Object)var77);
    boolean var87 = var33.isValid();
    int var88 = var33.getWidth();
    var2.putClientProperty((java.lang.Object)var15, (java.lang.Object)var33);
    java.awt.Dimension var90 = var15.getMinimumSize();
    int var91 = var15.getY();
    boolean var92 = var15.getVerifyInputWhenFocusTarget();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);

  }

  public void test440() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test440");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    javax.swing.event.ListDataListener[] var1 = var0.getListDataListeners();
    bierse.view.RunningMessagePanel var4 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var4.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var11 = var4.location();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    var14.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var20 = var14.getTransferHandler();
    boolean var21 = var14.hasFocus();
    javax.swing.event.AncestorListener[] var22 = var14.getAncestorListeners();
    java.awt.Dimension var23 = var14.getMinimumSize();
    var4.resize(var23);
    int var25 = var0.getIndexOf((java.lang.Object)var23);
    java.lang.Object var27 = var0.getElementAt(996);
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var31 = var30.getPreferredSize();
    boolean var34 = var30.contains(10, 1);
    java.awt.im.InputMethodRequests var35 = var30.getInputMethodRequests();
    var30.revalidate();
    var30.firePropertyChange("hi!", (short)100, (short)0);
    java.awt.Component var43 = var30.getComponentAt(0, (-1));
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var47 = var46.isMaximumSizeSet();
    var46.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var52 = var46.getTransferHandler();
    boolean var53 = var46.hasFocus();
    javax.swing.event.AncestorListener[] var54 = var46.getAncestorListeners();
    java.awt.Dimension var55 = var46.getMinimumSize();
    bierse.view.RunningMessagePanel var59 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var60 = var59.getPreferredSize();
    java.awt.Dimension var61 = var59.getMaximumSize();
    var59.disable();
    var46.putClientProperty((java.lang.Object)100, (java.lang.Object)var59);
    javax.swing.InputVerifier var64 = var59.getInputVerifier();
    boolean var65 = var59.getInheritsPopupMenu();
    var59.setLocation(0, 100);
    boolean var69 = var59.isFocusTraversalPolicyProvider();
    var59.list();
    javax.swing.event.AncestorListener[] var71 = var59.getAncestorListeners();
    java.awt.Cursor var72 = var59.getCursor();
    var30.setCursor(var72);
    var30.transferFocusUpCycle();
    var30.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (short)(-1), (short)0);
    java.awt.Dimension var79 = var30.getSize();
    var0.insertElementAt((java.lang.Object)var79, 10);
    java.lang.Object var82 = var0.getSelectedItem();
    java.lang.Object var83 = var0.getSelectedItem();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.removeElementAt(14);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test441() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test441");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.event.HierarchyBoundsListener[] var7 = var2.getHierarchyBoundsListeners();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (short)(-1), (short)100);
    boolean var12 = var2.requestDefaultFocus();
    java.awt.event.MouseListener[] var13 = var2.getMouseListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test442() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test442");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var8 = var7.isMaximumSizeSet();
    var7.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var13 = var7.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var17 = var16.getPreferredSize();
    boolean var18 = var16.isPreferredSizeSet();
    var16.enable();
    var16.transferFocusBackward();
    int var21 = var7.getComponentZOrder((java.awt.Component)var16);
    var7.setEnabled(false);
    java.awt.Graphics var24 = var7.getGraphics();
    var2.remove((java.awt.Component)var7);
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var29 = var28.getPreferredSize();
    boolean var32 = var28.contains(10, 1);
    java.awt.Insets var33 = var28.getInsets();
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var37 = var36.getPreferredSize();
    java.awt.Point var38 = var36.getMousePosition();
    var36.revalidate();
    java.awt.Component[] var40 = var36.getComponents();
    java.awt.event.KeyListener[] var41 = var36.getKeyListeners();
    var2.putClientProperty((java.lang.Object)var28, (java.lang.Object)var41);
    bierse.view.RunningMessagePanel var45 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var46 = var45.getPreferredSize();
    java.awt.Dimension var47 = var45.getMaximumSize();
    java.awt.event.FocusListener[] var48 = var45.getFocusListeners();
    bierse.view.RunningMessagePanel var51 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var52 = var51.getPreferredSize();
    boolean var55 = var51.contains(10, 1);
    java.awt.im.InputMethodRequests var56 = var51.getInputMethodRequests();
    java.awt.Font var57 = var51.getFont();
    var45.setFont(var57);
    var28.setFont(var57);
    boolean var60 = var28.getAutoscrolls();
    var28.disable();
    boolean var62 = var28.getAutoscrolls();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test443() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test443");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    java.awt.Font var9 = var2.getFont();
    java.awt.Image var12 = var2.createImage((-1), 996);
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var16 = var15.isMaximumSizeSet();
    var15.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var21 = var15.getTransferHandler();
    boolean var22 = var15.hasFocus();
    var15.setVerifyInputWhenFocusTarget(false);
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    boolean var29 = var27.isOpaque();
    javax.swing.InputMap var30 = var27.getInputMap();
    java.beans.PropertyChangeListener[] var32 = var27.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var33 = var27.getComponentOrientation();
    var15.applyComponentOrientation(var33);
    java.awt.Dimension var35 = var15.getMinimumSize();
    int var36 = var15.getY();
    bierse.view.RunningMessagePanel var39 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var40 = var39.getPreferredSize();
    boolean var43 = var39.contains(10, 1);
    var39.setAlignmentX((-1.0f));
    java.awt.Point var46 = var39.getLocation();
    java.awt.Component var47 = var15.getComponentAt(var46);
    boolean var48 = var2.contains(var46);
    java.awt.Container var49 = var2.getFocusCycleRootAncestor();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);

  }

  public void test444() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test444");


    bierse.view.MyKeyMap var2 = new bierse.view.MyKeyMap("PanelUI", 24);
    java.lang.String var3 = var2.getText();
    int var4 = var2.getCode();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "PanelUI"+ "'", var3.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 24);

  }

  public void test445() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test445");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    java.awt.Dimension var9 = var2.getPreferredSize();
    var2.show(false);
    boolean var12 = var2.isMaximumSizeSet();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var16 = var15.isMaximumSizeSet();
    var15.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var21 = var15.getTransferHandler();
    boolean var22 = var15.hasFocus();
    javax.swing.event.AncestorListener[] var23 = var15.getAncestorListeners();
    var15.enable(false);
    java.awt.Dimension var26 = var15.minimumSize();
    java.awt.Dimension var27 = var15.minimumSize();
    java.awt.Dimension var28 = var2.getSize(var27);
    java.awt.event.ComponentListener[] var29 = var2.getComponentListeners();
    java.awt.image.VolatileImage var32 = var2.createVolatileImage(1, 100);
    int var35 = var2.getBaseline(10, 13);
    var2.setVerifyInputWhenFocusTarget(true);
    java.lang.Object var38 = var2.getTreeLock();
    java.awt.peer.ComponentPeer var39 = var2.getPeer();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);

  }

  public void test446() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test446");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    var24.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var24.invalidate();
    java.awt.Dimension var31 = var24.getPreferredSize();
    int var32 = var24.getWidth();
    java.awt.Component var33 = var15.add("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var24);
    java.awt.Rectangle var34 = var24.getVisibleRect();
    java.awt.peer.ComponentPeer var35 = var24.getPeer();
    bierse.view.RunningMessagePanel var39 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var40 = var39.isMaximumSizeSet();
    var39.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var45 = var39.getWidth();
    boolean var48 = var39.inside(24, 1);
    bierse.view.RunningMessagePanel var51 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var52 = var51.isMaximumSizeSet();
    var51.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var57 = var51.getTransferHandler();
    boolean var58 = var51.hasFocus();
    var51.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var61 = var51.getPreferredSize();
    java.awt.ComponentOrientation var62 = var51.getComponentOrientation();
    var39.setComponentOrientation(var62);
    java.awt.LayoutManager var64 = var39.getLayout();
    java.awt.Component var65 = var24.add("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var39);
    boolean var66 = var39.isForegroundSet();
    var39.layout();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);

  }

  public void test447() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test447");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("hi!", 10);
    java.lang.Object var3 = var2.getTreeLock();
    boolean var4 = var2.isFontSet();
    java.awt.Dimension var5 = var2.getMinimumSize();
    var2.enable(true);
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var10.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var17 = var10.location();
    var10.setAlignmentX(0.5f);
    var10.removeNotify();
    boolean var21 = var10.isFocusTraversalPolicyProvider();
    java.awt.Rectangle var22 = var10.bounds();
    var2.paintImmediately(var22);
    var2.grabFocus();
    java.awt.Point var25 = var2.getLocation();
    int var26 = var2.getY();
    var2.doLayout();
    boolean var29 = var2.areFocusTraversalKeysSet(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test448() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test448");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    javax.swing.JRootPane var13 = var2.getRootPane();
    var2.setRequestFocusEnabled(false);
    java.awt.Dimension var16 = var2.preferredSize();
    javax.swing.InputMap var17 = var2.getInputMap();
    var2.setEnabled(false);
    java.awt.dnd.DropTarget var20 = var2.getDropTarget();
    var2.setMessage("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]");
    var2.revalidate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test449() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test449");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    boolean var40 = var2.getFocusTraversalKeysEnabled();
    var2.setAlignmentX(100.0f);
    boolean var43 = var2.isOptimizedDrawingEnabled();
    java.awt.Dimension var44 = var2.getMaximumSize();
    java.awt.Dimension var45 = var2.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test450() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test450");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    java.awt.Dimension var9 = var2.getPreferredSize();
    var2.show(false);
    boolean var12 = var2.isMaximumSizeSet();
    var2.reshape(100, 24, 10, 24);
    var2.updateUI();
    boolean var19 = var2.isRequestFocusEnabled();
    boolean var20 = var2.isFocusOwner();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test451() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test451");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.repaint(1L, (-1), (-1), 0, 100);
    boolean var9 = var2.isFocusTraversable();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var13 = var12.getPreferredSize();
    boolean var16 = var12.contains(10, 1);
    java.awt.im.InputMethodRequests var17 = var12.getInputMethodRequests();
    var12.revalidate();
    var12.firePropertyChange("hi!", (short)100, (short)0);
    var2.setNextFocusableComponent((java.awt.Component)var12);
    java.awt.event.HierarchyBoundsListener[] var24 = var12.getHierarchyBoundsListeners();
    boolean var25 = var12.isValid();
    java.awt.Image var28 = var12.createImage(0, 0);
    java.awt.peer.ComponentPeer var29 = var12.getPeer();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test452() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test452");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    var11.transferFocus();
    var11.setToolTipText("");
    var11.show();
    boolean var32 = var11.isMaximumSizeSet();
    java.awt.Dimension var33 = var11.getMinimumSize();
    boolean var34 = var11.requestDefaultFocus();
    java.awt.ComponentOrientation var35 = var11.getComponentOrientation();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test453() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test453");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    javax.swing.InputVerifier var3 = var2.getInputVerifier();
    var2.removeAll();
    boolean var5 = var2.getVerifyInputWhenFocusTarget();
    java.awt.Color var6 = var2.getForeground();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test454() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test454");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.getVerifyInputWhenFocusTarget();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var8 = var7.getMouseWheelListeners();
    boolean var9 = var7.isLightweight();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var13 = var12.isMaximumSizeSet();
    var12.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var12.invalidate();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isMaximumSizeSet();
    var21.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var29 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var30 = var29.isMaximumSizeSet();
    var29.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var35 = var29.getWidth();
    java.awt.Component[] var36 = var29.getComponents();
    var12.putClientProperty((java.lang.Object)var21, (java.lang.Object)var36);
    var21.transferFocus();
    var21.setToolTipText("");
    var21.show();
    int var42 = var21.getStringWidth();
    java.awt.Point var43 = var21.getLocation();
    var7.setLocation(var43);
    java.awt.Component var45 = var2.add("bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var7);
    boolean var46 = var2.requestDefaultFocus();
    bierse.view.RunningMessagePanel var49 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var50 = var49.isMaximumSizeSet();
    boolean var51 = var49.isOpaque();
    java.awt.event.HierarchyListener[] var52 = var49.getHierarchyListeners();
    int var53 = var49.getWidth();
    java.awt.Container var54 = var49.getTopLevelAncestor();
    var49.setToolTipText("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    bierse.view.RunningMessagePanel var59 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var60 = var59.getPreferredSize();
    java.awt.Point var61 = var59.getMousePosition();
    var59.revalidate();
    var59.revalidate();
    java.awt.Component var66 = var59.findComponentAt((-1), 0);
    java.util.Locale var67 = var59.getLocale();
    bierse.view.RunningMessagePanel var70 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var71 = var70.isMaximumSizeSet();
    var70.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var76 = var70.getWidth();
    java.awt.Image var79 = var70.createImage(24, 24);
    bierse.view.RunningMessagePanel var82 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var83 = var82.getPreferredSize();
    java.awt.Dimension var84 = var82.getMaximumSize();
    var82.repaint();
    var82.disable();
    java.awt.Rectangle var87 = var82.getBounds();
    java.awt.Rectangle var88 = var70.getBounds(var87);
    java.awt.Rectangle var89 = var59.getBounds(var88);
    java.awt.Rectangle var90 = var49.getBounds(var88);
    var2.scrollRectToVisible(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 996);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test455() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test455");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.beans.PropertyChangeListener[] var5 = var2.getPropertyChangeListeners();
    var2.setOpaque(true);
    java.awt.Insets var8 = var2.insets();
    boolean var9 = var2.isOptimizedDrawingEnabled();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (-1.0d), 0.0d);
    var2.removeNotify();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var18 = var17.getPreferredSize();
    boolean var21 = var17.contains(10, 1);
    java.awt.im.InputMethodRequests var22 = var17.getInputMethodRequests();
    boolean var23 = var17.getInheritsPopupMenu();
    java.lang.String var24 = var17.toString();
    var17.enable();
    java.awt.Image var28 = var17.createImage(0, (-1));
    var2.setNextFocusableComponent((java.awt.Component)var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var24,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var24.equals("bierse.view.RunningMessagePanel[,0,0,0var24,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test456() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test456");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.setDoubleBuffered(false);
    java.awt.GraphicsConfiguration var7 = var2.getGraphicsConfiguration();
    java.awt.Component var10 = var2.locate((-1), (-1));
    java.awt.Font var11 = var2.getFont();
    javax.swing.KeyStroke[] var12 = var2.getRegisteredKeyStrokes();
    int var13 = var2.getY();
    var2.validate();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", (-1L), 100L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);

  }

  public void test457() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test457");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    var2.revalidate();
    java.awt.event.HierarchyListener[] var9 = var2.getHierarchyListeners();
    var2.invalidate();
    java.awt.LayoutManager var11 = var2.getLayout();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    boolean var16 = var14.isOpaque();
    java.awt.event.HierarchyListener[] var17 = var14.getHierarchyListeners();
    int var18 = var14.countComponents();
    java.awt.event.HierarchyBoundsListener[] var19 = var14.getHierarchyBoundsListeners();
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var23 = var22.getPreferredSize();
    boolean var24 = var22.isPreferredSizeSet();
    var22.enable();
    javax.accessibility.AccessibleContext var26 = var22.getAccessibleContext();
    bierse.view.RunningMessagePanel var29 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var29.transferFocus();
    var29.show();
    float var32 = var29.getAlignmentX();
    var29.repaint(0L, 10, 0, 10, (-1));
    boolean var39 = var29.isEnabled();
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var43 = var42.getPreferredSize();
    javax.swing.JPopupMenu var44 = var42.getComponentPopupMenu();
    java.awt.Rectangle var45 = var42.bounds();
    java.awt.Rectangle var46 = var29.getBounds(var45);
    var22.computeVisibleRect(var46);
    var14.scrollRectToVisible(var46);
    var2.scrollRectToVisible(var46);
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var53 = var52.isMaximumSizeSet();
    boolean var54 = var52.isOpaque();
    java.awt.event.HierarchyListener[] var55 = var52.getHierarchyListeners();
    int var56 = var52.getWidth();
    int var57 = var52.countComponents();
    var52.enable(false);
    var2.setNextFocusableComponent((java.awt.Component)var52);
    java.awt.Component var61 = var52.getNextFocusableComponent();
    var52.addNotify();
    boolean var63 = var52.getVerifyInputWhenFocusTarget();
    boolean var64 = var52.isOptimizedDrawingEnabled();
    java.awt.Component var67 = var52.findComponentAt(15, 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);

  }

  public void test458() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test458");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    float var12 = var2.getAlignmentX();
    boolean var13 = var2.isMinimumSizeSet();
    var2.list();
    boolean var15 = var2.isMaximumSizeSet();
    java.awt.image.VolatileImage var18 = var2.createVolatileImage(12, 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test459() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test459");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    var2.transferFocus();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var18 = var17.isMaximumSizeSet();
    var17.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var23 = var17.getTransferHandler();
    boolean var24 = var17.hasFocus();
    javax.swing.event.AncestorListener[] var25 = var17.getAncestorListeners();
    java.awt.Dimension var26 = var17.getMinimumSize();
    boolean var27 = var17.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var31 = var30.isMaximumSizeSet();
    var30.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var36 = var30.getTransferHandler();
    boolean var37 = var30.hasFocus();
    var30.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var40 = var30.getPreferredSize();
    java.awt.Dimension var41 = var17.getSize(var40);
    var2.setSize(var40);
    bierse.view.RunningMessagePanel var45 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var46 = var45.isMaximumSizeSet();
    var45.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var45.invalidate();
    bierse.view.RunningMessagePanel var54 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var55 = var54.isMaximumSizeSet();
    var54.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var62 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var63 = var62.isMaximumSizeSet();
    var62.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var68 = var62.getWidth();
    java.awt.Component[] var69 = var62.getComponents();
    var45.putClientProperty((java.lang.Object)var54, (java.lang.Object)var69);
    boolean var72 = var45.requestFocus(false);
    var45.removeNotify();
    java.awt.ComponentOrientation var74 = var45.getComponentOrientation();
    var2.applyComponentOrientation(var74);
    boolean var76 = var2.isRequestFocusEnabled();
    java.awt.Graphics var77 = var2.getGraphics();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);

  }

  public void test460() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test460");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.countComponents();
    java.awt.event.HierarchyBoundsListener[] var7 = var2.getHierarchyBoundsListeners();
    java.awt.Rectangle var8 = var2.getBounds();
    var2.setEnabled(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test461() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test461");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.Insets var7 = var2.getInsets();
    javax.swing.JToolTip var8 = var2.createToolTip();
    var2.invalidate();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var13 = var12.getPreferredSize();
    java.awt.Point var14 = var12.getMousePosition();
    var12.revalidate();
    boolean var16 = var2.isFocusCycleRoot((java.awt.Container)var12);
    var12.firePropertyChange("hi!", 0, 100);
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var24 = var23.isMaximumSizeSet();
    boolean var25 = var23.isOpaque();
    java.beans.PropertyChangeListener[] var26 = var23.getPropertyChangeListeners();
    boolean var27 = var23.isFocusCycleRoot();
    boolean var28 = var23.getIgnoreRepaint();
    bierse.view.RunningMessagePanel var31 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var32 = var31.isMaximumSizeSet();
    boolean var33 = var31.isOpaque();
    java.awt.event.HierarchyListener[] var34 = var31.getHierarchyListeners();
    int var35 = var31.getWidth();
    int var36 = var31.countComponents();
    java.awt.Point var38 = var31.getMousePosition(true);
    var31.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var41 = var31.toString();
    java.awt.Font var42 = var31.getFont();
    bierse.view.RunningMessagePanel var45 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var46 = var45.getPreferredSize();
    boolean var49 = var45.contains(10, 1);
    java.awt.im.InputMethodRequests var50 = var45.getInputMethodRequests();
    boolean var51 = var45.getInheritsPopupMenu();
    java.lang.String var52 = var45.toString();
    java.awt.Rectangle var53 = var45.bounds();
    var31.setBounds(var53);
    var23.scrollRectToVisible(var53);
    var12.setBounds(var53);
    bierse.view.RunningMessagePanel var59 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var60 = var59.getPreferredSize();
    javax.swing.JPopupMenu var61 = var59.getComponentPopupMenu();
    java.awt.Rectangle var62 = var59.bounds();
    var59.setSize(0, 24);
    int var66 = var59.getStringHeight();
    boolean var67 = var59.isLightweight();
    var59.setVerifyInputWhenFocusTarget(true);
    java.awt.Color var70 = var59.getBackground();
    boolean var71 = var12.isFocusCycleRoot((java.awt.Container)var59);
    boolean var72 = var12.isCursorSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var41,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var41.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var41,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var52,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var52.equals("bierse.view.RunningMessagePanel[,0,0,0var52,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);

  }

  public void test462() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test462");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var8 = var2.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var12 = var11.getPreferredSize();
    boolean var13 = var11.isPreferredSizeSet();
    var11.enable();
    var11.transferFocusBackward();
    int var16 = var2.getComponentZOrder((java.awt.Component)var11);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var19.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var26 = var19.location();
    boolean var27 = var11.contains(var26);
    var11.grabFocus();
    bierse.view.RunningMessagePanel var31 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var32 = var31.isMaximumSizeSet();
    boolean var33 = var31.isOpaque();
    javax.swing.InputMap var34 = var31.getInputMap();
    java.beans.PropertyChangeListener[] var36 = var31.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var37 = var31.getComponentOrientation();
    java.awt.peer.ComponentPeer var38 = var31.getPeer();
    java.awt.Dimension var39 = var31.getMaximumSize();
    var11.setMaximumSize(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test463() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test463");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.countComponents();
    java.awt.FocusTraversalPolicy var7 = var2.getFocusTraversalPolicy();
    var2.setDebugGraphicsOptions(11);
    java.awt.Rectangle var10 = var2.bounds();
    var2.move(11, 24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test464() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test464");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    boolean var13 = var11.isOpaque();
    java.awt.event.HierarchyListener[] var14 = var11.getHierarchyListeners();
    int var15 = var11.countComponents();
    java.awt.event.HierarchyBoundsListener[] var16 = var11.getHierarchyBoundsListeners();
    boolean var18 = var11.areFocusTraversalKeysSet(1);
    boolean var19 = var2.isAncestorOf((java.awt.Component)var11);
    var2.requestFocus();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var24 = var23.getPreferredSize();
    javax.swing.JPopupMenu var25 = var23.getComponentPopupMenu();
    java.awt.Rectangle var26 = var23.bounds();
    var2.paintImmediately(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test465() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test465");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    java.awt.Rectangle var5 = var2.bounds();
    var2.setSize(0, 24);
    javax.swing.TransferHandler var9 = var2.getTransferHandler();
    boolean var10 = var2.isShowing();
    boolean var11 = var2.isRequestFocusEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test466() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test466");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    var2.disable();
    var2.enable();
    java.awt.Point var8 = var2.getMousePosition(true);
    java.awt.FocusTraversalPolicy var9 = var2.getFocusTraversalPolicy();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test467() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test467");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    javax.swing.event.ListDataListener[] var1 = var0.getListDataListeners();
    bierse.view.RunningMessagePanel var4 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var4.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var11 = var4.location();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    var14.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var20 = var14.getTransferHandler();
    boolean var21 = var14.hasFocus();
    javax.swing.event.AncestorListener[] var22 = var14.getAncestorListeners();
    java.awt.Dimension var23 = var14.getMinimumSize();
    var4.resize(var23);
    int var25 = var0.getIndexOf((java.lang.Object)var23);
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var29 = var28.getPreferredSize();
    boolean var32 = var28.contains(10, 1);
    java.awt.im.InputMethodRequests var33 = var28.getInputMethodRequests();
    var28.revalidate();
    java.awt.event.HierarchyListener[] var35 = var28.getHierarchyListeners();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var39 = var38.isMaximumSizeSet();
    boolean var40 = var38.isOpaque();
    java.awt.event.HierarchyListener[] var41 = var38.getHierarchyListeners();
    java.awt.peer.ComponentPeer var42 = var38.getPeer();
    var38.transferFocusDownCycle();
    var38.transferFocusUpCycle();
    java.awt.Dimension var45 = var38.minimumSize();
    var28.setPreferredSize(var45);
    java.awt.event.MouseWheelListener[] var47 = var28.getMouseWheelListeners();
    var0.addElement((java.lang.Object)var28);
    int var49 = var0.getSize();
    java.lang.Object var50 = var0.getSelectedItem();
    java.lang.Object var51 = var0.getSelectedItem();
    var0.removeElementAt(1);
    int var54 = var0.getSize();
    javax.swing.event.ListDataListener[] var55 = var0.getListDataListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test468() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test468");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    float var12 = var2.getAlignmentX();
    boolean var13 = var2.isMinimumSizeSet();
    var2.list();
    boolean var15 = var2.isMaximumSizeSet();
    var2.invalidate();
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    boolean var21 = var19.isOpaque();
    javax.swing.InputMap var22 = var19.getInputMap();
    java.beans.PropertyChangeListener[] var24 = var19.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var25 = var19.getComponentOrientation();
    java.awt.peer.ComponentPeer var26 = var19.getPeer();
    var19.transferFocusDownCycle();
    java.awt.Rectangle var28 = var19.getBounds();
    var2.scrollRectToVisible(var28);
    var2.list();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test469() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test469");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.Insets var7 = var2.getInsets();
    javax.swing.JToolTip var8 = var2.createToolTip();
    var2.invalidate();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var13 = var12.getPreferredSize();
    java.awt.Point var14 = var12.getMousePosition();
    var12.revalidate();
    boolean var16 = var2.isFocusCycleRoot((java.awt.Container)var12);
    java.awt.Dimension var17 = var2.getPreferredSize();
    java.awt.event.HierarchyBoundsListener[] var18 = var2.getHierarchyBoundsListeners();
    int var19 = var2.getWidth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);

  }

  public void test470() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test470");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    var2.enable(false);
    java.awt.Dimension var13 = var2.minimumSize();
    java.awt.GraphicsConfiguration var14 = var2.getGraphicsConfiguration();
    java.awt.event.MouseMotionListener[] var15 = var2.getMouseMotionListeners();
    bierse.view.RunningMessagePanel var18 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var19 = var18.isMaximumSizeSet();
    boolean var20 = var18.isOpaque();
    java.awt.event.HierarchyListener[] var21 = var18.getHierarchyListeners();
    int var22 = var18.getWidth();
    int var23 = var18.countComponents();
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var27 = var26.getPreferredSize();
    boolean var30 = var26.contains(10, 1);
    java.awt.im.InputMethodRequests var31 = var26.getInputMethodRequests();
    boolean var34 = var26.inside((-1), 100);
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var38 = var37.getPreferredSize();
    boolean var41 = var37.contains(10, 1);
    var37.setAlignmentX((-1.0f));
    java.awt.Point var44 = var37.getLocation();
    java.awt.Point var45 = var26.getLocation(var44);
    boolean var46 = var18.contains(var45);
    java.awt.Component var47 = var2.getComponentAt(var45);
    var2.transferFocusBackward();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);

  }

  public void test471() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test471");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    java.awt.event.ContainerListener[] var7 = var2.getContainerListeners();
    java.awt.Dimension var8 = var2.getMaximumSize();
    boolean var9 = var2.isRequestFocusEnabled();
    boolean var10 = var2.requestDefaultFocus();
    var2.setSpeed(996);
    java.awt.Point var13 = var2.getMousePosition();
    boolean var14 = var2.isPaintingForPrint();
    var2.show();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test472() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test472");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    int var7 = var2.countComponents();
    java.awt.Point var9 = var2.getMousePosition(true);
    var2.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    boolean var12 = var2.isBackgroundSet();
    var2.move(15, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test473() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test473");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    var2.setAlignmentY(10.0f);
    var2.setInheritsPopupMenu(false);
    boolean var18 = var2.requestDefaultFocus();
    var2.transferFocusBackward();
    javax.swing.JToolTip var20 = var2.createToolTip();
    javax.swing.border.Border var21 = var2.getBorder();
    var2.setSpeed(32767);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test474() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test474");


    bierse.view.MyKeyMap var2 = new bierse.view.MyKeyMap("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=8,maximumSize=,minimumSize=,preferredSize=]", 1);
    java.lang.String var3 = var2.getText();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var3,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=8,maximumSize=,minimumSize=,preferredSize=]"+ "'", var3.equals("bierse.view.RunningMessagePanel[,0,0,0var3,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=8,maximumSize=,minimumSize=,preferredSize=]"));

  }

  public void test475() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test475");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    javax.swing.InputMap var5 = var2.getInputMap();
    java.beans.PropertyChangeListener[] var7 = var2.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var8 = var2.getComponentOrientation();
    var2.transferFocusBackward();
    boolean var10 = var2.isFocusTraversalPolicyProvider();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var14 = var13.isMaximumSizeSet();
    var13.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var19 = var13.getWidth();
    boolean var22 = var13.inside(24, 1);
    java.awt.image.VolatileImage var25 = var13.createVolatileImage(0, 1);
    java.lang.String var26 = var13.getUIClassID();
    var13.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", '4', '4');
    int var31 = var13.getStringWidth();
    javax.swing.JToolTip var32 = var13.createToolTip();
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var36 = var35.isMaximumSizeSet();
    var35.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var41 = var35.getTransferHandler();
    boolean var42 = var35.hasFocus();
    javax.swing.event.AncestorListener[] var43 = var35.getAncestorListeners();
    javax.accessibility.AccessibleContext var44 = var35.getAccessibleContext();
    var35.setOpaque(false);
    java.awt.Component.BaselineResizeBehavior var47 = var35.getBaselineResizeBehavior();
    bierse.view.RunningMessagePanel var50 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var51 = var50.isMaximumSizeSet();
    boolean var52 = var50.isOpaque();
    java.awt.event.HierarchyListener[] var53 = var50.getHierarchyListeners();
    int var54 = var50.getWidth();
    int var55 = var50.countComponents();
    java.awt.Point var57 = var50.getMousePosition(true);
    var50.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var60 = var50.toString();
    java.awt.Font var61 = var50.getFont();
    javax.swing.plaf.PanelUI var62 = var50.getUI();
    java.awt.Dimension var63 = var50.getPreferredSize();
    var50.firePropertyChange("", (-1), 1);
    bierse.view.RunningMessagePanel var70 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var71 = var70.getPreferredSize();
    boolean var74 = var70.contains(10, 1);
    var70.setFocusTraversalPolicyProvider(false);
    float var77 = var70.getAlignmentX();
    java.awt.Component.BaselineResizeBehavior var78 = var70.getBaselineResizeBehavior();
    java.awt.dnd.DropTarget var79 = var70.getDropTarget();
    var70.layout();
    var70.setDebugGraphicsOptions(996);
    java.awt.Graphics var83 = var70.getGraphics();
    var50.print(var83);
    var35.update(var83);
    var32.print(var83);
    var2.print(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "PanelUI"+ "'", var26.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 996);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var60,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var60.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var60,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test476() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test476");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var9 = var2.location();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var13 = var12.isMaximumSizeSet();
    var12.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var18 = var12.getTransferHandler();
    boolean var19 = var12.hasFocus();
    javax.swing.event.AncestorListener[] var20 = var12.getAncestorListeners();
    java.awt.Dimension var21 = var12.getMinimumSize();
    var2.resize(var21);
    var2.validate();
    int var24 = var2.getComponentCount();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", 100L, 100L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);

  }

  public void test477() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test477");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    java.awt.Dimension var9 = var2.getPreferredSize();
    int var10 = var2.getWidth();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var14 = var13.isMaximumSizeSet();
    var13.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var19 = var13.getTransferHandler();
    boolean var20 = var13.hasFocus();
    var13.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var23 = var13.getPreferredSize();
    java.awt.ComponentOrientation var24 = var13.getComponentOrientation();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    javax.swing.event.AncestorListener[] var35 = var27.getAncestorListeners();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var39 = var38.isMaximumSizeSet();
    var38.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var44 = var38.getTransferHandler();
    boolean var45 = var38.hasFocus();
    var38.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var48 = var38.getPreferredSize();
    java.awt.ComponentOrientation var49 = var38.getComponentOrientation();
    var13.add((java.awt.Component)var27, (java.lang.Object)var38);
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var54 = var53.getPreferredSize();
    java.awt.Dimension var55 = var53.getMaximumSize();
    var2.add((java.awt.Component)var27, (java.lang.Object)var53, (-1));
    bierse.view.RunningMessagePanel var60 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var61 = var60.isMaximumSizeSet();
    var60.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var66 = var60.getTransferHandler();
    java.awt.Component var69 = var60.getComponentAt(0, 0);
    java.awt.Dimension var70 = var60.minimumSize();
    var53.setMaximumSize(var70);
    bierse.view.RunningMessagePanel var74 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var75 = var74.isMaximumSizeSet();
    boolean var76 = var74.isOpaque();
    java.awt.event.HierarchyListener[] var77 = var74.getHierarchyListeners();
    int var78 = var74.countComponents();
    int var79 = var74.getStringHeight();
    java.awt.Point var80 = var74.location();
    boolean var81 = var53.contains(var80);
    var53.list();
    javax.swing.event.AncestorListener[] var83 = var53.getAncestorListeners();
    boolean var84 = var53.getFocusTraversalKeysEnabled();
    var53.nextFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);

  }

  public void test478() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test478");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    boolean var21 = var15.isValidateRoot();
    var15.repaint();
    java.lang.String var23 = var15.toString();
    var15.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", 100.0d, 10.0d);
    java.awt.Container var28 = var15.getTopLevelAncestor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var23,invalid,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var23.equals("bierse.view.RunningMessagePanel[,0,0,0var23,invalid,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test479() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test479");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var3 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var4 = var3.isMaximumSizeSet();
    var3.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var9 = var3.getTransferHandler();
    boolean var10 = var3.hasFocus();
    javax.swing.event.AncestorListener[] var11 = var3.getAncestorListeners();
    java.awt.Dimension var12 = var3.getMinimumSize();
    boolean var13 = var3.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    var16.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var26 = var16.getPreferredSize();
    java.awt.Dimension var27 = var3.getSize(var26);
    int var28 = var0.getIndexOf((java.lang.Object)var3);
    java.lang.Object var30 = var0.getElementAt(0);
    javax.swing.event.ListDataListener[] var31 = var0.getListDataListeners();
    javax.swing.event.ListDataListener[] var32 = var0.getListDataListeners();
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var36 = var35.isMaximumSizeSet();
    var35.layout();
    var35.revalidate();
    boolean var39 = var35.isFocusOwner();
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var43 = var42.getPreferredSize();
    java.awt.Dimension var44 = var42.getMaximumSize();
    var42.disable();
    var35.putClientProperty((java.lang.Object)var42, (java.lang.Object)'a');
    var42.transferFocusDownCycle();
    bierse.view.RunningMessagePanel var51 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var52 = var51.getPreferredSize();
    boolean var55 = var51.contains(10, 1);
    var51.setAlignmentX((-1.0f));
    java.awt.Toolkit var58 = var51.getToolkit();
    var51.nextFocus();
    int var60 = var51.getStringWidth();
    bierse.view.RunningMessagePanel var63 = new bierse.view.RunningMessagePanel("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (-1));
    var42.putClientProperty((java.lang.Object)var51, (java.lang.Object)"bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    var0.removeElement((java.lang.Object)var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 996);

  }

  public void test480() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test480");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    java.awt.Dimension var9 = var2.getPreferredSize();
    var2.show(false);
    boolean var12 = var2.isMaximumSizeSet();
    var2.reshape(100, 24, 10, 24);
    var2.move(10, 24);
    boolean var21 = var2.requestFocusInWindow();
    javax.accessibility.AccessibleContext var22 = var2.getAccessibleContext();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    var25.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var25.invalidate();
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var36 = var35.getPreferredSize();
    java.awt.Point var37 = var35.getMousePosition();
    var35.revalidate();
    var35.transferFocus();
    java.awt.Toolkit var40 = var35.getToolkit();
    boolean var41 = var35.isFocusTraversalPolicySet();
    java.awt.Component var42 = var25.add("PanelUI", (java.awt.Component)var35);
    bierse.view.RunningMessagePanel var45 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var45.transferFocus();
    var45.show();
    var45.disable();
    java.awt.Dimension var49 = var45.size();
    var25.setPreferredSize(var49);
    var2.setPreferredSize(var49);
    java.awt.event.InputMethodListener[] var52 = var2.getInputMethodListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test481() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test481");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    var2.transferFocus();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var18 = var17.isMaximumSizeSet();
    var17.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var23 = var17.getTransferHandler();
    boolean var24 = var17.hasFocus();
    javax.swing.event.AncestorListener[] var25 = var17.getAncestorListeners();
    java.awt.Dimension var26 = var17.getMinimumSize();
    boolean var27 = var17.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var31 = var30.isMaximumSizeSet();
    var30.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var36 = var30.getTransferHandler();
    boolean var37 = var30.hasFocus();
    var30.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var40 = var30.getPreferredSize();
    java.awt.Dimension var41 = var17.getSize(var40);
    var2.setSize(var40);
    bierse.view.RunningMessagePanel var45 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var46 = var45.isMaximumSizeSet();
    var45.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var45.invalidate();
    java.awt.Dimension var52 = var45.getPreferredSize();
    bierse.view.RunningMessagePanel var55 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var55.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var62 = var55.location();
    java.awt.Point var63 = var45.getLocation(var62);
    java.awt.Point var64 = var2.getLocation(var62);
    boolean var66 = var2.requestFocus(true);
    boolean var67 = var2.isDoubleBuffered();
    javax.swing.JToolTip var68 = var2.createToolTip();
    var68.enableInputMethods(true);
    java.awt.Toolkit var71 = var68.getToolkit();
    java.awt.Insets var72 = var68.insets();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var74 = var68.areFocusTraversalKeysSet(14);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test482() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test482");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    boolean var8 = var2.getInheritsPopupMenu();
    java.lang.String var9 = var2.toString();
    java.awt.Rectangle var10 = var2.bounds();
    java.awt.GraphicsConfiguration var11 = var2.getGraphicsConfiguration();
    var2.enableInputMethods(false);
    boolean var14 = var2.getInheritsPopupMenu();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var9,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var9.equals("bierse.view.RunningMessagePanel[,0,0,0var9,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test483() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test483");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    java.awt.Container var7 = var2.getTopLevelAncestor();
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var11 = var10.isMaximumSizeSet();
    var10.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var10.invalidate();
    java.awt.Dimension var17 = var10.getPreferredSize();
    int var18 = var10.getWidth();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isMaximumSizeSet();
    var21.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var27 = var21.getTransferHandler();
    boolean var28 = var21.hasFocus();
    var21.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var31 = var21.getPreferredSize();
    java.awt.ComponentOrientation var32 = var21.getComponentOrientation();
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var36 = var35.isMaximumSizeSet();
    var35.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var41 = var35.getTransferHandler();
    boolean var42 = var35.hasFocus();
    javax.swing.event.AncestorListener[] var43 = var35.getAncestorListeners();
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var47 = var46.isMaximumSizeSet();
    var46.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var52 = var46.getTransferHandler();
    boolean var53 = var46.hasFocus();
    var46.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var56 = var46.getPreferredSize();
    java.awt.ComponentOrientation var57 = var46.getComponentOrientation();
    var21.add((java.awt.Component)var35, (java.lang.Object)var46);
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var62 = var61.getPreferredSize();
    java.awt.Dimension var63 = var61.getMaximumSize();
    var10.add((java.awt.Component)var35, (java.lang.Object)var61, (-1));
    bierse.view.RunningMessagePanel var68 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var68.transferFocus();
    var68.show();
    float var71 = var68.getAlignmentX();
    boolean var74 = var68.contains(0, 24);
    java.awt.Color var75 = var68.getForeground();
    var10.setForeground(var75);
    var2.setBackground(var75);
    boolean var78 = var2.isFocusOwner();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var79 = var2.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);

  }

  public void test484() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test484");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    float var5 = var2.getAlignmentX();
    var2.move(100, 10);
    var2.list();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);

  }

  public void test485() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test485");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.repaint(1L, (-1), (-1), 0, 100);
    boolean var9 = var2.isFocusTraversable();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var13 = var12.getPreferredSize();
    boolean var16 = var12.contains(10, 1);
    java.awt.im.InputMethodRequests var17 = var12.getInputMethodRequests();
    var12.revalidate();
    var12.firePropertyChange("hi!", (short)100, (short)0);
    var2.setNextFocusableComponent((java.awt.Component)var12);
    java.awt.event.HierarchyBoundsListener[] var24 = var12.getHierarchyBoundsListeners();
    boolean var25 = var12.isMinimumSizeSet();
    java.awt.Point var26 = var12.getMousePosition();
    java.awt.Component var29 = var12.locate(1, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test486() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test486");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Dimension var4 = var2.getMaximumSize();
    var2.repaint();
    var2.disable();
    var2.removeAll();
    var2.resetKeyboardActions();
    boolean var9 = var2.isFocusable();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var12.transferFocus();
    var12.show();
    var12.disable();
    var12.enable();
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    boolean var21 = var19.isOpaque();
    javax.swing.InputMap var22 = var19.getInputMap();
    java.beans.PropertyChangeListener[] var24 = var19.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var25 = var19.getComponentOrientation();
    java.awt.peer.ComponentPeer var26 = var19.getPeer();
    var19.transferFocusDownCycle();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var31 = var30.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var34.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var41 = var34.location();
    java.awt.Component var42 = var30.findComponentAt(var41);
    bierse.view.RunningMessagePanel var45 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var45.transferFocus();
    var45.show();
    bierse.view.RunningMessagePanel var50 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var51 = var50.getPreferredSize();
    boolean var54 = var50.contains(10, 1);
    java.awt.im.InputMethodRequests var55 = var50.getInputMethodRequests();
    java.awt.Font var56 = var50.getFont();
    var45.setFont(var56);
    var30.setFont(var56);
    var19.setFont(var56);
    var12.setFont(var56);
    var2.setFont(var56);
    boolean var62 = var2.isFocusOwner();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test487() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test487");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var43 = var42.getPreferredSize();
    java.awt.Dimension var44 = var42.getMaximumSize();
    var27.resize(var44);
    var27.transferFocusDownCycle();
    boolean var49 = var27.inside(24, 1);
    var27.revalidate();
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var54 = var53.getPreferredSize();
    boolean var57 = var53.contains(10, 1);
    java.awt.Insets var58 = var53.getInsets();
    javax.swing.JToolTip var59 = var53.createToolTip();
    var53.invalidate();
    var53.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", false, true);
    java.awt.Dimension var65 = var53.getMaximumSize();
    var27.setPreferredSize(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test488() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test488");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    var2.enable();
    javax.accessibility.AccessibleContext var6 = var2.getAccessibleContext();
    var2.setFocusable(false);
    java.awt.Container var9 = var2.getTopLevelAncestor();
    var2.setSpeed(13);
    java.awt.Insets var12 = var2.getInsets();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var16 = var15.isMaximumSizeSet();
    boolean var17 = var15.isOpaque();
    java.awt.event.HierarchyListener[] var18 = var15.getHierarchyListeners();
    boolean var19 = var15.isValidateRoot();
    java.awt.event.MouseMotionListener[] var20 = var15.getMouseMotionListeners();
    java.awt.Component var21 = var15.getNextFocusableComponent();
    var2.setNextFocusableComponent((java.awt.Component)var15);
    javax.swing.JRootPane var23 = var2.getRootPane();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test489() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test489");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    java.awt.Rectangle var5 = var2.bounds();
    var2.setSize(0, 24);
    int var9 = var2.getStringHeight();
    var2.disable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 24);

  }

  public void test490() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test490");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    var2.firePropertyChange("hi!", ' ', ' ');
    javax.accessibility.AccessibleContext var11 = var2.getAccessibleContext();
    var2.resize(100, 0);
    java.awt.Dimension var15 = var2.getMaximumSize();
    bierse.view.RunningMessagePanel var18 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var19 = var18.isMaximumSizeSet();
    var18.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var18.invalidate();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var36 = var35.isMaximumSizeSet();
    var35.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var41 = var35.getWidth();
    java.awt.Component[] var42 = var35.getComponents();
    var18.putClientProperty((java.lang.Object)var27, (java.lang.Object)var42);
    boolean var44 = var27.isPaintingForPrint();
    var27.show(true);
    bierse.view.RunningMessagePanel var49 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var50 = var49.getPreferredSize();
    java.awt.Point var51 = var49.getMousePosition();
    var49.revalidate();
    var49.revalidate();
    bierse.view.RunningMessagePanel var56 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var57 = var56.isMaximumSizeSet();
    var56.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var64 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var64.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var71 = var64.location();
    boolean var72 = var56.contains(var71);
    java.awt.Point var73 = var49.getLocation(var71);
    java.awt.Component var74 = var27.getComponentAt(var73);
    java.awt.Point var75 = var2.getLocation(var73);
    var2.disable();
    var2.removeNotify();
    var2.setToolTipText("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    javax.swing.InputMap var80 = var2.getInputMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test491() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test491");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.Insets var7 = var2.getInsets();
    javax.swing.JToolTip var8 = var2.createToolTip();
    int var9 = var8.getDebugGraphicsOptions();
    java.awt.peer.ComponentPeer var10 = var8.getPeer();
    javax.swing.event.AncestorListener[] var11 = var8.getAncestorListeners();
    boolean var12 = var8.isOpaque();
    var8.setVerifyInputWhenFocusTarget(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test492() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test492");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    boolean var11 = var2.isForegroundSet();
    java.awt.Insets var12 = var2.getInsets();
    java.awt.event.ContainerListener[] var13 = var2.getContainerListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test493() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test493");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    java.awt.Font var9 = var2.getFont();
    var2.enable();
    boolean var11 = var2.getIgnoreRepaint();
    java.awt.ComponentOrientation var12 = var2.getComponentOrientation();
    var2.addNotify();
    boolean var16 = var2.inside(100, 996);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test494() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test494");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    var2.firePropertyChange("hi!", ' ', ' ');
    javax.accessibility.AccessibleContext var11 = var2.getAccessibleContext();
    var2.resize(100, 0);
    java.awt.Dimension var15 = var2.getMaximumSize();
    var2.paintImmediately(10, 24, 100, 100);
    java.awt.im.InputContext var21 = var2.getInputContext();
    boolean var22 = var2.isShowing();
    var2.setOpaque(false);
    java.awt.Graphics var25 = var2.getGraphics();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test495() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test495");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    var2.invalidate();
    java.awt.event.FocusListener[] var6 = var2.getFocusListeners();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var10 = var9.isMaximumSizeSet();
    var9.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var15 = var9.getTransferHandler();
    boolean var16 = var9.hasFocus();
    var9.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var19 = var9.getPreferredSize();
    java.awt.ComponentOrientation var20 = var9.getComponentOrientation();
    var9.transferFocus();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    var24.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var30 = var24.getTransferHandler();
    boolean var31 = var24.hasFocus();
    javax.swing.event.AncestorListener[] var32 = var24.getAncestorListeners();
    java.awt.Dimension var33 = var24.getMinimumSize();
    boolean var34 = var24.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    var37.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var47 = var37.getPreferredSize();
    java.awt.Dimension var48 = var24.getSize(var47);
    var9.setSize(var47);
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var53 = var52.getPreferredSize();
    boolean var56 = var52.contains(10, 1);
    java.awt.Insets var57 = var52.getInsets();
    javax.swing.JToolTip var58 = var52.createToolTip();
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var62 = var61.isMaximumSizeSet();
    var61.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var67 = var61.getTransferHandler();
    boolean var68 = var61.hasFocus();
    javax.swing.event.AncestorListener[] var69 = var61.getAncestorListeners();
    var61.enable(false);
    int var72 = var58.getComponentZOrder((java.awt.Component)var61);
    boolean var73 = var58.requestFocusInWindow();
    boolean var74 = var58.isOptimizedDrawingEnabled();
    var2.add((java.awt.Component)var9, (java.lang.Object)var58);
    java.beans.PropertyChangeListener[] var77 = var58.getPropertyChangeListeners("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    boolean var78 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var58);
    java.awt.Insets var79 = var58.insets();
    boolean var80 = var58.isRequestFocusEnabled();
    java.beans.PropertyChangeListener[] var81 = var58.getPropertyChangeListeners();
    var58.enable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test496() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test496");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.setDoubleBuffered(false);
    java.awt.Dimension var7 = var2.minimumSize();
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var11 = var10.isMaximumSizeSet();
    boolean var12 = var10.isOpaque();
    java.awt.event.HierarchyListener[] var13 = var10.getHierarchyListeners();
    int var14 = var10.countComponents();
    java.awt.event.HierarchyBoundsListener[] var15 = var10.getHierarchyBoundsListeners();
    bierse.view.RunningMessagePanel var18 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var19 = var18.isMaximumSizeSet();
    boolean var20 = var18.isOpaque();
    java.awt.event.HierarchyListener[] var21 = var18.getHierarchyListeners();
    int var22 = var18.getWidth();
    java.awt.event.ContainerListener[] var23 = var18.getContainerListeners();
    java.awt.Dimension var24 = var18.getMaximumSize();
    var10.setMinimumSize(var24);
    var10.revalidate();
    int var27 = var10.countComponents();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var31 = var30.getPreferredSize();
    java.awt.Dimension var32 = var30.getMaximumSize();
    java.awt.Insets var33 = var30.getInsets();
    java.beans.PropertyChangeListener[] var35 = var30.getPropertyChangeListeners("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    var2.putClientProperty((java.lang.Object)var10, (java.lang.Object)"bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    var10.setInheritsPopupMenu(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test497() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test497");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var8 = var7.getPreferredSize();
    javax.swing.JPopupMenu var9 = var7.getComponentPopupMenu();
    java.awt.Rectangle var10 = var7.bounds();
    var2.computeVisibleRect(var10);
    boolean var12 = var2.isManagingFocus();
    var2.transferFocus();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", true, false);
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var21 = var20.isMaximumSizeSet();
    boolean var22 = var20.isOpaque();
    java.awt.event.HierarchyListener[] var23 = var20.getHierarchyListeners();
    int var24 = var20.getWidth();
    int var25 = var20.countComponents();
    java.awt.Point var27 = var20.getMousePosition(true);
    var20.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var30 = var20.toString();
    java.awt.Font var31 = var20.getFont();
    javax.swing.plaf.PanelUI var32 = var20.getUI();
    java.awt.Dimension var33 = var20.getPreferredSize();
    var20.firePropertyChange("", (-1), 1);
    int var40 = var20.getBaseline(1, 12);
    bierse.view.RunningMessagePanel var43 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var44 = var43.isMaximumSizeSet();
    var43.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var49 = var43.getTransferHandler();
    boolean var50 = var43.hasFocus();
    var43.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var53 = var43.getPreferredSize();
    java.awt.ComponentOrientation var54 = var43.getComponentOrientation();
    java.lang.String var55 = var43.getName();
    java.awt.Dimension var56 = var43.size();
    java.awt.Dimension var57 = var20.getSize(var56);
    java.awt.ComponentOrientation var58 = var20.getComponentOrientation();
    var2.applyComponentOrientation(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var30,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var30.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var30,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test498() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test498");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    boolean var8 = var2.getInheritsPopupMenu();
    java.lang.String var9 = var2.toString();
    java.awt.Dimension var10 = var2.size();
    java.awt.image.ColorModel var11 = var2.getColorModel();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    boolean var16 = var14.isOpaque();
    java.awt.event.HierarchyListener[] var17 = var14.getHierarchyListeners();
    int var18 = var14.getWidth();
    java.awt.event.ContainerListener[] var19 = var14.getContainerListeners();
    java.awt.Dimension var20 = var14.getMaximumSize();
    boolean var21 = var14.isRequestFocusEnabled();
    boolean var22 = var14.requestDefaultFocus();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var26 = var25.getPreferredSize();
    java.awt.Point var27 = var25.getMousePosition();
    var25.revalidate();
    bierse.view.RunningMessagePanel var31 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var32 = var31.isMaximumSizeSet();
    var31.layout();
    var31.invalidate();
    var25.setNextFocusableComponent((java.awt.Component)var31);
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var39 = var38.getPreferredSize();
    boolean var42 = var38.contains(10, 1);
    java.awt.Insets var43 = var38.getInsets();
    javax.swing.JToolTip var44 = var38.createToolTip();
    bierse.view.RunningMessagePanel var47 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var48 = var47.isMaximumSizeSet();
    var47.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var53 = var47.getTransferHandler();
    boolean var54 = var47.hasFocus();
    var47.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var57 = var47.getPreferredSize();
    java.awt.ComponentOrientation var58 = var47.getComponentOrientation();
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var62 = var61.isMaximumSizeSet();
    var61.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var67 = var61.getTransferHandler();
    boolean var68 = var61.hasFocus();
    javax.swing.event.AncestorListener[] var69 = var61.getAncestorListeners();
    bierse.view.RunningMessagePanel var72 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var73 = var72.isMaximumSizeSet();
    var72.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var78 = var72.getTransferHandler();
    boolean var79 = var72.hasFocus();
    var72.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var82 = var72.getPreferredSize();
    java.awt.ComponentOrientation var83 = var72.getComponentOrientation();
    var47.add((java.awt.Component)var61, (java.lang.Object)var72);
    bierse.view.RunningMessagePanel var87 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var88 = var87.getPreferredSize();
    java.awt.Dimension var89 = var87.getMaximumSize();
    var72.resize(var89);
    var44.setPreferredSize(var89);
    java.awt.Dimension var92 = var25.getSize(var89);
    var14.setPreferredSize(var89);
    var2.resize(var89);
    int var95 = var2.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var9,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var9.equals("bierse.view.RunningMessagePanel[,0,0,0var9,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == 0);

  }

  public void test499() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test499");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    bierse.view.RunningMessagePanel var6 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var7 = var6.isMaximumSizeSet();
    boolean var8 = var6.isOpaque();
    java.awt.event.HierarchyListener[] var9 = var6.getHierarchyListeners();
    int var10 = var6.countComponents();
    java.awt.event.HierarchyBoundsListener[] var11 = var6.getHierarchyBoundsListeners();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    boolean var16 = var14.isOpaque();
    java.awt.event.HierarchyListener[] var17 = var14.getHierarchyListeners();
    int var18 = var14.getWidth();
    java.awt.event.ContainerListener[] var19 = var14.getContainerListeners();
    java.awt.Dimension var20 = var14.getMaximumSize();
    var6.setMinimumSize(var20);
    java.awt.Dimension var22 = var2.getSize(var20);
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var25.repaint(1L, (-1), (-1), 0, 100);
    boolean var32 = var25.isFocusTraversable();
    javax.swing.ActionMap var33 = var25.getActionMap();
    var2.setActionMap(var33);
    boolean var35 = var2.isMaximumSizeSet();
    boolean var36 = var2.getVerifyInputWhenFocusTarget();
    java.awt.event.HierarchyListener[] var37 = var2.getHierarchyListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test500() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest12.test500");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var3 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var4 = var3.isMaximumSizeSet();
    boolean var5 = var3.isOpaque();
    java.beans.PropertyChangeListener[] var6 = var3.getPropertyChangeListeners();
    var3.setOpaque(true);
    var3.setRequestFocusEnabled(false);
    var0.insertElementAt((java.lang.Object)var3, 1);
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var16 = var15.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var19.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var26 = var19.location();
    java.awt.Component var27 = var15.findComponentAt(var26);
    var15.setEnabled(true);
    bierse.view.RunningMessagePanel var32 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var32.transferFocus();
    var32.show();
    float var35 = var32.getAlignmentX();
    boolean var38 = var32.contains(0, 24);
    bierse.view.RunningMessagePanel var41 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var42 = var41.getPreferredSize();
    java.awt.Dimension var43 = var41.getMaximumSize();
    java.awt.event.FocusListener[] var44 = var41.getFocusListeners();
    bierse.view.RunningMessagePanel var47 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var48 = var47.getPreferredSize();
    boolean var51 = var47.contains(10, 1);
    java.awt.im.InputMethodRequests var52 = var47.getInputMethodRequests();
    java.awt.Font var53 = var47.getFont();
    var41.setFont(var53);
    java.awt.FontMetrics var55 = var32.getFontMetrics(var53);
    java.awt.FontMetrics var56 = var15.getFontMetrics(var53);
    int var57 = var15.getWidth();
    var0.addElement((java.lang.Object)var57);
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var62 = var61.getPreferredSize();
    boolean var65 = var61.contains(10, 1);
    java.awt.im.InputMethodRequests var66 = var61.getInputMethodRequests();
    var61.revalidate();
    var61.enable(true);
    var0.addElement((java.lang.Object)var61);
    java.lang.Object var71 = var0.getSelectedItem();
    bierse.view.RunningMessagePanel var74 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var75 = var74.isMaximumSizeSet();
    var74.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var80 = var74.getTransferHandler();
    boolean var81 = var74.hasFocus();
    var74.setVerifyInputWhenFocusTarget(false);
    int var84 = var74.getDebugGraphicsOptions();
    java.awt.Component var87 = var74.locate(24, 100);
    boolean var88 = var74.getInheritsPopupMenu();
    var74.removeNotify();
    var0.insertElementAt((java.lang.Object)var74, 12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);

  }

}
