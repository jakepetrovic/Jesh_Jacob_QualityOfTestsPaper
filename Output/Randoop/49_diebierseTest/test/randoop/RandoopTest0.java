package randoop;

import junit.framework.*;

public class RandoopTest0 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test1");


    bierse.Bierse var0 = new bierse.Bierse();

  }

  public void test2() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test2");


    java.lang.String var0 = bierse.model.Drink.getDataHeaderString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var0 + "' != '" + "NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD"+ "'", var0.equals("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD"));

  }

  public void test3() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test3");


    java.awt.Window[] var0 = java.awt.Window.getOwnerlessWindows();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test4() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test4");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var4 = var2.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }

  }

  public void test5() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test5");


    java.awt.Window[] var0 = java.awt.Window.getWindows();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test6() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test6");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var17 = var16.getPreferredSize();
    boolean var20 = var16.contains(10, 1);
    var16.setFocusTraversalPolicyProvider(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setComponentZOrder((java.awt.Component)var16, (-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test7() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test7");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    int var12 = var2.getDebugGraphicsOptions();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.remove((-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);

  }

  public void test8() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test8");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    var2.revalidate();
    var2.enable(true);
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var14 = var13.isMaximumSizeSet();
    var13.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var19 = var13.getTransferHandler();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setComponentZOrder((java.awt.Component)var13, 1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test9() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test9");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    boolean var10 = var2.inside((-1), 100);
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var14 = var13.getPreferredSize();
    java.awt.Point var15 = var13.getMousePosition();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setComponentZOrder((java.awt.Component)var13, 100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test10() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test10");


    javax.swing.JFrame.setDefaultLookAndFeelDecorated(false);

  }

  public void test11() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test11");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    java.awt.Component[] var9 = var2.getComponents();
    java.awt.event.MouseListener[] var10 = var2.getMouseListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test12() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test12");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    var2.firePropertyChange("hi!", 100.0f, (-1.0f));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var14 = var2.getComponent(1);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test13() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test13");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    boolean var40 = var2.getFocusTraversalKeysEnabled();
    var2.setAlignmentX(100.0f);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setSpeed((-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);

  }

  public void test14() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test14");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Container var4 = var2.getParent();
    boolean var7 = var2.inside(24, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test15() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test15");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      javax.swing.InputMap var41 = var16.getInputMap(24);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test16() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test16");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.revalidate();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var9 = var8.isMaximumSizeSet();
    var8.layout();
    var8.invalidate();
    var2.setNextFocusableComponent((java.awt.Component)var8);
    float var13 = var8.getAlignmentX();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);

  }

  public void test17() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test17");


    boolean var0 = javax.swing.JFrame.isDefaultLookAndFeelDecorated();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var0 == false);

  }

  public void test18() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test18");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    var11.transferFocus();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var30 = var11.getComponent(24);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test19() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test19");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var3 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var4 = var3.isMaximumSizeSet();
    boolean var5 = var3.isOpaque();
    java.beans.PropertyChangeListener[] var6 = var3.getPropertyChangeListeners();
    var3.setOpaque(true);
    var3.setRequestFocusEnabled(false);
    var0.insertElementAt((java.lang.Object)var3, 1);
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var16 = var15.isMaximumSizeSet();
    boolean var17 = var15.isOpaque();
    java.awt.event.HierarchyListener[] var18 = var15.getHierarchyListeners();
    int var19 = var15.countComponents();
    java.awt.FocusTraversalPolicy var20 = var15.getFocusTraversalPolicy();
    java.awt.event.ContainerListener[] var21 = var15.getContainerListeners();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.insertElementAt((java.lang.Object)var15, 24);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test20() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test20");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    java.awt.Font var9 = var2.getFont();
    java.beans.PropertyChangeListener[] var11 = var2.getPropertyChangeListeners("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    boolean var12 = var2.isValidateRoot();
    var2.transferFocusUpCycle();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var15 = var2.getComponent(1);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test21() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test21");


    bierse.view.MyKeyMap var1 = bierse.view.KeyMapComboBoxModel.getMyKeyMapForKeyCode(100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test22() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test22");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    boolean var10 = var2.inside((-1), 100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var12 = var2.getComponent((-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test23() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test23");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    boolean var10 = var2.inside((-1), 100);
    java.beans.PropertyChangeListener[] var12 = var2.getPropertyChangeListeners("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    var2.removeNotify();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var17 = var16.getPreferredSize();
    boolean var20 = var16.contains(10, 1);
    var16.disable();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setComponentZOrder((java.awt.Component)var16, 100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test24() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test24");


    java.awt.Frame[] var0 = java.awt.Frame.getFrames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test25() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test25");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    boolean var16 = var14.isOpaque();
    javax.swing.InputMap var17 = var14.getInputMap();
    java.beans.PropertyChangeListener[] var19 = var14.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var20 = var14.getComponentOrientation();
    var2.applyComponentOrientation(var20);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var24 = var2.getBaseline((-1), 0);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test26() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test26");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setSpeed((-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test27() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test27");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    int var12 = var2.getDebugGraphicsOptions();
    java.awt.Component var15 = var2.locate(24, 100);
    var2.setIgnoreRepaint(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test28() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test28");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    javax.swing.event.ListDataListener[] var1 = var0.getListDataListeners();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.removeElementAt(24);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test29() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test29");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    boolean var21 = var15.getInheritsPopupMenu();
    var15.setLocation(0, 100);
    boolean var25 = var15.isFocusTraversalPolicyProvider();
    var15.list();
    javax.swing.event.AncestorListener[] var27 = var15.getAncestorListeners();
    java.awt.Cursor var28 = var15.getCursor();
    var15.removeNotify();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var31 = var15.getFocusTraversalKeys(100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test30() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test30");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var3 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var4 = var3.getPreferredSize();
    java.awt.Point var5 = var3.getMousePosition();
    var3.revalidate();
    var3.invalidate();
    int var8 = var0.getIndexOf((java.lang.Object)var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.removeElementAt((-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));

  }

  public void test31() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test31");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Dimension var4 = var2.getMaximumSize();
    java.awt.event.FocusListener[] var5 = var2.getFocusListeners();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var9 = var8.getPreferredSize();
    boolean var12 = var8.contains(10, 1);
    java.awt.im.InputMethodRequests var13 = var8.getInputMethodRequests();
    java.awt.Font var14 = var8.getFont();
    var2.setFont(var14);
    boolean var16 = var2.isMaximumSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test32() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test32");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    java.awt.Font var9 = var2.getFont();
    var2.enable();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var14 = var13.isMaximumSizeSet();
    var13.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var19 = var13.getTransferHandler();
    boolean var20 = var13.hasFocus();
    javax.swing.event.AncestorListener[] var21 = var13.getAncestorListeners();
    java.awt.Dimension var22 = var13.getMinimumSize();
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var27 = var26.getPreferredSize();
    java.awt.Dimension var28 = var26.getMaximumSize();
    var26.disable();
    var13.putClientProperty((java.lang.Object)100, (java.lang.Object)var26);
    java.awt.image.VolatileImage var33 = var26.createVolatileImage(100, 24);
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var37 = var36.getPreferredSize();
    var26.setMinimumSize(var37);
    boolean var39 = var26.isValid();
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var43 = var42.getPreferredSize();
    boolean var46 = var42.contains(10, 1);
    java.awt.im.InputMethodRequests var47 = var42.getInputMethodRequests();
    boolean var50 = var42.inside((-1), 100);
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var54 = var53.getPreferredSize();
    boolean var57 = var53.contains(10, 1);
    var53.setAlignmentX((-1.0f));
    java.awt.Point var60 = var53.getLocation();
    java.awt.Point var61 = var42.getLocation(var60);
    boolean var64 = var42.contains(100, 0);
    var2.add((java.awt.Component)var26, (java.lang.Object)var42);
    java.awt.GraphicsConfiguration var66 = var42.getGraphicsConfiguration();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);

  }

  public void test33() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test33");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    boolean var21 = var15.getInheritsPopupMenu();
    var15.setLocation(0, 100);
    java.awt.Container var25 = var15.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test34() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test34");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    boolean var21 = var15.getInheritsPopupMenu();
    var15.setLocation(0, 100);
    boolean var25 = var15.isFocusTraversalPolicyProvider();
    var15.list();
    javax.swing.event.AncestorListener[] var27 = var15.getAncestorListeners();
    java.awt.Cursor var28 = var15.getCursor();
    var15.removeNotify();
    java.lang.String var30 = var15.getName();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var35 = var34.isMaximumSizeSet();
    var34.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var40 = var34.getTransferHandler();
    boolean var41 = var34.hasFocus();
    var34.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var44 = var34.getPreferredSize();
    javax.swing.JRootPane var45 = var34.getRootPane();
    var34.setRequestFocusEnabled(false);
    java.awt.Dimension var48 = var34.preferredSize();
    javax.swing.InputMap var49 = var34.getInputMap();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.setInputMap(24, var49);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test35() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test35");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    var2.setAlignmentX((-1.0f));
    java.awt.Toolkit var9 = var2.getToolkit();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var14 = var13.isMaximumSizeSet();
    var13.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var19 = var13.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var23 = var22.getPreferredSize();
    boolean var24 = var22.isPreferredSizeSet();
    var22.enable();
    var22.transferFocusBackward();
    int var27 = var13.getComponentZOrder((java.awt.Component)var22);
    var13.setEnabled(false);
    java.util.Set var31 = var13.getFocusTraversalKeys(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setFocusTraversalKeys((-1), var31);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test36() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test36");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    boolean var21 = var15.getInheritsPopupMenu();
    var15.setLocation(0, 100);
    boolean var25 = var15.isFocusTraversalPolicyProvider();
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var28.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var35 = var28.location();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var39 = var38.isMaximumSizeSet();
    var38.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var44 = var38.getTransferHandler();
    boolean var45 = var38.hasFocus();
    javax.swing.event.AncestorListener[] var46 = var38.getAncestorListeners();
    java.awt.Dimension var47 = var38.getMinimumSize();
    var28.resize(var47);
    var15.setMaximumSize(var47);
    javax.swing.KeyStroke[] var50 = var15.getRegisteredKeyStrokes();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test37() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test37");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    java.awt.peer.ComponentPeer var6 = var2.getPeer();
    var2.transferFocus();
    java.lang.String var8 = var2.getToolTipText();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    boolean var13 = var11.isOpaque();
    java.beans.PropertyChangeListener[] var14 = var11.getPropertyChangeListeners();
    var11.setOpaque(true);
    java.awt.Insets var17 = var11.insets();
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var21 = var20.isMaximumSizeSet();
    var20.layout();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    var25.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var31 = var25.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var35 = var34.getPreferredSize();
    boolean var36 = var34.isPreferredSizeSet();
    var34.enable();
    var34.transferFocusBackward();
    int var39 = var25.getComponentZOrder((java.awt.Component)var34);
    var25.setEnabled(false);
    java.awt.Graphics var42 = var25.getGraphics();
    var20.remove((java.awt.Component)var25);
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var47 = var46.getPreferredSize();
    boolean var50 = var46.contains(10, 1);
    java.awt.Insets var51 = var46.getInsets();
    javax.swing.JToolTip var52 = var46.createToolTip();
    var46.invalidate();
    var20.remove((java.awt.Component)var46);
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var46);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var58 = var46.getBaseline((-1), 996);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test38() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test38");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    int var12 = var2.getDebugGraphicsOptions();
    java.awt.Component var15 = var2.locate(24, 100);
    bierse.view.RunningMessagePanel var18 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var19 = var18.getPreferredSize();
    boolean var22 = var18.contains(10, 1);
    java.awt.im.InputMethodRequests var23 = var18.getInputMethodRequests();
    java.awt.event.FocusListener[] var24 = var18.getFocusListeners();
    java.awt.Font var25 = var18.getFont();
    javax.swing.plaf.PanelUI var26 = var18.getUI();
    var2.setUI(var26);
    java.awt.Dimension var28 = var2.getSize();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var29 = var2.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test39() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test39");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    var2.invalidate();
    java.awt.event.FocusListener[] var6 = var2.getFocusListeners();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var10 = var9.isMaximumSizeSet();
    var9.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var15 = var9.getTransferHandler();
    boolean var16 = var9.hasFocus();
    var9.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var19 = var9.getPreferredSize();
    java.awt.ComponentOrientation var20 = var9.getComponentOrientation();
    var9.transferFocus();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    var24.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var30 = var24.getTransferHandler();
    boolean var31 = var24.hasFocus();
    javax.swing.event.AncestorListener[] var32 = var24.getAncestorListeners();
    java.awt.Dimension var33 = var24.getMinimumSize();
    boolean var34 = var24.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    var37.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var47 = var37.getPreferredSize();
    java.awt.Dimension var48 = var24.getSize(var47);
    var9.setSize(var47);
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var53 = var52.getPreferredSize();
    boolean var56 = var52.contains(10, 1);
    java.awt.Insets var57 = var52.getInsets();
    javax.swing.JToolTip var58 = var52.createToolTip();
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var62 = var61.isMaximumSizeSet();
    var61.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var67 = var61.getTransferHandler();
    boolean var68 = var61.hasFocus();
    javax.swing.event.AncestorListener[] var69 = var61.getAncestorListeners();
    var61.enable(false);
    int var72 = var58.getComponentZOrder((java.awt.Component)var61);
    boolean var73 = var58.requestFocusInWindow();
    boolean var74 = var58.isOptimizedDrawingEnabled();
    var2.add((java.awt.Component)var9, (java.lang.Object)var58);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var77 = var58.getFocusTraversalKeys(100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);

  }

  public void test40() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test40");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.removeElementAt(996);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test41() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test41");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    boolean var21 = var15.getInheritsPopupMenu();
    var15.setLocation(0, 100);
    boolean var25 = var15.isFocusTraversalPolicyProvider();
    var15.list();
    javax.swing.event.AncestorListener[] var27 = var15.getAncestorListeners();
    java.awt.Cursor var28 = var15.getCursor();
    var15.removeNotify();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var31 = var15.getFocusTraversalKeys(10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test42() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test42");


    javax.swing.JFrame.setDefaultLookAndFeelDecorated(true);

  }

  public void test43() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test43");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    java.awt.Font var9 = var2.getFont();
    var2.enable();
    boolean var11 = var2.getIgnoreRepaint();
    java.awt.Component var14 = var2.getComponentAt((-1), 24);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var17 = var2.getBaseline(24, (-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test44() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test44");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Dimension var4 = var2.getMaximumSize();
    var2.repaint();
    var2.disable();
    java.awt.Component var9 = var2.getComponentAt(0, 12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test45() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test45");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    var2.setAlignmentY(10.0f);
    var2.setInheritsPopupMenu(false);
    boolean var18 = var2.requestDefaultFocus();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var20 = var2.areFocusTraversalKeysSet(24);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test46() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test46");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.beans.PropertyChangeListener[] var5 = var2.getPropertyChangeListeners();
    var2.setOpaque(true);
    java.awt.Insets var8 = var2.insets();
    boolean var9 = var2.isOptimizedDrawingEnabled();
    javax.swing.InputVerifier var10 = var2.getInputVerifier();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var14 = var13.getPreferredSize();
    boolean var17 = var13.contains(10, 1);
    var13.setFocusTraversalPolicyProvider(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var21 = var2.add((java.awt.Component)var13, 100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test47() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test47");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    javax.swing.InputVerifier var3 = var2.getInputVerifier();
    var2.removeAll();
    boolean var5 = var2.getVerifyInputWhenFocusTarget();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var9 = var8.isMaximumSizeSet();
    var8.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var8.invalidate();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var18 = var17.isMaximumSizeSet();
    var17.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    var25.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var31 = var25.getWidth();
    java.awt.Component[] var32 = var25.getComponents();
    var8.putClientProperty((java.lang.Object)var17, (java.lang.Object)var32);
    var17.transferFocus();
    var17.setToolTipText("");
    var17.show();
    var17.removeAll();
    bierse.view.RunningMessagePanel var41 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var42 = var41.getPreferredSize();
    boolean var45 = var41.contains(10, 1);
    java.awt.im.InputMethodRequests var46 = var41.getInputMethodRequests();
    var41.revalidate();
    var41.firePropertyChange("hi!", (short)100, (short)0);
    java.awt.Component var54 = var41.getComponentAt(0, (-1));
    bierse.view.RunningMessagePanel var57 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var58 = var57.isMaximumSizeSet();
    var57.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var63 = var57.getTransferHandler();
    boolean var64 = var57.hasFocus();
    javax.swing.event.AncestorListener[] var65 = var57.getAncestorListeners();
    java.awt.Dimension var66 = var57.getMinimumSize();
    bierse.view.RunningMessagePanel var70 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var71 = var70.getPreferredSize();
    java.awt.Dimension var72 = var70.getMaximumSize();
    var70.disable();
    var57.putClientProperty((java.lang.Object)100, (java.lang.Object)var70);
    javax.swing.InputVerifier var75 = var70.getInputVerifier();
    boolean var76 = var70.getInheritsPopupMenu();
    var70.setLocation(0, 100);
    boolean var80 = var70.isFocusTraversalPolicyProvider();
    var70.list();
    javax.swing.event.AncestorListener[] var82 = var70.getAncestorListeners();
    java.awt.Cursor var83 = var70.getCursor();
    var41.setCursor(var83);
    var41.transferFocusUpCycle();
    var41.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (short)(-1), (short)0);
    java.awt.Dimension var90 = var41.getSize();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.add((java.awt.Component)var17, (java.lang.Object)var90, 24);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test48() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test48");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var10.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var17 = var10.location();
    boolean var18 = var2.contains(var17);
    java.awt.Dimension var19 = var2.preferredSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test49() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test49");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    boolean var12 = var2.isFocusTraversalPolicySet();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var13 = var2.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test50() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test50");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    java.awt.peer.ComponentPeer var6 = var2.getPeer();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var8 = var2.getFocusTraversalKeys(100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test51() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test51");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var3 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var4 = var3.getPreferredSize();
    javax.swing.JPopupMenu var5 = var3.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var9 = var8.getPreferredSize();
    javax.swing.JPopupMenu var10 = var8.getComponentPopupMenu();
    java.awt.Rectangle var11 = var8.bounds();
    var3.computeVisibleRect(var11);
    int var13 = var0.getIndexOf((java.lang.Object)var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.removeElementAt(100);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));

  }

  public void test52() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test52");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    boolean var16 = var14.isOpaque();
    javax.swing.InputMap var17 = var14.getInputMap();
    java.beans.PropertyChangeListener[] var19 = var14.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var20 = var14.getComponentOrientation();
    var2.applyComponentOrientation(var20);
    java.awt.Dimension var22 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var26 = var25.getPreferredSize();
    javax.swing.JPopupMenu var27 = var25.getComponentPopupMenu();
    java.awt.Rectangle var28 = var25.bounds();
    var25.setSize(0, 24);
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var35 = var34.isMaximumSizeSet();
    boolean var36 = var34.isOpaque();
    javax.accessibility.AccessibleContext var37 = var34.getAccessibleContext();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.add((java.awt.Component)var25, (java.lang.Object)var34, 12);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test53() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test53");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    var2.transferFocus();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var18 = var17.isMaximumSizeSet();
    var17.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var23 = var17.getTransferHandler();
    boolean var24 = var17.hasFocus();
    javax.swing.event.AncestorListener[] var25 = var17.getAncestorListeners();
    java.awt.Dimension var26 = var17.getMinimumSize();
    boolean var27 = var17.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var31 = var30.isMaximumSizeSet();
    var30.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var36 = var30.getTransferHandler();
    boolean var37 = var30.hasFocus();
    var30.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var40 = var30.getPreferredSize();
    java.awt.Dimension var41 = var17.getSize(var40);
    var2.setSize(var40);
    var2.nextFocus();
    boolean var44 = var2.isOptimizedDrawingEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);

  }

  public void test54() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test54");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.repaint(1L, (-1), (-1), 0, 100);
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var17 = var11.getTransferHandler();
    boolean var18 = var11.hasFocus();
    javax.swing.event.AncestorListener[] var19 = var11.getAncestorListeners();
    java.awt.Dimension var20 = var11.getMinimumSize();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var25 = var24.getPreferredSize();
    java.awt.Dimension var26 = var24.getMaximumSize();
    var24.disable();
    var11.putClientProperty((java.lang.Object)100, (java.lang.Object)var24);
    javax.swing.InputVerifier var29 = var24.getInputVerifier();
    boolean var30 = var24.getInheritsPopupMenu();
    var24.setLocation(0, 100);
    boolean var34 = var24.isFocusTraversalPolicyProvider();
    var24.list();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var38.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var45 = var38.location();
    java.awt.Font var46 = var38.getFont();
    var24.setFont(var46);
    java.awt.FontMetrics var48 = var2.getFontMetrics(var46);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var50 = var2.getComponent((-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test55() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test55");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    java.awt.Font var9 = var2.getFont();
    javax.swing.plaf.PanelUI var10 = var2.getUI();
    var2.disable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test56() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test56");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    java.awt.Rectangle var5 = var2.bounds();
    java.awt.Insets var6 = var2.insets();
    java.awt.Point var7 = var2.location();
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var11 = var10.isMaximumSizeSet();
    var10.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var16 = var10.getTransferHandler();
    boolean var17 = var10.hasFocus();
    javax.swing.event.AncestorListener[] var18 = var10.getAncestorListeners();
    java.awt.Dimension var19 = var10.getMinimumSize();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var24 = var23.getPreferredSize();
    java.awt.Dimension var25 = var23.getMaximumSize();
    var23.disable();
    var10.putClientProperty((java.lang.Object)100, (java.lang.Object)var23);
    javax.swing.InputVerifier var28 = var23.getInputVerifier();
    boolean var29 = var23.getInheritsPopupMenu();
    var23.setLocation(0, 100);
    boolean var33 = var23.isFocusTraversalPolicyProvider();
    var23.list();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var37.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var44 = var37.location();
    java.awt.Font var45 = var37.getFont();
    var23.setFont(var45);
    var2.setFont(var45);
    boolean var48 = var2.isFocusTraversalPolicySet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);

  }

  public void test57() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test57");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var8 = var7.getPreferredSize();
    javax.swing.JPopupMenu var9 = var7.getComponentPopupMenu();
    java.awt.Rectangle var10 = var7.bounds();
    var2.computeVisibleRect(var10);
    boolean var12 = var2.isManagingFocus();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var14 = var2.getComponent(0);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test58() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test58");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var8 = var2.isFocusTraversalPolicySet();
    java.awt.event.FocusListener[] var9 = var2.getFocusListeners();
    boolean var10 = var2.isFontSet();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var14 = var13.isMaximumSizeSet();
    boolean var15 = var13.isOpaque();
    java.awt.event.HierarchyListener[] var16 = var13.getHierarchyListeners();
    int var17 = var13.getWidth();
    int var18 = var13.countComponents();
    java.awt.Point var20 = var13.getMousePosition(true);
    var13.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var23 = var13.toString();
    java.awt.Font var24 = var13.getFont();
    java.awt.FontMetrics var25 = var2.getFontMetrics(var24);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      javax.swing.InputMap var27 = var2.getInputMap(10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var23,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var23.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var23,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test59() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test59");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    var11.transferFocus();
    var11.setToolTipText("");
    java.awt.event.InputMethodListener[] var31 = var11.getInputMethodListeners();
    javax.accessibility.AccessibleContext var32 = var11.getAccessibleContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test60() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test60");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    java.awt.Dimension var9 = var2.getPreferredSize();
    int var10 = var2.getWidth();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var14 = var13.isMaximumSizeSet();
    var13.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var19 = var13.getTransferHandler();
    boolean var20 = var13.hasFocus();
    var13.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var23 = var13.getPreferredSize();
    var2.setSize(var23);
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    javax.swing.event.AncestorListener[] var35 = var27.getAncestorListeners();
    java.awt.Dimension var36 = var27.getMinimumSize();
    bierse.view.RunningMessagePanel var40 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var41 = var40.getPreferredSize();
    java.awt.Dimension var42 = var40.getMaximumSize();
    var40.disable();
    var27.putClientProperty((java.lang.Object)100, (java.lang.Object)var40);
    int var45 = var27.getHeight();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var48.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var55 = var48.location();
    boolean var56 = var27.contains(var55);
    var2.setLocation(var55);
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var62 = var61.isMaximumSizeSet();
    var61.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var67 = var61.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var70 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var71 = var70.getPreferredSize();
    boolean var72 = var70.isPreferredSizeSet();
    var70.enable();
    var70.transferFocusBackward();
    int var75 = var61.getComponentZOrder((java.awt.Component)var70);
    var61.setEnabled(false);
    java.util.Set var79 = var61.getFocusTraversalKeys(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setFocusTraversalKeys(996, var79);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test61() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test61");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    boolean var40 = var2.getFocusTraversalKeysEnabled();
    var2.setAlignmentX(100.0f);
    var2.setMessage("");
    bierse.view.RunningMessagePanel var47 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var47.transferFocus();
    var47.show();
    float var50 = var47.getAlignmentX();
    var47.repaint(0L, 10, 0, 10, (-1));
    boolean var57 = var47.isEnabled();
    bierse.view.RunningMessagePanel var60 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var61 = var60.getPreferredSize();
    javax.swing.JPopupMenu var62 = var60.getComponentPopupMenu();
    java.awt.Rectangle var63 = var60.bounds();
    java.awt.Rectangle var64 = var47.getBounds(var63);
    var47.setFocusable(false);
    bierse.view.RunningMessagePanel var69 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var70 = var69.getPreferredSize();
    java.awt.Dimension var71 = var69.getMaximumSize();
    var47.setMinimumSize(var71);
    var47.setAutoscrolls(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var76 = var2.add((java.awt.Component)var47, 100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test62() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test62");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    java.awt.Rectangle var5 = var2.bounds();
    var2.setSize(0, 24);
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var17 = var11.getTransferHandler();
    boolean var18 = var11.hasFocus();
    javax.swing.event.AncestorListener[] var19 = var11.getAncestorListeners();
    java.awt.Dimension var20 = var11.getMinimumSize();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var25 = var24.getPreferredSize();
    java.awt.Dimension var26 = var24.getMaximumSize();
    var24.disable();
    var11.putClientProperty((java.lang.Object)100, (java.lang.Object)var24);
    javax.swing.InputVerifier var29 = var24.getInputVerifier();
    boolean var30 = var24.getInheritsPopupMenu();
    var24.setLocation(0, 100);
    boolean var34 = var24.isFocusTraversalPolicyProvider();
    var24.list();
    javax.swing.event.AncestorListener[] var36 = var24.getAncestorListeners();
    var24.repaint(100L);
    int var39 = var2.getComponentZOrder((java.awt.Component)var24);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var41 = var24.areFocusTraversalKeysSet(24);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));

  }

  public void test63() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test63");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var43 = var42.getPreferredSize();
    boolean var46 = var42.contains(10, 1);
    java.awt.im.InputMethodRequests var47 = var42.getInputMethodRequests();
    var42.revalidate();
    var42.enable(true);
    java.awt.Point var51 = var42.location();
    java.awt.Component var52 = var16.getComponentAt(var51);
    boolean var53 = var16.isValidateRoot();
    boolean var54 = var16.isFocusOwner();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);

  }

  public void test64() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test64");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    var2.setAlignmentX((-1.0f));
    java.awt.Toolkit var9 = var2.getToolkit();
    java.awt.Rectangle var10 = var2.getBounds();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    var14.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var20 = var14.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var24 = var23.getPreferredSize();
    boolean var25 = var23.isPreferredSizeSet();
    var23.enable();
    var23.transferFocusBackward();
    int var28 = var14.getComponentZOrder((java.awt.Component)var23);
    var14.setEnabled(false);
    java.util.Set var32 = var14.getFocusTraversalKeys(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setFocusTraversalKeys(10, var32);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test65() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test65");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.beans.PropertyChangeListener[] var5 = var2.getPropertyChangeListeners();
    boolean var6 = var2.isFocusCycleRoot();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var10 = var9.isMaximumSizeSet();
    var9.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var15 = var9.getWidth();
    boolean var18 = var9.inside(24, 1);
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isMaximumSizeSet();
    var21.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var27 = var21.getWidth();
    var21.addNotify();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.add((java.awt.Component)var9, (java.lang.Object)var21, 10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);

  }

  public void test66() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test66");


    bierse.view.MyKeyMap var1 = bierse.view.KeyMapComboBoxModel.getMyKeyMapForKeyCode(12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test67() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test67");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    var2.disable();
    var2.setBounds(0, (-1), 10, 24);
    var2.transferFocusBackward();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test68() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test68");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.revalidate();
    java.awt.FocusTraversalPolicy var6 = var2.getFocusTraversalPolicy();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test69() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test69");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    java.awt.Font var9 = var2.getFont();
    java.beans.PropertyChangeListener[] var11 = var2.getPropertyChangeListeners("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    boolean var12 = var2.isValidateRoot();
    var2.transferFocusUpCycle();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    var16.setVerifyInputWhenFocusTarget(false);
    int var26 = var16.getDebugGraphicsOptions();
    boolean var27 = var16.isEnabled();
    boolean var28 = var16.requestFocusInWindow();
    java.awt.Insets var29 = var16.insets();
    bierse.view.RunningMessagePanel var32 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var33 = var32.isMaximumSizeSet();
    var32.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var38 = var32.getTransferHandler();
    boolean var39 = var32.hasFocus();
    javax.swing.event.AncestorListener[] var40 = var32.getAncestorListeners();
    java.awt.Dimension var41 = var32.getMinimumSize();
    boolean var42 = var32.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var45 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var46 = var45.isMaximumSizeSet();
    var45.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var51 = var45.getTransferHandler();
    boolean var52 = var45.hasFocus();
    var45.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var55 = var45.getPreferredSize();
    java.awt.Dimension var56 = var32.getSize(var55);
    var16.setMaximumSize(var56);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var59 = var2.add((java.awt.Component)var16, 10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test70() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test70");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    boolean var10 = var2.inside((-1), 100);
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var14 = var13.getPreferredSize();
    boolean var17 = var13.contains(10, 1);
    var13.setAlignmentX((-1.0f));
    java.awt.Point var20 = var13.getLocation();
    java.awt.Point var21 = var2.getLocation(var20);
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    var25.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var31 = var25.getTransferHandler();
    boolean var32 = var25.hasFocus();
    var25.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var35 = var25.getPreferredSize();
    javax.swing.JRootPane var36 = var25.getRootPane();
    var25.setRequestFocusEnabled(false);
    java.awt.Dimension var39 = var25.preferredSize();
    javax.swing.InputMap var40 = var25.getInputMap();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setInputMap(996, var40);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test71() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test71");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    var2.setAlignmentY(10.0f);
    var2.setInheritsPopupMenu(false);
    boolean var18 = var2.requestDefaultFocus();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isMaximumSizeSet();
    var21.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var27 = var21.getTransferHandler();
    boolean var28 = var21.hasFocus();
    var21.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var31 = var21.getPreferredSize();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var35 = var34.isMaximumSizeSet();
    var34.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var40 = var34.getTransferHandler();
    boolean var41 = var34.hasFocus();
    var34.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var44 = var34.getPreferredSize();
    java.awt.ComponentOrientation var45 = var34.getComponentOrientation();
    var34.transferFocus();
    bierse.view.RunningMessagePanel var49 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var50 = var49.isMaximumSizeSet();
    var49.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var55 = var49.getTransferHandler();
    boolean var56 = var49.hasFocus();
    javax.swing.event.AncestorListener[] var57 = var49.getAncestorListeners();
    java.awt.Dimension var58 = var49.getMinimumSize();
    boolean var59 = var49.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var62 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var63 = var62.isMaximumSizeSet();
    var62.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var68 = var62.getTransferHandler();
    boolean var69 = var62.hasFocus();
    var62.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var72 = var62.getPreferredSize();
    java.awt.Dimension var73 = var49.getSize(var72);
    var34.setSize(var72);
    bierse.view.RunningMessagePanel var77 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var78 = var77.isMaximumSizeSet();
    var77.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var77.invalidate();
    java.awt.Dimension var84 = var77.getPreferredSize();
    bierse.view.RunningMessagePanel var87 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var87.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var94 = var87.location();
    java.awt.Point var95 = var77.getLocation(var94);
    java.awt.Point var96 = var34.getLocation(var94);
    var21.setLocation(var94);
    boolean var98 = var2.contains(var94);
    boolean var99 = var2.requestDefaultFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == false);

  }

  public void test72() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test72");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var8 = var2.getBaseline(10, (-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test73() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test73");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var3 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var4 = var3.isMaximumSizeSet();
    var3.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var9 = var3.getTransferHandler();
    boolean var10 = var3.hasFocus();
    javax.swing.event.AncestorListener[] var11 = var3.getAncestorListeners();
    java.awt.Dimension var12 = var3.getMinimumSize();
    boolean var13 = var3.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    var16.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var26 = var16.getPreferredSize();
    java.awt.Dimension var27 = var3.getSize(var26);
    int var28 = var0.getIndexOf((java.lang.Object)var3);
    java.lang.Object var30 = var0.getElementAt(0);
    bierse.view.RunningMessagePanel var33 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var33.transferFocus();
    var33.show();
    float var36 = var33.getAlignmentX();
    var33.repaint(0L, 10, 0, 10, (-1));
    boolean var43 = var33.isEnabled();
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var47 = var46.getPreferredSize();
    javax.swing.JPopupMenu var48 = var46.getComponentPopupMenu();
    java.awt.Rectangle var49 = var46.bounds();
    java.awt.Rectangle var50 = var33.getBounds(var49);
    var33.setFocusable(false);
    int var53 = var0.getIndexOf((java.lang.Object)false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == (-1));

  }

  public void test74() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test74");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.Insets var7 = var2.getInsets();
    javax.swing.JToolTip var8 = var2.createToolTip();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var17 = var11.getTransferHandler();
    boolean var18 = var11.hasFocus();
    javax.swing.event.AncestorListener[] var19 = var11.getAncestorListeners();
    var11.enable(false);
    int var22 = var8.getComponentZOrder((java.awt.Component)var11);
    boolean var25 = var11.contains(1, 24);
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var29 = var28.isMaximumSizeSet();
    boolean var30 = var28.isOpaque();
    java.beans.PropertyChangeListener[] var31 = var28.getPropertyChangeListeners();
    var28.setOpaque(true);
    java.awt.Insets var34 = var28.insets();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var11.setComponentZOrder((java.awt.Component)var28, 10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test75() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test75");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    java.awt.Font var9 = var2.getFont();
    var2.enable();
    boolean var11 = var2.getIgnoreRepaint();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var13 = var2.areFocusTraversalKeysSet(12);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test76() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test76");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var10 = var9.getPreferredSize();
    java.awt.Point var11 = var9.getMousePosition();
    var9.setDoubleBuffered(false);
    java.awt.Dimension var14 = var9.minimumSize();
    var2.setMinimumSize(var14);
    int var16 = var2.getHeight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);

  }

  public void test77() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test77");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Component.BaselineResizeBehavior var3 = var2.getBaselineResizeBehavior();
    java.awt.Container var4 = var2.getParent();
    float var5 = var2.getAlignmentX();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.remove(0);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);

  }

  public void test78() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test78");


    bierse.view.MyKeyMap var1 = bierse.view.KeyMapComboBoxModel.getMyKeyMapForKeyCode(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test79() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test79");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var43 = var42.getPreferredSize();
    var2.setMaximumSize(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test80() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test80");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var11 = var10.isMaximumSizeSet();
    var10.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var16 = var10.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var20 = var19.getPreferredSize();
    boolean var21 = var19.isPreferredSizeSet();
    var19.enable();
    var19.transferFocusBackward();
    int var24 = var10.getComponentZOrder((java.awt.Component)var19);
    var10.setEnabled(false);
    java.util.Set var28 = var10.getFocusTraversalKeys(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setFocusTraversalKeys((-1), var28);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test81() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test81");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    var2.transferFocus();
    boolean var15 = var2.isDoubleBuffered();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      javax.swing.InputMap var17 = var2.getInputMap(24);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);

  }

  public void test82() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test82");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.beans.PropertyChangeListener[] var5 = var2.getPropertyChangeListeners();
    var2.setOpaque(true);
    java.awt.Insets var8 = var2.insets();
    boolean var9 = var2.isOptimizedDrawingEnabled();
    var2.disable();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var13.repaint(1L, (-1), (-1), 0, 100);
    boolean var20 = var13.isFocusTraversable();
    javax.swing.ActionMap var21 = var13.getActionMap();
    var2.setActionMap(var21);
    boolean var23 = var2.isFocusOwner();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test83() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test83");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    java.awt.Dimension var9 = var2.getPreferredSize();
    var2.show(false);
    boolean var12 = var2.isMaximumSizeSet();
    var2.reshape(100, 24, 10, 24);
    var2.move(10, 24);
    boolean var21 = var2.requestFocusInWindow();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var23 = var2.getFocusTraversalKeys(12);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test84() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test84");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    var2.enable(false);
    java.awt.Dimension var13 = var2.minimumSize();
    java.awt.GraphicsConfiguration var14 = var2.getGraphicsConfiguration();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var18 = var17.isMaximumSizeSet();
    var17.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var23 = var17.getTransferHandler();
    boolean var24 = var17.hasFocus();
    javax.swing.event.AncestorListener[] var25 = var17.getAncestorListeners();
    java.awt.Dimension var26 = var17.getMinimumSize();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var31 = var30.getPreferredSize();
    java.awt.Dimension var32 = var30.getMaximumSize();
    var30.disable();
    var17.putClientProperty((java.lang.Object)100, (java.lang.Object)var30);
    java.awt.image.VolatileImage var37 = var30.createVolatileImage(100, 24);
    bierse.view.RunningMessagePanel var40 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var41 = var40.getPreferredSize();
    var30.setMinimumSize(var41);
    var2.setMinimumSize(var41);
    var2.move(1, 24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test85() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test85");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    var2.transferFocus();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var18 = var17.isMaximumSizeSet();
    var17.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var23 = var17.getTransferHandler();
    boolean var24 = var17.hasFocus();
    javax.swing.event.AncestorListener[] var25 = var17.getAncestorListeners();
    java.awt.Dimension var26 = var17.getMinimumSize();
    boolean var27 = var17.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var31 = var30.isMaximumSizeSet();
    var30.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var36 = var30.getTransferHandler();
    boolean var37 = var30.hasFocus();
    var30.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var40 = var30.getPreferredSize();
    java.awt.Dimension var41 = var17.getSize(var40);
    var2.setSize(var40);
    var2.nextFocus();
    boolean var44 = var2.isManagingFocus();
    var2.show(false);
    bierse.view.RunningMessagePanel var49 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var50 = var49.getPreferredSize();
    boolean var51 = var49.isPreferredSizeSet();
    bierse.view.RunningMessagePanel var54 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var55 = var54.isMaximumSizeSet();
    boolean var56 = var54.isOpaque();
    java.beans.PropertyChangeListener[] var57 = var54.getPropertyChangeListeners();
    var54.setOpaque(true);
    java.awt.Insets var60 = var54.insets();
    java.awt.Insets var61 = var49.getInsets(var60);
    var49.resetKeyboardActions();
    java.awt.im.InputContext var63 = var49.getInputContext();
    java.awt.Component var64 = var2.add((java.awt.Component)var49);
    boolean var65 = var2.hasFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test86() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test86");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.beans.PropertyChangeListener[] var5 = var2.getPropertyChangeListeners();
    var2.setOpaque(true);
    java.awt.Insets var8 = var2.insets();
    boolean var9 = var2.isOptimizedDrawingEnabled();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (-1.0d), 0.0d);
    var2.removeNotify();
    java.awt.Dimension var15 = var2.getMinimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test87() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test87");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    java.beans.PropertyChangeListener[] var9 = var2.getPropertyChangeListeners();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var10 = var2.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test88() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test88");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    boolean var21 = var15.getInheritsPopupMenu();
    var15.setLocation(0, 100);
    boolean var25 = var15.isFocusTraversalPolicyProvider();
    var15.list();
    javax.swing.event.AncestorListener[] var27 = var15.getAncestorListeners();
    var15.repaint(100L);
    java.awt.peer.ComponentPeer var30 = var15.getPeer();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var35 = var34.isMaximumSizeSet();
    var34.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var40 = var34.getTransferHandler();
    boolean var41 = var34.hasFocus();
    var34.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var44 = var34.getPreferredSize();
    javax.swing.JRootPane var45 = var34.getRootPane();
    var34.setRequestFocusEnabled(false);
    java.awt.Dimension var48 = var34.preferredSize();
    javax.swing.InputMap var49 = var34.getInputMap();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.setInputMap((-1), var49);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test89() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test89");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    java.awt.Font var9 = var2.getFont();
    java.beans.PropertyChangeListener[] var11 = var2.getPropertyChangeListeners("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    boolean var12 = var2.isValidateRoot();
    var2.transferFocusUpCycle();
    int var14 = var2.getWidth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);

  }

  public void test90() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test90");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    var2.invalidate();
    java.awt.event.FocusListener[] var6 = var2.getFocusListeners();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var10 = var9.isMaximumSizeSet();
    var9.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var15 = var9.getTransferHandler();
    boolean var16 = var9.hasFocus();
    var9.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var19 = var9.getPreferredSize();
    java.awt.ComponentOrientation var20 = var9.getComponentOrientation();
    var9.transferFocus();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    var24.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var30 = var24.getTransferHandler();
    boolean var31 = var24.hasFocus();
    javax.swing.event.AncestorListener[] var32 = var24.getAncestorListeners();
    java.awt.Dimension var33 = var24.getMinimumSize();
    boolean var34 = var24.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    var37.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var47 = var37.getPreferredSize();
    java.awt.Dimension var48 = var24.getSize(var47);
    var9.setSize(var47);
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var53 = var52.getPreferredSize();
    boolean var56 = var52.contains(10, 1);
    java.awt.Insets var57 = var52.getInsets();
    javax.swing.JToolTip var58 = var52.createToolTip();
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var62 = var61.isMaximumSizeSet();
    var61.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var67 = var61.getTransferHandler();
    boolean var68 = var61.hasFocus();
    javax.swing.event.AncestorListener[] var69 = var61.getAncestorListeners();
    var61.enable(false);
    int var72 = var58.getComponentZOrder((java.awt.Component)var61);
    boolean var73 = var58.requestFocusInWindow();
    boolean var74 = var58.isOptimizedDrawingEnabled();
    var2.add((java.awt.Component)var9, (java.lang.Object)var58);
    java.awt.Point var76 = var9.getLocation();
    bierse.view.RunningMessagePanel var79 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var80 = var79.isMaximumSizeSet();
    boolean var81 = var79.isOpaque();
    java.awt.event.HierarchyListener[] var82 = var79.getHierarchyListeners();
    int var83 = var79.getWidth();
    int var84 = var79.countComponents();
    java.awt.Point var86 = var79.getMousePosition(true);
    var79.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    var79.requestFocus();
    java.awt.Color var90 = var79.getForeground();
    var9.setForeground(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test91() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test91");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.countComponents();
    int var7 = var2.getStringHeight();
    var2.setAutoscrolls(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 24);

  }

  public void test92() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test92");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    java.awt.Insets var20 = var15.getInsets();
    boolean var21 = var15.isDoubleBuffered();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);

  }

  public void test93() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test93");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", 1);
    java.awt.Component.BaselineResizeBehavior var3 = var2.getBaselineResizeBehavior();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test94() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test94");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var8 = var2.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var12 = var11.getPreferredSize();
    boolean var13 = var11.isPreferredSizeSet();
    var11.enable();
    var11.transferFocusBackward();
    int var16 = var2.getComponentZOrder((java.awt.Component)var11);
    var2.setEnabled(false);
    java.awt.Graphics var19 = var2.getGraphics();
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var23 = var22.isMaximumSizeSet();
    var22.layout();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var33 = var27.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var37 = var36.getPreferredSize();
    boolean var38 = var36.isPreferredSizeSet();
    var36.enable();
    var36.transferFocusBackward();
    int var41 = var27.getComponentZOrder((java.awt.Component)var36);
    var27.setEnabled(false);
    java.awt.Graphics var44 = var27.getGraphics();
    var22.remove((java.awt.Component)var27);
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var49 = var48.getPreferredSize();
    boolean var52 = var48.contains(10, 1);
    java.awt.Insets var53 = var48.getInsets();
    javax.swing.JToolTip var54 = var48.createToolTip();
    var48.invalidate();
    var22.remove((java.awt.Component)var48);
    bierse.view.RunningMessagePanel var59 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var60 = var59.isMaximumSizeSet();
    boolean var61 = var59.isOpaque();
    java.awt.event.HierarchyListener[] var62 = var59.getHierarchyListeners();
    int var63 = var59.countComponents();
    java.awt.event.HierarchyBoundsListener[] var64 = var59.getHierarchyBoundsListeners();
    boolean var66 = var59.areFocusTraversalKeysSet(1);
    bierse.view.RunningMessagePanel var69 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var70 = var69.getPreferredSize();
    javax.swing.JPopupMenu var71 = var69.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var74 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var75 = var74.getPreferredSize();
    javax.swing.JPopupMenu var76 = var74.getComponentPopupMenu();
    java.awt.Rectangle var77 = var74.bounds();
    var69.computeVisibleRect(var77);
    var59.setBounds(var77);
    var2.putClientProperty((java.lang.Object)var48, (java.lang.Object)var77);
    boolean var81 = var2.isCursorSet();
    var2.repaint(10L, 1, 100, 24, (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);

  }

  public void test95() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test95");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var3 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var4 = var3.getPreferredSize();
    javax.swing.JPopupMenu var5 = var3.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var9 = var8.getPreferredSize();
    javax.swing.JPopupMenu var10 = var8.getComponentPopupMenu();
    java.awt.Rectangle var11 = var8.bounds();
    var3.computeVisibleRect(var11);
    int var13 = var0.getIndexOf((java.lang.Object)var3);
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    java.awt.Dimension var25 = var16.getMinimumSize();
    bierse.view.RunningMessagePanel var29 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var30 = var29.getPreferredSize();
    java.awt.Dimension var31 = var29.getMaximumSize();
    var29.disable();
    var16.putClientProperty((java.lang.Object)100, (java.lang.Object)var29);
    javax.swing.InputVerifier var34 = var29.getInputVerifier();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var39 = var38.isMaximumSizeSet();
    var38.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var38.invalidate();
    java.awt.Dimension var45 = var38.getPreferredSize();
    int var46 = var38.getWidth();
    java.awt.Component var47 = var29.add("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var38);
    java.awt.Rectangle var48 = var38.getVisibleRect();
    java.awt.Rectangle var49 = var3.getBounds(var48);
    javax.swing.event.AncestorListener[] var50 = var3.getAncestorListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test96() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test96");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("", 12);
    java.awt.Component var5 = var2.getComponentAt((-1), 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test97() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test97");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    javax.swing.event.ListDataListener[] var1 = var0.getListDataListeners();
    bierse.view.RunningMessagePanel var4 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var4.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var11 = var4.location();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    var14.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var20 = var14.getTransferHandler();
    boolean var21 = var14.hasFocus();
    javax.swing.event.AncestorListener[] var22 = var14.getAncestorListeners();
    java.awt.Dimension var23 = var14.getMinimumSize();
    var4.resize(var23);
    int var25 = var0.getIndexOf((java.lang.Object)var23);
    int var26 = var0.getSize();
    bierse.view.RunningMessagePanel var29 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var30 = var29.isMaximumSizeSet();
    var29.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var35 = var29.getTransferHandler();
    boolean var36 = var29.hasFocus();
    var29.setVerifyInputWhenFocusTarget(false);
    int var39 = var29.getDebugGraphicsOptions();
    boolean var40 = var29.isEnabled();
    boolean var41 = var29.requestFocusInWindow();
    var0.removeElement((java.lang.Object)var41);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.removeElementAt(24);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test98() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test98");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    java.awt.peer.ComponentPeer var6 = var2.getPeer();
    var2.transferFocus();
    java.lang.String var8 = var2.getToolTipText();
    int var9 = var2.getY();
    int var10 = var2.getHeight();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var14 = var13.isMaximumSizeSet();
    var13.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var19 = var13.getTransferHandler();
    boolean var20 = var13.hasFocus();
    var13.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var23 = var13.getPreferredSize();
    java.awt.ComponentOrientation var24 = var13.getComponentOrientation();
    java.lang.String var25 = var13.getName();
    java.awt.Font var26 = var13.getFont();
    var2.setFont(var26);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var29 = var2.getComponent(0);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test99() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test99");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Dimension var4 = var2.getMaximumSize();
    var2.repaint();
    var2.disable();
    java.awt.Rectangle var7 = var2.getBounds();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var17 = var11.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var21 = var20.getPreferredSize();
    boolean var22 = var20.isPreferredSizeSet();
    var20.enable();
    var20.transferFocusBackward();
    int var25 = var11.getComponentZOrder((java.awt.Component)var20);
    var11.setEnabled(false);
    java.util.Set var29 = var11.getFocusTraversalKeys(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setFocusTraversalKeys(100, var29);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test100() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test100");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.setDoubleBuffered(false);
    java.awt.Dimension var7 = var2.minimumSize();
    bierse.view.KeyMapComboBoxModel var8 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    boolean var13 = var11.isOpaque();
    java.beans.PropertyChangeListener[] var14 = var11.getPropertyChangeListeners();
    var11.setOpaque(true);
    var11.setRequestFocusEnabled(false);
    var8.insertElementAt((java.lang.Object)var11, 1);
    java.lang.Object var21 = var2.getClientProperty((java.lang.Object)var11);
    int var22 = var2.getHeight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);

  }

  public void test101() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test101");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    var2.setAlignmentX((-1.0f));
    java.awt.Point var9 = var2.getLocation();
    var2.hide();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test102() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test102");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    var2.reshape(100, 100, 1, 0);
    var2.list();

  }

  public void test103() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test103");


    bierse.view.MyKeyMap var2 = new bierse.view.MyKeyMap("hi!", 1);
    int var3 = var2.getCode();
    java.lang.String var4 = var2.toString();
    java.lang.String var5 = var2.toString();
    int var6 = var2.getCode();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);

  }

  public void test104() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test104");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.Insets var7 = var2.getInsets();
    javax.swing.JToolTip var8 = var2.createToolTip();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var17 = var11.getTransferHandler();
    boolean var18 = var11.hasFocus();
    javax.swing.event.AncestorListener[] var19 = var11.getAncestorListeners();
    var11.enable(false);
    int var22 = var8.getComponentZOrder((java.awt.Component)var11);
    boolean var23 = var8.requestFocusInWindow();
    boolean var24 = var8.isOptimizedDrawingEnabled();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var8.remove(12);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);

  }

  public void test105() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test105");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.setDoubleBuffered(false);
    java.awt.GraphicsConfiguration var7 = var2.getGraphicsConfiguration();
    java.awt.Component var10 = var2.locate((-1), (-1));
    var2.setAlignmentX(100.0f);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var14 = var2.getFocusTraversalKeys(10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test106() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test106");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var24 = var23.isMaximumSizeSet();
    var23.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var29 = var23.getTransferHandler();
    boolean var30 = var23.hasFocus();
    var23.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var33 = var23.getPreferredSize();
    java.awt.ComponentOrientation var34 = var23.getComponentOrientation();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    javax.swing.event.AncestorListener[] var45 = var37.getAncestorListeners();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var49 = var48.isMaximumSizeSet();
    var48.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var54 = var48.getTransferHandler();
    boolean var55 = var48.hasFocus();
    var48.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var58 = var48.getPreferredSize();
    java.awt.ComponentOrientation var59 = var48.getComponentOrientation();
    var23.add((java.awt.Component)var37, (java.lang.Object)var48);
    bierse.view.RunningMessagePanel var63 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var64 = var63.getPreferredSize();
    java.awt.Dimension var65 = var63.getMaximumSize();
    var48.resize(var65);
    var15.setNextFocusableComponent((java.awt.Component)var48);
    var15.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", ' ', 'a');
    bierse.view.RunningMessagePanel var74 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var75 = var74.isMaximumSizeSet();
    var74.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var74.invalidate();
    bierse.view.RunningMessagePanel var83 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var84 = var83.isMaximumSizeSet();
    boolean var85 = var83.isOpaque();
    java.awt.event.HierarchyListener[] var86 = var83.getHierarchyListeners();
    int var87 = var83.countComponents();
    java.awt.event.HierarchyBoundsListener[] var88 = var83.getHierarchyBoundsListeners();
    boolean var90 = var83.areFocusTraversalKeysSet(1);
    boolean var91 = var74.isAncestorOf((java.awt.Component)var83);
    var74.requestFocus();
    java.awt.FocusTraversalPolicy var93 = var74.getFocusTraversalPolicy();
    java.awt.Dimension var94 = var74.getPreferredSize();
    java.awt.Dimension var95 = var15.getSize(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test107() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test107");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    javax.swing.InputVerifier var3 = var2.getInputVerifier();
    boolean var6 = var2.contains(100, 12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test108() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test108");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    java.awt.Font var9 = var2.getFont();
    java.awt.Cursor var10 = var2.getCursor();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    var14.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var20 = var14.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var24 = var23.getPreferredSize();
    boolean var25 = var23.isPreferredSizeSet();
    var23.enable();
    var23.transferFocusBackward();
    int var28 = var14.getComponentZOrder((java.awt.Component)var23);
    var14.setEnabled(false);
    java.util.Set var32 = var14.getFocusTraversalKeys(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setFocusTraversalKeys(100, var32);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test109() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test109");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.repaint(1L, (-1), (-1), 0, 100);
    boolean var9 = var2.isFocusTraversable();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var13 = var12.getPreferredSize();
    boolean var16 = var12.contains(10, 1);
    java.awt.im.InputMethodRequests var17 = var12.getInputMethodRequests();
    var12.revalidate();
    var12.firePropertyChange("hi!", (short)100, (short)0);
    var2.setNextFocusableComponent((java.awt.Component)var12);
    boolean var24 = var2.isFocusable();
    var2.setAutoscrolls(true);
    var2.setAlignmentY(100.0f);
    bierse.view.RunningMessagePanel var31 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var32 = var31.getPreferredSize();
    boolean var35 = var31.contains(10, 1);
    java.awt.im.InputMethodRequests var36 = var31.getInputMethodRequests();
    var31.revalidate();
    java.awt.event.HierarchyListener[] var38 = var31.getHierarchyListeners();
    var31.invalidate();
    java.awt.LayoutManager var40 = var31.getLayout();
    bierse.view.RunningMessagePanel var43 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var43.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var50 = var43.location();
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var54 = var53.isMaximumSizeSet();
    var53.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var59 = var53.getTransferHandler();
    boolean var60 = var53.hasFocus();
    javax.swing.event.AncestorListener[] var61 = var53.getAncestorListeners();
    java.awt.Dimension var62 = var53.getMinimumSize();
    var43.resize(var62);
    var43.transferFocusUpCycle();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.add((java.awt.Component)var31, (java.lang.Object)var43, 996);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test110() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test110");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.countComponents();
    java.awt.event.HierarchyBoundsListener[] var7 = var2.getHierarchyBoundsListeners();
    boolean var9 = var2.areFocusTraversalKeysSet(1);
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var13 = var12.getPreferredSize();
    javax.swing.JPopupMenu var14 = var12.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var18 = var17.getPreferredSize();
    javax.swing.JPopupMenu var19 = var17.getComponentPopupMenu();
    java.awt.Rectangle var20 = var17.bounds();
    var12.computeVisibleRect(var20);
    var2.setBounds(var20);
    var2.removeAll();
    var2.setAlignmentY(0.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test111() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test111");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    javax.swing.InputVerifier var3 = var2.getInputVerifier();
    var2.removeAll();
    boolean var5 = var2.getFocusTraversalKeysEnabled();
    java.awt.Dimension var6 = var2.preferredSize();
    float var7 = var2.getAlignmentY();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);

  }

  public void test112() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test112");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    java.awt.event.ContainerListener[] var7 = var2.getContainerListeners();
    java.awt.Dimension var8 = var2.getMaximumSize();
    boolean var9 = var2.isManagingFocus();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", 12, 12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test113() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test113");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    int var1 = var0.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 12);

  }

  public void test114() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test114");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var9 = var2.location();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var13 = var12.isMaximumSizeSet();
    var12.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var18 = var12.getTransferHandler();
    boolean var19 = var12.hasFocus();
    javax.swing.event.AncestorListener[] var20 = var12.getAncestorListeners();
    java.awt.Dimension var21 = var12.getMinimumSize();
    var2.resize(var21);
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var27 = var26.isMaximumSizeSet();
    boolean var28 = var26.isOpaque();
    javax.swing.InputMap var29 = var26.getInputMap();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setInputMap(100, var29);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test115() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test115");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var8 = var7.getPreferredSize();
    javax.swing.JPopupMenu var9 = var7.getComponentPopupMenu();
    java.awt.Rectangle var10 = var7.bounds();
    var2.computeVisibleRect(var10);
    java.awt.event.ComponentListener[] var12 = var2.getComponentListeners();
    var2.setDebugGraphicsOptions(10);
    var2.setAlignmentY(0.5f);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var19.repaint(1L, (-1), (-1), 0, 100);
    boolean var26 = var19.isFocusTraversable();
    bierse.view.RunningMessagePanel var29 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var30 = var29.isMaximumSizeSet();
    boolean var31 = var29.isOpaque();
    java.awt.event.HierarchyListener[] var32 = var29.getHierarchyListeners();
    boolean var33 = var29.isValid();
    var2.add((java.awt.Component)var19, (java.lang.Object)var33, 0);
    boolean var36 = var2.isFocusOwner();
    bierse.view.RunningMessagePanel var39 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var40 = var39.isMaximumSizeSet();
    var39.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var45 = var39.getTransferHandler();
    boolean var46 = var39.hasFocus();
    var39.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var49 = var39.getPreferredSize();
    java.awt.ComponentOrientation var50 = var39.getComponentOrientation();
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var54 = var53.isMaximumSizeSet();
    var53.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var59 = var53.getTransferHandler();
    boolean var60 = var53.hasFocus();
    var53.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var63 = var53.getPreferredSize();
    java.awt.Dimension var64 = var39.getSize(var63);
    var39.repaint(100L, 1, 0, 100, 24);
    var39.updateUI();
    javax.swing.TransferHandler var72 = var39.getTransferHandler();
    java.awt.Component.BaselineResizeBehavior var73 = var39.getBaselineResizeBehavior();
    bierse.view.RunningMessagePanel var76 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var77 = var76.isMaximumSizeSet();
    boolean var78 = var76.isOpaque();
    javax.swing.InputMap var79 = var76.getInputMap();
    java.lang.String var80 = var76.getName();
    var76.setFocusTraversalPolicyProvider(true);
    bierse.view.RunningMessagePanel var85 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var85.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var92 = var85.location();
    java.awt.Component var93 = var76.findComponentAt(var92);
    int var94 = var76.getX();
    var76.revalidate();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.add((java.awt.Component)var39, (java.lang.Object)var76, 10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == 0);

  }

  public void test116() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test116");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.repaint(1L, (-1), (-1), 0, 100);
    boolean var9 = var2.isFocusTraversable();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var13 = var12.getPreferredSize();
    boolean var16 = var12.contains(10, 1);
    java.awt.im.InputMethodRequests var17 = var12.getInputMethodRequests();
    var12.revalidate();
    var12.firePropertyChange("hi!", (short)100, (short)0);
    var2.setNextFocusableComponent((java.awt.Component)var12);
    boolean var24 = var2.isFocusable();
    var2.setAutoscrolls(true);
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var31 = var30.isMaximumSizeSet();
    var30.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var36 = var30.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var39 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var40 = var39.getPreferredSize();
    boolean var41 = var39.isPreferredSizeSet();
    var39.enable();
    var39.transferFocusBackward();
    int var44 = var30.getComponentZOrder((java.awt.Component)var39);
    var30.setEnabled(false);
    java.util.Set var48 = var30.getFocusTraversalKeys(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setFocusTraversalKeys(996, var48);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test117() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test117");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    java.awt.Dimension var9 = var2.getPreferredSize();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var12.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var19 = var12.location();
    java.awt.Point var20 = var2.getLocation(var19);
    boolean var21 = var2.isPaintingTile();
    int var22 = var2.getWidth();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var23 = var2.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);

  }

  public void test118() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test118");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.beans.PropertyChangeListener[] var5 = var2.getPropertyChangeListeners();
    var2.setOpaque(true);
    java.awt.Insets var8 = var2.insets();
    boolean var9 = var2.isOptimizedDrawingEnabled();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      javax.swing.InputMap var11 = var2.getInputMap(12);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test119() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test119");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    java.awt.Font var9 = var2.getFont();
    java.beans.PropertyChangeListener[] var11 = var2.getPropertyChangeListeners("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    boolean var12 = var2.isValidateRoot();
    java.awt.Toolkit var13 = var2.getToolkit();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var16.invalidate();
    java.awt.Dimension var23 = var16.getPreferredSize();
    var2.setMaximumSize(var23);
    boolean var25 = var2.isOpaque();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var26 = var2.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);

  }

  public void test120() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test120");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var9 = var2.location();
    java.awt.Font var10 = var2.getFont();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var12 = var2.getComponent(1);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test121() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test121");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    java.awt.Font var9 = var2.getFont();
    var2.enable();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var14 = var13.isMaximumSizeSet();
    var13.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var19 = var13.getTransferHandler();
    boolean var20 = var13.hasFocus();
    javax.swing.event.AncestorListener[] var21 = var13.getAncestorListeners();
    java.awt.Dimension var22 = var13.getMinimumSize();
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var27 = var26.getPreferredSize();
    java.awt.Dimension var28 = var26.getMaximumSize();
    var26.disable();
    var13.putClientProperty((java.lang.Object)100, (java.lang.Object)var26);
    javax.swing.InputVerifier var31 = var26.getInputVerifier();
    boolean var32 = var26.getInheritsPopupMenu();
    var26.setLocation(0, 100);
    boolean var36 = var26.isFocusTraversalPolicyProvider();
    var26.list();
    javax.swing.event.AncestorListener[] var38 = var26.getAncestorListeners();
    java.awt.Cursor var39 = var26.getCursor();
    int var40 = var26.getY();
    bierse.view.RunningMessagePanel var43 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var43.transferFocus();
    var43.show();
    float var46 = var43.getAlignmentX();
    var43.repaint(0L, 10, 0, 10, (-1));
    boolean var53 = var43.isEnabled();
    bierse.view.RunningMessagePanel var56 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var57 = var56.getPreferredSize();
    javax.swing.JPopupMenu var58 = var56.getComponentPopupMenu();
    java.awt.Rectangle var59 = var56.bounds();
    java.awt.Rectangle var60 = var43.getBounds(var59);
    var26.setBounds(var60);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setComponentZOrder((java.awt.Component)var26, 996);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test122() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test122");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    java.awt.Dimension var9 = var2.getPreferredSize();
    int var10 = var2.getWidth();
    java.awt.Dimension var11 = var2.getMaximumSize();
    var2.setOpaque(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var14 = var2.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test123() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test123");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    boolean var10 = var2.inside((-1), 100);
    java.beans.PropertyChangeListener[] var12 = var2.getPropertyChangeListeners("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    boolean var13 = var2.isCursorSet();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var15 = var2.getFocusTraversalKeys(12);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test124() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test124");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    var2.revalidate();
    var2.enable(true);
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var14 = var13.getPreferredSize();
    javax.swing.JPopupMenu var15 = var13.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var18 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var19 = var18.getPreferredSize();
    javax.swing.JPopupMenu var20 = var18.getComponentPopupMenu();
    java.awt.Rectangle var21 = var18.bounds();
    var13.computeVisibleRect(var21);
    java.awt.event.ComponentListener[] var23 = var13.getComponentListeners();
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var27 = var26.getPreferredSize();
    boolean var30 = var26.contains(10, 1);
    java.awt.im.InputMethodRequests var31 = var26.getInputMethodRequests();
    boolean var34 = var26.inside((-1), 100);
    java.beans.PropertyChangeListener[] var36 = var26.getPropertyChangeListeners("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.add((java.awt.Component)var13, (java.lang.Object)var26, 996);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test125() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test125");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    int var12 = var2.getDebugGraphicsOptions();
    java.awt.Component var15 = var2.locate(24, 100);
    bierse.view.RunningMessagePanel var18 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var19 = var18.getPreferredSize();
    boolean var22 = var18.contains(10, 1);
    java.awt.im.InputMethodRequests var23 = var18.getInputMethodRequests();
    java.awt.event.FocusListener[] var24 = var18.getFocusListeners();
    java.awt.Font var25 = var18.getFont();
    javax.swing.plaf.PanelUI var26 = var18.getUI();
    var2.setUI(var26);
    java.awt.Dimension var28 = var2.getSize();
    boolean var29 = var2.isFocusTraversalPolicyProvider();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test126() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test126");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var3 = var2.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var6 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var6.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var13 = var6.location();
    java.awt.Component var14 = var2.findComponentAt(var13);
    var2.setEnabled(true);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var19.transferFocus();
    var19.show();
    float var22 = var19.getAlignmentX();
    boolean var25 = var19.contains(0, 24);
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var29 = var28.getPreferredSize();
    java.awt.Dimension var30 = var28.getMaximumSize();
    java.awt.event.FocusListener[] var31 = var28.getFocusListeners();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var35 = var34.getPreferredSize();
    boolean var38 = var34.contains(10, 1);
    java.awt.im.InputMethodRequests var39 = var34.getInputMethodRequests();
    java.awt.Font var40 = var34.getFont();
    var28.setFont(var40);
    java.awt.FontMetrics var42 = var19.getFontMetrics(var40);
    java.awt.FontMetrics var43 = var2.getFontMetrics(var40);
    java.awt.FocusTraversalPolicy var44 = var2.getFocusTraversalPolicy();
    boolean var45 = var2.getIgnoreRepaint();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var49 = var48.isMaximumSizeSet();
    var48.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var54 = var48.getTransferHandler();
    boolean var55 = var48.hasFocus();
    var48.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var58 = var48.getPreferredSize();
    java.awt.ComponentOrientation var59 = var48.getComponentOrientation();
    bierse.view.RunningMessagePanel var62 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var63 = var62.isMaximumSizeSet();
    var62.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var68 = var62.getTransferHandler();
    boolean var69 = var62.hasFocus();
    var62.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var72 = var62.getPreferredSize();
    java.awt.Dimension var73 = var48.getSize(var72);
    var48.repaint(100L, 1, 0, 100, 24);
    var2.setNextFocusableComponent((java.awt.Component)var48);
    bierse.view.RunningMessagePanel var83 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var84 = var83.isMaximumSizeSet();
    boolean var85 = var83.isOpaque();
    javax.accessibility.AccessibleContext var86 = var83.getAccessibleContext();
    var83.hide();
    boolean var88 = var48.isAncestorOf((java.awt.Component)var83);
    boolean var89 = var48.isOptimizedDrawingEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);

  }

  public void test127() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test127");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    java.awt.image.ColorModel var4 = var2.getColorModel();
    java.beans.PropertyChangeListener[] var5 = var2.getPropertyChangeListeners();
    int var6 = var2.getHeight();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var8 = var2.getComponent(0);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);

  }

  public void test128() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test128");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    java.awt.image.VolatileImage var22 = var15.createVolatileImage(100, 24);
    java.awt.Graphics var23 = var15.getGraphics();
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var27 = var26.isMaximumSizeSet();
    boolean var28 = var26.isOpaque();
    javax.swing.InputMap var29 = var26.getInputMap();
    java.beans.PropertyChangeListener[] var31 = var26.getPropertyChangeListeners("");
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var35 = var34.getPreferredSize();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var39 = var38.isMaximumSizeSet();
    var38.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var38.invalidate();
    java.awt.Dimension var45 = var38.getPreferredSize();
    var34.setPreferredSize(var45);
    java.awt.Dimension var47 = var26.getSize(var45);
    var15.setMinimumSize(var45);
    var15.validate();
    boolean var51 = var15.requestFocus(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test129() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test129");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    java.awt.image.VolatileImage var22 = var15.createVolatileImage(100, 24);
    java.awt.Graphics var23 = var15.getGraphics();
    boolean var24 = var15.isValid();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test130() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test130");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    java.awt.image.ColorModel var4 = var2.getColorModel();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", (-1.0f), 0.5f);
    boolean var9 = var2.isFocusable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test131() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test131");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var8 = var2.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var12 = var11.getPreferredSize();
    boolean var13 = var11.isPreferredSizeSet();
    var11.enable();
    var11.transferFocusBackward();
    int var16 = var2.getComponentZOrder((java.awt.Component)var11);
    boolean var17 = var2.requestFocusInWindow();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isMaximumSizeSet();
    var21.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var27 = var21.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var31 = var30.getPreferredSize();
    boolean var32 = var30.isPreferredSizeSet();
    var30.enable();
    var30.transferFocusBackward();
    int var35 = var21.getComponentZOrder((java.awt.Component)var30);
    var21.setEnabled(false);
    java.util.Set var39 = var21.getFocusTraversalKeys(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setFocusTraversalKeys(996, var39);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test132() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test132");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.Insets var7 = var2.getInsets();
    javax.swing.JToolTip var8 = var2.createToolTip();
    var2.invalidate();
    var2.removeAll();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    var14.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var20 = var14.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var24 = var23.getPreferredSize();
    boolean var25 = var23.isPreferredSizeSet();
    var23.enable();
    var23.transferFocusBackward();
    int var28 = var14.getComponentZOrder((java.awt.Component)var23);
    var14.setEnabled(false);
    java.util.Set var32 = var14.getFocusTraversalKeys(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setFocusTraversalKeys(996, var32);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test133() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test133");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    var2.revalidate();
    var2.firePropertyChange("hi!", (short)100, (short)0);
    boolean var13 = var2.getAutoscrolls();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test134() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test134");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    var2.transferFocus();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var18 = var17.isMaximumSizeSet();
    var17.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var23 = var17.getTransferHandler();
    boolean var24 = var17.hasFocus();
    javax.swing.event.AncestorListener[] var25 = var17.getAncestorListeners();
    java.awt.Dimension var26 = var17.getMinimumSize();
    boolean var27 = var17.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var31 = var30.isMaximumSizeSet();
    var30.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var36 = var30.getTransferHandler();
    boolean var37 = var30.hasFocus();
    var30.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var40 = var30.getPreferredSize();
    java.awt.Dimension var41 = var17.getSize(var40);
    var2.setSize(var40);
    var2.setDebugGraphicsOptions((-1));
    var2.setSpeed(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test135() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test135");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    java.awt.Dimension var9 = var2.getPreferredSize();
    var2.show(false);
    boolean var12 = var2.isMaximumSizeSet();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var16 = var15.isMaximumSizeSet();
    var15.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var21 = var15.getTransferHandler();
    boolean var22 = var15.hasFocus();
    javax.swing.event.AncestorListener[] var23 = var15.getAncestorListeners();
    var15.enable(false);
    java.awt.Dimension var26 = var15.minimumSize();
    java.awt.Dimension var27 = var15.minimumSize();
    java.awt.Dimension var28 = var2.getSize(var27);
    java.awt.event.ComponentListener[] var29 = var2.getComponentListeners();
    var2.setSize((-1), (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test136() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test136");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.beans.PropertyChangeListener[] var5 = var2.getPropertyChangeListeners();
    var2.setOpaque(true);
    java.awt.Insets var8 = var2.insets();
    int var9 = var2.getStringHeight();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var13 = var12.isMaximumSizeSet();
    var12.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var18 = var12.getTransferHandler();
    boolean var19 = var12.hasFocus();
    var12.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var22 = var12.getPreferredSize();
    java.awt.ComponentOrientation var23 = var12.getComponentOrientation();
    var2.setComponentOrientation(var23);
    java.awt.Point var25 = var2.getMousePosition();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test137() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test137");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    var2.revalidate();
    java.awt.event.HierarchyListener[] var9 = var2.getHierarchyListeners();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var13 = var12.isMaximumSizeSet();
    boolean var14 = var12.isOpaque();
    java.awt.event.HierarchyListener[] var15 = var12.getHierarchyListeners();
    java.awt.peer.ComponentPeer var16 = var12.getPeer();
    var12.transferFocusDownCycle();
    var12.transferFocusUpCycle();
    java.awt.Dimension var19 = var12.minimumSize();
    var2.setPreferredSize(var19);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var22 = var2.getComponent((-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test138() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test138");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    javax.accessibility.AccessibleContext var5 = var2.getAccessibleContext();
    var2.setEnabled(true);
    java.awt.event.HierarchyListener[] var8 = var2.getHierarchyListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test139() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test139");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    var2.enable(false);
    java.awt.Dimension var13 = var2.minimumSize();
    boolean var14 = var2.isDoubleBuffered();
    java.awt.Dimension var15 = var2.getMinimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test140() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test140");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    java.awt.Dimension var9 = var2.getPreferredSize();
    int var10 = var2.getWidth();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var14 = var13.isMaximumSizeSet();
    var13.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var19 = var13.getTransferHandler();
    boolean var20 = var13.hasFocus();
    var13.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var23 = var13.getPreferredSize();
    java.awt.ComponentOrientation var24 = var13.getComponentOrientation();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    javax.swing.event.AncestorListener[] var35 = var27.getAncestorListeners();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var39 = var38.isMaximumSizeSet();
    var38.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var44 = var38.getTransferHandler();
    boolean var45 = var38.hasFocus();
    var38.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var48 = var38.getPreferredSize();
    java.awt.ComponentOrientation var49 = var38.getComponentOrientation();
    var13.add((java.awt.Component)var27, (java.lang.Object)var38);
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var54 = var53.getPreferredSize();
    java.awt.Dimension var55 = var53.getMaximumSize();
    var2.add((java.awt.Component)var27, (java.lang.Object)var53, (-1));
    boolean var58 = var2.isFocusTraversalPolicyProvider();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);

  }

  public void test141() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test141");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    var2.firePropertyChange("hi!", ' ', ' ');
    javax.accessibility.AccessibleContext var11 = var2.getAccessibleContext();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    boolean var16 = var14.isOpaque();
    java.awt.event.HierarchyListener[] var17 = var14.getHierarchyListeners();
    boolean var18 = var14.isValid();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isMaximumSizeSet();
    var21.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var27 = var21.getTransferHandler();
    boolean var28 = var21.hasFocus();
    javax.swing.event.AncestorListener[] var29 = var21.getAncestorListeners();
    var2.add((java.awt.Component)var14, (java.lang.Object)var29);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var33 = var2.getBaseline((-1), 12);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test142() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test142");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.beans.PropertyChangeListener[] var5 = var2.getPropertyChangeListeners();
    var2.setOpaque(true);
    java.awt.Insets var8 = var2.insets();
    boolean var9 = var2.isOptimizedDrawingEnabled();
    boolean var10 = var2.isForegroundSet();
    var2.reshape(13, 12, 996, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test143() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test143");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    var2.enable();
    javax.accessibility.AccessibleContext var6 = var2.getAccessibleContext();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var9.transferFocus();
    var9.show();
    float var12 = var9.getAlignmentX();
    var9.repaint(0L, 10, 0, 10, (-1));
    boolean var19 = var9.isEnabled();
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var23 = var22.getPreferredSize();
    javax.swing.JPopupMenu var24 = var22.getComponentPopupMenu();
    java.awt.Rectangle var25 = var22.bounds();
    java.awt.Rectangle var26 = var9.getBounds(var25);
    var2.computeVisibleRect(var26);
    java.awt.Color var28 = var2.getForeground();
    var2.resize(24, 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test144() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test144");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    boolean var13 = var11.isOpaque();
    java.awt.event.HierarchyListener[] var14 = var11.getHierarchyListeners();
    int var15 = var11.countComponents();
    java.awt.event.HierarchyBoundsListener[] var16 = var11.getHierarchyBoundsListeners();
    boolean var18 = var11.areFocusTraversalKeysSet(1);
    boolean var19 = var2.isAncestorOf((java.awt.Component)var11);
    var2.requestFocus();
    java.awt.FocusTraversalPolicy var21 = var2.getFocusTraversalPolicy();
    java.awt.Dimension var22 = var2.getPreferredSize();
    boolean var24 = var2.requestFocus(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test145() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test145");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    boolean var8 = var2.getInheritsPopupMenu();
    boolean var9 = var2.requestFocusInWindow();
    java.lang.Object var10 = var2.getTreeLock();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test146() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test146");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    float var5 = var2.getAlignmentX();
    var2.repaint(0L, 10, 0, 10, (-1));
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    boolean var16 = var14.isOpaque();
    java.awt.event.HierarchyListener[] var17 = var14.getHierarchyListeners();
    int var18 = var14.getWidth();
    int var19 = var14.countComponents();
    java.awt.Point var21 = var14.getMousePosition(true);
    var14.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    boolean var24 = var14.isBackgroundSet();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("hi!", 10);
    java.lang.Object var28 = var27.getTreeLock();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.add((java.awt.Component)var14, (java.lang.Object)var27, 24);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test147() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test147");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    boolean var40 = var27.isDoubleBuffered();
    bierse.view.RunningMessagePanel var43 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var43.transferFocus();
    var43.show();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var49 = var48.getPreferredSize();
    boolean var52 = var48.contains(10, 1);
    java.awt.im.InputMethodRequests var53 = var48.getInputMethodRequests();
    java.awt.Font var54 = var48.getFont();
    var43.setFont(var54);
    var27.setFont(var54);
    var27.setDoubleBuffered(false);
    bierse.view.RunningMessagePanel var62 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var63 = var62.isMaximumSizeSet();
    var62.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var68 = var62.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var71 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var72 = var71.getPreferredSize();
    boolean var73 = var71.isPreferredSizeSet();
    var71.enable();
    var71.transferFocusBackward();
    int var76 = var62.getComponentZOrder((java.awt.Component)var71);
    var62.setEnabled(false);
    java.util.Set var80 = var62.getFocusTraversalKeys(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var27.setFocusTraversalKeys((-1), var80);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test148() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test148");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.revalidate();
    var2.invalidate();
    boolean var7 = var2.getInheritsPopupMenu();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test149() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test149");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    java.awt.Component var11 = var2.getComponentAt(0, 0);
    java.awt.Dimension var12 = var2.minimumSize();
    boolean var13 = var2.isFocusOwner();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test150() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test150");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    var2.revalidate();
    var2.setSize(0, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test151() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test151");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    var2.setAlignmentX((-1.0f));
    java.awt.Point var9 = var2.getLocation();
    java.awt.Point var10 = var2.getLocation();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var14 = var13.isMaximumSizeSet();
    var13.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var13.invalidate();
    java.awt.Dimension var20 = var13.getPreferredSize();
    int var21 = var13.getWidth();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var25 = var24.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var28.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var35 = var28.location();
    java.awt.Component var36 = var24.findComponentAt(var35);
    var24.setEnabled(true);
    bierse.view.RunningMessagePanel var41 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var41.transferFocus();
    var41.show();
    float var44 = var41.getAlignmentX();
    boolean var47 = var41.contains(0, 24);
    bierse.view.RunningMessagePanel var50 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var51 = var50.getPreferredSize();
    java.awt.Dimension var52 = var50.getMaximumSize();
    java.awt.event.FocusListener[] var53 = var50.getFocusListeners();
    bierse.view.RunningMessagePanel var56 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var57 = var56.getPreferredSize();
    boolean var60 = var56.contains(10, 1);
    java.awt.im.InputMethodRequests var61 = var56.getInputMethodRequests();
    java.awt.Font var62 = var56.getFont();
    var50.setFont(var62);
    java.awt.FontMetrics var64 = var41.getFontMetrics(var62);
    java.awt.FontMetrics var65 = var24.getFontMetrics(var62);
    int var66 = var24.getWidth();
    java.awt.Insets var67 = var24.getInsets();
    java.awt.Insets var68 = var13.getInsets(var67);
    java.awt.Insets var69 = var2.getInsets(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test152() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test152");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var8 = var2.isFocusTraversalPolicySet();
    java.awt.event.FocusListener[] var9 = var2.getFocusListeners();
    java.awt.Point var10 = var2.getMousePosition();
    var2.setFocusable(false);
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var16 = var15.isMaximumSizeSet();
    boolean var17 = var15.isOpaque();
    java.beans.PropertyChangeListener[] var18 = var15.getPropertyChangeListeners();
    var15.setOpaque(true);
    java.awt.Insets var21 = var15.insets();
    boolean var22 = var15.isOptimizedDrawingEnabled();
    var15.disable();
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var26.repaint(1L, (-1), (-1), 0, 100);
    boolean var33 = var26.isFocusTraversable();
    javax.swing.ActionMap var34 = var26.getActionMap();
    var15.setActionMap(var34);
    boolean var36 = var15.isMinimumSizeSet();
    bierse.view.RunningMessagePanel var39 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var40 = var39.getPreferredSize();
    boolean var43 = var39.contains(10, 1);
    java.awt.im.InputMethodRequests var44 = var39.getInputMethodRequests();
    java.awt.Font var45 = var39.getFont();
    var2.add((java.awt.Component)var15, (java.lang.Object)var45, (-1));
    bierse.view.RunningMessagePanel var50 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var50.transferFocus();
    var50.show();
    float var53 = var50.getAlignmentX();
    var50.repaint(0L, 10, 0, 10, (-1));
    boolean var60 = var50.isEnabled();
    bierse.view.RunningMessagePanel var63 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var64 = var63.getPreferredSize();
    javax.swing.JPopupMenu var65 = var63.getComponentPopupMenu();
    java.awt.Rectangle var66 = var63.bounds();
    java.awt.Rectangle var67 = var50.getBounds(var66);
    var50.setFocusable(false);
    bierse.view.RunningMessagePanel var72 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var73 = var72.getPreferredSize();
    java.awt.Dimension var74 = var72.getMaximumSize();
    var50.setMinimumSize(var74);
    var15.setMinimumSize(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test153() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test153");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    var2.setAlignmentX(10.0f);
    var2.removeAll();
    java.awt.Point var15 = var2.location();
    var2.layout();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test154() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test154");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    java.awt.event.ContainerListener[] var7 = var2.getContainerListeners();
    java.awt.Dimension var8 = var2.getMaximumSize();
    boolean var9 = var2.isRequestFocusEnabled();
    boolean var10 = var2.requestDefaultFocus();
    float var11 = var2.getAlignmentX();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      javax.swing.InputMap var13 = var2.getInputMap(12);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);

  }

  public void test155() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test155");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    java.awt.event.InputMethodListener[] var12 = var2.getInputMethodListeners();
    int var15 = var2.getBaseline(10, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));

  }

  public void test156() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test156");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    var16.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var26 = var16.getPreferredSize();
    java.awt.Dimension var27 = var2.getSize(var26);
    java.awt.image.VolatileImage var30 = var2.createVolatileImage((-1), (-1));
    var2.repaint(100L);
    java.awt.ComponentOrientation var33 = var2.getComponentOrientation();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var34 = var2.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test157() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test157");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    java.awt.Dimension var9 = var2.getPreferredSize();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var12.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var19 = var12.location();
    java.awt.Point var20 = var2.getLocation(var19);
    boolean var21 = var2.requestDefaultFocus();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var22 = var2.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test158() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test158");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var3 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var4 = var3.getPreferredSize();
    javax.swing.JPopupMenu var5 = var3.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var9 = var8.getPreferredSize();
    javax.swing.JPopupMenu var10 = var8.getComponentPopupMenu();
    java.awt.Rectangle var11 = var8.bounds();
    var3.computeVisibleRect(var11);
    int var13 = var0.getIndexOf((java.lang.Object)var3);
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var17 = var16.getPreferredSize();
    boolean var20 = var16.contains(10, 1);
    java.awt.Insets var21 = var16.getInsets();
    javax.swing.JToolTip var22 = var16.createToolTip();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    var25.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var31 = var25.getTransferHandler();
    boolean var32 = var25.hasFocus();
    javax.swing.event.AncestorListener[] var33 = var25.getAncestorListeners();
    var25.enable(false);
    int var36 = var22.getComponentZOrder((java.awt.Component)var25);
    boolean var37 = var22.requestFocusInWindow();
    boolean var38 = var22.isOptimizedDrawingEnabled();
    java.awt.Component var41 = var22.locate(0, (-1));
    java.awt.Dimension var42 = var22.getMaximumSize();
    var0.insertElementAt((java.lang.Object)var22, 1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var45 = var22.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test159() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test159");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    java.awt.Image var11 = var2.createImage(24, 24);
    var2.repaint(0, 24, 10, (-1));
    var2.addNotify();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test160() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test160");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    javax.swing.JRootPane var13 = var2.getRootPane();
    var2.setRequestFocusEnabled(false);
    java.awt.Dimension var16 = var2.preferredSize();
    var2.setDebugGraphicsOptions((-1));
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isMaximumSizeSet();
    var21.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var27 = var21.getTransferHandler();
    boolean var28 = var21.hasFocus();
    var21.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var31 = var21.getPreferredSize();
    java.awt.ComponentOrientation var32 = var21.getComponentOrientation();
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var36 = var35.isMaximumSizeSet();
    var35.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var41 = var35.getTransferHandler();
    boolean var42 = var35.hasFocus();
    javax.swing.event.AncestorListener[] var43 = var35.getAncestorListeners();
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var47 = var46.isMaximumSizeSet();
    var46.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var52 = var46.getTransferHandler();
    boolean var53 = var46.hasFocus();
    var46.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var56 = var46.getPreferredSize();
    java.awt.ComponentOrientation var57 = var46.getComponentOrientation();
    var21.add((java.awt.Component)var35, (java.lang.Object)var46);
    java.awt.Component var60 = var2.add((java.awt.Component)var21, 0);
    java.awt.event.MouseWheelListener[] var61 = var60.getMouseWheelListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test161() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test161");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    javax.swing.InputMap var5 = var2.getInputMap();
    java.beans.PropertyChangeListener[] var7 = var2.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var8 = var2.getComponentOrientation();
    java.awt.peer.ComponentPeer var9 = var2.getPeer();
    var2.transferFocusDownCycle();
    var2.setSize((-1), 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test162() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test162");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    int var20 = var2.getHeight();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var23.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var30 = var23.location();
    boolean var31 = var2.contains(var30);
    int var32 = var2.getHeight();
    javax.swing.event.AncestorListener[] var33 = var2.getAncestorListeners();
    java.lang.String var34 = var2.getUIClassID();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "PanelUI"+ "'", var34.equals("PanelUI"));

  }

  public void test163() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test163");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    java.awt.peer.ComponentPeer var6 = var2.getPeer();
    var2.transferFocus();
    java.lang.String var8 = var2.getToolTipText();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    boolean var13 = var11.isOpaque();
    java.beans.PropertyChangeListener[] var14 = var11.getPropertyChangeListeners();
    var11.setOpaque(true);
    java.awt.Insets var17 = var11.insets();
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var21 = var20.isMaximumSizeSet();
    var20.layout();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    var25.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var31 = var25.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var35 = var34.getPreferredSize();
    boolean var36 = var34.isPreferredSizeSet();
    var34.enable();
    var34.transferFocusBackward();
    int var39 = var25.getComponentZOrder((java.awt.Component)var34);
    var25.setEnabled(false);
    java.awt.Graphics var42 = var25.getGraphics();
    var20.remove((java.awt.Component)var25);
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var47 = var46.getPreferredSize();
    boolean var50 = var46.contains(10, 1);
    java.awt.Insets var51 = var46.getInsets();
    javax.swing.JToolTip var52 = var46.createToolTip();
    var46.invalidate();
    var20.remove((java.awt.Component)var46);
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var46);
    boolean var56 = var2.isValid();
    int var57 = var2.getWidth();
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var62 = var61.isMaximumSizeSet();
    var61.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var67 = var61.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var70 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var71 = var70.getPreferredSize();
    boolean var72 = var70.isPreferredSizeSet();
    var70.enable();
    var70.transferFocusBackward();
    int var75 = var61.getComponentZOrder((java.awt.Component)var70);
    var61.setEnabled(false);
    java.util.Set var79 = var61.getFocusTraversalKeys(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setFocusTraversalKeys((-1), var79);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test164() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test164");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    boolean var11 = var2.inside(24, 1);
    java.awt.image.VolatileImage var14 = var2.createVolatileImage(0, 1);
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var18 = var17.getPreferredSize();
    boolean var21 = var17.contains(10, 1);
    var17.setAlignmentX((-1.0f));
    java.awt.Dimension var24 = var17.getMaximumSize();
    java.awt.Dimension var25 = var2.getSize(var24);
    bierse.view.RunningMessagePanel var29 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var30 = var29.getPreferredSize();
    java.awt.Dimension var31 = var29.getMaximumSize();
    java.awt.Insets var32 = var29.getInsets();
    javax.swing.InputMap var33 = var29.getInputMap();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setInputMap(13, var33);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test165() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test165");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var3 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var4 = var3.isMaximumSizeSet();
    var3.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var9 = var3.getTransferHandler();
    boolean var10 = var3.hasFocus();
    javax.swing.event.AncestorListener[] var11 = var3.getAncestorListeners();
    java.awt.Dimension var12 = var3.getMinimumSize();
    boolean var13 = var3.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    var16.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var26 = var16.getPreferredSize();
    java.awt.Dimension var27 = var3.getSize(var26);
    int var28 = var0.getIndexOf((java.lang.Object)var3);
    java.lang.Object var30 = var0.getElementAt(0);
    var0.removeAllElements();
    int var32 = var0.getSize();
    java.lang.Object var33 = var0.getSelectedItem();
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var37 = var36.isMaximumSizeSet();
    var36.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var42 = var36.getWidth();
    boolean var45 = var36.inside(24, 1);
    java.awt.image.VolatileImage var48 = var36.createVolatileImage(0, 1);
    bierse.view.RunningMessagePanel var51 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var52 = var51.getPreferredSize();
    boolean var55 = var51.contains(10, 1);
    var51.setAlignmentX((-1.0f));
    java.awt.Dimension var58 = var51.getMaximumSize();
    java.awt.Dimension var59 = var36.getSize(var58);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.insertElementAt((java.lang.Object)var36, 12);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test166() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test166");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var8 = var7.getPreferredSize();
    javax.swing.JPopupMenu var9 = var7.getComponentPopupMenu();
    java.awt.Rectangle var10 = var7.bounds();
    var2.computeVisibleRect(var10);
    java.awt.event.ComponentListener[] var12 = var2.getComponentListeners();
    var2.repaint(10, 100, 24, 24);
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var21 = var20.isMaximumSizeSet();
    var20.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var26 = var20.getTransferHandler();
    boolean var27 = var20.hasFocus();
    var20.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var30 = var20.getPreferredSize();
    java.awt.GraphicsConfiguration var31 = var20.getGraphicsConfiguration();
    java.awt.Dimension var32 = var20.getSize();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setComponentZOrder((java.awt.Component)var20, 12);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test167() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test167");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var9 = var2.location();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var13 = var12.isMaximumSizeSet();
    var12.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var18 = var12.getTransferHandler();
    boolean var19 = var12.hasFocus();
    javax.swing.event.AncestorListener[] var20 = var12.getAncestorListeners();
    java.awt.Dimension var21 = var12.getMinimumSize();
    var2.resize(var21);
    var2.repaint(100L, 1, (-1), 100, 24);
    var2.setBounds(100, 996, (-1), 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test168() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test168");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    boolean var10 = var2.inside((-1), 100);
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var14 = var13.getPreferredSize();
    boolean var17 = var13.contains(10, 1);
    var13.setAlignmentX((-1.0f));
    java.awt.Point var20 = var13.getLocation();
    java.awt.Point var21 = var2.getLocation(var20);
    boolean var24 = var2.contains(100, 0);
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    boolean var29 = var27.isOpaque();
    javax.swing.InputMap var30 = var27.getInputMap();
    java.lang.String var31 = var27.getName();
    var27.setFocusTraversalPolicyProvider(true);
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var36.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var43 = var36.location();
    java.awt.Component var44 = var27.findComponentAt(var43);
    java.awt.Dimension var45 = var27.minimumSize();
    var2.setMaximumSize(var45);
    var2.repaint(0, 13, (-1), 12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test169() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test169");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    var2.invalidate();
    java.awt.event.FocusListener[] var6 = var2.getFocusListeners();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var10 = var9.isMaximumSizeSet();
    var9.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var15 = var9.getTransferHandler();
    boolean var16 = var9.hasFocus();
    var9.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var19 = var9.getPreferredSize();
    java.awt.ComponentOrientation var20 = var9.getComponentOrientation();
    var9.transferFocus();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    var24.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var30 = var24.getTransferHandler();
    boolean var31 = var24.hasFocus();
    javax.swing.event.AncestorListener[] var32 = var24.getAncestorListeners();
    java.awt.Dimension var33 = var24.getMinimumSize();
    boolean var34 = var24.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    var37.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var47 = var37.getPreferredSize();
    java.awt.Dimension var48 = var24.getSize(var47);
    var9.setSize(var47);
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var53 = var52.getPreferredSize();
    boolean var56 = var52.contains(10, 1);
    java.awt.Insets var57 = var52.getInsets();
    javax.swing.JToolTip var58 = var52.createToolTip();
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var62 = var61.isMaximumSizeSet();
    var61.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var67 = var61.getTransferHandler();
    boolean var68 = var61.hasFocus();
    javax.swing.event.AncestorListener[] var69 = var61.getAncestorListeners();
    var61.enable(false);
    int var72 = var58.getComponentZOrder((java.awt.Component)var61);
    boolean var73 = var58.requestFocusInWindow();
    boolean var74 = var58.isOptimizedDrawingEnabled();
    var2.add((java.awt.Component)var9, (java.lang.Object)var58);
    java.beans.PropertyChangeListener[] var77 = var58.getPropertyChangeListeners("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.awt.image.VolatileImage var80 = var58.createVolatileImage(12, 12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var82 = var58.areFocusTraversalKeysSet(13);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);

  }

  public void test170() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test170");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    boolean var16 = var2.contains(1, 1);
    javax.swing.border.Border var17 = var2.getBorder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var18 = var2.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test171() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test171");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    java.awt.Image var11 = var2.createImage(24, 24);
    boolean var12 = var2.getInheritsPopupMenu();
    java.awt.image.ColorModel var13 = var2.getColorModel();
    bierse.view.KeyMapComboBoxModel var14 = new bierse.view.KeyMapComboBoxModel();
    javax.swing.event.ListDataListener[] var15 = var14.getListDataListeners();
    bierse.view.RunningMessagePanel var18 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var18.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var25 = var18.location();
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var29 = var28.isMaximumSizeSet();
    var28.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var34 = var28.getTransferHandler();
    boolean var35 = var28.hasFocus();
    javax.swing.event.AncestorListener[] var36 = var28.getAncestorListeners();
    java.awt.Dimension var37 = var28.getMinimumSize();
    var18.resize(var37);
    int var39 = var14.getIndexOf((java.lang.Object)var37);
    int var40 = var14.getSize();
    java.lang.Object var41 = var2.getClientProperty((java.lang.Object)var14);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var42 = var2.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);

  }

  public void test172() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test172");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var3 = var2.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var6 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var6.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var13 = var6.location();
    java.awt.Component var14 = var2.findComponentAt(var13);
    var2.firePropertyChange("hi!", '#', '#');
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var22 = var21.getPreferredSize();
    boolean var25 = var21.contains(10, 1);
    java.awt.im.InputMethodRequests var26 = var21.getInputMethodRequests();
    var21.revalidate();
    var21.firePropertyChange("hi!", (short)100, (short)0);
    java.awt.Component var34 = var21.getComponentAt(0, (-1));
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    javax.swing.event.AncestorListener[] var45 = var37.getAncestorListeners();
    java.awt.Dimension var46 = var37.getMinimumSize();
    bierse.view.RunningMessagePanel var50 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var51 = var50.getPreferredSize();
    java.awt.Dimension var52 = var50.getMaximumSize();
    var50.disable();
    var37.putClientProperty((java.lang.Object)100, (java.lang.Object)var50);
    javax.swing.InputVerifier var55 = var50.getInputVerifier();
    boolean var56 = var50.getInheritsPopupMenu();
    var50.setLocation(0, 100);
    boolean var60 = var50.isFocusTraversalPolicyProvider();
    var50.list();
    javax.swing.event.AncestorListener[] var62 = var50.getAncestorListeners();
    java.awt.Cursor var63 = var50.getCursor();
    var21.setCursor(var63);
    var2.setCursor(var63);
    var2.setSize(10, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test173() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test173");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var3 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var4 = var3.isMaximumSizeSet();
    var3.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var9 = var3.getTransferHandler();
    boolean var10 = var3.hasFocus();
    javax.swing.event.AncestorListener[] var11 = var3.getAncestorListeners();
    java.awt.Dimension var12 = var3.getMinimumSize();
    boolean var13 = var3.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    var16.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var26 = var16.getPreferredSize();
    java.awt.Dimension var27 = var3.getSize(var26);
    int var28 = var0.getIndexOf((java.lang.Object)var3);
    javax.swing.event.ListDataListener[] var29 = var0.getListDataListeners();
    javax.swing.event.ListDataListener[] var30 = var0.getListDataListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test174() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test174");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    java.awt.image.VolatileImage var22 = var15.createVolatileImage(100, 24);
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var26 = var25.getPreferredSize();
    var15.setMinimumSize(var26);
    var15.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", (byte)0, (byte)1);
    var15.revalidate();
    javax.swing.event.AncestorListener[] var33 = var15.getAncestorListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test175() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test175");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var24 = var23.isMaximumSizeSet();
    var23.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var29 = var23.getTransferHandler();
    boolean var30 = var23.hasFocus();
    var23.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var33 = var23.getPreferredSize();
    java.awt.ComponentOrientation var34 = var23.getComponentOrientation();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    javax.swing.event.AncestorListener[] var45 = var37.getAncestorListeners();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var49 = var48.isMaximumSizeSet();
    var48.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var54 = var48.getTransferHandler();
    boolean var55 = var48.hasFocus();
    var48.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var58 = var48.getPreferredSize();
    java.awt.ComponentOrientation var59 = var48.getComponentOrientation();
    var23.add((java.awt.Component)var37, (java.lang.Object)var48);
    bierse.view.RunningMessagePanel var63 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var64 = var63.getPreferredSize();
    java.awt.Dimension var65 = var63.getMaximumSize();
    var48.resize(var65);
    var15.setNextFocusableComponent((java.awt.Component)var48);
    java.lang.String var68 = var48.toString();
    var48.setFocusCycleRoot(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var68.equals("bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));

  }

  public void test176() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test176");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    java.awt.image.VolatileImage var22 = var15.createVolatileImage(100, 24);
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var26 = var25.getPreferredSize();
    java.awt.Point var27 = var25.getMousePosition();
    var25.revalidate();
    var25.transferFocus();
    java.awt.Toolkit var30 = var25.getToolkit();
    boolean var31 = var25.isFocusTraversalPolicySet();
    var15.setNextFocusableComponent((java.awt.Component)var25);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var34 = var25.getComponent(12);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test177() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test177");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    java.awt.dnd.DropTarget var21 = var15.getDropTarget();
    java.awt.Dimension var22 = var15.getSize();
    boolean var25 = var15.contains(996, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test178() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test178");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.beans.PropertyChangeListener[] var5 = var2.getPropertyChangeListeners();
    var2.setOpaque(true);
    java.awt.Insets var8 = var2.insets();
    int var9 = var2.getStringHeight();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var13 = var12.isMaximumSizeSet();
    var12.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var18 = var12.getTransferHandler();
    boolean var19 = var12.hasFocus();
    var12.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var22 = var12.getPreferredSize();
    java.awt.ComponentOrientation var23 = var12.getComponentOrientation();
    var2.setComponentOrientation(var23);
    java.awt.Container var25 = var2.getFocusCycleRootAncestor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test179() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test179");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPaintingTile();
    javax.swing.JToolTip var5 = var2.createToolTip();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var7 = var5.getFocusTraversalKeys(24);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test180() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test180");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    javax.swing.JRootPane var13 = var2.getRootPane();
    var2.setRequestFocusEnabled(false);
    var2.setVisible(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test181() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test181");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    boolean var21 = var15.getInheritsPopupMenu();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var25 = var24.getPreferredSize();
    boolean var28 = var24.contains(10, 1);
    java.awt.im.InputMethodRequests var29 = var24.getInputMethodRequests();
    var24.revalidate();
    var24.firePropertyChange("hi!", (short)100, (short)0);
    java.awt.Component var37 = var24.getComponentAt(0, (-1));
    var24.setRequestFocusEnabled(false);
    var15.remove((java.awt.Component)var24);
    bierse.view.RunningMessagePanel var43 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var44 = var43.isMaximumSizeSet();
    boolean var45 = var43.isOpaque();
    java.awt.event.HierarchyListener[] var46 = var43.getHierarchyListeners();
    int var47 = var43.getWidth();
    int var48 = var43.countComponents();
    java.awt.Point var50 = var43.getMousePosition(true);
    var43.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    boolean var53 = var43.isBackgroundSet();
    bierse.view.RunningMessagePanel var56 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var57 = var56.getPreferredSize();
    boolean var60 = var56.contains(10, 1);
    java.awt.im.InputMethodRequests var61 = var56.getInputMethodRequests();
    var56.repaint((-1L), 1, (-1), 1, 24);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.add((java.awt.Component)var43, (java.lang.Object)(-1L), 100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);

  }

  public void test182() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test182");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.Insets var7 = var2.getInsets();
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var11 = var10.isMaximumSizeSet();
    var10.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var16 = var10.getTransferHandler();
    boolean var17 = var10.hasFocus();
    var10.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var20 = var10.getPreferredSize();
    java.awt.ComponentOrientation var21 = var10.getComponentOrientation();
    var10.transferFocus();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    var25.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var31 = var25.getTransferHandler();
    boolean var32 = var25.hasFocus();
    javax.swing.event.AncestorListener[] var33 = var25.getAncestorListeners();
    java.awt.Dimension var34 = var25.getMinimumSize();
    boolean var35 = var25.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var39 = var38.isMaximumSizeSet();
    var38.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var44 = var38.getTransferHandler();
    boolean var45 = var38.hasFocus();
    var38.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var48 = var38.getPreferredSize();
    java.awt.Dimension var49 = var25.getSize(var48);
    var10.setSize(var48);
    var2.setSize(var48);
    bierse.view.RunningMessagePanel var55 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    javax.swing.InputVerifier var56 = var55.getInputVerifier();
    var55.removeAll();
    boolean var58 = var55.getFocusTraversalKeysEnabled();
    java.awt.Dimension var59 = var55.preferredSize();
    java.awt.Component var60 = var2.add("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var55);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var61 = var60.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test183() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test183");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    var11.transferFocus();
    var11.setToolTipText("");
    java.awt.event.InputMethodListener[] var31 = var11.getInputMethodListeners();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var35 = var34.isMaximumSizeSet();
    var34.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var40 = var34.getTransferHandler();
    boolean var41 = var34.hasFocus();
    javax.swing.event.AncestorListener[] var42 = var34.getAncestorListeners();
    java.awt.Dimension var43 = var34.getMinimumSize();
    bierse.view.RunningMessagePanel var47 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var48 = var47.getPreferredSize();
    java.awt.Dimension var49 = var47.getMaximumSize();
    var47.disable();
    var34.putClientProperty((java.lang.Object)100, (java.lang.Object)var47);
    javax.swing.InputVerifier var52 = var47.getInputVerifier();
    boolean var53 = var47.getInheritsPopupMenu();
    var47.setLocation(0, 100);
    boolean var57 = var47.isFocusTraversalPolicyProvider();
    var47.list();
    javax.swing.event.AncestorListener[] var59 = var47.getAncestorListeners();
    java.awt.Cursor var60 = var47.getCursor();
    var11.setCursor(var60);
    java.awt.Dimension var62 = var11.getMinimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test184() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test184");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    java.awt.Component[] var9 = var2.getComponents();
    var2.setRequestFocusEnabled(false);
    float var12 = var2.getAlignmentY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);

  }

  public void test185() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test185");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    java.awt.Dimension var9 = var2.getPreferredSize();
    var2.show(false);
    boolean var12 = var2.isMaximumSizeSet();
    var2.firePropertyChange("PanelUI", 10L, 100L);
    java.awt.event.HierarchyListener[] var17 = var2.getHierarchyListeners();
    java.lang.String var18 = var2.getToolTipText();
    java.beans.VetoableChangeListener[] var19 = var2.getVetoableChangeListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test186() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test186");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    var11.transferFocus();
    var11.setToolTipText("");
    java.awt.event.InputMethodListener[] var31 = var11.getInputMethodListeners();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var35 = var34.isMaximumSizeSet();
    var34.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var40 = var34.getTransferHandler();
    boolean var41 = var34.hasFocus();
    var34.setVerifyInputWhenFocusTarget(false);
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var47 = var46.isMaximumSizeSet();
    boolean var48 = var46.isOpaque();
    javax.swing.InputMap var49 = var46.getInputMap();
    java.beans.PropertyChangeListener[] var51 = var46.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var52 = var46.getComponentOrientation();
    var34.applyComponentOrientation(var52);
    var11.applyComponentOrientation(var52);
    bierse.view.RunningMessagePanel var57 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var58 = var57.isMaximumSizeSet();
    var57.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var63 = var57.getTransferHandler();
    boolean var64 = var57.hasFocus();
    javax.swing.event.AncestorListener[] var65 = var57.getAncestorListeners();
    java.awt.Dimension var66 = var57.getMinimumSize();
    bierse.view.RunningMessagePanel var70 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var71 = var70.getPreferredSize();
    java.awt.Dimension var72 = var70.getMaximumSize();
    var70.disable();
    var57.putClientProperty((java.lang.Object)100, (java.lang.Object)var70);
    int var75 = var57.getHeight();
    bierse.view.RunningMessagePanel var78 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var78.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var85 = var78.location();
    boolean var86 = var57.contains(var85);
    java.awt.Component var87 = var11.findComponentAt(var85);
    java.awt.event.HierarchyListener[] var88 = var11.getHierarchyListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test187() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test187");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    var2.revalidate();
    var2.firePropertyChange("hi!", (short)100, (short)0);
    java.awt.Component var15 = var2.getComponentAt(0, (-1));
    int var16 = var2.getY();
    var2.doLayout();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);

  }

  public void test188() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test188");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    int var20 = var2.getHeight();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var23.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var30 = var23.location();
    boolean var31 = var2.contains(var30);
    float var32 = var2.getAlignmentX();
    int var33 = var2.countComponents();
    var2.requestFocus();
    var2.disable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);

  }

  public void test189() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test189");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    java.awt.peer.ComponentPeer var6 = var2.getPeer();
    var2.transferFocus();
    java.lang.String var8 = var2.getToolTipText();
    int var9 = var2.getY();
    int var10 = var2.getHeight();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var14 = var13.isMaximumSizeSet();
    var13.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var19 = var13.getTransferHandler();
    boolean var20 = var13.hasFocus();
    var13.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var23 = var13.getPreferredSize();
    java.awt.ComponentOrientation var24 = var13.getComponentOrientation();
    java.lang.String var25 = var13.getName();
    java.awt.Font var26 = var13.getFont();
    var2.setFont(var26);
    java.awt.Graphics var28 = var2.getGraphics();
    bierse.view.RunningMessagePanel var31 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var32 = var31.isMaximumSizeSet();
    var31.layout();
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var37 = var36.isMaximumSizeSet();
    var36.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var42 = var36.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var45 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var46 = var45.getPreferredSize();
    boolean var47 = var45.isPreferredSizeSet();
    var45.enable();
    var45.transferFocusBackward();
    int var50 = var36.getComponentZOrder((java.awt.Component)var45);
    var36.setEnabled(false);
    java.awt.Graphics var53 = var36.getGraphics();
    var31.remove((java.awt.Component)var36);
    bierse.view.RunningMessagePanel var57 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var58 = var57.getPreferredSize();
    boolean var61 = var57.contains(10, 1);
    java.awt.Insets var62 = var57.getInsets();
    bierse.view.RunningMessagePanel var65 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var66 = var65.getPreferredSize();
    java.awt.Point var67 = var65.getMousePosition();
    var65.revalidate();
    java.awt.Component[] var69 = var65.getComponents();
    java.awt.event.KeyListener[] var70 = var65.getKeyListeners();
    var31.putClientProperty((java.lang.Object)var57, (java.lang.Object)var70);
    bierse.view.RunningMessagePanel var74 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var75 = var74.isMaximumSizeSet();
    var74.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var80 = var74.getTransferHandler();
    boolean var81 = var74.hasFocus();
    var74.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var84 = var74.getPreferredSize();
    java.awt.GraphicsConfiguration var85 = var74.getGraphicsConfiguration();
    bierse.view.RunningMessagePanel var88 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var89 = var88.isMaximumSizeSet();
    boolean var90 = var88.isOpaque();
    javax.swing.InputMap var91 = var88.getInputMap();
    java.beans.PropertyChangeListener[] var93 = var88.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var94 = var88.getComponentOrientation();
    var74.applyComponentOrientation(var94);
    var31.setComponentOrientation(var94);
    var2.setComponentOrientation(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test190() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test190");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    int var12 = var2.getDebugGraphicsOptions();
    java.awt.Component var15 = var2.locate(24, 100);
    bierse.view.RunningMessagePanel var18 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var19 = var18.getPreferredSize();
    boolean var22 = var18.contains(10, 1);
    java.awt.im.InputMethodRequests var23 = var18.getInputMethodRequests();
    java.awt.event.FocusListener[] var24 = var18.getFocusListeners();
    java.awt.Font var25 = var18.getFont();
    javax.swing.plaf.PanelUI var26 = var18.getUI();
    var2.setUI(var26);
    java.awt.Dimension var28 = var2.getSize();
    var2.setAlignmentX(0.0f);
    bierse.view.RunningMessagePanel var33 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var34 = var33.isMaximumSizeSet();
    var33.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var39 = var33.getTransferHandler();
    boolean var40 = var33.hasFocus();
    var33.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var43 = var33.getPreferredSize();
    java.awt.ComponentOrientation var44 = var33.getComponentOrientation();
    bierse.view.RunningMessagePanel var47 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var48 = var47.isMaximumSizeSet();
    var47.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var53 = var47.getTransferHandler();
    boolean var54 = var47.hasFocus();
    javax.swing.event.AncestorListener[] var55 = var47.getAncestorListeners();
    bierse.view.RunningMessagePanel var58 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var59 = var58.isMaximumSizeSet();
    var58.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var64 = var58.getTransferHandler();
    boolean var65 = var58.hasFocus();
    var58.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var68 = var58.getPreferredSize();
    java.awt.ComponentOrientation var69 = var58.getComponentOrientation();
    var33.add((java.awt.Component)var47, (java.lang.Object)var58);
    bierse.view.RunningMessagePanel var73 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var74 = var73.getPreferredSize();
    java.awt.Dimension var75 = var73.getMaximumSize();
    var58.resize(var75);
    var58.transferFocusDownCycle();
    bierse.view.RunningMessagePanel var80 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var81 = var80.isMaximumSizeSet();
    var80.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var86 = var80.getTransferHandler();
    boolean var87 = var80.hasFocus();
    javax.swing.event.AncestorListener[] var88 = var80.getAncestorListeners();
    javax.accessibility.AccessibleContext var89 = var80.getAccessibleContext();
    int var90 = var80.getHeight();
    java.awt.Image var93 = var80.createImage(12, 24);
    boolean var94 = var80.isValid();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.add((java.awt.Component)var58, (java.lang.Object)var94, 1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);

  }

  public void test191() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test191");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var9 = var2.location();
    java.awt.Font var10 = var2.getFont();
    boolean var11 = var2.requestFocusInWindow();
    java.lang.String var12 = var2.getUIClassID();
    var2.resetKeyboardActions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "PanelUI"+ "'", var12.equals("PanelUI"));

  }

  public void test192() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test192");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var8 = var7.getPreferredSize();
    javax.swing.JPopupMenu var9 = var7.getComponentPopupMenu();
    java.awt.Rectangle var10 = var7.bounds();
    var2.computeVisibleRect(var10);
    var2.removeNotify();
    int var13 = var2.getHeight();
    java.awt.Insets var14 = var2.getInsets();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test193() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test193");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    java.awt.Dimension var9 = var2.getPreferredSize();
    int var10 = var2.getWidth();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var14 = var13.isMaximumSizeSet();
    var13.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var19 = var13.getTransferHandler();
    boolean var20 = var13.hasFocus();
    var13.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var23 = var13.getPreferredSize();
    java.awt.ComponentOrientation var24 = var13.getComponentOrientation();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    javax.swing.event.AncestorListener[] var35 = var27.getAncestorListeners();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var39 = var38.isMaximumSizeSet();
    var38.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var44 = var38.getTransferHandler();
    boolean var45 = var38.hasFocus();
    var38.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var48 = var38.getPreferredSize();
    java.awt.ComponentOrientation var49 = var38.getComponentOrientation();
    var13.add((java.awt.Component)var27, (java.lang.Object)var38);
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var54 = var53.getPreferredSize();
    java.awt.Dimension var55 = var53.getMaximumSize();
    var2.add((java.awt.Component)var27, (java.lang.Object)var53, (-1));
    boolean var58 = var27.isOptimizedDrawingEnabled();
    boolean var59 = var27.isOptimizedDrawingEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);

  }

  public void test194() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test194");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    java.awt.event.MouseMotionListener[] var5 = var2.getMouseMotionListeners();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.remove(11);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test195() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test195");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    boolean var29 = var2.requestFocus(false);
    javax.swing.InputMap var30 = var2.getInputMap();
    int var33 = var2.getBaseline(0, 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == (-1));

  }

  public void test196() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test196");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    java.awt.Image var11 = var2.createImage(24, 24);
    java.awt.Point var12 = var2.getMousePosition();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.remove(13);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test197() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test197");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var8 = var7.isMaximumSizeSet();
    var7.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var13 = var7.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var17 = var16.getPreferredSize();
    boolean var18 = var16.isPreferredSizeSet();
    var16.enable();
    var16.transferFocusBackward();
    int var21 = var7.getComponentZOrder((java.awt.Component)var16);
    var7.setEnabled(false);
    java.awt.Graphics var24 = var7.getGraphics();
    var2.remove((java.awt.Component)var7);
    java.awt.im.InputContext var26 = var7.getInputContext();
    java.awt.Point var27 = var7.getLocation();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var31 = var30.isMaximumSizeSet();
    var30.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var36 = var30.getTransferHandler();
    boolean var37 = var30.hasFocus();
    var30.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var40 = var30.getPreferredSize();
    java.awt.ComponentOrientation var41 = var30.getComponentOrientation();
    var30.transferFocus();
    bierse.view.RunningMessagePanel var45 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var46 = var45.isMaximumSizeSet();
    var45.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var51 = var45.getTransferHandler();
    boolean var52 = var45.hasFocus();
    javax.swing.event.AncestorListener[] var53 = var45.getAncestorListeners();
    java.awt.Dimension var54 = var45.getMinimumSize();
    boolean var55 = var45.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var58 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var59 = var58.isMaximumSizeSet();
    var58.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var64 = var58.getTransferHandler();
    boolean var65 = var58.hasFocus();
    var58.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var68 = var58.getPreferredSize();
    java.awt.Dimension var69 = var45.getSize(var68);
    var30.setSize(var68);
    bierse.view.RunningMessagePanel var73 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var74 = var73.isMaximumSizeSet();
    var73.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var73.invalidate();
    java.awt.Dimension var80 = var73.getPreferredSize();
    bierse.view.RunningMessagePanel var83 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var83.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var90 = var83.location();
    java.awt.Point var91 = var73.getLocation(var90);
    java.awt.Point var92 = var30.getLocation(var90);
    java.awt.Component var93 = var7.findComponentAt(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);

  }

  public void test198() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test198");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    var2.setAlignmentY(10.0f);
    java.awt.event.ComponentListener[] var16 = var2.getComponentListeners();
    var2.updateUI();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test199() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test199");


    bierse.view.MyKeyMap var1 = bierse.view.KeyMapComboBoxModel.getMyKeyMapForKeyCode(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test200() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test200");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPaintingTile();
    javax.swing.JToolTip var5 = var2.createToolTip();
    var2.setRequestFocusEnabled(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test201() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test201");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    javax.swing.InputMap var5 = var2.getInputMap();
    java.lang.String var6 = var2.getName();
    var2.setFocusTraversalPolicyProvider(true);
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var11.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var18 = var11.location();
    java.awt.Component var19 = var2.findComponentAt(var18);
    java.awt.LayoutManager var20 = var2.getLayout();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var24 = var23.isMaximumSizeSet();
    boolean var25 = var23.isOpaque();
    javax.swing.InputMap var26 = var23.getInputMap();
    java.beans.PropertyChangeListener[] var28 = var23.getPropertyChangeListeners("");
    java.lang.String var29 = var23.toString();
    boolean var30 = var2.isFocusCycleRoot((java.awt.Container)var23);
    bierse.view.RunningMessagePanel var33 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var33.transferFocus();
    var33.show();
    float var36 = var33.getAlignmentX();
    boolean var39 = var33.contains(0, 24);
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var43 = var42.getPreferredSize();
    java.awt.Dimension var44 = var42.getMaximumSize();
    java.awt.event.FocusListener[] var45 = var42.getFocusListeners();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var49 = var48.getPreferredSize();
    boolean var52 = var48.contains(10, 1);
    java.awt.im.InputMethodRequests var53 = var48.getInputMethodRequests();
    java.awt.Font var54 = var48.getFont();
    var42.setFont(var54);
    java.awt.FontMetrics var56 = var33.getFontMetrics(var54);
    java.awt.Cursor var57 = var33.getCursor();
    var2.setCursor(var57);
    java.awt.Component.BaselineResizeBehavior var59 = var2.getBaselineResizeBehavior();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var29,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]"+ "'", var29.equals("bierse.view.RunningMessagePanel[,0,0,0var29,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test202() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test202");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    var15.setEnabled(false);
    boolean var22 = var15.isMinimumSizeSet();
    javax.swing.InputVerifier var23 = var15.getInputVerifier();
    var15.hide();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test203() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test203");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    javax.accessibility.AccessibleContext var11 = var2.getAccessibleContext();
    boolean var12 = var2.isPaintingTile();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test204() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test204");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.Insets var7 = var2.getInsets();
    javax.swing.JToolTip var8 = var2.createToolTip();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var17 = var11.getTransferHandler();
    boolean var18 = var11.hasFocus();
    javax.swing.event.AncestorListener[] var19 = var11.getAncestorListeners();
    var11.enable(false);
    int var22 = var8.getComponentZOrder((java.awt.Component)var11);
    java.awt.Container var23 = var11.getFocusCycleRootAncestor();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var11.remove(100);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test205() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test205");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    java.lang.String var14 = var2.getName();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var18 = var17.getPreferredSize();
    boolean var19 = var17.isPreferredSizeSet();
    var17.enable();
    var17.transferFocusBackward();
    java.awt.event.MouseListener[] var22 = var17.getMouseListeners();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    var25.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var31 = var25.getTransferHandler();
    boolean var32 = var25.hasFocus();
    javax.swing.event.AncestorListener[] var33 = var25.getAncestorListeners();
    java.awt.Dimension var34 = var25.getMinimumSize();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var39 = var38.getPreferredSize();
    java.awt.Dimension var40 = var38.getMaximumSize();
    var38.disable();
    var25.putClientProperty((java.lang.Object)100, (java.lang.Object)var38);
    javax.swing.InputVerifier var43 = var38.getInputVerifier();
    boolean var44 = var38.getInheritsPopupMenu();
    var38.setLocation(0, 100);
    boolean var48 = var38.isFocusTraversalPolicyProvider();
    var38.list();
    javax.swing.event.AncestorListener[] var50 = var38.getAncestorListeners();
    java.awt.Cursor var51 = var38.getCursor();
    int var52 = var38.getY();
    bierse.view.RunningMessagePanel var55 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var55.transferFocus();
    var55.show();
    float var58 = var55.getAlignmentX();
    var55.repaint(0L, 10, 0, 10, (-1));
    boolean var65 = var55.isEnabled();
    bierse.view.RunningMessagePanel var68 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var69 = var68.getPreferredSize();
    javax.swing.JPopupMenu var70 = var68.getComponentPopupMenu();
    java.awt.Rectangle var71 = var68.bounds();
    java.awt.Rectangle var72 = var55.getBounds(var71);
    var38.setBounds(var72);
    java.awt.Rectangle var74 = var17.getBounds(var72);
    var2.computeVisibleRect(var74);
    boolean var76 = var2.isShowing();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);

  }

  public void test206() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test206");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    java.awt.Component[] var9 = var2.getComponents();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var13 = var12.isMaximumSizeSet();
    var12.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var18 = var12.getTransferHandler();
    boolean var19 = var12.hasFocus();
    var12.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var22 = var12.getPreferredSize();
    var2.setMaximumSize(var22);
    var2.setBounds(10, 0, 10, 0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var29 = var2.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test207() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test207");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    var0.removeElementAt(1);

  }

  public void test208() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test208");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    java.beans.VetoableChangeListener[] var28 = var11.getVetoableChangeListeners();
    boolean var29 = var11.requestDefaultFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test209() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test209");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.Insets var7 = var2.getInsets();
    javax.swing.JToolTip var8 = var2.createToolTip();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var17 = var11.getTransferHandler();
    boolean var18 = var11.hasFocus();
    var11.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var21 = var11.getPreferredSize();
    java.awt.ComponentOrientation var22 = var11.getComponentOrientation();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    var25.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var31 = var25.getTransferHandler();
    boolean var32 = var25.hasFocus();
    javax.swing.event.AncestorListener[] var33 = var25.getAncestorListeners();
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var37 = var36.isMaximumSizeSet();
    var36.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var42 = var36.getTransferHandler();
    boolean var43 = var36.hasFocus();
    var36.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var46 = var36.getPreferredSize();
    java.awt.ComponentOrientation var47 = var36.getComponentOrientation();
    var11.add((java.awt.Component)var25, (java.lang.Object)var36);
    bierse.view.RunningMessagePanel var51 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var52 = var51.getPreferredSize();
    java.awt.Dimension var53 = var51.getMaximumSize();
    var36.resize(var53);
    var8.setPreferredSize(var53);
    bierse.view.RunningMessagePanel var58 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var59 = var58.isMaximumSizeSet();
    boolean var60 = var58.isOpaque();
    java.awt.event.HierarchyListener[] var61 = var58.getHierarchyListeners();
    int var62 = var58.getWidth();
    java.awt.event.ContainerListener[] var63 = var58.getContainerListeners();
    java.awt.Dimension var64 = var58.getMaximumSize();
    boolean var65 = var58.isBackgroundSet();
    var8.remove((java.awt.Component)var58);
    var58.setVisible(false);
    boolean var69 = var58.isValidateRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);

  }

  public void test210() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test210");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    java.awt.Dimension var9 = var2.getPreferredSize();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var12.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var19 = var12.location();
    java.awt.Point var20 = var2.getLocation(var19);
    var2.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", 1L, 0L);
    var2.setEnabled(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var27 = var2.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test211() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test211");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    var2.revalidate();
    var2.enable(true);
    java.awt.Point var11 = var2.location();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    boolean var16 = var14.isOpaque();
    java.awt.event.HierarchyListener[] var17 = var14.getHierarchyListeners();
    int var18 = var14.getWidth();
    int var19 = var14.countComponents();
    java.awt.Point var21 = var14.getMousePosition(true);
    var14.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var24 = var14.toString();
    java.awt.Font var25 = var14.getFont();
    var2.setFont(var25);
    boolean var29 = var2.inside(10, 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var24,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var24.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var24,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test212() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test212");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var9 = var2.location();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var13 = var12.isMaximumSizeSet();
    var12.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var18 = var12.getTransferHandler();
    boolean var19 = var12.hasFocus();
    javax.swing.event.AncestorListener[] var20 = var12.getAncestorListeners();
    java.awt.Dimension var21 = var12.getMinimumSize();
    var2.resize(var21);
    var2.repaint(100L, 1, (-1), 100, 24);
    java.awt.event.HierarchyBoundsListener[] var29 = var2.getHierarchyBoundsListeners();
    java.awt.Color var30 = var2.getBackground();
    int var31 = var2.getComponentCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);

  }

  public void test213() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test213");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    boolean var40 = var2.isDoubleBuffered();
    java.awt.Container var41 = var2.getFocusCycleRootAncestor();
    var2.setRequestFocusEnabled(true);
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var47 = var46.isMaximumSizeSet();
    var46.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var52 = var46.getTransferHandler();
    java.awt.Component var55 = var46.getComponentAt(0, 0);
    java.awt.Dimension var56 = var46.minimumSize();
    boolean var57 = var46.isFocusable();
    var46.disable();
    java.awt.image.VolatileImage var61 = var46.createVolatileImage(0, 1);
    bierse.view.KeyMapComboBoxModel var62 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var65 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var66 = var65.getPreferredSize();
    javax.swing.JPopupMenu var67 = var65.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var70 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var71 = var70.getPreferredSize();
    javax.swing.JPopupMenu var72 = var70.getComponentPopupMenu();
    java.awt.Rectangle var73 = var70.bounds();
    var65.computeVisibleRect(var73);
    int var75 = var62.getIndexOf((java.lang.Object)var65);
    java.lang.Object var76 = var46.getClientProperty((java.lang.Object)var75);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var78 = var2.add((java.awt.Component)var46, 12);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);

  }

  public void test214() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test214");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    int var20 = var2.getHeight();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var23.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var30 = var23.location();
    boolean var31 = var2.contains(var30);
    float var32 = var2.getAlignmentX();
    var2.grabFocus();
    int var36 = var2.getBaseline(12, 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));

  }

  public void test215() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test215");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    boolean var5 = var2.isValid();
    var2.show();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test216() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test216");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    boolean var40 = var2.getFocusTraversalKeysEnabled();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var41 = var2.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);

  }

  public void test217() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test217");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    java.awt.Dimension var9 = var2.getPreferredSize();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var12.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var19 = var12.location();
    java.awt.Point var20 = var2.getLocation(var19);
    boolean var21 = var2.requestDefaultFocus();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    var24.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var30 = var24.getTransferHandler();
    boolean var31 = var24.hasFocus();
    var24.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var34 = var24.getPreferredSize();
    java.awt.ComponentOrientation var35 = var24.getComponentOrientation();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var39 = var38.isMaximumSizeSet();
    var38.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var44 = var38.getTransferHandler();
    boolean var45 = var38.hasFocus();
    javax.swing.event.AncestorListener[] var46 = var38.getAncestorListeners();
    bierse.view.RunningMessagePanel var49 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var50 = var49.isMaximumSizeSet();
    var49.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var55 = var49.getTransferHandler();
    boolean var56 = var49.hasFocus();
    var49.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var59 = var49.getPreferredSize();
    java.awt.ComponentOrientation var60 = var49.getComponentOrientation();
    var24.add((java.awt.Component)var38, (java.lang.Object)var49);
    bierse.view.RunningMessagePanel var64 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var65 = var64.getPreferredSize();
    java.awt.Dimension var66 = var64.getMaximumSize();
    var49.resize(var66);
    var2.resize(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test218() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test218");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    javax.swing.event.ListDataListener[] var1 = var0.getListDataListeners();
    bierse.view.RunningMessagePanel var4 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var4.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var11 = var4.location();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    var14.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var20 = var14.getTransferHandler();
    boolean var21 = var14.hasFocus();
    javax.swing.event.AncestorListener[] var22 = var14.getAncestorListeners();
    java.awt.Dimension var23 = var14.getMinimumSize();
    var4.resize(var23);
    int var25 = var0.getIndexOf((java.lang.Object)var23);
    int var26 = var0.getSize();
    bierse.view.RunningMessagePanel var29 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var30 = var29.isMaximumSizeSet();
    var29.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var35 = var29.getTransferHandler();
    boolean var36 = var29.hasFocus();
    var29.setVerifyInputWhenFocusTarget(false);
    int var39 = var29.getDebugGraphicsOptions();
    java.awt.Component var42 = var29.locate(24, 100);
    bierse.view.RunningMessagePanel var45 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var46 = var45.getPreferredSize();
    boolean var49 = var45.contains(10, 1);
    java.awt.im.InputMethodRequests var50 = var45.getInputMethodRequests();
    java.awt.event.FocusListener[] var51 = var45.getFocusListeners();
    java.awt.Font var52 = var45.getFont();
    javax.swing.plaf.PanelUI var53 = var45.getUI();
    var29.setUI(var53);
    java.awt.Dimension var55 = var29.getSize();
    var29.setAlignmentX(0.0f);
    java.awt.image.ColorModel var58 = var29.getColorModel();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.insertElementAt((java.lang.Object)var29, 24);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test219() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test219");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var3 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var4 = var3.isMaximumSizeSet();
    boolean var5 = var3.isOpaque();
    java.beans.PropertyChangeListener[] var6 = var3.getPropertyChangeListeners();
    var3.setOpaque(true);
    var3.setRequestFocusEnabled(false);
    var0.insertElementAt((java.lang.Object)var3, 1);
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var16 = var15.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var19.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var26 = var19.location();
    java.awt.Component var27 = var15.findComponentAt(var26);
    var15.setEnabled(true);
    bierse.view.RunningMessagePanel var32 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var32.transferFocus();
    var32.show();
    float var35 = var32.getAlignmentX();
    boolean var38 = var32.contains(0, 24);
    bierse.view.RunningMessagePanel var41 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var42 = var41.getPreferredSize();
    java.awt.Dimension var43 = var41.getMaximumSize();
    java.awt.event.FocusListener[] var44 = var41.getFocusListeners();
    bierse.view.RunningMessagePanel var47 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var48 = var47.getPreferredSize();
    boolean var51 = var47.contains(10, 1);
    java.awt.im.InputMethodRequests var52 = var47.getInputMethodRequests();
    java.awt.Font var53 = var47.getFont();
    var41.setFont(var53);
    java.awt.FontMetrics var55 = var32.getFontMetrics(var53);
    java.awt.FontMetrics var56 = var15.getFontMetrics(var53);
    int var57 = var15.getWidth();
    var0.addElement((java.lang.Object)var57);
    var0.removeAllElements();
    bierse.view.RunningMessagePanel var62 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var63 = var62.isMaximumSizeSet();
    boolean var64 = var62.isOpaque();
    javax.swing.InputMap var65 = var62.getInputMap();
    java.beans.PropertyChangeListener[] var67 = var62.getPropertyChangeListeners("");
    int var68 = var0.getIndexOf((java.lang.Object)"");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == (-1));

  }

  public void test220() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test220");


    bierse.view.MyKeyMap var1 = bierse.view.KeyMapComboBoxModel.getMyKeyMapForKeyCode(13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test221() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test221");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var10 = var9.getPreferredSize();
    java.awt.Point var11 = var9.getMousePosition();
    var9.setDoubleBuffered(false);
    java.awt.Dimension var14 = var9.minimumSize();
    var2.setMinimumSize(var14);
    boolean var16 = var2.getFocusTraversalKeysEnabled();
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var21 = var20.isMaximumSizeSet();
    boolean var22 = var20.isOpaque();
    java.awt.event.HierarchyListener[] var23 = var20.getHierarchyListeners();
    int var24 = var20.countComponents();
    java.awt.event.HierarchyBoundsListener[] var25 = var20.getHierarchyBoundsListeners();
    boolean var27 = var20.areFocusTraversalKeysSet(1);
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var31 = var30.getPreferredSize();
    javax.swing.JPopupMenu var32 = var30.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var36 = var35.getPreferredSize();
    javax.swing.JPopupMenu var37 = var35.getComponentPopupMenu();
    java.awt.Rectangle var38 = var35.bounds();
    var30.computeVisibleRect(var38);
    var20.setBounds(var38);
    boolean var41 = var20.isMaximumSizeSet();
    var20.transferFocusBackward();
    java.awt.Insets var43 = var20.getInsets();
    boolean var44 = var20.isPaintingForPrint();
    bierse.view.RunningMessagePanel var47 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var48 = var47.getPreferredSize();
    boolean var51 = var47.contains(10, 1);
    java.awt.im.InputMethodRequests var52 = var47.getInputMethodRequests();
    boolean var55 = var47.inside((-1), 100);
    bierse.view.RunningMessagePanel var58 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var59 = var58.getPreferredSize();
    boolean var62 = var58.contains(10, 1);
    var58.setAlignmentX((-1.0f));
    java.awt.Point var65 = var58.getLocation();
    java.awt.Point var66 = var47.getLocation(var65);
    boolean var69 = var47.contains(100, 0);
    bierse.view.RunningMessagePanel var72 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var73 = var72.isMaximumSizeSet();
    boolean var74 = var72.isOpaque();
    javax.swing.InputMap var75 = var72.getInputMap();
    java.lang.String var76 = var72.getName();
    var72.setFocusTraversalPolicyProvider(true);
    bierse.view.RunningMessagePanel var81 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var81.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var88 = var81.location();
    java.awt.Component var89 = var72.findComponentAt(var88);
    java.awt.Dimension var90 = var72.minimumSize();
    var47.setMaximumSize(var90);
    java.lang.Object var92 = var20.getClientProperty((java.lang.Object)var47);
    javax.swing.InputMap var93 = var20.getInputMap();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setInputMap(100, var93);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);

  }

  public void test222() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test222");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    javax.accessibility.AccessibleContext var11 = var2.getAccessibleContext();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var12 = var2.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test223() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test223");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    boolean var5 = var2.isMaximumSizeSet();
    boolean var6 = var2.isRequestFocusEnabled();
    boolean var9 = var2.inside(1, 996);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var10 = var2.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test224() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test224");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    java.awt.Component var11 = var2.getComponentAt(0, 0);
    java.awt.Dimension var12 = var2.minimumSize();
    float var13 = var2.getAlignmentY();
    java.util.Locale var14 = var2.getLocale();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var16 = var2.getComponent((-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test225() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test225");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("PanelUI", 12);
    var2.repaint();

  }

  public void test226() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test226");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    var2.transferFocus();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var18 = var17.isMaximumSizeSet();
    var17.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var23 = var17.getTransferHandler();
    boolean var24 = var17.hasFocus();
    javax.swing.event.AncestorListener[] var25 = var17.getAncestorListeners();
    java.awt.Dimension var26 = var17.getMinimumSize();
    boolean var27 = var17.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var31 = var30.isMaximumSizeSet();
    var30.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var36 = var30.getTransferHandler();
    boolean var37 = var30.hasFocus();
    var30.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var40 = var30.getPreferredSize();
    java.awt.Dimension var41 = var17.getSize(var40);
    var2.setSize(var40);
    bierse.view.RunningMessagePanel var45 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var46 = var45.isMaximumSizeSet();
    var45.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var45.invalidate();
    java.awt.Dimension var52 = var45.getPreferredSize();
    bierse.view.RunningMessagePanel var55 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var55.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var62 = var55.location();
    java.awt.Point var63 = var45.getLocation(var62);
    java.awt.Point var64 = var2.getLocation(var62);
    boolean var66 = var2.requestFocus(true);
    bierse.view.RunningMessagePanel var69 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var70 = var69.isMaximumSizeSet();
    var69.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var75 = var69.getWidth();
    boolean var78 = var69.inside(24, 1);
    java.awt.image.VolatileImage var81 = var69.createVolatileImage(0, 1);
    var69.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", 10, 100);
    boolean var88 = var69.contains((-1), 1);
    var69.setEnabled(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setComponentZOrder((java.awt.Component)var69, 12);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);

  }

  public void test227() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test227");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var3 = var2.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var6 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var6.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var13 = var6.location();
    java.awt.Component var14 = var2.findComponentAt(var13);
    java.awt.event.KeyListener[] var15 = var2.getKeyListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test228() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test228");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    boolean var16 = var2.contains(1, 1);
    javax.swing.border.Border var17 = var2.getBorder();
    javax.swing.ActionMap var18 = var2.getActionMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test229() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test229");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var8 = var7.isMaximumSizeSet();
    var7.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var13 = var7.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var17 = var16.getPreferredSize();
    boolean var18 = var16.isPreferredSizeSet();
    var16.enable();
    var16.transferFocusBackward();
    int var21 = var7.getComponentZOrder((java.awt.Component)var16);
    var7.setEnabled(false);
    java.awt.Graphics var24 = var7.getGraphics();
    var2.remove((java.awt.Component)var7);
    java.awt.im.InputContext var26 = var7.getInputContext();
    java.awt.Point var27 = var7.getLocation();
    java.awt.FocusTraversalPolicy var28 = var7.getFocusTraversalPolicy();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test230() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test230");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    java.awt.Component var30 = var11.locate(24, 1);
    boolean var31 = var11.isValidateRoot();
    boolean var32 = var11.isFocusTraversalPolicySet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test231() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test231");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    var2.invalidate();
    java.awt.event.FocusListener[] var6 = var2.getFocusListeners();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var10 = var9.isMaximumSizeSet();
    var9.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var15 = var9.getTransferHandler();
    boolean var16 = var9.hasFocus();
    var9.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var19 = var9.getPreferredSize();
    java.awt.ComponentOrientation var20 = var9.getComponentOrientation();
    var9.transferFocus();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    var24.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var30 = var24.getTransferHandler();
    boolean var31 = var24.hasFocus();
    javax.swing.event.AncestorListener[] var32 = var24.getAncestorListeners();
    java.awt.Dimension var33 = var24.getMinimumSize();
    boolean var34 = var24.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    var37.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var47 = var37.getPreferredSize();
    java.awt.Dimension var48 = var24.getSize(var47);
    var9.setSize(var47);
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var53 = var52.getPreferredSize();
    boolean var56 = var52.contains(10, 1);
    java.awt.Insets var57 = var52.getInsets();
    javax.swing.JToolTip var58 = var52.createToolTip();
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var62 = var61.isMaximumSizeSet();
    var61.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var67 = var61.getTransferHandler();
    boolean var68 = var61.hasFocus();
    javax.swing.event.AncestorListener[] var69 = var61.getAncestorListeners();
    var61.enable(false);
    int var72 = var58.getComponentZOrder((java.awt.Component)var61);
    boolean var73 = var58.requestFocusInWindow();
    boolean var74 = var58.isOptimizedDrawingEnabled();
    var2.add((java.awt.Component)var9, (java.lang.Object)var58);
    java.beans.PropertyChangeListener[] var77 = var58.getPropertyChangeListeners("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    boolean var78 = var58.isOpaque();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);

  }

  public void test232() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test232");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var3 = var2.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var6 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var6.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var13 = var6.location();
    java.awt.Component var14 = var2.findComponentAt(var13);
    var2.setEnabled(true);
    var2.show();
    float var18 = var2.getAlignmentY();
    var2.transferFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);

  }

  public void test233() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test233");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.countComponents();
    java.awt.event.HierarchyBoundsListener[] var7 = var2.getHierarchyBoundsListeners();
    boolean var9 = var2.areFocusTraversalKeysSet(1);
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var13 = var12.getPreferredSize();
    boolean var16 = var12.contains(10, 1);
    java.awt.im.InputMethodRequests var17 = var12.getInputMethodRequests();
    boolean var20 = var12.inside((-1), 100);
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var24 = var23.getPreferredSize();
    boolean var27 = var23.contains(10, 1);
    var23.setAlignmentX((-1.0f));
    java.awt.Point var30 = var23.getLocation();
    java.awt.Point var31 = var12.getLocation(var30);
    boolean var34 = var12.contains(100, 0);
    int var35 = var12.countComponents();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var39 = var38.getPreferredSize();
    boolean var42 = var38.contains(10, 1);
    java.awt.im.InputMethodRequests var43 = var38.getInputMethodRequests();
    java.awt.event.FocusListener[] var44 = var38.getFocusListeners();
    java.awt.Font var45 = var38.getFont();
    java.awt.Cursor var46 = var38.getCursor();
    bierse.view.RunningMessagePanel var49 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var50 = var49.getPreferredSize();
    var38.resize(var50);
    java.awt.Dimension var52 = var12.getSize(var50);
    java.awt.Dimension var53 = var2.getSize(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test234() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test234");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    boolean var21 = var15.getInheritsPopupMenu();
    var15.setLocation(0, 100);
    boolean var25 = var15.isFocusTraversalPolicyProvider();
    var15.list();
    javax.swing.event.AncestorListener[] var27 = var15.getAncestorListeners();
    java.awt.Cursor var28 = var15.getCursor();
    bierse.view.RunningMessagePanel var31 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var32 = var31.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var35.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var42 = var35.location();
    java.awt.Component var43 = var31.findComponentAt(var42);
    var31.setEnabled(true);
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var48.transferFocus();
    var48.show();
    float var51 = var48.getAlignmentX();
    boolean var54 = var48.contains(0, 24);
    bierse.view.RunningMessagePanel var57 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var58 = var57.getPreferredSize();
    java.awt.Dimension var59 = var57.getMaximumSize();
    java.awt.event.FocusListener[] var60 = var57.getFocusListeners();
    bierse.view.RunningMessagePanel var63 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var64 = var63.getPreferredSize();
    boolean var67 = var63.contains(10, 1);
    java.awt.im.InputMethodRequests var68 = var63.getInputMethodRequests();
    java.awt.Font var69 = var63.getFont();
    var57.setFont(var69);
    java.awt.FontMetrics var71 = var48.getFontMetrics(var69);
    java.awt.FontMetrics var72 = var31.getFontMetrics(var69);
    java.awt.FontMetrics var73 = var15.getFontMetrics(var69);
    bierse.view.RunningMessagePanel var76 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var77 = var76.getPreferredSize();
    boolean var80 = var76.contains(10, 1);
    java.awt.Insets var81 = var76.getInsets();
    javax.swing.JToolTip var82 = var76.createToolTip();
    var76.invalidate();
    bierse.view.RunningMessagePanel var86 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var87 = var86.getPreferredSize();
    java.awt.Point var88 = var86.getMousePosition();
    var86.revalidate();
    boolean var90 = var76.isFocusCycleRoot((java.awt.Container)var86);
    java.awt.Point var91 = var76.location();
    java.awt.Point var92 = var15.getLocation(var91);
    var15.setAlignmentX(100.0f);
    boolean var97 = var15.contains(13, 12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);

  }

  public void test235() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test235");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    java.awt.peer.ComponentPeer var6 = var2.getPeer();
    var2.transferFocusDownCycle();
    var2.transferFocusUpCycle();
    boolean var9 = var2.isOpaque();
    var2.setFocusTraversalKeysEnabled(false);
    var2.repaint();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var16 = var15.isMaximumSizeSet();
    var15.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var21 = var15.getTransferHandler();
    boolean var22 = var15.hasFocus();
    var15.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var25 = var15.getPreferredSize();
    java.awt.ComponentOrientation var26 = var15.getComponentOrientation();
    var15.transferFocus();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var31 = var30.isMaximumSizeSet();
    var30.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var36 = var30.getTransferHandler();
    boolean var37 = var30.hasFocus();
    javax.swing.event.AncestorListener[] var38 = var30.getAncestorListeners();
    java.awt.Dimension var39 = var30.getMinimumSize();
    boolean var40 = var30.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var43 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var44 = var43.isMaximumSizeSet();
    var43.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var49 = var43.getTransferHandler();
    boolean var50 = var43.hasFocus();
    var43.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var53 = var43.getPreferredSize();
    java.awt.Dimension var54 = var30.getSize(var53);
    var15.setSize(var53);
    bierse.view.RunningMessagePanel var58 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var59 = var58.isMaximumSizeSet();
    var58.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var58.invalidate();
    java.awt.Dimension var65 = var58.getPreferredSize();
    bierse.view.RunningMessagePanel var68 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var68.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var75 = var68.location();
    java.awt.Point var76 = var58.getLocation(var75);
    java.awt.Point var77 = var15.getLocation(var75);
    boolean var78 = var2.contains(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);

  }

  public void test236() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test236");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    var11.transferFocus();
    var11.setToolTipText("");
    java.awt.event.InputMethodListener[] var31 = var11.getInputMethodListeners();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var35 = var34.isMaximumSizeSet();
    var34.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var40 = var34.getTransferHandler();
    boolean var41 = var34.hasFocus();
    javax.swing.event.AncestorListener[] var42 = var34.getAncestorListeners();
    java.awt.Dimension var43 = var34.getMinimumSize();
    bierse.view.RunningMessagePanel var47 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var48 = var47.getPreferredSize();
    java.awt.Dimension var49 = var47.getMaximumSize();
    var47.disable();
    var34.putClientProperty((java.lang.Object)100, (java.lang.Object)var47);
    javax.swing.InputVerifier var52 = var47.getInputVerifier();
    boolean var53 = var47.getInheritsPopupMenu();
    var47.setLocation(0, 100);
    boolean var57 = var47.isFocusTraversalPolicyProvider();
    var47.list();
    javax.swing.event.AncestorListener[] var59 = var47.getAncestorListeners();
    java.awt.Cursor var60 = var47.getCursor();
    var11.setCursor(var60);
    bierse.view.RunningMessagePanel var65 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var66 = var65.isMaximumSizeSet();
    var65.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var71 = var65.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var74 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var75 = var74.getPreferredSize();
    boolean var76 = var74.isPreferredSizeSet();
    var74.enable();
    var74.transferFocusBackward();
    int var79 = var65.getComponentZOrder((java.awt.Component)var74);
    var65.setEnabled(false);
    java.util.Set var83 = var65.getFocusTraversalKeys(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var11.setFocusTraversalKeys(100, var83);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test237() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test237");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var9 = var2.location();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var13 = var12.isMaximumSizeSet();
    var12.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var18 = var12.getTransferHandler();
    boolean var19 = var12.hasFocus();
    javax.swing.event.AncestorListener[] var20 = var12.getAncestorListeners();
    java.awt.Dimension var21 = var12.getMinimumSize();
    var2.resize(var21);
    var2.repaint(100L, 1, (-1), 100, 24);
    java.awt.event.HierarchyBoundsListener[] var29 = var2.getHierarchyBoundsListeners();
    java.awt.Color var30 = var2.getBackground();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var31 = var2.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test238() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test238");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var3 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var4 = var3.isMaximumSizeSet();
    var3.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var9 = var3.getTransferHandler();
    boolean var10 = var3.hasFocus();
    javax.swing.event.AncestorListener[] var11 = var3.getAncestorListeners();
    java.awt.Dimension var12 = var3.getMinimumSize();
    boolean var13 = var3.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    var16.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var26 = var16.getPreferredSize();
    java.awt.Dimension var27 = var3.getSize(var26);
    int var28 = var0.getIndexOf((java.lang.Object)var3);
    javax.swing.event.ListDataListener[] var29 = var0.getListDataListeners();
    java.lang.Object var30 = var0.getSelectedItem();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test239() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test239");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    var2.enable(false);
    java.awt.Dimension var13 = var2.minimumSize();
    boolean var14 = var2.isDoubleBuffered();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var18 = var17.isMaximumSizeSet();
    var17.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var23 = var17.getTransferHandler();
    boolean var24 = var17.hasFocus();
    var17.setVerifyInputWhenFocusTarget(false);
    float var27 = var17.getAlignmentX();
    boolean var28 = var17.isMinimumSizeSet();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var30 = var2.add((java.awt.Component)var17, 1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test240() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test240");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var24 = var23.isMaximumSizeSet();
    var23.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var29 = var23.getTransferHandler();
    boolean var30 = var23.hasFocus();
    var23.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var33 = var23.getPreferredSize();
    java.awt.ComponentOrientation var34 = var23.getComponentOrientation();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    javax.swing.event.AncestorListener[] var45 = var37.getAncestorListeners();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var49 = var48.isMaximumSizeSet();
    var48.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var54 = var48.getTransferHandler();
    boolean var55 = var48.hasFocus();
    var48.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var58 = var48.getPreferredSize();
    java.awt.ComponentOrientation var59 = var48.getComponentOrientation();
    var23.add((java.awt.Component)var37, (java.lang.Object)var48);
    bierse.view.RunningMessagePanel var63 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var64 = var63.getPreferredSize();
    java.awt.Dimension var65 = var63.getMaximumSize();
    var48.resize(var65);
    var15.setNextFocusableComponent((java.awt.Component)var48);
    var15.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", ' ', 'a');
    boolean var73 = var15.requestFocus(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);

  }

  public void test241() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test241");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    float var12 = var2.getAlignmentX();
    boolean var13 = var2.isMinimumSizeSet();
    var2.list();
    var2.setDebugGraphicsOptions(100);
    javax.swing.TransferHandler var17 = var2.getTransferHandler();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test242() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test242");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    boolean var8 = var2.getInheritsPopupMenu();
    java.lang.String var9 = var2.toString();
    java.awt.Rectangle var10 = var2.bounds();
    java.awt.GraphicsConfiguration var11 = var2.getGraphicsConfiguration();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    var14.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var20 = var14.getTransferHandler();
    boolean var21 = var14.hasFocus();
    var14.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var24 = var14.getPreferredSize();
    java.awt.ComponentOrientation var25 = var14.getComponentOrientation();
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var29 = var28.isMaximumSizeSet();
    var28.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var34 = var28.getTransferHandler();
    boolean var35 = var28.hasFocus();
    javax.swing.event.AncestorListener[] var36 = var28.getAncestorListeners();
    bierse.view.RunningMessagePanel var39 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var40 = var39.isMaximumSizeSet();
    var39.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var45 = var39.getTransferHandler();
    boolean var46 = var39.hasFocus();
    var39.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var49 = var39.getPreferredSize();
    java.awt.ComponentOrientation var50 = var39.getComponentOrientation();
    var14.add((java.awt.Component)var28, (java.lang.Object)var39);
    boolean var52 = var39.isDoubleBuffered();
    var39.setEnabled(true);
    var39.disable();
    boolean var56 = var39.isValid();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var58 = var2.add((java.awt.Component)var39, 11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var9,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var9.equals("bierse.view.RunningMessagePanel[,0,0,0var9,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);

  }

  public void test243() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test243");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.Insets var7 = var2.getInsets();
    javax.swing.JToolTip var8 = var2.createToolTip();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var17 = var11.getTransferHandler();
    boolean var18 = var11.hasFocus();
    javax.swing.event.AncestorListener[] var19 = var11.getAncestorListeners();
    var11.enable(false);
    int var22 = var8.getComponentZOrder((java.awt.Component)var11);
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    var25.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var31 = var25.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var35 = var34.getPreferredSize();
    boolean var36 = var34.isPreferredSizeSet();
    var34.enable();
    var34.transferFocusBackward();
    int var39 = var25.getComponentZOrder((java.awt.Component)var34);
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var42.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var49 = var42.location();
    boolean var50 = var34.contains(var49);
    java.awt.Component var51 = var11.getComponentAt(var49);
    boolean var52 = var11.isValid();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      javax.swing.InputMap var54 = var11.getInputMap(13);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);

  }

  public void test244() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test244");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    javax.swing.event.ListDataListener[] var1 = var0.getListDataListeners();
    bierse.view.RunningMessagePanel var4 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var4.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var11 = var4.location();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    var14.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var20 = var14.getTransferHandler();
    boolean var21 = var14.hasFocus();
    javax.swing.event.AncestorListener[] var22 = var14.getAncestorListeners();
    java.awt.Dimension var23 = var14.getMinimumSize();
    var4.resize(var23);
    int var25 = var0.getIndexOf((java.lang.Object)var23);
    java.lang.Object var26 = var0.getSelectedItem();
    bierse.view.RunningMessagePanel var29 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var30 = var29.isMaximumSizeSet();
    var29.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var35 = var29.getWidth();
    java.awt.Image var38 = var29.createImage(24, 24);
    boolean var39 = var29.getInheritsPopupMenu();
    var0.setSelectedItem((java.lang.Object)var39);
    bierse.view.RunningMessagePanel var43 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var44 = var43.getPreferredSize();
    javax.swing.JPopupMenu var45 = var43.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var49 = var48.getPreferredSize();
    javax.swing.JPopupMenu var50 = var48.getComponentPopupMenu();
    java.awt.Rectangle var51 = var48.bounds();
    var43.computeVisibleRect(var51);
    java.awt.event.ComponentListener[] var53 = var43.getComponentListeners();
    var43.setDebugGraphicsOptions(10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.insertElementAt((java.lang.Object)var43, 13);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test245() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test245");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var11 = var10.getPreferredSize();
    boolean var14 = var10.contains(10, 1);
    var10.setAlignmentX((-1.0f));
    java.awt.Point var17 = var10.getLocation();
    java.awt.Point var18 = var10.getLocation();
    boolean var19 = var2.contains(var18);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var20 = var2.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test246() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test246");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var24 = var23.isMaximumSizeSet();
    var23.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var29 = var23.getTransferHandler();
    boolean var30 = var23.hasFocus();
    var23.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var33 = var23.getPreferredSize();
    java.awt.ComponentOrientation var34 = var23.getComponentOrientation();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    javax.swing.event.AncestorListener[] var45 = var37.getAncestorListeners();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var49 = var48.isMaximumSizeSet();
    var48.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var54 = var48.getTransferHandler();
    boolean var55 = var48.hasFocus();
    var48.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var58 = var48.getPreferredSize();
    java.awt.ComponentOrientation var59 = var48.getComponentOrientation();
    var23.add((java.awt.Component)var37, (java.lang.Object)var48);
    bierse.view.RunningMessagePanel var63 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var64 = var63.getPreferredSize();
    java.awt.Dimension var65 = var63.getMaximumSize();
    var48.resize(var65);
    var15.setNextFocusableComponent((java.awt.Component)var48);
    java.lang.String var68 = var48.toString();
    java.awt.Component var71 = var48.findComponentAt((-1), 1);
    java.awt.Component[] var72 = var48.getComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var68.equals("bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test247() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test247");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    boolean var10 = var2.inside((-1), 100);
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var14 = var13.getPreferredSize();
    boolean var17 = var13.contains(10, 1);
    var13.setAlignmentX((-1.0f));
    java.awt.Point var20 = var13.getLocation();
    java.awt.Point var21 = var2.getLocation(var20);
    boolean var24 = var2.contains(100, 0);
    int var25 = var2.countComponents();
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var29 = var28.getPreferredSize();
    boolean var32 = var28.contains(10, 1);
    java.awt.im.InputMethodRequests var33 = var28.getInputMethodRequests();
    java.awt.event.FocusListener[] var34 = var28.getFocusListeners();
    java.awt.Font var35 = var28.getFont();
    java.awt.Cursor var36 = var28.getCursor();
    bierse.view.RunningMessagePanel var39 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var40 = var39.getPreferredSize();
    var28.resize(var40);
    java.awt.Dimension var42 = var2.getSize(var40);
    var2.transferFocus();
    boolean var44 = var2.isRequestFocusEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);

  }

  public void test248() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test248");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    var2.disable();
    java.awt.Container var8 = var2.getFocusCycleRootAncestor();
    var2.setLocation((-1), 10);
    java.awt.Dimension var12 = var2.getMinimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test249() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test249");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    boolean var11 = var2.inside(24, 1);
    java.awt.image.VolatileImage var14 = var2.createVolatileImage(0, 1);
    var2.show(true);
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var21 = var20.isMaximumSizeSet();
    var20.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var26 = var20.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var29 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var30 = var29.getPreferredSize();
    boolean var31 = var29.isPreferredSizeSet();
    var29.enable();
    var29.transferFocusBackward();
    int var34 = var20.getComponentZOrder((java.awt.Component)var29);
    var20.setEnabled(false);
    java.util.Set var38 = var20.getFocusTraversalKeys(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setFocusTraversalKeys(996, var38);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test250() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test250");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.repaint(1L, (-1), (-1), 0, 100);
    boolean var9 = var2.isFocusTraversable();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var13 = var12.getPreferredSize();
    boolean var16 = var12.contains(10, 1);
    java.awt.im.InputMethodRequests var17 = var12.getInputMethodRequests();
    var12.revalidate();
    var12.firePropertyChange("hi!", (short)100, (short)0);
    var2.setNextFocusableComponent((java.awt.Component)var12);
    boolean var24 = var2.isFocusable();
    var2.setAutoscrolls(true);
    bierse.view.RunningMessagePanel var29 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var30 = var29.isMaximumSizeSet();
    var29.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var35 = var29.getTransferHandler();
    boolean var36 = var29.hasFocus();
    var29.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var39 = var29.getPreferredSize();
    java.awt.ComponentOrientation var40 = var29.getComponentOrientation();
    bierse.view.RunningMessagePanel var43 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var44 = var43.isMaximumSizeSet();
    var43.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var49 = var43.getTransferHandler();
    boolean var50 = var43.hasFocus();
    javax.swing.event.AncestorListener[] var51 = var43.getAncestorListeners();
    bierse.view.RunningMessagePanel var54 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var55 = var54.isMaximumSizeSet();
    var54.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var60 = var54.getTransferHandler();
    boolean var61 = var54.hasFocus();
    var54.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var64 = var54.getPreferredSize();
    java.awt.ComponentOrientation var65 = var54.getComponentOrientation();
    var29.add((java.awt.Component)var43, (java.lang.Object)var54);
    boolean var67 = var54.isDoubleBuffered();
    bierse.view.RunningMessagePanel var70 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var70.transferFocus();
    var70.show();
    bierse.view.RunningMessagePanel var75 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var76 = var75.getPreferredSize();
    boolean var79 = var75.contains(10, 1);
    java.awt.im.InputMethodRequests var80 = var75.getInputMethodRequests();
    java.awt.Font var81 = var75.getFont();
    var70.setFont(var81);
    var54.setFont(var81);
    java.awt.FontMetrics var84 = var2.getFontMetrics(var81);
    boolean var85 = var2.getAutoscrolls();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);

  }

  public void test251() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test251");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.setDebugGraphicsOptions(10);
    java.lang.Object var5 = var2.getTreeLock();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var9 = var8.isMaximumSizeSet();
    var8.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var14 = var8.getTransferHandler();
    boolean var15 = var8.hasFocus();
    javax.swing.event.AncestorListener[] var16 = var8.getAncestorListeners();
    java.awt.Dimension var17 = var8.getMinimumSize();
    var2.setPreferredSize(var17);
    java.awt.FocusTraversalPolicy var19 = var2.getFocusTraversalPolicy();
    var2.setLocation(0, 100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.remove(996);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test252() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test252");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    java.awt.peer.ComponentPeer var6 = var2.getPeer();
    var2.transferFocus();
    var2.setDebugGraphicsOptions(1);
    var2.updateUI();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test253() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test253");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    var2.enable(false);
    java.awt.Dimension var13 = var2.minimumSize();
    java.awt.GraphicsConfiguration var14 = var2.getGraphicsConfiguration();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var18 = var17.isMaximumSizeSet();
    var17.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var23 = var17.getTransferHandler();
    boolean var24 = var17.hasFocus();
    javax.swing.event.AncestorListener[] var25 = var17.getAncestorListeners();
    java.awt.Dimension var26 = var17.getMinimumSize();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var31 = var30.getPreferredSize();
    java.awt.Dimension var32 = var30.getMaximumSize();
    var30.disable();
    var17.putClientProperty((java.lang.Object)100, (java.lang.Object)var30);
    java.awt.image.VolatileImage var37 = var30.createVolatileImage(100, 24);
    bierse.view.RunningMessagePanel var40 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var41 = var40.getPreferredSize();
    var30.setMinimumSize(var41);
    var2.setMinimumSize(var41);
    var2.setFocusTraversalKeysEnabled(false);
    var2.addNotify();
    java.awt.Container var47 = var2.getTopLevelAncestor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);

  }

  public void test254() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test254");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    javax.swing.InputMap var5 = var2.getInputMap();
    java.beans.PropertyChangeListener[] var7 = var2.getPropertyChangeListeners("");
    boolean var8 = var2.getVerifyInputWhenFocusTarget();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test255() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test255");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    var2.enable();
    javax.accessibility.AccessibleContext var6 = var2.getAccessibleContext();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var9.transferFocus();
    var9.show();
    float var12 = var9.getAlignmentX();
    var9.repaint(0L, 10, 0, 10, (-1));
    boolean var19 = var9.isEnabled();
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var23 = var22.getPreferredSize();
    javax.swing.JPopupMenu var24 = var22.getComponentPopupMenu();
    java.awt.Rectangle var25 = var22.bounds();
    java.awt.Rectangle var26 = var9.getBounds(var25);
    var2.computeVisibleRect(var26);
    bierse.view.RunningMessagePanel var31 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var32 = var31.isMaximumSizeSet();
    boolean var33 = var31.isOpaque();
    java.awt.event.HierarchyListener[] var34 = var31.getHierarchyListeners();
    int var35 = var31.countComponents();
    java.awt.event.HierarchyBoundsListener[] var36 = var31.getHierarchyBoundsListeners();
    boolean var38 = var31.areFocusTraversalKeysSet(1);
    java.awt.Container var39 = var31.getParent();
    boolean var40 = var31.requestFocusInWindow();
    java.awt.Component var41 = var2.add("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var31);
    boolean var42 = var2.isRequestFocusEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);

  }

  public void test256() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test256");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    java.awt.Component[] var9 = var2.getComponents();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var13 = var12.isMaximumSizeSet();
    var12.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var18 = var12.getTransferHandler();
    boolean var19 = var12.hasFocus();
    var12.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var22 = var12.getPreferredSize();
    var2.setMaximumSize(var22);
    var2.enableInputMethods(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test257() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test257");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    var2.invalidate();
    java.awt.event.FocusListener[] var6 = var2.getFocusListeners();
    javax.swing.plaf.PanelUI var7 = var2.getUI();
    var2.setSpeed(996);
    java.awt.Point var11 = var2.getMousePosition(true);
    boolean var12 = var2.isDoubleBuffered();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test258() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test258");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    java.awt.im.InputMethodRequests var9 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var10 = var2.getFocusListeners();
    boolean var11 = var2.isOptimizedDrawingEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test259() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test259");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    javax.swing.InputMap var5 = var2.getInputMap();
    java.beans.PropertyChangeListener[] var7 = var2.getPropertyChangeListeners("");
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var11 = var10.getPreferredSize();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    var14.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var14.invalidate();
    java.awt.Dimension var21 = var14.getPreferredSize();
    var10.setPreferredSize(var21);
    java.awt.Dimension var23 = var2.getSize(var21);
    java.awt.event.HierarchyBoundsListener[] var24 = var2.getHierarchyBoundsListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test260() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test260");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    var2.firePropertyChange("hi!", ' ', ' ');
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var14 = var13.isMaximumSizeSet();
    boolean var15 = var13.isOpaque();
    java.awt.event.HierarchyListener[] var16 = var13.getHierarchyListeners();
    int var17 = var13.getWidth();
    var13.firePropertyChange("hi!", ' ', ' ');
    javax.accessibility.AccessibleContext var22 = var13.getAccessibleContext();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    boolean var27 = var25.isOpaque();
    java.awt.event.HierarchyListener[] var28 = var25.getHierarchyListeners();
    boolean var29 = var25.isValid();
    bierse.view.RunningMessagePanel var32 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var33 = var32.isMaximumSizeSet();
    var32.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var38 = var32.getTransferHandler();
    boolean var39 = var32.hasFocus();
    javax.swing.event.AncestorListener[] var40 = var32.getAncestorListeners();
    var13.add((java.awt.Component)var25, (java.lang.Object)var40);
    var25.setFocusTraversalKeysEnabled(false);
    int var44 = var2.getComponentZOrder((java.awt.Component)var25);
    var25.setVisible(true);
    java.awt.Point var47 = var25.getMousePosition();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);

  }

  public void test261() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test261");


    bierse.view.MyKeyMap var1 = bierse.view.KeyMapComboBoxModel.getMyKeyMapForKeyCode(11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test262() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test262");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    java.awt.Component[] var9 = var2.getComponents();
    var2.enable(true);
    var2.resetKeyboardActions();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var16 = var15.isMaximumSizeSet();
    boolean var17 = var15.isOpaque();
    java.awt.event.HierarchyListener[] var18 = var15.getHierarchyListeners();
    java.awt.peer.ComponentPeer var19 = var15.getPeer();
    var15.transferFocusDownCycle();
    var15.transferFocusUpCycle();
    java.awt.Dimension var22 = var15.minimumSize();
    var15.setVerifyInputWhenFocusTarget(true);
    java.awt.Dimension var25 = var15.size();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setComponentZOrder((java.awt.Component)var15, (-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test263() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test263");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var8 = var7.isMaximumSizeSet();
    boolean var9 = var7.isOpaque();
    java.beans.PropertyChangeListener[] var10 = var7.getPropertyChangeListeners();
    var7.setOpaque(true);
    java.awt.Insets var13 = var7.insets();
    java.awt.Insets var14 = var2.getInsets(var13);
    var2.resetKeyboardActions();
    java.awt.event.ComponentListener[] var16 = var2.getComponentListeners();
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var20 = var19.getPreferredSize();
    java.awt.Point var21 = var19.getMousePosition();
    var19.revalidate();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    var25.layout();
    var25.invalidate();
    var19.setNextFocusableComponent((java.awt.Component)var25);
    bierse.view.RunningMessagePanel var32 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var33 = var32.getPreferredSize();
    boolean var36 = var32.contains(10, 1);
    java.awt.Insets var37 = var32.getInsets();
    javax.swing.JToolTip var38 = var32.createToolTip();
    bierse.view.RunningMessagePanel var41 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var42 = var41.isMaximumSizeSet();
    var41.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var47 = var41.getTransferHandler();
    boolean var48 = var41.hasFocus();
    var41.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var51 = var41.getPreferredSize();
    java.awt.ComponentOrientation var52 = var41.getComponentOrientation();
    bierse.view.RunningMessagePanel var55 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var56 = var55.isMaximumSizeSet();
    var55.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var61 = var55.getTransferHandler();
    boolean var62 = var55.hasFocus();
    javax.swing.event.AncestorListener[] var63 = var55.getAncestorListeners();
    bierse.view.RunningMessagePanel var66 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var67 = var66.isMaximumSizeSet();
    var66.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var72 = var66.getTransferHandler();
    boolean var73 = var66.hasFocus();
    var66.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var76 = var66.getPreferredSize();
    java.awt.ComponentOrientation var77 = var66.getComponentOrientation();
    var41.add((java.awt.Component)var55, (java.lang.Object)var66);
    bierse.view.RunningMessagePanel var81 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var82 = var81.getPreferredSize();
    java.awt.Dimension var83 = var81.getMaximumSize();
    var66.resize(var83);
    var38.setPreferredSize(var83);
    java.awt.Dimension var86 = var19.getSize(var83);
    var2.setMaximumSize(var83);
    boolean var88 = var2.isOptimizedDrawingEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);

  }

  public void test264() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test264");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    float var5 = var2.getAlignmentX();
    var2.repaint(0L, 10, 0, 10, (-1));
    java.awt.Component.BaselineResizeBehavior var12 = var2.getBaselineResizeBehavior();
    var2.setLocation(100, 996);
    java.awt.Image var18 = var2.createImage(100, 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test265() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test265");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var9 = var2.location();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var13 = var12.isMaximumSizeSet();
    var12.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var18 = var12.getTransferHandler();
    boolean var19 = var12.hasFocus();
    javax.swing.event.AncestorListener[] var20 = var12.getAncestorListeners();
    java.awt.Dimension var21 = var12.getMinimumSize();
    var2.resize(var21);
    var2.repaint(100L, 1, (-1), 100, 24);
    java.awt.event.HierarchyBoundsListener[] var29 = var2.getHierarchyBoundsListeners();
    java.awt.Insets var30 = var2.insets();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test266() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test266");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    java.awt.peer.ComponentPeer var6 = var2.getPeer();
    var2.transferFocus();
    java.lang.String var8 = var2.getToolTipText();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    boolean var13 = var11.isOpaque();
    java.beans.PropertyChangeListener[] var14 = var11.getPropertyChangeListeners();
    var11.setOpaque(true);
    java.awt.Insets var17 = var11.insets();
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var21 = var20.isMaximumSizeSet();
    var20.layout();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    var25.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var31 = var25.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var35 = var34.getPreferredSize();
    boolean var36 = var34.isPreferredSizeSet();
    var34.enable();
    var34.transferFocusBackward();
    int var39 = var25.getComponentZOrder((java.awt.Component)var34);
    var25.setEnabled(false);
    java.awt.Graphics var42 = var25.getGraphics();
    var20.remove((java.awt.Component)var25);
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var47 = var46.getPreferredSize();
    boolean var50 = var46.contains(10, 1);
    java.awt.Insets var51 = var46.getInsets();
    javax.swing.JToolTip var52 = var46.createToolTip();
    var46.invalidate();
    var20.remove((java.awt.Component)var46);
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var46);
    javax.swing.JRootPane var56 = var11.getRootPane();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);

  }

  public void test267() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test267");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    java.lang.String var14 = var2.getName();
    java.awt.Font var15 = var2.getFont();
    java.awt.event.MouseWheelListener[] var16 = var2.getMouseWheelListeners();
    var2.transferFocusBackward();
    java.awt.Color var18 = var2.getForeground();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isMaximumSizeSet();
    boolean var23 = var21.isOpaque();
    java.awt.event.HierarchyListener[] var24 = var21.getHierarchyListeners();
    int var25 = var21.getWidth();
    java.awt.event.ContainerListener[] var26 = var21.getContainerListeners();
    java.awt.Dimension var27 = var21.getMaximumSize();
    boolean var28 = var21.isRequestFocusEnabled();
    var21.transferFocus();
    bierse.view.RunningMessagePanel var32 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var33 = var32.getPreferredSize();
    java.awt.Point var34 = var32.getMousePosition();
    var32.setDoubleBuffered(false);
    java.awt.GraphicsConfiguration var37 = var32.getGraphicsConfiguration();
    java.awt.Component var40 = var32.locate((-1), (-1));
    java.awt.Font var41 = var32.getFont();
    java.awt.FontMetrics var42 = var21.getFontMetrics(var41);
    var2.setFont(var41);
    javax.swing.border.Border var44 = var2.getBorder();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);

  }

  public void test268() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test268");


    bierse.view.MyKeyMap var2 = new bierse.view.MyKeyMap("hi!", 1);
    int var3 = var2.getCode();
    java.lang.String var4 = var2.toString();
    java.lang.String var5 = var2.toString();
    java.lang.String var6 = var2.getText();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "hi!"+ "'", var4.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "hi!"+ "'", var5.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "hi!"+ "'", var6.equals("hi!"));

  }

  public void test269() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test269");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    java.awt.peer.ComponentPeer var6 = var2.getPeer();
    var2.transferFocusDownCycle();
    var2.transferFocusUpCycle();
    javax.swing.JToolTip var9 = var2.createToolTip();
    boolean var10 = var2.isPaintingTile();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test270() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test270");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    var2.setAlignmentX(10.0f);
    var2.firePropertyChange("hi!", (byte)10, (byte)0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test271() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test271");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    var2.firePropertyChange("hi!", 100.0f, (-1.0f));
    java.awt.Cursor var13 = var2.getCursor();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var16.repaint(1L, (-1), (-1), 0, 100);
    boolean var23 = var16.isFocusTraversable();
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var27 = var26.getPreferredSize();
    boolean var30 = var26.contains(10, 1);
    java.awt.im.InputMethodRequests var31 = var26.getInputMethodRequests();
    var26.revalidate();
    var26.firePropertyChange("hi!", (short)100, (short)0);
    var16.setNextFocusableComponent((java.awt.Component)var26);
    java.awt.event.HierarchyBoundsListener[] var38 = var26.getHierarchyBoundsListeners();
    boolean var39 = var26.isMinimumSizeSet();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var41 = var2.add((java.awt.Component)var26, 13);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test272() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test272");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var8 = var7.isMaximumSizeSet();
    var7.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var13 = var7.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var17 = var16.getPreferredSize();
    boolean var18 = var16.isPreferredSizeSet();
    var16.enable();
    var16.transferFocusBackward();
    int var21 = var7.getComponentZOrder((java.awt.Component)var16);
    var7.setEnabled(false);
    java.awt.Graphics var24 = var7.getGraphics();
    var2.remove((java.awt.Component)var7);
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var29 = var28.getPreferredSize();
    boolean var32 = var28.contains(10, 1);
    java.awt.Insets var33 = var28.getInsets();
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var37 = var36.getPreferredSize();
    java.awt.Point var38 = var36.getMousePosition();
    var36.revalidate();
    java.awt.Component[] var40 = var36.getComponents();
    java.awt.event.KeyListener[] var41 = var36.getKeyListeners();
    var2.putClientProperty((java.lang.Object)var28, (java.lang.Object)var41);
    bierse.view.RunningMessagePanel var45 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var46 = var45.getPreferredSize();
    java.awt.Dimension var47 = var45.getMaximumSize();
    java.awt.event.FocusListener[] var48 = var45.getFocusListeners();
    bierse.view.RunningMessagePanel var51 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var52 = var51.getPreferredSize();
    boolean var55 = var51.contains(10, 1);
    java.awt.im.InputMethodRequests var56 = var51.getInputMethodRequests();
    java.awt.Font var57 = var51.getFont();
    var45.setFont(var57);
    var28.setFont(var57);
    bierse.view.RunningMessagePanel var62 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var63 = var62.isMaximumSizeSet();
    boolean var64 = var62.isOpaque();
    javax.swing.InputMap var65 = var62.getInputMap();
    java.lang.String var66 = var62.getName();
    var62.setFocusTraversalPolicyProvider(true);
    bierse.view.RunningMessagePanel var71 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var71.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var78 = var71.location();
    java.awt.Component var79 = var62.findComponentAt(var78);
    java.awt.Insets var80 = var62.getInsets();
    java.awt.Insets var81 = var28.getInsets(var80);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var83 = var28.areFocusTraversalKeysSet(11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test273() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test273");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isLightweight();
    java.awt.event.KeyListener[] var4 = var2.getKeyListeners();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      javax.swing.InputMap var6 = var2.getInputMap(11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test274() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test274");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    boolean var11 = var2.inside(24, 1);
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    var14.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var20 = var14.getTransferHandler();
    boolean var21 = var14.hasFocus();
    var14.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var24 = var14.getPreferredSize();
    java.awt.ComponentOrientation var25 = var14.getComponentOrientation();
    var2.setComponentOrientation(var25);
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var31 = var30.isMaximumSizeSet();
    boolean var32 = var30.isOpaque();
    javax.swing.InputMap var33 = var30.getInputMap();
    java.beans.PropertyChangeListener[] var35 = var30.getPropertyChangeListeners("");
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var39 = var38.getPreferredSize();
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var43 = var42.isMaximumSizeSet();
    var42.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var42.invalidate();
    java.awt.Dimension var49 = var42.getPreferredSize();
    var38.setPreferredSize(var49);
    java.awt.Dimension var51 = var30.getSize(var49);
    java.lang.String var52 = var30.getUIClassID();
    bierse.view.RunningMessagePanel var56 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var57 = var56.isMaximumSizeSet();
    var56.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var62 = var56.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var65 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var66 = var65.getPreferredSize();
    boolean var67 = var65.isPreferredSizeSet();
    var65.enable();
    var65.transferFocusBackward();
    int var70 = var56.getComponentZOrder((java.awt.Component)var65);
    var56.setEnabled(false);
    java.util.Set var74 = var56.getFocusTraversalKeys(0);
    var30.setFocusTraversalKeys(0, var74);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setFocusTraversalKeys(24, var74);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "PanelUI"+ "'", var52.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test275() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test275");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", 24);
    java.awt.LayoutManager var3 = var2.getLayout();
    var2.firePropertyChange("PanelUI", (short)10, (short)1);
    int var10 = var2.getBaseline(13, 12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));

  }

  public void test276() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test276");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var3 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var4 = var3.isMaximumSizeSet();
    boolean var5 = var3.isOpaque();
    java.beans.PropertyChangeListener[] var6 = var3.getPropertyChangeListeners();
    var3.setOpaque(true);
    var3.setRequestFocusEnabled(false);
    var0.insertElementAt((java.lang.Object)var3, 1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.removeElementAt(13);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test277() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test277");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    boolean var12 = var2.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var16 = var15.isMaximumSizeSet();
    var15.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var21 = var15.getTransferHandler();
    boolean var22 = var15.hasFocus();
    var15.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var25 = var15.getPreferredSize();
    java.awt.Dimension var26 = var2.getSize(var25);
    java.awt.event.ComponentListener[] var27 = var2.getComponentListeners();
    var2.disable();
    var2.requestFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test278() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test278");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    var2.setVisible(true);
    var2.enable();
    var2.setBounds(996, 24, 996, 24);
    boolean var20 = var2.isDisplayable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test279() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test279");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    javax.swing.event.ListDataListener[] var1 = var0.getListDataListeners();
    bierse.view.RunningMessagePanel var4 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var4.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var11 = var4.location();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    var14.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var20 = var14.getTransferHandler();
    boolean var21 = var14.hasFocus();
    javax.swing.event.AncestorListener[] var22 = var14.getAncestorListeners();
    java.awt.Dimension var23 = var14.getMinimumSize();
    var4.resize(var23);
    int var25 = var0.getIndexOf((java.lang.Object)var23);
    java.lang.Object var27 = var0.getElementAt(996);
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var31 = var30.getPreferredSize();
    boolean var34 = var30.contains(10, 1);
    java.awt.im.InputMethodRequests var35 = var30.getInputMethodRequests();
    var30.revalidate();
    var30.firePropertyChange("hi!", (short)100, (short)0);
    java.awt.Component var43 = var30.getComponentAt(0, (-1));
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var47 = var46.isMaximumSizeSet();
    var46.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var52 = var46.getTransferHandler();
    boolean var53 = var46.hasFocus();
    javax.swing.event.AncestorListener[] var54 = var46.getAncestorListeners();
    java.awt.Dimension var55 = var46.getMinimumSize();
    bierse.view.RunningMessagePanel var59 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var60 = var59.getPreferredSize();
    java.awt.Dimension var61 = var59.getMaximumSize();
    var59.disable();
    var46.putClientProperty((java.lang.Object)100, (java.lang.Object)var59);
    javax.swing.InputVerifier var64 = var59.getInputVerifier();
    boolean var65 = var59.getInheritsPopupMenu();
    var59.setLocation(0, 100);
    boolean var69 = var59.isFocusTraversalPolicyProvider();
    var59.list();
    javax.swing.event.AncestorListener[] var71 = var59.getAncestorListeners();
    java.awt.Cursor var72 = var59.getCursor();
    var30.setCursor(var72);
    var30.transferFocusUpCycle();
    var30.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (short)(-1), (short)0);
    java.awt.Dimension var79 = var30.getSize();
    var0.insertElementAt((java.lang.Object)var79, 10);
    java.lang.Object var82 = var0.getSelectedItem();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.removeElementAt(996);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test280() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test280");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    var2.firePropertyChange("hi!", ' ', ' ');
    javax.accessibility.AccessibleContext var11 = var2.getAccessibleContext();
    var2.resize(100, 0);
    java.awt.Dimension var15 = var2.getMaximumSize();
    int var16 = var2.getX();
    float var17 = var2.getAlignmentX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);

  }

  public void test281() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test281");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    javax.swing.InputMap var5 = var2.getInputMap();
    java.lang.String var6 = var2.getName();
    var2.setFocusTraversalPolicyProvider(true);
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var11.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var18 = var11.location();
    java.awt.Component var19 = var2.findComponentAt(var18);
    java.awt.LayoutManager var20 = var2.getLayout();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var24 = var23.isMaximumSizeSet();
    boolean var25 = var23.isOpaque();
    javax.swing.InputMap var26 = var23.getInputMap();
    java.beans.PropertyChangeListener[] var28 = var23.getPropertyChangeListeners("");
    java.lang.String var29 = var23.toString();
    boolean var30 = var2.isFocusCycleRoot((java.awt.Container)var23);
    var2.setFocusTraversalPolicyProvider(true);
    boolean var33 = var2.isMinimumSizeSet();
    int var34 = var2.getWidth();
    var2.setVisible(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var29,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]"+ "'", var29.equals("bierse.view.RunningMessagePanel[,0,0,0var29,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);

  }

  public void test282() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test282");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    java.awt.image.ColorModel var4 = var2.getColorModel();
    java.beans.PropertyChangeListener[] var5 = var2.getPropertyChangeListeners();
    int var6 = var2.getHeight();
    boolean var7 = var2.isValid();
    java.lang.String var8 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var8,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var8.equals("bierse.view.RunningMessagePanel[,0,0,0var8,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));

  }

  public void test283() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test283");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    var2.enable();
    javax.accessibility.AccessibleContext var6 = var2.getAccessibleContext();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var9.transferFocus();
    var9.show();
    float var12 = var9.getAlignmentX();
    var9.repaint(0L, 10, 0, 10, (-1));
    boolean var19 = var9.isEnabled();
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var23 = var22.getPreferredSize();
    javax.swing.JPopupMenu var24 = var22.getComponentPopupMenu();
    java.awt.Rectangle var25 = var22.bounds();
    java.awt.Rectangle var26 = var9.getBounds(var25);
    var2.computeVisibleRect(var26);
    java.awt.Color var28 = var2.getForeground();
    bierse.view.RunningMessagePanel var31 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var32 = var31.isMaximumSizeSet();
    var31.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var37 = var31.getTransferHandler();
    boolean var38 = var31.hasFocus();
    var31.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var41 = var31.getPreferredSize();
    java.awt.GraphicsConfiguration var42 = var31.getGraphicsConfiguration();
    java.awt.Dimension var43 = var31.getSize();
    java.awt.ComponentOrientation var44 = var31.getComponentOrientation();
    var2.setComponentOrientation(var44);
    boolean var46 = var2.isShowing();
    bierse.view.RunningMessagePanel var50 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var51 = var50.isMaximumSizeSet();
    var50.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var56 = var50.getTransferHandler();
    boolean var57 = var50.hasFocus();
    var50.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var60 = var50.getPreferredSize();
    javax.swing.JRootPane var61 = var50.getRootPane();
    var50.setRequestFocusEnabled(false);
    java.awt.Dimension var64 = var50.preferredSize();
    javax.swing.InputMap var65 = var50.getInputMap();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setInputMap(100, var65);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test284() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test284");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    javax.swing.InputMap var5 = var2.getInputMap();
    java.lang.String var6 = var2.getName();
    var2.setFocusTraversalPolicyProvider(true);
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var11.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var18 = var11.location();
    java.awt.Component var19 = var2.findComponentAt(var18);
    int var20 = var2.getX();
    boolean var21 = var2.isPreferredSizeSet();
    java.awt.image.VolatileImage var24 = var2.createVolatileImage(1, 1);
    boolean var25 = var2.isMinimumSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test285() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test285");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    int var12 = var2.getDebugGraphicsOptions();
    java.awt.Component var15 = var2.locate(24, 100);
    bierse.view.RunningMessagePanel var18 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var19 = var18.getPreferredSize();
    boolean var22 = var18.contains(10, 1);
    java.awt.im.InputMethodRequests var23 = var18.getInputMethodRequests();
    java.awt.event.FocusListener[] var24 = var18.getFocusListeners();
    java.awt.Font var25 = var18.getFont();
    javax.swing.plaf.PanelUI var26 = var18.getUI();
    var2.setUI(var26);
    java.awt.Dimension var28 = var2.getSize();
    var2.setAlignmentX(0.0f);
    java.awt.image.ColorModel var31 = var2.getColorModel();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var33 = var2.areFocusTraversalKeysSet(24);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test286() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test286");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var10 = var9.getPreferredSize();
    java.awt.Point var11 = var9.getMousePosition();
    var9.setDoubleBuffered(false);
    java.awt.Dimension var14 = var9.minimumSize();
    var2.setMinimumSize(var14);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var20 = var19.getPreferredSize();
    boolean var23 = var19.contains(10, 1);
    java.awt.im.InputMethodRequests var24 = var19.getInputMethodRequests();
    javax.swing.InputMap var25 = var19.getInputMap();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setInputMap(10, var25);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test287() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test287");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    javax.swing.event.ListDataListener[] var1 = var0.getListDataListeners();
    bierse.view.RunningMessagePanel var4 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var4.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var11 = var4.location();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    var14.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var20 = var14.getTransferHandler();
    boolean var21 = var14.hasFocus();
    javax.swing.event.AncestorListener[] var22 = var14.getAncestorListeners();
    java.awt.Dimension var23 = var14.getMinimumSize();
    var4.resize(var23);
    int var25 = var0.getIndexOf((java.lang.Object)var23);
    java.lang.Object var27 = var0.getElementAt(996);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.removeElementAt(12);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test288() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test288");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    float var12 = var2.getAlignmentX();
    boolean var13 = var2.isMinimumSizeSet();
    var2.list();
    java.awt.Component var17 = var2.locate(24, 0);
    int var18 = var2.getX();
    boolean var19 = var2.hasFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test289() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test289");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    bierse.view.RunningMessagePanel var6 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var7 = var6.isMaximumSizeSet();
    boolean var8 = var6.isOpaque();
    java.awt.event.HierarchyListener[] var9 = var6.getHierarchyListeners();
    int var10 = var6.countComponents();
    java.awt.event.HierarchyBoundsListener[] var11 = var6.getHierarchyBoundsListeners();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    boolean var16 = var14.isOpaque();
    java.awt.event.HierarchyListener[] var17 = var14.getHierarchyListeners();
    int var18 = var14.getWidth();
    java.awt.event.ContainerListener[] var19 = var14.getContainerListeners();
    java.awt.Dimension var20 = var14.getMaximumSize();
    var6.setMinimumSize(var20);
    java.awt.Dimension var22 = var2.getSize(var20);
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var25.repaint(1L, (-1), (-1), 0, 100);
    boolean var32 = var25.isFocusTraversable();
    javax.swing.ActionMap var33 = var25.getActionMap();
    var2.setActionMap(var33);
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var37.invalidate();
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var47 = var46.isMaximumSizeSet();
    var46.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var54 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var55 = var54.isMaximumSizeSet();
    var54.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var60 = var54.getWidth();
    java.awt.Component[] var61 = var54.getComponents();
    var37.putClientProperty((java.lang.Object)var46, (java.lang.Object)var61);
    boolean var64 = var37.requestFocus(false);
    javax.swing.InputMap var65 = var37.getInputMap();
    var37.reshape(996, 100, 12, 996);
    int var71 = var2.getComponentZOrder((java.awt.Component)var37);
    javax.swing.JPopupMenu var72 = var37.getComponentPopupMenu();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);

  }

  public void test290() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test290");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.countComponents();
    java.awt.event.HierarchyBoundsListener[] var7 = var2.getHierarchyBoundsListeners();
    boolean var9 = var2.areFocusTraversalKeysSet(1);
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var13 = var12.getPreferredSize();
    javax.swing.JPopupMenu var14 = var12.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var18 = var17.getPreferredSize();
    javax.swing.JPopupMenu var19 = var17.getComponentPopupMenu();
    java.awt.Rectangle var20 = var17.bounds();
    var12.computeVisibleRect(var20);
    var2.setBounds(var20);
    boolean var23 = var2.isMaximumSizeSet();
    var2.transferFocusBackward();
    java.awt.Insets var25 = var2.getInsets();
    boolean var26 = var2.isPaintingForPrint();
    var2.setInheritsPopupMenu(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test291() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test291");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    var2.enable(false);
    boolean var13 = var2.isDisplayable();
    var2.setDoubleBuffered(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test292() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test292");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    javax.swing.JRootPane var13 = var2.getRootPane();
    var2.setRequestFocusEnabled(false);
    java.awt.Dimension var16 = var2.preferredSize();
    var2.setDebugGraphicsOptions((-1));
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isMaximumSizeSet();
    var21.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var27 = var21.getTransferHandler();
    boolean var28 = var21.hasFocus();
    var21.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var31 = var21.getPreferredSize();
    java.awt.ComponentOrientation var32 = var21.getComponentOrientation();
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var36 = var35.isMaximumSizeSet();
    var35.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var41 = var35.getTransferHandler();
    boolean var42 = var35.hasFocus();
    javax.swing.event.AncestorListener[] var43 = var35.getAncestorListeners();
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var47 = var46.isMaximumSizeSet();
    var46.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var52 = var46.getTransferHandler();
    boolean var53 = var46.hasFocus();
    var46.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var56 = var46.getPreferredSize();
    java.awt.ComponentOrientation var57 = var46.getComponentOrientation();
    var21.add((java.awt.Component)var35, (java.lang.Object)var46);
    java.awt.Component var60 = var2.add((java.awt.Component)var21, 0);
    var21.setVisible(false);
    javax.swing.border.Border var63 = var21.getBorder();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);

  }

  public void test293() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test293");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    boolean var29 = var2.requestFocus(false);
    var2.removeNotify();
    java.awt.Graphics var31 = var2.getGraphics();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);

  }

  public void test294() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test294");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    javax.swing.InputMap var5 = var2.getInputMap();
    java.beans.PropertyChangeListener[] var7 = var2.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var8 = var2.getComponentOrientation();
    java.awt.peer.ComponentPeer var9 = var2.getPeer();
    var2.transferFocusDownCycle();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var14 = var13.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var17.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var24 = var17.location();
    java.awt.Component var25 = var13.findComponentAt(var24);
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var28.transferFocus();
    var28.show();
    bierse.view.RunningMessagePanel var33 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var34 = var33.getPreferredSize();
    boolean var37 = var33.contains(10, 1);
    java.awt.im.InputMethodRequests var38 = var33.getInputMethodRequests();
    java.awt.Font var39 = var33.getFont();
    var28.setFont(var39);
    var13.setFont(var39);
    var2.setFont(var39);
    bierse.view.RunningMessagePanel var45 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var46 = var45.isMaximumSizeSet();
    var45.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var51 = var45.getTransferHandler();
    boolean var52 = var45.hasFocus();
    javax.swing.event.AncestorListener[] var53 = var45.getAncestorListeners();
    java.awt.Dimension var54 = var45.getMinimumSize();
    boolean var55 = var45.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var58 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var59 = var58.isMaximumSizeSet();
    var58.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var64 = var58.getTransferHandler();
    boolean var65 = var58.hasFocus();
    var58.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var68 = var58.getPreferredSize();
    java.awt.Dimension var69 = var45.getSize(var68);
    java.awt.event.ComponentListener[] var70 = var45.getComponentListeners();
    var45.disable();
    bierse.view.RunningMessagePanel var74 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var75 = var74.isMaximumSizeSet();
    boolean var76 = var74.isOpaque();
    java.awt.event.HierarchyListener[] var77 = var74.getHierarchyListeners();
    int var78 = var74.countComponents();
    int var79 = var74.getStringHeight();
    java.awt.Point var80 = var74.location();
    var45.setLocation(var80);
    bierse.view.RunningMessagePanel var84 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var85 = var84.isMaximumSizeSet();
    var84.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var90 = var84.getWidth();
    java.awt.Image var93 = var84.createImage(24, 24);
    boolean var94 = var84.getInheritsPopupMenu();
    var84.resize(1, 13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.add((java.awt.Component)var45, (java.lang.Object)var84, 13);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == 24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);

  }

  public void test295() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test295");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var43 = var42.getPreferredSize();
    boolean var46 = var42.contains(10, 1);
    java.awt.im.InputMethodRequests var47 = var42.getInputMethodRequests();
    var42.revalidate();
    var42.enable(true);
    java.awt.Point var51 = var42.location();
    java.awt.Component var52 = var16.getComponentAt(var51);
    var16.setOpaque(false);
    bierse.view.RunningMessagePanel var57 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var58 = var57.isMaximumSizeSet();
    var57.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var63 = var57.getTransferHandler();
    boolean var64 = var57.hasFocus();
    var57.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var67 = var57.getPreferredSize();
    java.awt.ComponentOrientation var68 = var57.getComponentOrientation();
    java.lang.String var69 = var57.getName();
    java.awt.Font var70 = var57.getFont();
    java.awt.event.MouseWheelListener[] var71 = var57.getMouseWheelListeners();
    var57.transferFocusBackward();
    java.awt.Color var73 = var57.getForeground();
    bierse.view.RunningMessagePanel var76 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var77 = var76.isMaximumSizeSet();
    boolean var78 = var76.isOpaque();
    java.awt.event.HierarchyListener[] var79 = var76.getHierarchyListeners();
    int var80 = var76.getWidth();
    java.awt.event.ContainerListener[] var81 = var76.getContainerListeners();
    java.awt.Dimension var82 = var76.getMaximumSize();
    boolean var83 = var76.isRequestFocusEnabled();
    var76.transferFocus();
    bierse.view.RunningMessagePanel var87 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var88 = var87.getPreferredSize();
    java.awt.Point var89 = var87.getMousePosition();
    var87.setDoubleBuffered(false);
    java.awt.GraphicsConfiguration var92 = var87.getGraphicsConfiguration();
    java.awt.Component var95 = var87.locate((-1), (-1));
    java.awt.Font var96 = var87.getFont();
    java.awt.FontMetrics var97 = var76.getFontMetrics(var96);
    var57.setFont(var96);
    var16.setFont(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test296() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test296");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    java.awt.Dimension var9 = var2.getPreferredSize();
    int var10 = var2.getWidth();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var14 = var13.isMaximumSizeSet();
    var13.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var19 = var13.getTransferHandler();
    boolean var20 = var13.hasFocus();
    var13.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var23 = var13.getPreferredSize();
    java.awt.ComponentOrientation var24 = var13.getComponentOrientation();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    javax.swing.event.AncestorListener[] var35 = var27.getAncestorListeners();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var39 = var38.isMaximumSizeSet();
    var38.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var44 = var38.getTransferHandler();
    boolean var45 = var38.hasFocus();
    var38.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var48 = var38.getPreferredSize();
    java.awt.ComponentOrientation var49 = var38.getComponentOrientation();
    var13.add((java.awt.Component)var27, (java.lang.Object)var38);
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var54 = var53.getPreferredSize();
    java.awt.Dimension var55 = var53.getMaximumSize();
    var2.add((java.awt.Component)var27, (java.lang.Object)var53, (-1));
    boolean var58 = var2.isShowing();
    java.awt.event.MouseListener[] var59 = var2.getMouseListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test297() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test297");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    var16.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var26 = var16.getPreferredSize();
    java.awt.Dimension var27 = var2.getSize(var26);
    var2.repaint(100L, 1, 0, 100, 24);
    java.awt.Component.BaselineResizeBehavior var34 = var2.getBaselineResizeBehavior();
    java.awt.Dimension var35 = var2.getMaximumSize();
    boolean var36 = var2.isPaintingForPrint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test298() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test298");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    java.awt.Component[] var9 = var2.getComponents();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var13 = var12.isMaximumSizeSet();
    var12.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var18 = var12.getTransferHandler();
    boolean var19 = var12.hasFocus();
    var12.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var22 = var12.getPreferredSize();
    var2.setMaximumSize(var22);
    javax.swing.TransferHandler var24 = var2.getTransferHandler();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }

  public void test299() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test299");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    var2.doLayout();
    boolean var5 = var2.isPaintingForPrint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test300() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test300");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var8 = var2.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var12 = var11.getPreferredSize();
    boolean var13 = var11.isPreferredSizeSet();
    var11.enable();
    var11.transferFocusBackward();
    int var16 = var2.getComponentZOrder((java.awt.Component)var11);
    var2.setEnabled(false);
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var22 = var21.getPreferredSize();
    java.awt.Dimension var23 = var21.getMaximumSize();
    java.awt.event.FocusListener[] var24 = var21.getFocusListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var28 = var27.getPreferredSize();
    boolean var31 = var27.contains(10, 1);
    java.awt.im.InputMethodRequests var32 = var27.getInputMethodRequests();
    java.awt.Font var33 = var27.getFont();
    var21.setFont(var33);
    java.beans.VetoableChangeListener[] var35 = var21.getVetoableChangeListeners();
    boolean var36 = var21.isMaximumSizeSet();
    javax.swing.plaf.PanelUI var37 = var21.getUI();
    var2.setUI(var37);
    java.lang.String var39 = var2.getName();
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var43 = var42.getMouseWheelListeners();
    boolean var44 = var42.isLightweight();
    bierse.view.RunningMessagePanel var47 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var48 = var47.isMaximumSizeSet();
    var47.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var47.invalidate();
    bierse.view.RunningMessagePanel var56 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var57 = var56.isMaximumSizeSet();
    var56.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var64 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var65 = var64.isMaximumSizeSet();
    var64.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var70 = var64.getWidth();
    java.awt.Component[] var71 = var64.getComponents();
    var47.putClientProperty((java.lang.Object)var56, (java.lang.Object)var71);
    var56.transferFocus();
    var56.setToolTipText("");
    var56.show();
    int var77 = var56.getStringWidth();
    java.awt.Point var78 = var56.getLocation();
    var42.setLocation(var78);
    var2.setLocation(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 996);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test301() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test301");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    boolean var21 = var15.getInheritsPopupMenu();
    var15.setLocation(0, 100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var26 = var15.getComponent(100);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test302() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test302");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    java.awt.Font var9 = var2.getFont();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var12.transferFocus();
    var12.show();
    float var15 = var12.getAlignmentX();
    var12.repaint(0L, 10, 0, 10, (-1));
    boolean var22 = var12.isEnabled();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var26 = var25.getPreferredSize();
    javax.swing.JPopupMenu var27 = var25.getComponentPopupMenu();
    java.awt.Rectangle var28 = var25.bounds();
    java.awt.Rectangle var29 = var12.getBounds(var28);
    var2.computeVisibleRect(var28);
    bierse.view.RunningMessagePanel var33 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var34 = var33.isMaximumSizeSet();
    var33.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var33.invalidate();
    int var40 = var33.getHeight();
    var33.setIgnoreRepaint(true);
    var33.grabFocus();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var45 = var2.add((java.awt.Component)var33, 13);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);

  }

  public void test303() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test303");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    java.awt.Dimension var9 = var2.getPreferredSize();
    int var10 = var2.getWidth();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var14 = var13.isMaximumSizeSet();
    var13.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var19 = var13.getTransferHandler();
    boolean var20 = var13.hasFocus();
    var13.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var23 = var13.getPreferredSize();
    java.awt.ComponentOrientation var24 = var13.getComponentOrientation();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    javax.swing.event.AncestorListener[] var35 = var27.getAncestorListeners();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var39 = var38.isMaximumSizeSet();
    var38.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var44 = var38.getTransferHandler();
    boolean var45 = var38.hasFocus();
    var38.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var48 = var38.getPreferredSize();
    java.awt.ComponentOrientation var49 = var38.getComponentOrientation();
    var13.add((java.awt.Component)var27, (java.lang.Object)var38);
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var54 = var53.getPreferredSize();
    java.awt.Dimension var55 = var53.getMaximumSize();
    var2.add((java.awt.Component)var27, (java.lang.Object)var53, (-1));
    bierse.view.RunningMessagePanel var60 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var61 = var60.isMaximumSizeSet();
    var60.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var66 = var60.getTransferHandler();
    java.awt.Component var69 = var60.getComponentAt(0, 0);
    java.awt.Dimension var70 = var60.minimumSize();
    var53.setMaximumSize(var70);
    boolean var72 = var53.isShowing();
    java.awt.Point var73 = var53.getLocation();
    int var74 = var53.getStringHeight();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 24);

  }

  public void test304() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test304");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    java.awt.Font var9 = var2.getFont();
    java.beans.PropertyChangeListener[] var11 = var2.getPropertyChangeListeners("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    boolean var12 = var2.isValidateRoot();
    java.awt.Toolkit var13 = var2.getToolkit();
    javax.swing.KeyStroke[] var14 = var2.getRegisteredKeyStrokes();
    java.lang.String var15 = var2.toString();
    bierse.view.RunningMessagePanel var18 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var19 = var18.isMaximumSizeSet();
    var18.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var24 = var18.getTransferHandler();
    boolean var25 = var18.hasFocus();
    var18.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var28 = var18.getPreferredSize();
    java.awt.ComponentOrientation var29 = var18.getComponentOrientation();
    bierse.view.RunningMessagePanel var32 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var33 = var32.isMaximumSizeSet();
    var32.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var38 = var32.getTransferHandler();
    boolean var39 = var32.hasFocus();
    var32.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var42 = var32.getPreferredSize();
    java.awt.Dimension var43 = var18.getSize(var42);
    var2.setMaximumSize(var43);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var46 = var2.areFocusTraversalKeysSet(13);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var15,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var15.equals("bierse.view.RunningMessagePanel[,0,0,0var15,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test305() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test305");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var3 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var4 = var3.isMaximumSizeSet();
    var3.layout();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var9 = var8.isMaximumSizeSet();
    var8.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var14 = var8.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var18 = var17.getPreferredSize();
    boolean var19 = var17.isPreferredSizeSet();
    var17.enable();
    var17.transferFocusBackward();
    int var22 = var8.getComponentZOrder((java.awt.Component)var17);
    var8.setEnabled(false);
    java.awt.Graphics var25 = var8.getGraphics();
    var3.remove((java.awt.Component)var8);
    bierse.view.RunningMessagePanel var29 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var30 = var29.getPreferredSize();
    boolean var33 = var29.contains(10, 1);
    java.awt.Insets var34 = var29.getInsets();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var38 = var37.getPreferredSize();
    java.awt.Point var39 = var37.getMousePosition();
    var37.revalidate();
    java.awt.Component[] var41 = var37.getComponents();
    java.awt.event.KeyListener[] var42 = var37.getKeyListeners();
    var3.putClientProperty((java.lang.Object)var29, (java.lang.Object)var42);
    var0.addElement((java.lang.Object)var29);
    bierse.view.RunningMessagePanel var47 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var48 = var47.isMaximumSizeSet();
    var47.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var53 = var47.getTransferHandler();
    boolean var54 = var47.hasFocus();
    var47.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var57 = var47.getPreferredSize();
    java.awt.ComponentOrientation var58 = var47.getComponentOrientation();
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var62 = var61.isMaximumSizeSet();
    var61.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var67 = var61.getTransferHandler();
    boolean var68 = var61.hasFocus();
    javax.swing.event.AncestorListener[] var69 = var61.getAncestorListeners();
    bierse.view.RunningMessagePanel var72 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var73 = var72.isMaximumSizeSet();
    var72.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var78 = var72.getTransferHandler();
    boolean var79 = var72.hasFocus();
    var72.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var82 = var72.getPreferredSize();
    java.awt.ComponentOrientation var83 = var72.getComponentOrientation();
    var47.add((java.awt.Component)var61, (java.lang.Object)var72);
    var61.removeAll();
    var61.hide();
    var0.removeElement((java.lang.Object)var61);
    var0.removeAllElements();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test306() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test306");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    javax.swing.event.ListDataListener[] var1 = var0.getListDataListeners();
    bierse.view.RunningMessagePanel var4 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var4.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var11 = var4.location();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    var14.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var20 = var14.getTransferHandler();
    boolean var21 = var14.hasFocus();
    javax.swing.event.AncestorListener[] var22 = var14.getAncestorListeners();
    java.awt.Dimension var23 = var14.getMinimumSize();
    var4.resize(var23);
    int var25 = var0.getIndexOf((java.lang.Object)var23);
    int var26 = var0.getSize();
    var0.removeAllElements();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var31 = var30.getPreferredSize();
    java.awt.Point var32 = var30.getMousePosition();
    var30.revalidate();
    var30.invalidate();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    javax.swing.event.AncestorListener[] var45 = var37.getAncestorListeners();
    java.awt.Dimension var46 = var37.getMinimumSize();
    boolean var47 = var37.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var50 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var51 = var50.isMaximumSizeSet();
    var50.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var56 = var50.getTransferHandler();
    boolean var57 = var50.hasFocus();
    var50.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var60 = var50.getPreferredSize();
    java.awt.Dimension var61 = var37.getSize(var60);
    java.awt.event.ComponentListener[] var62 = var37.getComponentListeners();
    java.beans.PropertyChangeListener[] var63 = var37.getPropertyChangeListeners();
    java.awt.image.ColorModel var64 = var37.getColorModel();
    boolean var65 = var30.isAncestorOf((java.awt.Component)var37);
    var0.addElement((java.lang.Object)var37);
    javax.swing.event.ListDataListener[] var67 = var0.getListDataListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test307() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test307");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    var24.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var24.invalidate();
    java.awt.Dimension var31 = var24.getPreferredSize();
    int var32 = var24.getWidth();
    java.awt.Component var33 = var15.add("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var24);
    java.awt.Rectangle var34 = var24.getVisibleRect();
    java.awt.peer.ComponentPeer var35 = var24.getPeer();
    bierse.view.RunningMessagePanel var39 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var40 = var39.isMaximumSizeSet();
    var39.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var45 = var39.getWidth();
    boolean var48 = var39.inside(24, 1);
    bierse.view.RunningMessagePanel var51 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var52 = var51.isMaximumSizeSet();
    var51.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var57 = var51.getTransferHandler();
    boolean var58 = var51.hasFocus();
    var51.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var61 = var51.getPreferredSize();
    java.awt.ComponentOrientation var62 = var51.getComponentOrientation();
    var39.setComponentOrientation(var62);
    java.awt.LayoutManager var64 = var39.getLayout();
    java.awt.Component var65 = var24.add("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var39);
    var39.requestFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test308() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test308");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    var2.enable(false);
    boolean var13 = var2.isPaintingTile();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var15 = var2.getComponent(11);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test309() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test309");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.countComponents();
    java.awt.event.HierarchyBoundsListener[] var7 = var2.getHierarchyBoundsListeners();
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var11 = var10.isMaximumSizeSet();
    boolean var12 = var10.isOpaque();
    java.awt.event.HierarchyListener[] var13 = var10.getHierarchyListeners();
    int var14 = var10.getWidth();
    java.awt.event.ContainerListener[] var15 = var10.getContainerListeners();
    java.awt.Dimension var16 = var10.getMaximumSize();
    var2.setMinimumSize(var16);
    var2.revalidate();
    javax.accessibility.AccessibleContext var19 = var2.getAccessibleContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test310() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test310");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    javax.swing.InputMap var5 = var2.getInputMap();
    java.beans.PropertyChangeListener[] var7 = var2.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var8 = var2.getComponentOrientation();
    var2.transferFocusBackward();
    boolean var10 = var2.isFocusTraversalPolicyProvider();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var14 = var13.getPreferredSize();
    java.awt.Dimension var15 = var13.getMaximumSize();
    java.awt.event.FocusListener[] var16 = var13.getFocusListeners();
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var20 = var19.getPreferredSize();
    boolean var23 = var19.contains(10, 1);
    java.awt.im.InputMethodRequests var24 = var19.getInputMethodRequests();
    java.awt.Font var25 = var19.getFont();
    var13.setFont(var25);
    java.beans.VetoableChangeListener[] var27 = var13.getVetoableChangeListeners();
    boolean var28 = var13.isMaximumSizeSet();
    bierse.view.RunningMessagePanel var31 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var31.transferFocus();
    var31.show();
    float var34 = var31.getAlignmentX();
    var31.repaint(0L, 10, 0, 10, (-1));
    boolean var41 = var31.isEnabled();
    bierse.view.RunningMessagePanel var44 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var45 = var44.getPreferredSize();
    javax.swing.JPopupMenu var46 = var44.getComponentPopupMenu();
    java.awt.Rectangle var47 = var44.bounds();
    java.awt.Rectangle var48 = var31.getBounds(var47);
    var13.paintImmediately(var48);
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var53 = var52.isMaximumSizeSet();
    var52.layout();
    bierse.view.RunningMessagePanel var57 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var58 = var57.isMaximumSizeSet();
    boolean var59 = var57.isOpaque();
    java.awt.event.HierarchyListener[] var60 = var57.getHierarchyListeners();
    int var61 = var57.countComponents();
    java.awt.event.HierarchyBoundsListener[] var62 = var57.getHierarchyBoundsListeners();
    boolean var64 = var57.areFocusTraversalKeysSet(1);
    bierse.view.RunningMessagePanel var67 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var68 = var67.getPreferredSize();
    javax.swing.JPopupMenu var69 = var67.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var72 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var73 = var72.getPreferredSize();
    javax.swing.JPopupMenu var74 = var72.getComponentPopupMenu();
    java.awt.Rectangle var75 = var72.bounds();
    var67.computeVisibleRect(var75);
    var57.setBounds(var75);
    var52.repaint(var75);
    java.awt.Rectangle var79 = var13.getBounds(var75);
    java.awt.Rectangle var80 = var2.getBounds(var79);
    boolean var81 = var2.isCursorSet();
    var2.setSpeed(24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);

  }

  public void test311() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test311");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    var2.setOpaque(true);
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var10 = var9.isMaximumSizeSet();
    var9.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var15 = var9.getTransferHandler();
    boolean var16 = var9.hasFocus();
    javax.swing.event.AncestorListener[] var17 = var9.getAncestorListeners();
    java.awt.Dimension var18 = var9.getMinimumSize();
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var23 = var22.getPreferredSize();
    java.awt.Dimension var24 = var22.getMaximumSize();
    var22.disable();
    var9.putClientProperty((java.lang.Object)100, (java.lang.Object)var22);
    javax.swing.InputVerifier var27 = var22.getInputVerifier();
    boolean var28 = var22.getInheritsPopupMenu();
    var22.setLocation(0, 100);
    boolean var32 = var22.isFocusTraversalPolicyProvider();
    var22.list();
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var36.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var43 = var36.location();
    java.awt.Font var44 = var36.getFont();
    var22.setFont(var44);
    java.awt.FontMetrics var46 = var2.getFontMetrics(var44);
    boolean var47 = var2.getAutoscrolls();
    var2.setOpaque(true);
    var2.disable();
    boolean var51 = var2.isManagingFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test312() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test312");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    int var7 = var2.countComponents();
    java.awt.Point var9 = var2.getMousePosition(true);
    var2.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    var2.requestFocus();
    java.awt.Color var13 = var2.getForeground();
    var2.updateUI();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test313() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test313");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var8 = var2.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var12 = var11.getPreferredSize();
    boolean var13 = var11.isPreferredSizeSet();
    var11.enable();
    var11.transferFocusBackward();
    int var16 = var2.getComponentZOrder((java.awt.Component)var11);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var19.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var26 = var19.location();
    boolean var27 = var11.contains(var26);
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var31 = var30.getPreferredSize();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var35 = var34.isMaximumSizeSet();
    var34.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var34.invalidate();
    java.awt.Dimension var41 = var34.getPreferredSize();
    var30.setPreferredSize(var41);
    var11.setPreferredSize(var41);
    var11.setVisible(false);
    var11.revalidate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test314() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test314");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    var2.setOpaque(true);
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var10 = var9.isMaximumSizeSet();
    var9.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var15 = var9.getTransferHandler();
    boolean var16 = var9.hasFocus();
    javax.swing.event.AncestorListener[] var17 = var9.getAncestorListeners();
    java.awt.Dimension var18 = var9.getMinimumSize();
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var23 = var22.getPreferredSize();
    java.awt.Dimension var24 = var22.getMaximumSize();
    var22.disable();
    var9.putClientProperty((java.lang.Object)100, (java.lang.Object)var22);
    javax.swing.InputVerifier var27 = var22.getInputVerifier();
    boolean var28 = var22.getInheritsPopupMenu();
    var22.setLocation(0, 100);
    boolean var32 = var22.isFocusTraversalPolicyProvider();
    var22.list();
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var36.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var43 = var36.location();
    java.awt.Font var44 = var36.getFont();
    var22.setFont(var44);
    java.awt.FontMetrics var46 = var2.getFontMetrics(var44);
    boolean var47 = var2.getAutoscrolls();
    var2.setOpaque(true);
    var2.disable();
    var2.validate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);

  }

  public void test315() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test315");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    var24.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var24.invalidate();
    java.awt.Dimension var31 = var24.getPreferredSize();
    int var32 = var24.getWidth();
    java.awt.Component var33 = var15.add("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var24);
    java.awt.Rectangle var34 = var24.getVisibleRect();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var37 = var24.getBaseline(12, (-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test316() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test316");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    boolean var11 = var2.inside(24, 1);
    java.awt.image.VolatileImage var14 = var2.createVolatileImage(0, 1);
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var18 = var17.getPreferredSize();
    boolean var21 = var17.contains(10, 1);
    var17.setAlignmentX((-1.0f));
    java.awt.Dimension var24 = var17.getMaximumSize();
    java.awt.Dimension var25 = var2.getSize(var24);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var27 = var2.areFocusTraversalKeysSet(13);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test317() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test317");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    int var7 = var2.countComponents();
    java.awt.Point var9 = var2.getMousePosition(true);
    var2.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var12 = var2.toString();
    java.awt.Font var13 = var2.getFont();
    javax.swing.plaf.PanelUI var14 = var2.getUI();
    java.awt.Dimension var15 = var2.getPreferredSize();
    var2.firePropertyChange("", (-1), 1);
    boolean var20 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var12,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var12.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var12,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test318() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test318");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    java.awt.Font var9 = var2.getFont();
    var2.enable();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var14 = var13.isMaximumSizeSet();
    var13.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var19 = var13.getTransferHandler();
    boolean var20 = var13.hasFocus();
    javax.swing.event.AncestorListener[] var21 = var13.getAncestorListeners();
    java.awt.Dimension var22 = var13.getMinimumSize();
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var27 = var26.getPreferredSize();
    java.awt.Dimension var28 = var26.getMaximumSize();
    var26.disable();
    var13.putClientProperty((java.lang.Object)100, (java.lang.Object)var26);
    java.awt.image.VolatileImage var33 = var26.createVolatileImage(100, 24);
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var37 = var36.getPreferredSize();
    var26.setMinimumSize(var37);
    boolean var39 = var26.isValid();
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var43 = var42.getPreferredSize();
    boolean var46 = var42.contains(10, 1);
    java.awt.im.InputMethodRequests var47 = var42.getInputMethodRequests();
    boolean var50 = var42.inside((-1), 100);
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var54 = var53.getPreferredSize();
    boolean var57 = var53.contains(10, 1);
    var53.setAlignmentX((-1.0f));
    java.awt.Point var60 = var53.getLocation();
    java.awt.Point var61 = var42.getLocation(var60);
    boolean var64 = var42.contains(100, 0);
    var2.add((java.awt.Component)var26, (java.lang.Object)var42);
    var26.setSpeed(12);
    var26.nextFocus();
    bierse.view.RunningMessagePanel var71 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var72 = var71.isMaximumSizeSet();
    boolean var73 = var71.isOpaque();
    java.awt.event.HierarchyListener[] var74 = var71.getHierarchyListeners();
    int var75 = var71.countComponents();
    java.awt.event.HierarchyBoundsListener[] var76 = var71.getHierarchyBoundsListeners();
    bierse.view.RunningMessagePanel var79 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var80 = var79.isMaximumSizeSet();
    boolean var81 = var79.isOpaque();
    java.awt.event.HierarchyListener[] var82 = var79.getHierarchyListeners();
    int var83 = var79.getWidth();
    java.awt.event.ContainerListener[] var84 = var79.getContainerListeners();
    java.awt.Dimension var85 = var79.getMaximumSize();
    var71.setMinimumSize(var85);
    var26.setSize(var85);
    java.awt.Insets var88 = var26.getInsets();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test319() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test319");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.setDoubleBuffered(false);
    java.awt.GraphicsConfiguration var7 = var2.getGraphicsConfiguration();
    java.awt.Component var10 = var2.locate((-1), (-1));
    boolean var11 = var2.isRequestFocusEnabled();
    java.beans.PropertyChangeListener[] var13 = var2.getPropertyChangeListeners("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test320() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test320");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    var2.enable();
    var2.transferFocusBackward();
    java.awt.event.MouseListener[] var7 = var2.getMouseListeners();
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var11 = var10.isMaximumSizeSet();
    var10.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var16 = var10.getTransferHandler();
    boolean var17 = var10.hasFocus();
    javax.swing.event.AncestorListener[] var18 = var10.getAncestorListeners();
    java.awt.Dimension var19 = var10.getMinimumSize();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var24 = var23.getPreferredSize();
    java.awt.Dimension var25 = var23.getMaximumSize();
    var23.disable();
    var10.putClientProperty((java.lang.Object)100, (java.lang.Object)var23);
    javax.swing.InputVerifier var28 = var23.getInputVerifier();
    boolean var29 = var23.getInheritsPopupMenu();
    var23.setLocation(0, 100);
    boolean var33 = var23.isFocusTraversalPolicyProvider();
    var23.list();
    javax.swing.event.AncestorListener[] var35 = var23.getAncestorListeners();
    java.awt.Cursor var36 = var23.getCursor();
    int var37 = var23.getY();
    bierse.view.RunningMessagePanel var40 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var40.transferFocus();
    var40.show();
    float var43 = var40.getAlignmentX();
    var40.repaint(0L, 10, 0, 10, (-1));
    boolean var50 = var40.isEnabled();
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var54 = var53.getPreferredSize();
    javax.swing.JPopupMenu var55 = var53.getComponentPopupMenu();
    java.awt.Rectangle var56 = var53.bounds();
    java.awt.Rectangle var57 = var40.getBounds(var56);
    var23.setBounds(var57);
    java.awt.Rectangle var59 = var2.getBounds(var57);
    var2.setEnabled(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test321() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test321");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", 24);
    boolean var3 = var2.isPreferredSizeSet();
    var2.setBounds(1, (-1), 1, 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test322() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test322");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    var2.revalidate();
    var2.firePropertyChange("hi!", (short)100, (short)0);
    java.awt.Component var15 = var2.getComponentAt(0, (-1));
    bierse.view.RunningMessagePanel var18 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var19 = var18.isMaximumSizeSet();
    var18.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var24 = var18.getTransferHandler();
    boolean var25 = var18.hasFocus();
    javax.swing.event.AncestorListener[] var26 = var18.getAncestorListeners();
    java.awt.Dimension var27 = var18.getMinimumSize();
    bierse.view.RunningMessagePanel var31 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var32 = var31.getPreferredSize();
    java.awt.Dimension var33 = var31.getMaximumSize();
    var31.disable();
    var18.putClientProperty((java.lang.Object)100, (java.lang.Object)var31);
    javax.swing.InputVerifier var36 = var31.getInputVerifier();
    boolean var37 = var31.getInheritsPopupMenu();
    var31.setLocation(0, 100);
    boolean var41 = var31.isFocusTraversalPolicyProvider();
    var31.list();
    javax.swing.event.AncestorListener[] var43 = var31.getAncestorListeners();
    java.awt.Cursor var44 = var31.getCursor();
    var2.setCursor(var44);
    var2.requestFocus();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var47 = var2.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test323() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test323");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    javax.swing.event.AncestorListener[] var40 = var2.getAncestorListeners();
    bierse.view.RunningMessagePanel var43 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var44 = var43.getPreferredSize();
    boolean var47 = var43.contains(10, 1);
    java.awt.im.InputMethodRequests var48 = var43.getInputMethodRequests();
    boolean var49 = var43.getInheritsPopupMenu();
    java.lang.String var50 = var43.toString();
    java.awt.Rectangle var51 = var43.bounds();
    var2.computeVisibleRect(var51);
    java.awt.event.KeyListener[] var53 = var2.getKeyListeners();
    bierse.view.RunningMessagePanel var56 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var57 = var56.isMaximumSizeSet();
    var56.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var62 = var56.getTransferHandler();
    boolean var63 = var56.hasFocus();
    javax.swing.event.AncestorListener[] var64 = var56.getAncestorListeners();
    java.awt.Dimension var65 = var56.getMinimumSize();
    bierse.view.RunningMessagePanel var69 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var70 = var69.getPreferredSize();
    java.awt.Dimension var71 = var69.getMaximumSize();
    var69.disable();
    var56.putClientProperty((java.lang.Object)100, (java.lang.Object)var69);
    javax.swing.InputVerifier var74 = var69.getInputVerifier();
    boolean var75 = var69.getInheritsPopupMenu();
    var69.setLocation(0, 100);
    boolean var79 = var69.isFocusTraversalPolicyProvider();
    var69.list();
    bierse.view.RunningMessagePanel var83 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var83.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var90 = var83.location();
    java.awt.Font var91 = var83.getFont();
    var69.setFont(var91);
    java.awt.FontMetrics var93 = var2.getFontMetrics(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var50,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var50.equals("bierse.view.RunningMessagePanel[,0,0,0var50,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);

  }

  public void test324() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test324");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    javax.swing.InputMap var5 = var2.getInputMap();
    java.beans.PropertyChangeListener[] var7 = var2.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var8 = var2.getComponentOrientation();
    var2.transferFocusBackward();
    boolean var10 = var2.isFocusTraversalPolicyProvider();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var14 = var13.getPreferredSize();
    java.awt.Dimension var15 = var13.getMaximumSize();
    java.awt.event.FocusListener[] var16 = var13.getFocusListeners();
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var20 = var19.getPreferredSize();
    boolean var23 = var19.contains(10, 1);
    java.awt.im.InputMethodRequests var24 = var19.getInputMethodRequests();
    java.awt.Font var25 = var19.getFont();
    var13.setFont(var25);
    java.beans.VetoableChangeListener[] var27 = var13.getVetoableChangeListeners();
    boolean var28 = var13.isMaximumSizeSet();
    bierse.view.RunningMessagePanel var31 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var31.transferFocus();
    var31.show();
    float var34 = var31.getAlignmentX();
    var31.repaint(0L, 10, 0, 10, (-1));
    boolean var41 = var31.isEnabled();
    bierse.view.RunningMessagePanel var44 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var45 = var44.getPreferredSize();
    javax.swing.JPopupMenu var46 = var44.getComponentPopupMenu();
    java.awt.Rectangle var47 = var44.bounds();
    java.awt.Rectangle var48 = var31.getBounds(var47);
    var13.paintImmediately(var48);
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var53 = var52.isMaximumSizeSet();
    var52.layout();
    bierse.view.RunningMessagePanel var57 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var58 = var57.isMaximumSizeSet();
    boolean var59 = var57.isOpaque();
    java.awt.event.HierarchyListener[] var60 = var57.getHierarchyListeners();
    int var61 = var57.countComponents();
    java.awt.event.HierarchyBoundsListener[] var62 = var57.getHierarchyBoundsListeners();
    boolean var64 = var57.areFocusTraversalKeysSet(1);
    bierse.view.RunningMessagePanel var67 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var68 = var67.getPreferredSize();
    javax.swing.JPopupMenu var69 = var67.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var72 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var73 = var72.getPreferredSize();
    javax.swing.JPopupMenu var74 = var72.getComponentPopupMenu();
    java.awt.Rectangle var75 = var72.bounds();
    var67.computeVisibleRect(var75);
    var57.setBounds(var75);
    var52.repaint(var75);
    java.awt.Rectangle var79 = var13.getBounds(var75);
    java.awt.Rectangle var80 = var2.getBounds(var79);
    var2.disable();
    var2.setToolTipText("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test325() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test325");


    bierse.view.MyKeyMap var2 = new bierse.view.MyKeyMap("", 11);

  }

  public void test326() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test326");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    java.awt.image.VolatileImage var22 = var15.createVolatileImage(100, 24);
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var26 = var25.getPreferredSize();
    java.awt.Point var27 = var25.getMousePosition();
    var25.revalidate();
    var25.transferFocus();
    java.awt.Toolkit var30 = var25.getToolkit();
    boolean var31 = var25.isFocusTraversalPolicySet();
    var15.setNextFocusableComponent((java.awt.Component)var25);
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var36 = var35.isMaximumSizeSet();
    var35.layout();
    bierse.view.RunningMessagePanel var40 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var41 = var40.isMaximumSizeSet();
    var40.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var46 = var40.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var49 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var50 = var49.getPreferredSize();
    boolean var51 = var49.isPreferredSizeSet();
    var49.enable();
    var49.transferFocusBackward();
    int var54 = var40.getComponentZOrder((java.awt.Component)var49);
    var40.setEnabled(false);
    java.awt.Graphics var57 = var40.getGraphics();
    var35.remove((java.awt.Component)var40);
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var62 = var61.getPreferredSize();
    boolean var65 = var61.contains(10, 1);
    java.awt.Insets var66 = var61.getInsets();
    javax.swing.JToolTip var67 = var61.createToolTip();
    var61.invalidate();
    var35.remove((java.awt.Component)var61);
    bierse.view.RunningMessagePanel var72 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var73 = var72.getPreferredSize();
    boolean var76 = var72.contains(10, 1);
    java.awt.Insets var77 = var72.getInsets();
    java.awt.Insets var78 = var35.getInsets(var77);
    java.awt.Insets var79 = var25.getInsets(var78);
    java.awt.Cursor var80 = var25.getCursor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test327() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test327");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.countComponents();
    java.awt.dnd.DropTarget var7 = var2.getDropTarget();
    javax.accessibility.AccessibleContext var8 = var2.getAccessibleContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test328() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test328");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    boolean var11 = var2.inside(24, 1);
    java.awt.image.VolatileImage var14 = var2.createVolatileImage(0, 1);
    java.lang.String var15 = var2.getUIClassID();
    java.awt.Toolkit var16 = var2.getToolkit();
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    boolean var21 = var19.isOpaque();
    java.awt.event.HierarchyListener[] var22 = var19.getHierarchyListeners();
    int var23 = var19.getWidth();
    int var24 = var19.countComponents();
    java.awt.Point var26 = var19.getMousePosition(true);
    var19.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var29 = var19.toString();
    java.awt.Font var30 = var19.getFont();
    javax.swing.plaf.PanelUI var31 = var19.getUI();
    java.awt.Dimension var32 = var19.getPreferredSize();
    var19.firePropertyChange("", (-1), 1);
    java.awt.Rectangle var37 = var19.getBounds();
    var2.computeVisibleRect(var37);
    java.awt.Dimension var39 = var2.minimumSize();
    java.awt.event.HierarchyListener[] var40 = var2.getHierarchyListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "PanelUI"+ "'", var15.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var29,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var29.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var29,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test329() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test329");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    boolean var21 = var15.isValidateRoot();
    java.awt.Insets var22 = var15.getInsets();
    var15.list();
    var15.transferFocusBackward();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test330() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test330");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var24 = var23.isMaximumSizeSet();
    var23.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var29 = var23.getTransferHandler();
    boolean var30 = var23.hasFocus();
    var23.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var33 = var23.getPreferredSize();
    java.awt.ComponentOrientation var34 = var23.getComponentOrientation();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    javax.swing.event.AncestorListener[] var45 = var37.getAncestorListeners();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var49 = var48.isMaximumSizeSet();
    var48.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var54 = var48.getTransferHandler();
    boolean var55 = var48.hasFocus();
    var48.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var58 = var48.getPreferredSize();
    java.awt.ComponentOrientation var59 = var48.getComponentOrientation();
    var23.add((java.awt.Component)var37, (java.lang.Object)var48);
    bierse.view.RunningMessagePanel var63 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var64 = var63.getPreferredSize();
    java.awt.Dimension var65 = var63.getMaximumSize();
    var48.resize(var65);
    var15.setNextFocusableComponent((java.awt.Component)var48);
    java.lang.String var68 = var48.toString();
    java.awt.Component var71 = var48.findComponentAt((-1), 1);
    var48.requestFocus();
    int var73 = var48.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var68.equals("bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == 0);

  }

  public void test331() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test331");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    int var7 = var2.countComponents();
    java.awt.Point var9 = var2.getMousePosition(true);
    var2.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    boolean var16 = var14.isOpaque();
    javax.swing.InputMap var17 = var14.getInputMap();
    java.lang.Object var18 = var2.getClientProperty((java.lang.Object)var14);
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", 24);
    var14.remove((java.awt.Component)var21);
    var21.setFocusable(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test332() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test332");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    var2.transferFocus();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var18 = var17.isMaximumSizeSet();
    var17.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var23 = var17.getTransferHandler();
    boolean var24 = var17.hasFocus();
    javax.swing.event.AncestorListener[] var25 = var17.getAncestorListeners();
    java.awt.Dimension var26 = var17.getMinimumSize();
    boolean var27 = var17.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var31 = var30.isMaximumSizeSet();
    var30.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var36 = var30.getTransferHandler();
    boolean var37 = var30.hasFocus();
    var30.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var40 = var30.getPreferredSize();
    java.awt.Dimension var41 = var17.getSize(var40);
    var2.setSize(var40);
    bierse.view.RunningMessagePanel var45 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var46 = var45.isMaximumSizeSet();
    var45.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var45.invalidate();
    java.awt.Dimension var52 = var45.getPreferredSize();
    bierse.view.RunningMessagePanel var55 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var55.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var62 = var55.location();
    java.awt.Point var63 = var45.getLocation(var62);
    java.awt.Point var64 = var2.getLocation(var62);
    boolean var66 = var2.requestFocus(true);
    boolean var67 = var2.isDoubleBuffered();
    java.awt.Component var70 = var2.locate(996, (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);

  }

  public void test333() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test333");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Dimension var4 = var2.getMaximumSize();
    java.awt.event.FocusListener[] var5 = var2.getFocusListeners();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var9 = var8.getPreferredSize();
    boolean var12 = var8.contains(10, 1);
    java.awt.im.InputMethodRequests var13 = var8.getInputMethodRequests();
    java.awt.Font var14 = var8.getFont();
    var2.setFont(var14);
    java.beans.VetoableChangeListener[] var16 = var2.getVetoableChangeListeners();
    boolean var17 = var2.isMaximumSizeSet();
    boolean var18 = var2.requestFocusInWindow();
    boolean var21 = var2.contains(996, 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test334() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test334");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var3 = var2.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var6 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var6.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var13 = var6.location();
    java.awt.Component var14 = var2.findComponentAt(var13);
    var2.setEnabled(true);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var19.transferFocus();
    var19.show();
    float var22 = var19.getAlignmentX();
    boolean var25 = var19.contains(0, 24);
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var29 = var28.getPreferredSize();
    java.awt.Dimension var30 = var28.getMaximumSize();
    java.awt.event.FocusListener[] var31 = var28.getFocusListeners();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var35 = var34.getPreferredSize();
    boolean var38 = var34.contains(10, 1);
    java.awt.im.InputMethodRequests var39 = var34.getInputMethodRequests();
    java.awt.Font var40 = var34.getFont();
    var28.setFont(var40);
    java.awt.FontMetrics var42 = var19.getFontMetrics(var40);
    java.awt.FontMetrics var43 = var2.getFontMetrics(var40);
    java.awt.FocusTraversalPolicy var44 = var2.getFocusTraversalPolicy();
    float var45 = var2.getAlignmentX();
    boolean var46 = var2.isEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);

  }

  public void test335() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test335");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var8 = var2.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var12 = var11.getPreferredSize();
    boolean var13 = var11.isPreferredSizeSet();
    var11.enable();
    var11.transferFocusBackward();
    int var16 = var2.getComponentZOrder((java.awt.Component)var11);
    var2.setEnabled(false);
    java.awt.Graphics var19 = var2.getGraphics();
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var23 = var22.isMaximumSizeSet();
    var22.layout();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var33 = var27.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var37 = var36.getPreferredSize();
    boolean var38 = var36.isPreferredSizeSet();
    var36.enable();
    var36.transferFocusBackward();
    int var41 = var27.getComponentZOrder((java.awt.Component)var36);
    var27.setEnabled(false);
    java.awt.Graphics var44 = var27.getGraphics();
    var22.remove((java.awt.Component)var27);
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var49 = var48.getPreferredSize();
    boolean var52 = var48.contains(10, 1);
    java.awt.Insets var53 = var48.getInsets();
    javax.swing.JToolTip var54 = var48.createToolTip();
    var48.invalidate();
    var22.remove((java.awt.Component)var48);
    bierse.view.RunningMessagePanel var59 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var60 = var59.isMaximumSizeSet();
    boolean var61 = var59.isOpaque();
    java.awt.event.HierarchyListener[] var62 = var59.getHierarchyListeners();
    int var63 = var59.countComponents();
    java.awt.event.HierarchyBoundsListener[] var64 = var59.getHierarchyBoundsListeners();
    boolean var66 = var59.areFocusTraversalKeysSet(1);
    bierse.view.RunningMessagePanel var69 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var70 = var69.getPreferredSize();
    javax.swing.JPopupMenu var71 = var69.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var74 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var75 = var74.getPreferredSize();
    javax.swing.JPopupMenu var76 = var74.getComponentPopupMenu();
    java.awt.Rectangle var77 = var74.bounds();
    var69.computeVisibleRect(var77);
    var59.setBounds(var77);
    var2.putClientProperty((java.lang.Object)var48, (java.lang.Object)var77);
    boolean var81 = var2.isPaintingTile();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);

  }

  public void test336() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test336");


    bierse.view.MyKeyMap var1 = bierse.view.KeyMapComboBoxModel.getMyKeyMapForKeyCode(24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test337() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test337");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    javax.swing.JRootPane var13 = var2.getRootPane();
    var2.setRequestFocusEnabled(false);
    java.awt.Dimension var16 = var2.preferredSize();
    java.awt.Dimension var17 = var2.getPreferredSize();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var20 = var2.getBaseline((-1), 12);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test338() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test338");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    int var7 = var2.countComponents();
    java.awt.Point var9 = var2.getMousePosition(true);
    var2.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    var2.requestFocus();
    java.awt.Color var13 = var2.getForeground();
    java.awt.Rectangle var14 = var2.bounds();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test339() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test339");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var3 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var4 = var3.isMaximumSizeSet();
    var3.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var9 = var3.getTransferHandler();
    boolean var10 = var3.hasFocus();
    javax.swing.event.AncestorListener[] var11 = var3.getAncestorListeners();
    java.awt.Dimension var12 = var3.getMinimumSize();
    boolean var13 = var3.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    var16.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var26 = var16.getPreferredSize();
    java.awt.Dimension var27 = var3.getSize(var26);
    int var28 = var0.getIndexOf((java.lang.Object)var3);
    java.lang.Object var30 = var0.getElementAt(0);
    var0.removeAllElements();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.removeElementAt((-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test340() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test340");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    java.awt.Container var7 = var2.getTopLevelAncestor();
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var11 = var10.isMaximumSizeSet();
    var10.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var10.invalidate();
    java.awt.Dimension var17 = var10.getPreferredSize();
    int var18 = var10.getWidth();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isMaximumSizeSet();
    var21.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var27 = var21.getTransferHandler();
    boolean var28 = var21.hasFocus();
    var21.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var31 = var21.getPreferredSize();
    java.awt.ComponentOrientation var32 = var21.getComponentOrientation();
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var36 = var35.isMaximumSizeSet();
    var35.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var41 = var35.getTransferHandler();
    boolean var42 = var35.hasFocus();
    javax.swing.event.AncestorListener[] var43 = var35.getAncestorListeners();
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var47 = var46.isMaximumSizeSet();
    var46.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var52 = var46.getTransferHandler();
    boolean var53 = var46.hasFocus();
    var46.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var56 = var46.getPreferredSize();
    java.awt.ComponentOrientation var57 = var46.getComponentOrientation();
    var21.add((java.awt.Component)var35, (java.lang.Object)var46);
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var62 = var61.getPreferredSize();
    java.awt.Dimension var63 = var61.getMaximumSize();
    var10.add((java.awt.Component)var35, (java.lang.Object)var61, (-1));
    bierse.view.RunningMessagePanel var68 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var68.transferFocus();
    var68.show();
    float var71 = var68.getAlignmentX();
    boolean var74 = var68.contains(0, 24);
    java.awt.Color var75 = var68.getForeground();
    var10.setForeground(var75);
    var2.setBackground(var75);
    java.awt.ComponentOrientation var78 = var2.getComponentOrientation();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test341() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test341");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var3 = var2.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var6 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var6.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var13 = var6.location();
    java.awt.Component var14 = var2.findComponentAt(var13);
    var2.setEnabled(true);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var19.transferFocus();
    var19.show();
    float var22 = var19.getAlignmentX();
    boolean var25 = var19.contains(0, 24);
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var29 = var28.getPreferredSize();
    java.awt.Dimension var30 = var28.getMaximumSize();
    java.awt.event.FocusListener[] var31 = var28.getFocusListeners();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var35 = var34.getPreferredSize();
    boolean var38 = var34.contains(10, 1);
    java.awt.im.InputMethodRequests var39 = var34.getInputMethodRequests();
    java.awt.Font var40 = var34.getFont();
    var28.setFont(var40);
    java.awt.FontMetrics var42 = var19.getFontMetrics(var40);
    java.awt.FontMetrics var43 = var2.getFontMetrics(var40);
    java.awt.FocusTraversalPolicy var44 = var2.getFocusTraversalPolicy();
    boolean var45 = var2.getIgnoreRepaint();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var47 = var2.getComponent(1);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);

  }

  public void test342() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test342");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    javax.swing.InputMap var5 = var2.getInputMap();
    java.lang.String var6 = var2.getName();
    var2.setFocusTraversalPolicyProvider(true);
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var11.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var18 = var11.location();
    java.awt.Component var19 = var2.findComponentAt(var18);
    java.awt.LayoutManager var20 = var2.getLayout();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var24 = var23.isMaximumSizeSet();
    boolean var25 = var23.isOpaque();
    javax.swing.InputMap var26 = var23.getInputMap();
    java.beans.PropertyChangeListener[] var28 = var23.getPropertyChangeListeners("");
    java.lang.String var29 = var23.toString();
    boolean var30 = var2.isFocusCycleRoot((java.awt.Container)var23);
    var2.setFocusTraversalPolicyProvider(true);
    var2.list();
    var2.enableInputMethods(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var29,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]"+ "'", var29.equals("bierse.view.RunningMessagePanel[,0,0,0var29,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test343() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test343");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.Insets var7 = var2.getInsets();
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var11 = var10.isMaximumSizeSet();
    var10.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var16 = var10.getTransferHandler();
    boolean var17 = var10.hasFocus();
    var10.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var20 = var10.getPreferredSize();
    java.awt.ComponentOrientation var21 = var10.getComponentOrientation();
    var10.transferFocus();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    var25.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var31 = var25.getTransferHandler();
    boolean var32 = var25.hasFocus();
    javax.swing.event.AncestorListener[] var33 = var25.getAncestorListeners();
    java.awt.Dimension var34 = var25.getMinimumSize();
    boolean var35 = var25.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var39 = var38.isMaximumSizeSet();
    var38.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var44 = var38.getTransferHandler();
    boolean var45 = var38.hasFocus();
    var38.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var48 = var38.getPreferredSize();
    java.awt.Dimension var49 = var25.getSize(var48);
    var10.setSize(var48);
    var2.setSize(var48);
    int var52 = var2.getHeight();
    var2.disable();
    bierse.view.RunningMessagePanel var56 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var57 = var56.isMaximumSizeSet();
    boolean var58 = var56.isOpaque();
    javax.swing.InputMap var59 = var56.getInputMap();
    java.beans.PropertyChangeListener[] var61 = var56.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var62 = var56.getComponentOrientation();
    var56.transferFocusBackward();
    int var64 = var2.getComponentZOrder((java.awt.Component)var56);
    int var65 = var56.getY();
    java.awt.Component var68 = var56.getComponentAt(1, 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);

  }

  public void test344() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test344");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    var2.revalidate();
    java.awt.event.HierarchyListener[] var9 = var2.getHierarchyListeners();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var13 = var12.isMaximumSizeSet();
    boolean var14 = var12.isOpaque();
    java.awt.event.HierarchyListener[] var15 = var12.getHierarchyListeners();
    java.awt.peer.ComponentPeer var16 = var12.getPeer();
    var12.transferFocusDownCycle();
    var12.transferFocusUpCycle();
    java.awt.Dimension var19 = var12.minimumSize();
    var2.setPreferredSize(var19);
    java.awt.Component var21 = var2.getNextFocusableComponent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test345() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test345");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var8 = var7.getPreferredSize();
    javax.swing.JPopupMenu var9 = var7.getComponentPopupMenu();
    java.awt.Rectangle var10 = var7.bounds();
    var2.computeVisibleRect(var10);
    java.awt.event.ComponentListener[] var12 = var2.getComponentListeners();
    boolean var13 = var2.isPaintingTile();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var16.invalidate();
    java.awt.Dimension var23 = var16.getPreferredSize();
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var26.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var33 = var26.location();
    java.awt.Point var34 = var16.getLocation(var33);
    boolean var35 = var16.requestDefaultFocus();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var39 = var38.isMaximumSizeSet();
    var38.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var38.invalidate();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var49 = var48.getPreferredSize();
    java.awt.Point var50 = var48.getMousePosition();
    var48.revalidate();
    var48.transferFocus();
    java.awt.Toolkit var53 = var48.getToolkit();
    boolean var54 = var48.isFocusTraversalPolicySet();
    java.awt.Component var55 = var38.add("PanelUI", (java.awt.Component)var48);
    var55.transferFocus();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.add((java.awt.Component)var16, (java.lang.Object)var55, 24);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test346() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test346");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    java.awt.Dimension var9 = var2.getPreferredSize();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var12.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var19 = var12.location();
    java.awt.Point var20 = var2.getLocation(var19);
    var2.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", 1L, 0L);
    boolean var27 = var2.inside(12, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test347() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test347");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.Insets var7 = var2.getInsets();
    javax.swing.JToolTip var8 = var2.createToolTip();
    int var9 = var8.getDebugGraphicsOptions();
    java.awt.peer.ComponentPeer var10 = var8.getPeer();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var13.transferFocus();
    var13.show();
    float var16 = var13.getAlignmentX();
    var13.repaint(0L, 10, 0, 10, (-1));
    java.awt.Insets var23 = var13.getInsets();
    boolean var24 = var13.isMaximumSizeSet();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var33 = var27.getWidth();
    java.awt.Image var36 = var27.createImage(24, 24);
    boolean var37 = var27.getInheritsPopupMenu();
    java.awt.image.ColorModel var38 = var27.getColorModel();
    java.lang.Object var39 = var13.getClientProperty((java.lang.Object)var38);
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var43 = var42.getPreferredSize();
    java.awt.Point var44 = var42.getMousePosition();
    var42.revalidate();
    var42.invalidate();
    boolean var47 = var42.isManagingFocus();
    var42.validate();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var8.add((java.awt.Component)var13, (java.lang.Object)var42, 24);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);

  }

  public void test348() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test348");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    java.awt.Image var11 = var2.createImage(24, 24);
    var2.repaint(0, 24, 10, (-1));
    var2.setAlignmentX(100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test349() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test349");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var3 = var2.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var6 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var7 = var6.isMaximumSizeSet();
    boolean var8 = var6.isOpaque();
    java.awt.event.HierarchyListener[] var9 = var6.getHierarchyListeners();
    int var10 = var6.getWidth();
    java.awt.event.ContainerListener[] var11 = var6.getContainerListeners();
    java.awt.Dimension var12 = var6.getMaximumSize();
    boolean var13 = var6.isRequestFocusEnabled();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setComponentZOrder((java.awt.Component)var6, 12);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test350() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test350");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    java.awt.image.VolatileImage var22 = var15.createVolatileImage(100, 24);
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var26 = var25.getPreferredSize();
    java.awt.Point var27 = var25.getMousePosition();
    var25.revalidate();
    var25.transferFocus();
    java.awt.Toolkit var30 = var25.getToolkit();
    boolean var31 = var25.isFocusTraversalPolicySet();
    var15.setNextFocusableComponent((java.awt.Component)var25);
    var15.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (-1L), 100L);
    java.lang.String var37 = var15.getToolTipText();
    bierse.view.RunningMessagePanel var40 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var40.transferFocus();
    var40.show();
    bierse.view.RunningMessagePanel var45 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var46 = var45.getPreferredSize();
    boolean var49 = var45.contains(10, 1);
    java.awt.im.InputMethodRequests var50 = var45.getInputMethodRequests();
    java.awt.Font var51 = var45.getFont();
    var40.setFont(var51);
    bierse.view.RunningMessagePanel var55 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var55.repaint(1L, (-1), (-1), 0, 100);
    boolean var62 = var55.isFocusTraversable();
    javax.swing.ActionMap var63 = var55.getActionMap();
    var40.setActionMap(var63);
    var15.setActionMap(var63);
    int var66 = var15.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);

  }

  public void test351() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test351");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    var2.enable(false);
    java.awt.Dimension var13 = var2.minimumSize();
    java.awt.GraphicsConfiguration var14 = var2.getGraphicsConfiguration();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var18 = var17.isMaximumSizeSet();
    var17.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var23 = var17.getTransferHandler();
    boolean var24 = var17.hasFocus();
    javax.swing.event.AncestorListener[] var25 = var17.getAncestorListeners();
    java.awt.Dimension var26 = var17.getMinimumSize();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var31 = var30.getPreferredSize();
    java.awt.Dimension var32 = var30.getMaximumSize();
    var30.disable();
    var17.putClientProperty((java.lang.Object)100, (java.lang.Object)var30);
    java.awt.image.VolatileImage var37 = var30.createVolatileImage(100, 24);
    bierse.view.RunningMessagePanel var40 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var41 = var40.getPreferredSize();
    var30.setMinimumSize(var41);
    var2.setMinimumSize(var41);
    java.awt.Component.BaselineResizeBehavior var44 = var2.getBaselineResizeBehavior();
    float var45 = var2.getAlignmentY();
    bierse.view.RunningMessagePanel var49 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var50 = var49.isMaximumSizeSet();
    var49.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var55 = var49.getTransferHandler();
    boolean var56 = var49.hasFocus();
    var49.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var59 = var49.getPreferredSize();
    java.awt.ComponentOrientation var60 = var49.getComponentOrientation();
    bierse.view.RunningMessagePanel var63 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var64 = var63.isMaximumSizeSet();
    var63.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var69 = var63.getTransferHandler();
    boolean var70 = var63.hasFocus();
    var63.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var73 = var63.getPreferredSize();
    java.awt.Dimension var74 = var49.getSize(var73);
    java.awt.image.VolatileImage var77 = var49.createVolatileImage((-1), (-1));
    var49.repaint(100L);
    javax.swing.InputMap var80 = var49.getInputMap();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setInputMap(100, var80);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test352() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test352");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    var2.enable();
    var2.transferFocusBackward();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (byte)10, (byte)1);
    boolean var12 = var2.requestFocus(false);
    boolean var13 = var2.getInheritsPopupMenu();
    boolean var16 = var2.contains(24, 24);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var20 = var19.getPreferredSize();
    boolean var21 = var19.isPreferredSizeSet();
    var19.enable();
    boolean var23 = var2.isAncestorOf((java.awt.Component)var19);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var19.remove(0);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test353() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test353");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    java.awt.event.ContainerListener[] var7 = var2.getContainerListeners();
    java.awt.Dimension var8 = var2.getMaximumSize();
    boolean var9 = var2.isRequestFocusEnabled();
    boolean var10 = var2.requestDefaultFocus();
    float var11 = var2.getAlignmentX();
    java.awt.Point var12 = var2.location();
    var2.setMessage("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test354() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test354");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", 24);
    java.awt.LayoutManager var3 = var2.getLayout();
    boolean var4 = var2.isMaximumSizeSet();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setSpeed((-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test355() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test355");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    javax.swing.InputMap var5 = var2.getInputMap();
    java.lang.String var6 = var2.getName();
    var2.setFocusTraversalPolicyProvider(true);
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var11.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var18 = var11.location();
    java.awt.Component var19 = var2.findComponentAt(var18);
    int var20 = var2.getX();
    boolean var21 = var2.isPreferredSizeSet();
    javax.swing.InputVerifier var22 = var2.getInputVerifier();
    var2.setBounds(12, (-1), 996, 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test356() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test356");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var3 = var2.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var6 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var6.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var13 = var6.location();
    java.awt.Component var14 = var2.findComponentAt(var13);
    var2.setEnabled(true);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var19.transferFocus();
    var19.show();
    float var22 = var19.getAlignmentX();
    boolean var25 = var19.contains(0, 24);
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var29 = var28.getPreferredSize();
    java.awt.Dimension var30 = var28.getMaximumSize();
    java.awt.event.FocusListener[] var31 = var28.getFocusListeners();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var35 = var34.getPreferredSize();
    boolean var38 = var34.contains(10, 1);
    java.awt.im.InputMethodRequests var39 = var34.getInputMethodRequests();
    java.awt.Font var40 = var34.getFont();
    var28.setFont(var40);
    java.awt.FontMetrics var42 = var19.getFontMetrics(var40);
    java.awt.FontMetrics var43 = var2.getFontMetrics(var40);
    java.awt.FocusTraversalPolicy var44 = var2.getFocusTraversalPolicy();
    boolean var45 = var2.getIgnoreRepaint();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var49 = var48.isMaximumSizeSet();
    var48.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var54 = var48.getTransferHandler();
    boolean var55 = var48.hasFocus();
    var48.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var58 = var48.getPreferredSize();
    java.awt.ComponentOrientation var59 = var48.getComponentOrientation();
    bierse.view.RunningMessagePanel var62 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var63 = var62.isMaximumSizeSet();
    var62.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var68 = var62.getTransferHandler();
    boolean var69 = var62.hasFocus();
    var62.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var72 = var62.getPreferredSize();
    java.awt.Dimension var73 = var48.getSize(var72);
    var48.repaint(100L, 1, 0, 100, 24);
    var2.setNextFocusableComponent((java.awt.Component)var48);
    var48.validate();
    boolean var82 = var48.isManagingFocus();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      javax.swing.InputMap var84 = var48.getInputMap(24);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);

  }

  public void test357() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test357");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    var2.revalidate();
    var2.firePropertyChange("hi!", (short)100, (short)0);
    java.awt.Component var15 = var2.getComponentAt(0, (-1));
    java.awt.Component.BaselineResizeBehavior var16 = var2.getBaselineResizeBehavior();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test358() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test358");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    java.awt.Component var11 = var2.getComponentAt(0, 0);
    java.awt.Dimension var12 = var2.minimumSize();
    boolean var13 = var2.isFocusable();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var17 = var16.getPreferredSize();
    javax.swing.JPopupMenu var18 = var16.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var22 = var21.getPreferredSize();
    javax.swing.JPopupMenu var23 = var21.getComponentPopupMenu();
    java.awt.Rectangle var24 = var21.bounds();
    var16.computeVisibleRect(var24);
    boolean var26 = var16.isManagingFocus();
    int var27 = var16.getHeight();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var31 = var30.isMaximumSizeSet();
    var30.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var36 = var30.getTransferHandler();
    boolean var37 = var30.hasFocus();
    javax.swing.event.AncestorListener[] var38 = var30.getAncestorListeners();
    java.awt.Dimension var39 = var30.getMinimumSize();
    boolean var40 = var30.isFocusTraversalPolicySet();
    var2.add((java.awt.Component)var16, (java.lang.Object)var30);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var43 = var30.areFocusTraversalKeysSet(10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test359() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test359");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.Insets var7 = var2.getInsets();
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var11 = var10.isMaximumSizeSet();
    var10.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var16 = var10.getTransferHandler();
    boolean var17 = var10.hasFocus();
    var10.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var20 = var10.getPreferredSize();
    java.awt.ComponentOrientation var21 = var10.getComponentOrientation();
    var10.transferFocus();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    var25.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var31 = var25.getTransferHandler();
    boolean var32 = var25.hasFocus();
    javax.swing.event.AncestorListener[] var33 = var25.getAncestorListeners();
    java.awt.Dimension var34 = var25.getMinimumSize();
    boolean var35 = var25.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var39 = var38.isMaximumSizeSet();
    var38.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var44 = var38.getTransferHandler();
    boolean var45 = var38.hasFocus();
    var38.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var48 = var38.getPreferredSize();
    java.awt.Dimension var49 = var25.getSize(var48);
    var10.setSize(var48);
    var2.setSize(var48);
    bierse.view.RunningMessagePanel var55 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    javax.swing.InputVerifier var56 = var55.getInputVerifier();
    var55.removeAll();
    boolean var58 = var55.getFocusTraversalKeysEnabled();
    java.awt.Dimension var59 = var55.preferredSize();
    java.awt.Component var60 = var2.add("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var55);
    var55.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", (short)10, (short)10);
    var55.setAlignmentX((-1.0f));
    java.awt.Graphics var67 = var55.getGraphics();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);

  }

  public void test360() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test360");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.revalidate();
    var2.invalidate();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var10 = var9.isMaximumSizeSet();
    var9.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var15 = var9.getTransferHandler();
    boolean var16 = var9.hasFocus();
    javax.swing.event.AncestorListener[] var17 = var9.getAncestorListeners();
    java.awt.Dimension var18 = var9.getMinimumSize();
    boolean var19 = var9.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var23 = var22.isMaximumSizeSet();
    var22.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var28 = var22.getTransferHandler();
    boolean var29 = var22.hasFocus();
    var22.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var32 = var22.getPreferredSize();
    java.awt.Dimension var33 = var9.getSize(var32);
    java.awt.event.ComponentListener[] var34 = var9.getComponentListeners();
    java.beans.PropertyChangeListener[] var35 = var9.getPropertyChangeListeners();
    java.awt.image.ColorModel var36 = var9.getColorModel();
    boolean var37 = var2.isAncestorOf((java.awt.Component)var9);
    boolean var38 = var2.isFocusable();
    var2.disable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);

  }

  public void test361() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test361");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.Insets var7 = var2.getInsets();
    javax.swing.JToolTip var8 = var2.createToolTip();
    var2.invalidate();
    java.awt.Dimension var10 = var2.getPreferredSize();
    var2.firePropertyChange("PanelUI", '#', '4');
    int var15 = var2.getStringWidth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 996);

  }

  public void test362() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test362");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.revalidate();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var9 = var8.isMaximumSizeSet();
    var8.layout();
    var8.invalidate();
    var2.setNextFocusableComponent((java.awt.Component)var8);
    boolean var13 = var2.isValidateRoot();
    var2.show();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var15 = var2.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test363() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test363");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    var2.firePropertyChange("hi!", ' ', ' ');
    javax.accessibility.AccessibleContext var11 = var2.getAccessibleContext();
    var2.resize(100, 0);
    java.awt.Dimension var15 = var2.getMaximumSize();
    int var16 = var2.getX();
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var19.invalidate();
    java.awt.Dimension var26 = var19.getPreferredSize();
    int var27 = var19.getWidth();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var31 = var30.isMaximumSizeSet();
    var30.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var36 = var30.getTransferHandler();
    boolean var37 = var30.hasFocus();
    var30.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var40 = var30.getPreferredSize();
    java.awt.ComponentOrientation var41 = var30.getComponentOrientation();
    bierse.view.RunningMessagePanel var44 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var45 = var44.isMaximumSizeSet();
    var44.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var50 = var44.getTransferHandler();
    boolean var51 = var44.hasFocus();
    javax.swing.event.AncestorListener[] var52 = var44.getAncestorListeners();
    bierse.view.RunningMessagePanel var55 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var56 = var55.isMaximumSizeSet();
    var55.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var61 = var55.getTransferHandler();
    boolean var62 = var55.hasFocus();
    var55.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var65 = var55.getPreferredSize();
    java.awt.ComponentOrientation var66 = var55.getComponentOrientation();
    var30.add((java.awt.Component)var44, (java.lang.Object)var55);
    bierse.view.RunningMessagePanel var70 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var71 = var70.getPreferredSize();
    java.awt.Dimension var72 = var70.getMaximumSize();
    var19.add((java.awt.Component)var44, (java.lang.Object)var70, (-1));
    java.awt.Dimension var75 = var19.getSize();
    java.awt.im.InputContext var76 = var19.getInputContext();
    var19.disable();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setComponentZOrder((java.awt.Component)var19, (-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);

  }

  public void test364() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test364");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    var16.removeAll();
    java.awt.Component var41 = var16.getNextFocusableComponent();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var16.remove((-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);

  }

  public void test365() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test365");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    boolean var29 = var2.requestFocus(false);
    javax.swing.InputMap var30 = var2.getInputMap();
    var2.reshape(996, 100, 12, 996);
    int var36 = var2.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 100);

  }

  public void test366() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test366");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    java.awt.Component[] var9 = var2.getComponents();
    var2.setRequestFocusEnabled(false);
    int var12 = var2.getX();
    var2.doLayout();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);

  }

  public void test367() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test367");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.repaint(1L, (-1), (-1), 0, 100);
    boolean var9 = var2.isFocusTraversable();
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var13 = var12.getPreferredSize();
    boolean var16 = var12.contains(10, 1);
    java.awt.im.InputMethodRequests var17 = var12.getInputMethodRequests();
    var12.revalidate();
    var12.firePropertyChange("hi!", (short)100, (short)0);
    var2.setNextFocusableComponent((java.awt.Component)var12);
    boolean var24 = var2.isFocusable();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var26 = var2.getComponent(13);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);

  }

  public void test368() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test368");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    java.awt.Font var9 = var2.getFont();
    var2.enable();
    boolean var11 = var2.getIgnoreRepaint();
    var2.removeNotify();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Point var17 = var15.getMousePosition();
    var15.invalidate();
    java.lang.Object var19 = var2.getClientProperty((java.lang.Object)var15);
    int var20 = var2.getComponentCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);

  }

  public void test369() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test369");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    var2.invalidate();
    java.awt.event.FocusListener[] var6 = var2.getFocusListeners();
    javax.swing.plaf.PanelUI var7 = var2.getUI();
    var2.setSpeed(996);
    java.awt.Point var11 = var2.getMousePosition(true);
    var2.resize(0, 10);
    boolean var15 = var2.isBackgroundSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);

  }

  public void test370() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test370");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    boolean var5 = var2.isMaximumSizeSet();
    java.awt.Dimension var6 = var2.preferredSize();
    var2.setDebugGraphicsOptions(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var10 = var2.getComponent(10);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test371() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test371");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var3 = var2.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var6 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var6.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var13 = var6.location();
    java.awt.Component var14 = var2.findComponentAt(var13);
    var2.setEnabled(true);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var19.transferFocus();
    var19.show();
    float var22 = var19.getAlignmentX();
    boolean var25 = var19.contains(0, 24);
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var29 = var28.getPreferredSize();
    java.awt.Dimension var30 = var28.getMaximumSize();
    java.awt.event.FocusListener[] var31 = var28.getFocusListeners();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var35 = var34.getPreferredSize();
    boolean var38 = var34.contains(10, 1);
    java.awt.im.InputMethodRequests var39 = var34.getInputMethodRequests();
    java.awt.Font var40 = var34.getFont();
    var28.setFont(var40);
    java.awt.FontMetrics var42 = var19.getFontMetrics(var40);
    java.awt.FontMetrics var43 = var2.getFontMetrics(var40);
    java.awt.FocusTraversalPolicy var44 = var2.getFocusTraversalPolicy();
    boolean var45 = var2.getIgnoreRepaint();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var49 = var48.isMaximumSizeSet();
    var48.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var54 = var48.getTransferHandler();
    boolean var55 = var48.hasFocus();
    var48.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var58 = var48.getPreferredSize();
    java.awt.ComponentOrientation var59 = var48.getComponentOrientation();
    bierse.view.RunningMessagePanel var62 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var63 = var62.isMaximumSizeSet();
    var62.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var68 = var62.getTransferHandler();
    boolean var69 = var62.hasFocus();
    var62.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var72 = var62.getPreferredSize();
    java.awt.Dimension var73 = var48.getSize(var72);
    var48.repaint(100L, 1, 0, 100, 24);
    var2.setNextFocusableComponent((java.awt.Component)var48);
    bierse.view.RunningMessagePanel var83 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var84 = var83.isMaximumSizeSet();
    boolean var85 = var83.isOpaque();
    javax.accessibility.AccessibleContext var86 = var83.getAccessibleContext();
    var83.hide();
    boolean var88 = var48.isAncestorOf((java.awt.Component)var83);
    bierse.view.RunningMessagePanel var91 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var92 = var91.getPreferredSize();
    var91.doLayout();
    var83.remove((java.awt.Component)var91);
    boolean var95 = var83.isDisplayable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);

  }

  public void test372() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test372");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    var2.setOpaque(true);
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var10 = var9.isMaximumSizeSet();
    var9.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var15 = var9.getTransferHandler();
    boolean var16 = var9.hasFocus();
    javax.swing.event.AncestorListener[] var17 = var9.getAncestorListeners();
    java.awt.Dimension var18 = var9.getMinimumSize();
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var23 = var22.getPreferredSize();
    java.awt.Dimension var24 = var22.getMaximumSize();
    var22.disable();
    var9.putClientProperty((java.lang.Object)100, (java.lang.Object)var22);
    javax.swing.InputVerifier var27 = var22.getInputVerifier();
    boolean var28 = var22.getInheritsPopupMenu();
    var22.setLocation(0, 100);
    boolean var32 = var22.isFocusTraversalPolicyProvider();
    var22.list();
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var36.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var43 = var36.location();
    java.awt.Font var44 = var36.getFont();
    var22.setFont(var44);
    java.awt.FontMetrics var46 = var2.getFontMetrics(var44);
    var2.removeAll();
    var2.setVerifyInputWhenFocusTarget(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test373() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test373");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    int var12 = var2.getDebugGraphicsOptions();
    java.awt.Component var15 = var2.locate(24, 100);
    bierse.view.RunningMessagePanel var18 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var19 = var18.getPreferredSize();
    boolean var22 = var18.contains(10, 1);
    java.awt.im.InputMethodRequests var23 = var18.getInputMethodRequests();
    java.awt.event.FocusListener[] var24 = var18.getFocusListeners();
    java.awt.Font var25 = var18.getFont();
    javax.swing.plaf.PanelUI var26 = var18.getUI();
    var2.setUI(var26);
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var30.transferFocus();
    var30.show();
    float var33 = var30.getAlignmentX();
    var30.repaint(0L, 10, 0, 10, (-1));
    boolean var40 = var30.isEnabled();
    bierse.view.RunningMessagePanel var43 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var44 = var43.getPreferredSize();
    javax.swing.JPopupMenu var45 = var43.getComponentPopupMenu();
    java.awt.Rectangle var46 = var43.bounds();
    java.awt.Rectangle var47 = var30.getBounds(var46);
    var2.scrollRectToVisible(var46);
    java.lang.Object var49 = var2.getTreeLock();
    boolean var50 = var2.isShowing();
    javax.accessibility.AccessibleContext var51 = var2.getAccessibleContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test374() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test374");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    var2.setAlignmentX((-1.0f));
    java.awt.Point var9 = var2.getLocation();
    java.awt.Point var10 = var2.getLocation();
    var2.setFocusCycleRoot(false);
    var2.setSize(0, 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test375() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test375");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    float var5 = var2.getAlignmentX();
    var2.repaint(0L, 10, 0, 10, (-1));
    boolean var12 = var2.isEnabled();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    javax.swing.JPopupMenu var17 = var15.getComponentPopupMenu();
    java.awt.Rectangle var18 = var15.bounds();
    java.awt.Rectangle var19 = var2.getBounds(var18);
    var2.setFocusable(false);
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var25 = var24.getPreferredSize();
    java.awt.Dimension var26 = var24.getMaximumSize();
    var2.setMinimumSize(var26);
    javax.swing.ActionMap var28 = var2.getActionMap();
    bierse.view.RunningMessagePanel var31 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var32 = var31.isMaximumSizeSet();
    var31.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var31.invalidate();
    bierse.view.RunningMessagePanel var40 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var41 = var40.isMaximumSizeSet();
    var40.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var49 = var48.isMaximumSizeSet();
    var48.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var54 = var48.getWidth();
    java.awt.Component[] var55 = var48.getComponents();
    var31.putClientProperty((java.lang.Object)var40, (java.lang.Object)var55);
    var40.setName("PanelUI");
    var40.enable(true);
    bierse.view.RunningMessagePanel var63 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var64 = var63.isMaximumSizeSet();
    var63.layout();
    var63.invalidate();
    java.awt.event.FocusListener[] var67 = var63.getFocusListeners();
    javax.swing.plaf.PanelUI var68 = var63.getUI();
    var40.setUI(var68);
    var2.setUI(var68);
    java.awt.dnd.DropTarget var71 = var2.getDropTarget();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);

  }

  public void test376() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test376");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    java.awt.image.ColorModel var4 = var2.getColorModel();
    java.beans.PropertyChangeListener[] var5 = var2.getPropertyChangeListeners();
    int var6 = var2.getHeight();
    boolean var7 = var2.isDisplayable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test377() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test377");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    java.lang.String var14 = var2.getName();
    java.awt.Font var15 = var2.getFont();
    java.awt.event.MouseWheelListener[] var16 = var2.getMouseWheelListeners();
    var2.transferFocusBackward();
    java.awt.Color var18 = var2.getForeground();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isMaximumSizeSet();
    boolean var23 = var21.isOpaque();
    java.awt.event.HierarchyListener[] var24 = var21.getHierarchyListeners();
    int var25 = var21.getWidth();
    java.awt.event.ContainerListener[] var26 = var21.getContainerListeners();
    java.awt.Dimension var27 = var21.getMaximumSize();
    boolean var28 = var21.isRequestFocusEnabled();
    var21.transferFocus();
    bierse.view.RunningMessagePanel var32 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var33 = var32.getPreferredSize();
    java.awt.Point var34 = var32.getMousePosition();
    var32.setDoubleBuffered(false);
    java.awt.GraphicsConfiguration var37 = var32.getGraphicsConfiguration();
    java.awt.Component var40 = var32.locate((-1), (-1));
    java.awt.Font var41 = var32.getFont();
    java.awt.FontMetrics var42 = var21.getFontMetrics(var41);
    var2.setFont(var41);
    int var44 = var2.countComponents();
    boolean var45 = var2.isFocusTraversalPolicySet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);

  }

  public void test378() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test378");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    var16.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var26 = var16.getPreferredSize();
    java.awt.Dimension var27 = var2.getSize(var26);
    java.awt.image.VolatileImage var30 = var2.createVolatileImage((-1), (-1));
    var2.repaint(100L);
    var2.setVisible(true);
    java.awt.Point var35 = var2.getMousePosition();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var39 = var38.getPreferredSize();
    javax.swing.JPopupMenu var40 = var38.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var43 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var44 = var43.getPreferredSize();
    javax.swing.JPopupMenu var45 = var43.getComponentPopupMenu();
    java.awt.Rectangle var46 = var43.bounds();
    var38.computeVisibleRect(var46);
    boolean var48 = var38.isManagingFocus();
    bierse.view.RunningMessagePanel var51 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var52 = var51.isMaximumSizeSet();
    var51.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var57 = var51.getTransferHandler();
    boolean var58 = var51.hasFocus();
    var51.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var61 = var51.getPreferredSize();
    java.awt.GraphicsConfiguration var62 = var51.getGraphicsConfiguration();
    bierse.view.RunningMessagePanel var65 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var66 = var65.isMaximumSizeSet();
    boolean var67 = var65.isOpaque();
    javax.swing.InputMap var68 = var65.getInputMap();
    java.beans.PropertyChangeListener[] var70 = var65.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var71 = var65.getComponentOrientation();
    var51.applyComponentOrientation(var71);
    var38.applyComponentOrientation(var71);
    var2.setComponentOrientation(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test379() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test379");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    javax.swing.event.ListDataListener[] var1 = var0.getListDataListeners();
    bierse.view.RunningMessagePanel var4 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var4.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var11 = var4.location();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    var14.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var20 = var14.getTransferHandler();
    boolean var21 = var14.hasFocus();
    javax.swing.event.AncestorListener[] var22 = var14.getAncestorListeners();
    java.awt.Dimension var23 = var14.getMinimumSize();
    var4.resize(var23);
    int var25 = var0.getIndexOf((java.lang.Object)var23);
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var29 = var28.isMaximumSizeSet();
    var28.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var34 = var28.getTransferHandler();
    java.awt.Component var37 = var28.getComponentAt(0, 0);
    var0.insertElementAt((java.lang.Object)var28, 0);
    var0.addElement((java.lang.Object)(short)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);

  }

  public void test380() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test380");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    var2.setAlignmentX(10.0f);
    var2.removeAll();
    java.awt.Point var15 = var2.location();
    java.beans.PropertyChangeListener[] var16 = var2.getPropertyChangeListeners();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.remove(10);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test381() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test381");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    javax.swing.InputVerifier var3 = var2.getInputVerifier();
    var2.removeAll();
    boolean var5 = var2.getFocusTraversalKeysEnabled();
    java.awt.Dimension var6 = var2.preferredSize();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10L, 10L);
    var2.transferFocusBackward();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test382() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test382");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var43 = var42.getPreferredSize();
    boolean var46 = var42.contains(10, 1);
    java.awt.im.InputMethodRequests var47 = var42.getInputMethodRequests();
    var42.revalidate();
    var42.enable(true);
    java.awt.Point var51 = var42.location();
    java.awt.Component var52 = var16.getComponentAt(var51);
    boolean var53 = var16.isValidateRoot();
    boolean var54 = var16.isManagingFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);

  }

  public void test383() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test383");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    var2.transferFocus();
    boolean var15 = var2.isMinimumSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test384() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test384");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.countComponents();
    java.awt.event.HierarchyBoundsListener[] var7 = var2.getHierarchyBoundsListeners();
    boolean var9 = var2.areFocusTraversalKeysSet(1);
    bierse.view.RunningMessagePanel var12 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var13 = var12.getPreferredSize();
    javax.swing.JPopupMenu var14 = var12.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var18 = var17.getPreferredSize();
    javax.swing.JPopupMenu var19 = var17.getComponentPopupMenu();
    java.awt.Rectangle var20 = var17.bounds();
    var12.computeVisibleRect(var20);
    var2.setBounds(var20);
    java.awt.Insets var23 = var2.getInsets();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test385() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test385");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    var2.enable(false);
    java.awt.Dimension var13 = var2.minimumSize();
    java.awt.GraphicsConfiguration var14 = var2.getGraphicsConfiguration();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var18 = var17.isMaximumSizeSet();
    var17.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var23 = var17.getTransferHandler();
    boolean var24 = var17.hasFocus();
    javax.swing.event.AncestorListener[] var25 = var17.getAncestorListeners();
    java.awt.Dimension var26 = var17.getMinimumSize();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var31 = var30.getPreferredSize();
    java.awt.Dimension var32 = var30.getMaximumSize();
    var30.disable();
    var17.putClientProperty((java.lang.Object)100, (java.lang.Object)var30);
    java.awt.image.VolatileImage var37 = var30.createVolatileImage(100, 24);
    bierse.view.RunningMessagePanel var40 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var41 = var40.getPreferredSize();
    var30.setMinimumSize(var41);
    var2.setMinimumSize(var41);
    var2.setFocusTraversalKeysEnabled(false);
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var49 = var48.isMaximumSizeSet();
    boolean var50 = var48.isOpaque();
    java.awt.event.HierarchyListener[] var51 = var48.getHierarchyListeners();
    int var52 = var48.getWidth();
    int var53 = var48.countComponents();
    java.awt.Point var55 = var48.getMousePosition(true);
    var48.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var58 = var48.toString();
    java.awt.Font var59 = var48.getFont();
    javax.swing.plaf.PanelUI var60 = var48.getUI();
    java.awt.Dimension var61 = var48.getPreferredSize();
    var48.firePropertyChange("", (-1), 1);
    java.awt.Rectangle var66 = var48.getBounds();
    var2.setBounds(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var58,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var58.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var58,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test386() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test386");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var8 = var7.getPreferredSize();
    javax.swing.JPopupMenu var9 = var7.getComponentPopupMenu();
    java.awt.Rectangle var10 = var7.bounds();
    var2.computeVisibleRect(var10);
    boolean var12 = var2.isManagingFocus();
    int var13 = var2.getHeight();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    boolean var18 = var16.isOpaque();
    java.awt.event.HierarchyListener[] var19 = var16.getHierarchyListeners();
    int var20 = var16.getWidth();
    int var21 = var16.countComponents();
    java.awt.Point var23 = var16.getMousePosition(true);
    var16.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var26 = var16.toString();
    java.awt.Font var27 = var16.getFont();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var31 = var30.isMaximumSizeSet();
    var30.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var36 = var30.getTransferHandler();
    boolean var37 = var30.hasFocus();
    javax.swing.event.AncestorListener[] var38 = var30.getAncestorListeners();
    java.awt.Dimension var39 = var30.getMinimumSize();
    boolean var40 = var16.isAncestorOf((java.awt.Component)var30);
    var16.setLocation(0, 1);
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var47 = var46.getPreferredSize();
    boolean var50 = var46.contains(10, 1);
    java.awt.im.InputMethodRequests var51 = var46.getInputMethodRequests();
    java.awt.event.FocusListener[] var52 = var46.getFocusListeners();
    var46.disable();
    var46.setBounds(0, (-1), 10, 24);
    boolean var59 = var16.isFocusCycleRoot((java.awt.Container)var46);
    boolean var60 = var2.isFocusCycleRoot((java.awt.Container)var46);
    java.awt.Rectangle var61 = var2.getBounds();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var26,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var26.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var26,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test387() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test387");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    java.awt.peer.ComponentPeer var6 = var2.getPeer();
    var2.transferFocusDownCycle();
    var2.transferFocusUpCycle();
    java.awt.Dimension var9 = var2.minimumSize();
    var2.setVerifyInputWhenFocusTarget(true);
    java.awt.Dimension var12 = var2.size();
    boolean var13 = var2.getVerifyInputWhenFocusTarget();
    var2.setToolTipText("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test388() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test388");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    java.awt.Font var9 = var2.getFont();
    java.beans.PropertyChangeListener[] var11 = var2.getPropertyChangeListeners("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    boolean var12 = var2.isValidateRoot();
    java.awt.Toolkit var13 = var2.getToolkit();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var16.invalidate();
    java.awt.Dimension var23 = var16.getPreferredSize();
    var2.setMaximumSize(var23);
    java.awt.event.HierarchyBoundsListener[] var25 = var2.getHierarchyBoundsListeners();
    java.awt.Point var26 = var2.location();
    var2.setAutoscrolls(true);
    java.beans.VetoableChangeListener[] var29 = var2.getVetoableChangeListeners();
    var2.setOpaque(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test389() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test389");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    var2.setOpaque(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test390() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test390");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    bierse.view.RunningMessagePanel var6 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var7 = var6.isMaximumSizeSet();
    boolean var8 = var6.isOpaque();
    java.awt.event.HierarchyListener[] var9 = var6.getHierarchyListeners();
    int var10 = var6.countComponents();
    java.awt.event.HierarchyBoundsListener[] var11 = var6.getHierarchyBoundsListeners();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    boolean var16 = var14.isOpaque();
    java.awt.event.HierarchyListener[] var17 = var14.getHierarchyListeners();
    int var18 = var14.getWidth();
    java.awt.event.ContainerListener[] var19 = var14.getContainerListeners();
    java.awt.Dimension var20 = var14.getMaximumSize();
    var6.setMinimumSize(var20);
    java.awt.Dimension var22 = var2.getSize(var20);
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var25.repaint(1L, (-1), (-1), 0, 100);
    boolean var32 = var25.isFocusTraversable();
    javax.swing.ActionMap var33 = var25.getActionMap();
    var2.setActionMap(var33);
    var2.move(996, 24);
    var2.setAutoscrolls(false);
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var43 = var42.isMaximumSizeSet();
    boolean var44 = var42.isOpaque();
    java.awt.event.HierarchyListener[] var45 = var42.getHierarchyListeners();
    java.awt.peer.ComponentPeer var46 = var42.getPeer();
    var42.transferFocusDownCycle();
    var42.transferFocusUpCycle();
    boolean var49 = var42.isEnabled();
    boolean var52 = var42.contains(1, 12);
    java.lang.Object var53 = var2.getClientProperty((java.lang.Object)var52);
    boolean var54 = var2.isFocusCycleRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);

  }

  public void test391() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test391");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.repaint(1L, (-1), (-1), 0, 100);
    int var9 = var2.countComponents();
    java.awt.event.KeyListener[] var10 = var2.getKeyListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test392() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test392");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    float var5 = var2.getAlignmentX();
    var2.repaint(0L, 10, 0, 10, (-1));
    boolean var12 = var2.isEnabled();
    java.lang.Object var13 = var2.getTreeLock();
    java.lang.String var14 = var2.toString();
    java.beans.PropertyChangeListener[] var15 = var2.getPropertyChangeListeners();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", 0, 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var14,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var14.equals("bierse.view.RunningMessagePanel[,0,0,0var14,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test393() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test393");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    var2.enable();
    var2.transferFocusBackward();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (byte)10, (byte)1);
    java.awt.event.MouseWheelListener[] var11 = var2.getMouseWheelListeners();
    boolean var12 = var2.isFontSet();
    var2.setInheritsPopupMenu(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test394() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test394");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    java.awt.Component var11 = var2.getComponentAt(0, 0);
    java.awt.Dimension var12 = var2.minimumSize();
    boolean var13 = var2.isFocusable();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var17 = var16.getPreferredSize();
    javax.swing.JPopupMenu var18 = var16.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var22 = var21.getPreferredSize();
    javax.swing.JPopupMenu var23 = var21.getComponentPopupMenu();
    java.awt.Rectangle var24 = var21.bounds();
    var16.computeVisibleRect(var24);
    boolean var26 = var16.isManagingFocus();
    int var27 = var16.getHeight();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var31 = var30.isMaximumSizeSet();
    var30.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var36 = var30.getTransferHandler();
    boolean var37 = var30.hasFocus();
    javax.swing.event.AncestorListener[] var38 = var30.getAncestorListeners();
    java.awt.Dimension var39 = var30.getMinimumSize();
    boolean var40 = var30.isFocusTraversalPolicySet();
    var2.add((java.awt.Component)var16, (java.lang.Object)var30);
    var2.requestFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test395() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test395");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    var2.enable();
    var2.transferFocusBackward();
    java.awt.event.MouseListener[] var7 = var2.getMouseListeners();
    java.awt.FocusTraversalPolicy var8 = var2.getFocusTraversalPolicy();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test396() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test396");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    java.awt.Image var11 = var2.createImage(24, 24);
    boolean var12 = var2.getInheritsPopupMenu();
    java.awt.image.ColorModel var13 = var2.getColorModel();
    bierse.view.KeyMapComboBoxModel var14 = new bierse.view.KeyMapComboBoxModel();
    javax.swing.event.ListDataListener[] var15 = var14.getListDataListeners();
    bierse.view.RunningMessagePanel var18 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var18.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var25 = var18.location();
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var29 = var28.isMaximumSizeSet();
    var28.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var34 = var28.getTransferHandler();
    boolean var35 = var28.hasFocus();
    javax.swing.event.AncestorListener[] var36 = var28.getAncestorListeners();
    java.awt.Dimension var37 = var28.getMinimumSize();
    var18.resize(var37);
    int var39 = var14.getIndexOf((java.lang.Object)var37);
    int var40 = var14.getSize();
    java.lang.Object var41 = var2.getClientProperty((java.lang.Object)var14);
    java.awt.event.KeyListener[] var42 = var2.getKeyListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test397() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test397");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var3 = var2.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var6 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var6.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var13 = var6.location();
    java.awt.Component var14 = var2.findComponentAt(var13);
    var2.setEnabled(true);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var19.transferFocus();
    var19.show();
    float var22 = var19.getAlignmentX();
    boolean var25 = var19.contains(0, 24);
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var29 = var28.getPreferredSize();
    java.awt.Dimension var30 = var28.getMaximumSize();
    java.awt.event.FocusListener[] var31 = var28.getFocusListeners();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var35 = var34.getPreferredSize();
    boolean var38 = var34.contains(10, 1);
    java.awt.im.InputMethodRequests var39 = var34.getInputMethodRequests();
    java.awt.Font var40 = var34.getFont();
    var28.setFont(var40);
    java.awt.FontMetrics var42 = var19.getFontMetrics(var40);
    java.awt.FontMetrics var43 = var2.getFontMetrics(var40);
    java.awt.FocusTraversalPolicy var44 = var2.getFocusTraversalPolicy();
    boolean var45 = var2.getIgnoreRepaint();
    boolean var46 = var2.isFocusTraversalPolicyProvider();
    var2.nextFocus();
    bierse.view.RunningMessagePanel var50 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var51 = var50.isMaximumSizeSet();
    var50.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var56 = var50.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var59 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var60 = var59.getPreferredSize();
    boolean var61 = var59.isPreferredSizeSet();
    var59.enable();
    var59.transferFocusBackward();
    int var64 = var50.getComponentZOrder((java.awt.Component)var59);
    var50.setEnabled(false);
    java.awt.Graphics var67 = var50.getGraphics();
    var50.transferFocus();
    bierse.view.RunningMessagePanel var71 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.KeyListener[] var72 = var71.getKeyListeners();
    javax.swing.JRootPane var73 = var71.getRootPane();
    var2.add((java.awt.Component)var50, (java.lang.Object)var71);
    boolean var75 = var71.isOpaque();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == true);

  }

  public void test398() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test398");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.setDoubleBuffered(false);
    var2.setFocusTraversalKeysEnabled(false);
    java.awt.Point var10 = var2.getMousePosition(false);
    java.awt.Dimension var11 = var2.getMaximumSize();
    boolean var12 = var2.requestFocusInWindow();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test399() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test399");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.countComponents();
    java.awt.event.HierarchyBoundsListener[] var7 = var2.getHierarchyBoundsListeners();
    java.lang.String var8 = var2.toString();
    java.awt.im.InputMethodRequests var9 = var2.getInputMethodRequests();
    var2.paintImmediately(1, 10, 996, 13);
    java.awt.Dimension var15 = var2.preferredSize();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.remove((-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var8,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var8.equals("bierse.view.RunningMessagePanel[,0,0,0var8,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test400() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test400");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    var2.invalidate();
    java.awt.event.FocusListener[] var6 = var2.getFocusListeners();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var10 = var9.isMaximumSizeSet();
    var9.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var15 = var9.getTransferHandler();
    boolean var16 = var9.hasFocus();
    var9.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var19 = var9.getPreferredSize();
    java.awt.ComponentOrientation var20 = var9.getComponentOrientation();
    var9.transferFocus();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    var24.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var30 = var24.getTransferHandler();
    boolean var31 = var24.hasFocus();
    javax.swing.event.AncestorListener[] var32 = var24.getAncestorListeners();
    java.awt.Dimension var33 = var24.getMinimumSize();
    boolean var34 = var24.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    var37.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var47 = var37.getPreferredSize();
    java.awt.Dimension var48 = var24.getSize(var47);
    var9.setSize(var47);
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var53 = var52.getPreferredSize();
    boolean var56 = var52.contains(10, 1);
    java.awt.Insets var57 = var52.getInsets();
    javax.swing.JToolTip var58 = var52.createToolTip();
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var62 = var61.isMaximumSizeSet();
    var61.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var67 = var61.getTransferHandler();
    boolean var68 = var61.hasFocus();
    javax.swing.event.AncestorListener[] var69 = var61.getAncestorListeners();
    var61.enable(false);
    int var72 = var58.getComponentZOrder((java.awt.Component)var61);
    boolean var73 = var58.requestFocusInWindow();
    boolean var74 = var58.isOptimizedDrawingEnabled();
    var2.add((java.awt.Component)var9, (java.lang.Object)var58);
    boolean var76 = var58.isShowing();
    var58.setFocusTraversalKeysEnabled(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);

  }

  public void test401() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test401");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    boolean var40 = var2.getFocusTraversalKeysEnabled();
    var2.setAlignmentX(100.0f);
    var2.setMessage("");
    var2.doLayout();
    var2.layout();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);

  }

  public void test402() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test402");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.Insets var7 = var2.getInsets();
    javax.swing.JToolTip var8 = var2.createToolTip();
    var2.invalidate();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", false, true);
    java.awt.FocusTraversalPolicy var14 = var2.getFocusTraversalPolicy();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test403() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test403");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    var2.setAlignmentY(10.0f);
    var2.setInheritsPopupMenu(false);
    javax.accessibility.AccessibleContext var18 = var2.getAccessibleContext();
    java.beans.PropertyChangeListener[] var19 = var2.getPropertyChangeListeners();
    int var20 = var2.getWidth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);

  }

  public void test404() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test404");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var3 = var2.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var6 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var6.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var13 = var6.location();
    java.awt.Component var14 = var2.findComponentAt(var13);
    var2.setEnabled(true);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var19.transferFocus();
    var19.show();
    float var22 = var19.getAlignmentX();
    boolean var25 = var19.contains(0, 24);
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var29 = var28.getPreferredSize();
    java.awt.Dimension var30 = var28.getMaximumSize();
    java.awt.event.FocusListener[] var31 = var28.getFocusListeners();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var35 = var34.getPreferredSize();
    boolean var38 = var34.contains(10, 1);
    java.awt.im.InputMethodRequests var39 = var34.getInputMethodRequests();
    java.awt.Font var40 = var34.getFont();
    var28.setFont(var40);
    java.awt.FontMetrics var42 = var19.getFontMetrics(var40);
    java.awt.FontMetrics var43 = var2.getFontMetrics(var40);
    java.awt.FocusTraversalPolicy var44 = var2.getFocusTraversalPolicy();
    boolean var45 = var2.getIgnoreRepaint();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var49 = var48.isMaximumSizeSet();
    var48.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var54 = var48.getTransferHandler();
    boolean var55 = var48.hasFocus();
    var48.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var58 = var48.getPreferredSize();
    java.awt.ComponentOrientation var59 = var48.getComponentOrientation();
    bierse.view.RunningMessagePanel var62 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var63 = var62.isMaximumSizeSet();
    var62.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var68 = var62.getTransferHandler();
    boolean var69 = var62.hasFocus();
    var62.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var72 = var62.getPreferredSize();
    java.awt.Dimension var73 = var48.getSize(var72);
    var48.repaint(100L, 1, 0, 100, 24);
    var2.setNextFocusableComponent((java.awt.Component)var48);
    bierse.view.RunningMessagePanel var83 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var84 = var83.isMaximumSizeSet();
    boolean var85 = var83.isOpaque();
    javax.accessibility.AccessibleContext var86 = var83.getAccessibleContext();
    var83.hide();
    boolean var88 = var48.isAncestorOf((java.awt.Component)var83);
    boolean var89 = var48.isDoubleBuffered();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);

  }

  public void test405() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test405");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.setDoubleBuffered(false);
    java.awt.GraphicsConfiguration var7 = var2.getGraphicsConfiguration();
    java.awt.Component var10 = var2.locate((-1), (-1));
    java.awt.Font var11 = var2.getFont();
    var2.move(24, 12);
    java.awt.image.ColorModel var15 = var2.getColorModel();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var17 = var2.getFocusTraversalKeys((-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test406() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test406");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    boolean var12 = var2.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var16 = var15.isMaximumSizeSet();
    var15.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var21 = var15.getTransferHandler();
    boolean var22 = var15.hasFocus();
    var15.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var25 = var15.getPreferredSize();
    java.awt.Dimension var26 = var2.getSize(var25);
    var2.firePropertyChange("hi!", 1L, 1L);
    bierse.view.RunningMessagePanel var33 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var34 = var33.isMaximumSizeSet();
    boolean var35 = var33.isOpaque();
    javax.swing.InputMap var36 = var33.getInputMap();
    java.beans.PropertyChangeListener[] var38 = var33.getPropertyChangeListeners("");
    bierse.view.RunningMessagePanel var41 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var42 = var41.getPreferredSize();
    bierse.view.RunningMessagePanel var45 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var46 = var45.isMaximumSizeSet();
    var45.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var45.invalidate();
    java.awt.Dimension var52 = var45.getPreferredSize();
    var41.setPreferredSize(var52);
    java.awt.Dimension var54 = var33.getSize(var52);
    int var55 = var2.getComponentZOrder((java.awt.Component)var33);
    bierse.view.RunningMessagePanel var58 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var59 = var58.isMaximumSizeSet();
    boolean var60 = var58.isOpaque();
    java.awt.event.HierarchyListener[] var61 = var58.getHierarchyListeners();
    java.awt.peer.ComponentPeer var62 = var58.getPeer();
    var58.transferFocus();
    java.lang.String var64 = var58.getToolTipText();
    int var65 = var58.getY();
    int var66 = var58.getHeight();
    bierse.view.RunningMessagePanel var69 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var70 = var69.isMaximumSizeSet();
    var69.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var75 = var69.getTransferHandler();
    boolean var76 = var69.hasFocus();
    var69.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var79 = var69.getPreferredSize();
    java.awt.ComponentOrientation var80 = var69.getComponentOrientation();
    java.lang.String var81 = var69.getName();
    java.awt.Font var82 = var69.getFont();
    var58.setFont(var82);
    var2.setFont(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test407() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test407");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    java.awt.event.MouseMotionListener[] var5 = var2.getMouseMotionListeners();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var8 = var2.getBaseline(100, (-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test408() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test408");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    var2.revalidate();
    boolean var6 = var2.isFocusOwner();
    float var7 = var2.getAlignmentX();
    javax.swing.JToolTip var8 = var2.createToolTip();
    int var9 = var8.getDebugGraphicsOptions();
    boolean var10 = var8.requestFocusInWindow();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test409() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test409");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    java.awt.Dimension var9 = var2.getPreferredSize();
    var2.show(false);
    boolean var12 = var2.isMaximumSizeSet();
    var2.reshape(100, 24, 10, 24);
    var2.move(10, 24);
    boolean var21 = var2.requestFocusInWindow();
    var2.setFocusCycleRoot(true);
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var27 = var26.isMaximumSizeSet();
    var26.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var32 = var26.getTransferHandler();
    boolean var33 = var26.hasFocus();
    javax.swing.event.AncestorListener[] var34 = var26.getAncestorListeners();
    java.awt.Dimension var35 = var26.getMinimumSize();
    bierse.view.RunningMessagePanel var39 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var40 = var39.getPreferredSize();
    java.awt.Dimension var41 = var39.getMaximumSize();
    var39.disable();
    var26.putClientProperty((java.lang.Object)100, (java.lang.Object)var39);
    javax.swing.InputVerifier var44 = var39.getInputVerifier();
    boolean var45 = var39.getInheritsPopupMenu();
    var39.setLocation(0, 100);
    boolean var49 = var39.isFocusTraversalPolicyProvider();
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var52.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var59 = var52.location();
    bierse.view.RunningMessagePanel var62 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var63 = var62.isMaximumSizeSet();
    var62.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var68 = var62.getTransferHandler();
    boolean var69 = var62.hasFocus();
    javax.swing.event.AncestorListener[] var70 = var62.getAncestorListeners();
    java.awt.Dimension var71 = var62.getMinimumSize();
    var52.resize(var71);
    var39.setMaximumSize(var71);
    var2.setMaximumSize(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test410() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test410");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    java.awt.peer.ComponentPeer var6 = var2.getPeer();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var8 = var2.areFocusTraversalKeysSet(11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test411() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test411");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    java.awt.Component var11 = var2.getComponentAt(0, 0);
    java.awt.Dimension var12 = var2.minimumSize();
    float var13 = var2.getAlignmentY();
    boolean var14 = var2.isFontSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test412() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test412");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    java.awt.Font var9 = var2.getFont();
    var2.enable();
    boolean var11 = var2.getIgnoreRepaint();
    var2.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", 10, 11);
    bierse.view.RunningMessagePanel var18 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var19 = var18.getPreferredSize();
    javax.swing.JPopupMenu var20 = var18.getComponentPopupMenu();
    java.awt.Rectangle var21 = var18.bounds();
    var18.setSize(0, 24);
    int var25 = var18.getStringHeight();
    var18.repaint(0L, 0, 996, 996, 100);
    int var32 = var18.getHeight();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var34 = var2.add((java.awt.Component)var18, 12);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 24);

  }

  public void test413() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test413");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    javax.swing.event.ListDataListener[] var1 = var0.getListDataListeners();
    bierse.view.RunningMessagePanel var4 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var4.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var11 = var4.location();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    var14.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var20 = var14.getTransferHandler();
    boolean var21 = var14.hasFocus();
    javax.swing.event.AncestorListener[] var22 = var14.getAncestorListeners();
    java.awt.Dimension var23 = var14.getMinimumSize();
    var4.resize(var23);
    int var25 = var0.getIndexOf((java.lang.Object)var23);
    int var26 = var0.getSize();
    var0.removeAllElements();
    java.lang.Object var29 = var0.getElementAt(996);
    bierse.view.RunningMessagePanel var32 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var33 = var32.getPreferredSize();
    javax.swing.JPopupMenu var34 = var32.getComponentPopupMenu();
    java.awt.Rectangle var35 = var32.bounds();
    var32.setSize(0, 24);
    bierse.view.RunningMessagePanel var41 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var42 = var41.isMaximumSizeSet();
    var41.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var47 = var41.getTransferHandler();
    boolean var48 = var41.hasFocus();
    javax.swing.event.AncestorListener[] var49 = var41.getAncestorListeners();
    java.awt.Dimension var50 = var41.getMinimumSize();
    bierse.view.RunningMessagePanel var54 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var55 = var54.getPreferredSize();
    java.awt.Dimension var56 = var54.getMaximumSize();
    var54.disable();
    var41.putClientProperty((java.lang.Object)100, (java.lang.Object)var54);
    javax.swing.InputVerifier var59 = var54.getInputVerifier();
    boolean var60 = var54.getInheritsPopupMenu();
    var54.setLocation(0, 100);
    boolean var64 = var54.isFocusTraversalPolicyProvider();
    var54.list();
    javax.swing.event.AncestorListener[] var66 = var54.getAncestorListeners();
    var54.repaint(100L);
    int var69 = var32.getComponentZOrder((java.awt.Component)var54);
    boolean var70 = var54.isFocusable();
    var0.removeElement((java.lang.Object)var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);

  }

  public void test414() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test414");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    java.awt.Dimension var9 = var2.getPreferredSize();
    int var10 = var2.getWidth();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var14 = var13.isMaximumSizeSet();
    var13.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var19 = var13.getTransferHandler();
    boolean var20 = var13.hasFocus();
    var13.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var23 = var13.getPreferredSize();
    java.awt.ComponentOrientation var24 = var13.getComponentOrientation();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    javax.swing.event.AncestorListener[] var35 = var27.getAncestorListeners();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var39 = var38.isMaximumSizeSet();
    var38.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var44 = var38.getTransferHandler();
    boolean var45 = var38.hasFocus();
    var38.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var48 = var38.getPreferredSize();
    java.awt.ComponentOrientation var49 = var38.getComponentOrientation();
    var13.add((java.awt.Component)var27, (java.lang.Object)var38);
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var54 = var53.getPreferredSize();
    java.awt.Dimension var55 = var53.getMaximumSize();
    var2.add((java.awt.Component)var27, (java.lang.Object)var53, (-1));
    bierse.view.RunningMessagePanel var60 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var60.transferFocus();
    var60.show();
    float var63 = var60.getAlignmentX();
    boolean var66 = var60.contains(0, 24);
    java.awt.Color var67 = var60.getForeground();
    var2.setForeground(var67);
    var2.transferFocusDownCycle();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var70 = var2.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test415() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test415");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    var2.revalidate();
    var2.firePropertyChange("hi!", (short)100, (short)0);
    java.awt.Component var15 = var2.getComponentAt(0, (-1));
    boolean var16 = var2.isDoubleBuffered();
    java.awt.Rectangle var17 = var2.getVisibleRect();
    java.awt.Component.BaselineResizeBehavior var18 = var2.getBaselineResizeBehavior();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isMaximumSizeSet();
    var21.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var27 = var21.getTransferHandler();
    boolean var28 = var21.hasFocus();
    var21.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var31 = var21.getPreferredSize();
    java.awt.ComponentOrientation var32 = var21.getComponentOrientation();
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var36 = var35.isMaximumSizeSet();
    var35.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var41 = var35.getTransferHandler();
    boolean var42 = var35.hasFocus();
    javax.swing.event.AncestorListener[] var43 = var35.getAncestorListeners();
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var47 = var46.isMaximumSizeSet();
    var46.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var52 = var46.getTransferHandler();
    boolean var53 = var46.hasFocus();
    var46.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var56 = var46.getPreferredSize();
    java.awt.ComponentOrientation var57 = var46.getComponentOrientation();
    var21.add((java.awt.Component)var35, (java.lang.Object)var46);
    boolean var59 = var46.isDoubleBuffered();
    bierse.view.RunningMessagePanel var62 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var62.transferFocus();
    var62.show();
    bierse.view.RunningMessagePanel var67 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var68 = var67.getPreferredSize();
    boolean var71 = var67.contains(10, 1);
    java.awt.im.InputMethodRequests var72 = var67.getInputMethodRequests();
    java.awt.Font var73 = var67.getFont();
    var62.setFont(var73);
    var46.setFont(var73);
    var46.setDoubleBuffered(false);
    var46.setBounds(1, 0, 12, (-1));
    bierse.view.RunningMessagePanel var85 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var86 = var85.isMaximumSizeSet();
    var85.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var91 = var85.getTransferHandler();
    boolean var92 = var85.hasFocus();
    javax.swing.event.AncestorListener[] var93 = var85.getAncestorListeners();
    java.awt.Dimension var94 = var85.getMinimumSize();
    java.awt.Point var95 = var85.getLocation();
    java.lang.Object var96 = var46.getClientProperty((java.lang.Object)var85);
    java.lang.Object var97 = var2.getClientProperty((java.lang.Object)var46);
    boolean var98 = var46.isForegroundSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == true);

  }

  public void test416() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test416");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.Font var8 = var2.getFont();
    var2.setMessage("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    boolean var11 = var2.isOptimizedDrawingEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test417() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test417");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    var2.invalidate();
    java.awt.event.FocusListener[] var6 = var2.getFocusListeners();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var10 = var9.isMaximumSizeSet();
    var9.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var15 = var9.getTransferHandler();
    boolean var16 = var9.hasFocus();
    var9.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var19 = var9.getPreferredSize();
    java.awt.ComponentOrientation var20 = var9.getComponentOrientation();
    var9.transferFocus();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    var24.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var30 = var24.getTransferHandler();
    boolean var31 = var24.hasFocus();
    javax.swing.event.AncestorListener[] var32 = var24.getAncestorListeners();
    java.awt.Dimension var33 = var24.getMinimumSize();
    boolean var34 = var24.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    var37.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var47 = var37.getPreferredSize();
    java.awt.Dimension var48 = var24.getSize(var47);
    var9.setSize(var47);
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var53 = var52.getPreferredSize();
    boolean var56 = var52.contains(10, 1);
    java.awt.Insets var57 = var52.getInsets();
    javax.swing.JToolTip var58 = var52.createToolTip();
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var62 = var61.isMaximumSizeSet();
    var61.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var67 = var61.getTransferHandler();
    boolean var68 = var61.hasFocus();
    javax.swing.event.AncestorListener[] var69 = var61.getAncestorListeners();
    var61.enable(false);
    int var72 = var58.getComponentZOrder((java.awt.Component)var61);
    boolean var73 = var58.requestFocusInWindow();
    boolean var74 = var58.isOptimizedDrawingEnabled();
    var2.add((java.awt.Component)var9, (java.lang.Object)var58);
    boolean var76 = var58.isShowing();
    javax.swing.InputVerifier var77 = var58.getInputVerifier();
    var58.firePropertyChange("PanelUI", 10.0d, 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);

  }

  public void test418() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test418");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    boolean var21 = var15.getInheritsPopupMenu();
    boolean var22 = var15.isFocusCycleRoot();
    int var23 = var15.getY();
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var26.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var33 = var26.location();
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var37 = var36.isMaximumSizeSet();
    var36.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var42 = var36.getTransferHandler();
    boolean var43 = var36.hasFocus();
    javax.swing.event.AncestorListener[] var44 = var36.getAncestorListeners();
    java.awt.Dimension var45 = var36.getMinimumSize();
    var26.resize(var45);
    var26.repaint(100L, 1, (-1), 100, 24);
    java.awt.event.HierarchyBoundsListener[] var53 = var26.getHierarchyBoundsListeners();
    java.awt.Color var54 = var26.getBackground();
    var15.setBackground(var54);
    java.awt.FocusTraversalPolicy var56 = var15.getFocusTraversalPolicy();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);

  }

  public void test419() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test419");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    var11.transferFocus();
    var11.setToolTipText("");
    var11.show();
    boolean var32 = var11.isMaximumSizeSet();
    boolean var33 = var11.isFocusTraversalPolicySet();
    boolean var34 = var11.getInheritsPopupMenu();
    boolean var35 = var11.isFocusTraversalPolicySet();
    javax.swing.InputVerifier var36 = var11.getInputVerifier();
    boolean var37 = var11.isFocusable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);

  }

  public void test420() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test420");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    var2.enable();
    int var6 = var2.getY();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var7 = var2.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);

  }

  public void test421() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test421");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.setDoubleBuffered(false);
    java.awt.Dimension var7 = var2.minimumSize();
    bierse.view.KeyMapComboBoxModel var8 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    boolean var13 = var11.isOpaque();
    java.beans.PropertyChangeListener[] var14 = var11.getPropertyChangeListeners();
    var11.setOpaque(true);
    var11.setRequestFocusEnabled(false);
    var8.insertElementAt((java.lang.Object)var11, 1);
    java.lang.Object var21 = var2.getClientProperty((java.lang.Object)var11);
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    boolean var27 = var25.isOpaque();
    javax.swing.InputMap var28 = var25.getInputMap();
    java.beans.PropertyChangeListener[] var30 = var25.getPropertyChangeListeners("");
    bierse.view.RunningMessagePanel var33 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var34 = var33.getPreferredSize();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var37.invalidate();
    java.awt.Dimension var44 = var37.getPreferredSize();
    var33.setPreferredSize(var44);
    java.awt.Dimension var46 = var25.getSize(var44);
    java.lang.String var47 = var25.getUIClassID();
    bierse.view.RunningMessagePanel var51 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var52 = var51.isMaximumSizeSet();
    var51.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var57 = var51.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var60 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var61 = var60.getPreferredSize();
    boolean var62 = var60.isPreferredSizeSet();
    var60.enable();
    var60.transferFocusBackward();
    int var65 = var51.getComponentZOrder((java.awt.Component)var60);
    var51.setEnabled(false);
    java.util.Set var69 = var51.getFocusTraversalKeys(0);
    var25.setFocusTraversalKeys(0, var69);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var11.setFocusTraversalKeys(13, var69);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "PanelUI"+ "'", var47.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test422() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test422");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    java.awt.peer.ComponentPeer var6 = var2.getPeer();
    var2.transferFocusDownCycle();
    var2.transferFocusUpCycle();
    boolean var9 = var2.getIgnoreRepaint();
    boolean var10 = var2.isFontSet();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var13 = var2.getBaseline((-1), 11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test423() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test423");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var8 = var2.isFocusTraversalPolicySet();
    java.awt.event.FocusListener[] var9 = var2.getFocusListeners();
    java.awt.Point var10 = var2.getMousePosition();
    var2.setFocusable(false);
    java.awt.Rectangle var13 = var2.bounds();
    java.awt.Image var16 = var2.createImage(12, 1);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var19.repaint(1L, (-1), (-1), 0, 100);
    boolean var26 = var19.isFocusTraversable();
    bierse.view.RunningMessagePanel var29 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var30 = var29.getPreferredSize();
    boolean var33 = var29.contains(10, 1);
    java.awt.im.InputMethodRequests var34 = var29.getInputMethodRequests();
    var29.revalidate();
    var29.firePropertyChange("hi!", (short)100, (short)0);
    var19.setNextFocusableComponent((java.awt.Component)var29);
    boolean var41 = var19.isFocusable();
    var19.setAutoscrolls(true);
    var19.setAlignmentY(100.0f);
    var19.setVerifyInputWhenFocusTarget(true);
    var19.setRequestFocusEnabled(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setComponentZOrder((java.awt.Component)var19, 10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);

  }

  public void test424() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test424");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.invalidate();
    var2.setFocusable(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.remove(100);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test425() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test425");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.beans.PropertyChangeListener[] var5 = var2.getPropertyChangeListeners();
    boolean var6 = var2.isFocusCycleRoot();
    var2.repaint(0L, (-1), 10, (-1), 10);
    java.awt.Font var13 = var2.getFont();
    javax.swing.KeyStroke[] var14 = var2.getRegisteredKeyStrokes();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test426() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test426");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var3 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var4 = var3.getPreferredSize();
    javax.swing.JPopupMenu var5 = var3.getComponentPopupMenu();
    java.awt.Rectangle var6 = var3.bounds();
    var3.setSize(0, 24);
    boolean var10 = var3.isMinimumSizeSet();
    var0.removeElement((java.lang.Object)var10);
    javax.swing.event.ListDataListener[] var12 = var0.getListDataListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test427() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test427");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    boolean var40 = var27.isDoubleBuffered();
    bierse.view.RunningMessagePanel var43 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var43.transferFocus();
    var43.show();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var49 = var48.getPreferredSize();
    boolean var52 = var48.contains(10, 1);
    java.awt.im.InputMethodRequests var53 = var48.getInputMethodRequests();
    java.awt.Font var54 = var48.getFont();
    var43.setFont(var54);
    var27.setFont(var54);
    java.awt.Image var59 = var27.createImage(100, 1);
    java.awt.Dimension var60 = var27.preferredSize();
    float var61 = var27.getAlignmentX();
    bierse.view.RunningMessagePanel var64 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var65 = var64.isMaximumSizeSet();
    var64.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var70 = var64.getTransferHandler();
    boolean var71 = var64.hasFocus();
    var64.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var74 = var64.getPreferredSize();
    var27.setMaximumSize(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test428() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test428");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    int var7 = var2.countComponents();
    java.awt.Point var9 = var2.getMousePosition(true);
    var2.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var12 = var2.toString();
    java.awt.Font var13 = var2.getFont();
    float var14 = var2.getAlignmentX();
    var2.setEnabled(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var12,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var12.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var12,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);

  }

  public void test429() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test429");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    java.awt.peer.ComponentPeer var6 = var2.getPeer();
    var2.transferFocus();
    java.lang.String var8 = var2.getToolTipText();
    int var9 = var2.getY();
    int var10 = var2.getHeight();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var14 = var13.isMaximumSizeSet();
    var13.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var19 = var13.getTransferHandler();
    boolean var20 = var13.hasFocus();
    var13.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var23 = var13.getPreferredSize();
    java.awt.ComponentOrientation var24 = var13.getComponentOrientation();
    java.lang.String var25 = var13.getName();
    java.awt.Font var26 = var13.getFont();
    var2.setFont(var26);
    java.lang.String var28 = var2.toString();
    boolean var29 = var2.isPaintingForPrint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var28,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var28.equals("bierse.view.RunningMessagePanel[,0,0,0var28,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test430() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test430");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    java.awt.event.MouseMotionListener[] var14 = var2.getMouseMotionListeners();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var18 = var17.getPreferredSize();
    boolean var21 = var17.contains(10, 1);
    java.awt.im.InputMethodRequests var22 = var17.getInputMethodRequests();
    var17.revalidate();
    var17.enable(true);
    java.awt.Point var26 = var17.location();
    bierse.view.RunningMessagePanel var29 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var30 = var29.isMaximumSizeSet();
    boolean var31 = var29.isOpaque();
    java.awt.event.HierarchyListener[] var32 = var29.getHierarchyListeners();
    int var33 = var29.getWidth();
    int var34 = var29.countComponents();
    java.awt.Point var36 = var29.getMousePosition(true);
    var29.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var39 = var29.toString();
    java.awt.Font var40 = var29.getFont();
    var17.setFont(var40);
    java.awt.FontMetrics var42 = var2.getFontMetrics(var40);
    java.awt.Component var45 = var2.getComponentAt(13, 13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var39,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var39.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var39,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);

  }

  public void test431() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test431");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    var2.enable();
    var2.transferFocusBackward();
    java.awt.Dimension var7 = var2.size();
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var10.repaint(1L, (-1), (-1), 0, 100);
    boolean var17 = var10.isFocusTraversable();
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var21 = var20.getPreferredSize();
    boolean var24 = var20.contains(10, 1);
    java.awt.im.InputMethodRequests var25 = var20.getInputMethodRequests();
    var20.revalidate();
    var20.firePropertyChange("hi!", (short)100, (short)0);
    var10.setNextFocusableComponent((java.awt.Component)var20);
    boolean var32 = var10.isFocusable();
    java.awt.Component var33 = var2.add((java.awt.Component)var10);
    var33.setLocation(996, 996);
    var33.resize(13, 11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test432() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test432");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    java.awt.Image var11 = var2.createImage(24, 24);
    boolean var12 = var2.getInheritsPopupMenu();
    java.awt.image.ColorModel var13 = var2.getColorModel();
    var2.firePropertyChange("", 1L, 0L);
    java.awt.Insets var18 = var2.insets();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test433() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test433");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    java.awt.peer.ComponentPeer var6 = var2.getPeer();
    var2.transferFocus();
    java.lang.String var8 = var2.getToolTipText();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    boolean var13 = var11.isOpaque();
    java.beans.PropertyChangeListener[] var14 = var11.getPropertyChangeListeners();
    var11.setOpaque(true);
    java.awt.Insets var17 = var11.insets();
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var21 = var20.isMaximumSizeSet();
    var20.layout();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    var25.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var31 = var25.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var35 = var34.getPreferredSize();
    boolean var36 = var34.isPreferredSizeSet();
    var34.enable();
    var34.transferFocusBackward();
    int var39 = var25.getComponentZOrder((java.awt.Component)var34);
    var25.setEnabled(false);
    java.awt.Graphics var42 = var25.getGraphics();
    var20.remove((java.awt.Component)var25);
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var47 = var46.getPreferredSize();
    boolean var50 = var46.contains(10, 1);
    java.awt.Insets var51 = var46.getInsets();
    javax.swing.JToolTip var52 = var46.createToolTip();
    var46.invalidate();
    var20.remove((java.awt.Component)var46);
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var46);
    boolean var56 = var2.isValid();
    int var57 = var2.getWidth();
    bierse.view.RunningMessagePanel var60 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var60.repaint(1L, (-1), (-1), 0, 100);
    boolean var67 = var60.isFocusTraversable();
    bierse.view.RunningMessagePanel var70 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var71 = var70.getPreferredSize();
    boolean var74 = var70.contains(10, 1);
    java.awt.im.InputMethodRequests var75 = var70.getInputMethodRequests();
    var70.revalidate();
    var70.firePropertyChange("hi!", (short)100, (short)0);
    var60.setNextFocusableComponent((java.awt.Component)var70);
    var2.setNextFocusableComponent((java.awt.Component)var60);
    java.awt.Color var83 = var60.getBackground();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test434() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test434");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.GraphicsConfiguration var13 = var2.getGraphicsConfiguration();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    boolean var18 = var16.isOpaque();
    javax.swing.InputMap var19 = var16.getInputMap();
    java.beans.PropertyChangeListener[] var21 = var16.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var22 = var16.getComponentOrientation();
    var2.applyComponentOrientation(var22);
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var27 = var26.getPreferredSize();
    boolean var28 = var26.isPreferredSizeSet();
    var26.setOpaque(true);
    bierse.view.RunningMessagePanel var33 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var34 = var33.isMaximumSizeSet();
    var33.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var39 = var33.getTransferHandler();
    boolean var40 = var33.hasFocus();
    javax.swing.event.AncestorListener[] var41 = var33.getAncestorListeners();
    java.awt.Dimension var42 = var33.getMinimumSize();
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var47 = var46.getPreferredSize();
    java.awt.Dimension var48 = var46.getMaximumSize();
    var46.disable();
    var33.putClientProperty((java.lang.Object)100, (java.lang.Object)var46);
    javax.swing.InputVerifier var51 = var46.getInputVerifier();
    boolean var52 = var46.getInheritsPopupMenu();
    var46.setLocation(0, 100);
    boolean var56 = var46.isFocusTraversalPolicyProvider();
    var46.list();
    bierse.view.RunningMessagePanel var60 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var60.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var67 = var60.location();
    java.awt.Font var68 = var60.getFont();
    var46.setFont(var68);
    java.awt.FontMetrics var70 = var26.getFontMetrics(var68);
    var2.setFont(var68);
    var2.list();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test435() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test435");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    java.awt.dnd.DropTarget var21 = var15.getDropTarget();
    java.awt.event.MouseListener[] var22 = var15.getMouseListeners();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.remove(100);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test436() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test436");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    java.awt.peer.ComponentPeer var6 = var2.getPeer();
    var2.transferFocus();
    java.lang.String var8 = var2.getToolTipText();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    boolean var13 = var11.isOpaque();
    java.beans.PropertyChangeListener[] var14 = var11.getPropertyChangeListeners();
    var11.setOpaque(true);
    java.awt.Insets var17 = var11.insets();
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var21 = var20.isMaximumSizeSet();
    var20.layout();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    var25.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var31 = var25.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var35 = var34.getPreferredSize();
    boolean var36 = var34.isPreferredSizeSet();
    var34.enable();
    var34.transferFocusBackward();
    int var39 = var25.getComponentZOrder((java.awt.Component)var34);
    var25.setEnabled(false);
    java.awt.Graphics var42 = var25.getGraphics();
    var20.remove((java.awt.Component)var25);
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var47 = var46.getPreferredSize();
    boolean var50 = var46.contains(10, 1);
    java.awt.Insets var51 = var46.getInsets();
    javax.swing.JToolTip var52 = var46.createToolTip();
    var46.invalidate();
    var20.remove((java.awt.Component)var46);
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var46);
    boolean var56 = var2.isValid();
    int var57 = var2.getWidth();
    bierse.view.RunningMessagePanel var60 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var60.repaint(1L, (-1), (-1), 0, 100);
    boolean var67 = var60.isFocusTraversable();
    bierse.view.RunningMessagePanel var70 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var71 = var70.getPreferredSize();
    boolean var74 = var70.contains(10, 1);
    java.awt.im.InputMethodRequests var75 = var70.getInputMethodRequests();
    var70.revalidate();
    var70.firePropertyChange("hi!", (short)100, (short)0);
    var60.setNextFocusableComponent((java.awt.Component)var70);
    var2.setNextFocusableComponent((java.awt.Component)var60);
    java.awt.Component var85 = var60.locate(996, 100);
    boolean var86 = var60.isFocusable();
    java.lang.Object var87 = var60.getTreeLock();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test437() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test437");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var24 = var23.isMaximumSizeSet();
    var23.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var29 = var23.getTransferHandler();
    boolean var30 = var23.hasFocus();
    var23.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var33 = var23.getPreferredSize();
    java.awt.ComponentOrientation var34 = var23.getComponentOrientation();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    javax.swing.event.AncestorListener[] var45 = var37.getAncestorListeners();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var49 = var48.isMaximumSizeSet();
    var48.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var54 = var48.getTransferHandler();
    boolean var55 = var48.hasFocus();
    var48.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var58 = var48.getPreferredSize();
    java.awt.ComponentOrientation var59 = var48.getComponentOrientation();
    var23.add((java.awt.Component)var37, (java.lang.Object)var48);
    bierse.view.RunningMessagePanel var63 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var64 = var63.getPreferredSize();
    java.awt.Dimension var65 = var63.getMaximumSize();
    var48.resize(var65);
    var15.setNextFocusableComponent((java.awt.Component)var48);
    java.awt.Component var70 = var15.locate(24, 996);
    boolean var71 = var15.isManagingFocus();
    var15.resetKeyboardActions();
    boolean var73 = var15.isFocusCycleRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);

  }

  public void test438() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test438");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    java.awt.Rectangle var5 = var2.bounds();
    var2.setSize(0, 24);
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var17 = var11.getTransferHandler();
    boolean var18 = var11.hasFocus();
    javax.swing.event.AncestorListener[] var19 = var11.getAncestorListeners();
    java.awt.Dimension var20 = var11.getMinimumSize();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var25 = var24.getPreferredSize();
    java.awt.Dimension var26 = var24.getMaximumSize();
    var24.disable();
    var11.putClientProperty((java.lang.Object)100, (java.lang.Object)var24);
    javax.swing.InputVerifier var29 = var24.getInputVerifier();
    boolean var30 = var24.getInheritsPopupMenu();
    var24.setLocation(0, 100);
    boolean var34 = var24.isFocusTraversalPolicyProvider();
    var24.list();
    javax.swing.event.AncestorListener[] var36 = var24.getAncestorListeners();
    var24.repaint(100L);
    int var39 = var2.getComponentZOrder((java.awt.Component)var24);
    int var40 = var2.getHeight();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 24);

  }

  public void test439() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test439");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    var2.setAlignmentX(10.0f);
    var2.removeAll();
    java.awt.Point var15 = var2.location();
    int var16 = var2.getX();
    var2.invalidate();
    java.awt.im.InputContext var18 = var2.getInputContext();
    boolean var19 = var2.isDoubleBuffered();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);

  }

  public void test440() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test440");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    var2.invalidate();
    java.awt.event.FocusListener[] var6 = var2.getFocusListeners();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var10 = var9.isMaximumSizeSet();
    var9.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var15 = var9.getTransferHandler();
    boolean var16 = var9.hasFocus();
    var9.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var19 = var9.getPreferredSize();
    java.awt.ComponentOrientation var20 = var9.getComponentOrientation();
    var9.transferFocus();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    var24.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var30 = var24.getTransferHandler();
    boolean var31 = var24.hasFocus();
    javax.swing.event.AncestorListener[] var32 = var24.getAncestorListeners();
    java.awt.Dimension var33 = var24.getMinimumSize();
    boolean var34 = var24.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    var37.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var47 = var37.getPreferredSize();
    java.awt.Dimension var48 = var24.getSize(var47);
    var9.setSize(var47);
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var53 = var52.getPreferredSize();
    boolean var56 = var52.contains(10, 1);
    java.awt.Insets var57 = var52.getInsets();
    javax.swing.JToolTip var58 = var52.createToolTip();
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var62 = var61.isMaximumSizeSet();
    var61.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var67 = var61.getTransferHandler();
    boolean var68 = var61.hasFocus();
    javax.swing.event.AncestorListener[] var69 = var61.getAncestorListeners();
    var61.enable(false);
    int var72 = var58.getComponentZOrder((java.awt.Component)var61);
    boolean var73 = var58.requestFocusInWindow();
    boolean var74 = var58.isOptimizedDrawingEnabled();
    var2.add((java.awt.Component)var9, (java.lang.Object)var58);
    boolean var76 = var58.isOpaque();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      javax.swing.InputMap var78 = var58.getInputMap(24);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);

  }

  public void test441() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test441");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var3 = var2.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var6 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var6.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var13 = var6.location();
    java.awt.Component var14 = var2.findComponentAt(var13);
    var2.setEnabled(true);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var19.transferFocus();
    var19.show();
    float var22 = var19.getAlignmentX();
    boolean var25 = var19.contains(0, 24);
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var29 = var28.getPreferredSize();
    java.awt.Dimension var30 = var28.getMaximumSize();
    java.awt.event.FocusListener[] var31 = var28.getFocusListeners();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var35 = var34.getPreferredSize();
    boolean var38 = var34.contains(10, 1);
    java.awt.im.InputMethodRequests var39 = var34.getInputMethodRequests();
    java.awt.Font var40 = var34.getFont();
    var28.setFont(var40);
    java.awt.FontMetrics var42 = var19.getFontMetrics(var40);
    java.awt.FontMetrics var43 = var2.getFontMetrics(var40);
    java.awt.FocusTraversalPolicy var44 = var2.getFocusTraversalPolicy();
    boolean var45 = var2.getIgnoreRepaint();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var49 = var48.isMaximumSizeSet();
    var48.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var54 = var48.getTransferHandler();
    boolean var55 = var48.hasFocus();
    var48.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var58 = var48.getPreferredSize();
    java.awt.ComponentOrientation var59 = var48.getComponentOrientation();
    bierse.view.RunningMessagePanel var62 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var63 = var62.isMaximumSizeSet();
    var62.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var68 = var62.getTransferHandler();
    boolean var69 = var62.hasFocus();
    var62.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var72 = var62.getPreferredSize();
    java.awt.Dimension var73 = var48.getSize(var72);
    var48.repaint(100L, 1, 0, 100, 24);
    var2.setNextFocusableComponent((java.awt.Component)var48);
    bierse.view.RunningMessagePanel var83 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var84 = var83.isMaximumSizeSet();
    boolean var85 = var83.isOpaque();
    javax.accessibility.AccessibleContext var86 = var83.getAccessibleContext();
    var83.hide();
    boolean var88 = var48.isAncestorOf((java.awt.Component)var83);
    boolean var89 = var48.isFocusTraversable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);

  }

  public void test442() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test442");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.transferFocus();
    var2.show();
    float var5 = var2.getAlignmentX();
    boolean var8 = var2.contains(0, 24);
    java.awt.FocusTraversalPolicy var9 = var2.getFocusTraversalPolicy();
    java.awt.Toolkit var10 = var2.getToolkit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test443() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test443");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var8 = var7.getPreferredSize();
    javax.swing.JPopupMenu var9 = var7.getComponentPopupMenu();
    java.awt.Rectangle var10 = var7.bounds();
    var2.computeVisibleRect(var10);
    var2.removeNotify();
    java.lang.String var13 = var2.getToolTipText();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var14 = var2.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test444() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test444");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    var24.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var24.invalidate();
    java.awt.Dimension var31 = var24.getPreferredSize();
    int var32 = var24.getWidth();
    java.awt.Component var33 = var15.add("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var24);
    var24.enable();
    javax.swing.InputMap var35 = var24.getInputMap();
    boolean var36 = var24.isRequestFocusEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);

  }

  public void test445() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test445");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.beans.PropertyChangeListener[] var5 = var2.getPropertyChangeListeners();
    boolean var6 = var2.isFocusCycleRoot();
    boolean var7 = var2.getIgnoreRepaint();
    java.awt.Component[] var8 = var2.getComponents();
    var2.setDebugGraphicsOptions(24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test446() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test446");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPaintingTile();
    var2.transferFocus();
    var2.transferFocusBackward();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test447() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test447");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    javax.swing.event.ListDataListener[] var1 = var0.getListDataListeners();
    bierse.view.RunningMessagePanel var4 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var4.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var11 = var4.location();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    var14.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var20 = var14.getTransferHandler();
    boolean var21 = var14.hasFocus();
    javax.swing.event.AncestorListener[] var22 = var14.getAncestorListeners();
    java.awt.Dimension var23 = var14.getMinimumSize();
    var4.resize(var23);
    int var25 = var0.getIndexOf((java.lang.Object)var23);
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var29 = var28.isMaximumSizeSet();
    var28.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var34 = var28.getTransferHandler();
    java.awt.Component var37 = var28.getComponentAt(0, 0);
    var0.insertElementAt((java.lang.Object)var28, 0);
    var28.layout();
    bierse.view.RunningMessagePanel var44 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var45 = var44.isMaximumSizeSet();
    boolean var46 = var44.isOpaque();
    javax.swing.InputMap var47 = var44.getInputMap();
    java.beans.PropertyChangeListener[] var49 = var44.getPropertyChangeListeners("");
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var53 = var52.getPreferredSize();
    bierse.view.RunningMessagePanel var56 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var57 = var56.isMaximumSizeSet();
    var56.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var56.invalidate();
    java.awt.Dimension var63 = var56.getPreferredSize();
    var52.setPreferredSize(var63);
    java.awt.Dimension var65 = var44.getSize(var63);
    java.lang.String var66 = var44.getUIClassID();
    bierse.view.RunningMessagePanel var70 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var71 = var70.isMaximumSizeSet();
    var70.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var76 = var70.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var79 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var80 = var79.getPreferredSize();
    boolean var81 = var79.isPreferredSizeSet();
    var79.enable();
    var79.transferFocusBackward();
    int var84 = var70.getComponentZOrder((java.awt.Component)var79);
    var70.setEnabled(false);
    java.util.Set var88 = var70.getFocusTraversalKeys(0);
    var44.setFocusTraversalKeys(0, var88);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var28.setFocusTraversalKeys(13, var88);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "PanelUI"+ "'", var66.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test448() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test448");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    var2.invalidate();
    java.awt.event.FocusListener[] var6 = var2.getFocusListeners();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var10 = var9.isMaximumSizeSet();
    var9.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var15 = var9.getTransferHandler();
    boolean var16 = var9.hasFocus();
    var9.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var19 = var9.getPreferredSize();
    java.awt.ComponentOrientation var20 = var9.getComponentOrientation();
    var9.transferFocus();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    var24.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var30 = var24.getTransferHandler();
    boolean var31 = var24.hasFocus();
    javax.swing.event.AncestorListener[] var32 = var24.getAncestorListeners();
    java.awt.Dimension var33 = var24.getMinimumSize();
    boolean var34 = var24.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var38 = var37.isMaximumSizeSet();
    var37.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var43 = var37.getTransferHandler();
    boolean var44 = var37.hasFocus();
    var37.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var47 = var37.getPreferredSize();
    java.awt.Dimension var48 = var24.getSize(var47);
    var9.setSize(var47);
    bierse.view.RunningMessagePanel var52 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var53 = var52.getPreferredSize();
    boolean var56 = var52.contains(10, 1);
    java.awt.Insets var57 = var52.getInsets();
    javax.swing.JToolTip var58 = var52.createToolTip();
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var62 = var61.isMaximumSizeSet();
    var61.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var67 = var61.getTransferHandler();
    boolean var68 = var61.hasFocus();
    javax.swing.event.AncestorListener[] var69 = var61.getAncestorListeners();
    var61.enable(false);
    int var72 = var58.getComponentZOrder((java.awt.Component)var61);
    boolean var73 = var58.requestFocusInWindow();
    boolean var74 = var58.isOptimizedDrawingEnabled();
    var2.add((java.awt.Component)var9, (java.lang.Object)var58);
    boolean var76 = var58.isShowing();
    javax.swing.InputVerifier var77 = var58.getInputVerifier();
    var58.repaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);

  }

  public void test449() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test449");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    java.lang.String var14 = var2.getName();
    bierse.view.RunningMessagePanel var18 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var19 = var18.isMaximumSizeSet();
    boolean var20 = var18.isOpaque();
    javax.swing.InputMap var21 = var18.getInputMap();
    java.beans.PropertyChangeListener[] var23 = var18.getPropertyChangeListeners("");
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var27 = var26.getPreferredSize();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var31 = var30.isMaximumSizeSet();
    var30.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var30.invalidate();
    java.awt.Dimension var37 = var30.getPreferredSize();
    var26.setPreferredSize(var37);
    java.awt.Dimension var39 = var18.getSize(var37);
    java.lang.String var40 = var18.getUIClassID();
    bierse.view.RunningMessagePanel var44 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var45 = var44.isMaximumSizeSet();
    var44.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var50 = var44.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var54 = var53.getPreferredSize();
    boolean var55 = var53.isPreferredSizeSet();
    var53.enable();
    var53.transferFocusBackward();
    int var58 = var44.getComponentZOrder((java.awt.Component)var53);
    var44.setEnabled(false);
    java.util.Set var62 = var44.getFocusTraversalKeys(0);
    var18.setFocusTraversalKeys(0, var62);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setFocusTraversalKeys(11, var62);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "PanelUI"+ "'", var40.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test450() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test450");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    boolean var29 = var2.requestFocus(false);
    var2.removeNotify();
    java.awt.ComponentOrientation var31 = var2.getComponentOrientation();
    java.awt.Component var34 = var2.findComponentAt(0, (-1));
    var2.show(false);
    boolean var37 = var2.getVerifyInputWhenFocusTarget();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);

  }

  public void test451() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test451");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    boolean var40 = var2.getFocusTraversalKeysEnabled();
    bierse.view.RunningMessagePanel var44 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var44.repaint(1L, (-1), (-1), 0, 100);
    boolean var51 = var44.isFocusTraversable();
    var44.show(false);
    java.awt.Dimension var54 = var44.preferredSize();
    java.awt.Component var55 = var2.add("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var44);
    int var56 = var44.getDebugGraphicsOptions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 0);

  }

  public void test452() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test452");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    java.awt.event.ContainerListener[] var7 = var2.getContainerListeners();
    java.awt.Dimension var8 = var2.getMaximumSize();
    boolean var9 = var2.isRequestFocusEnabled();
    boolean var10 = var2.requestDefaultFocus();
    bierse.view.RunningMessagePanel var13 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var14 = var13.getPreferredSize();
    java.awt.Point var15 = var13.getMousePosition();
    var13.revalidate();
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.layout();
    var19.invalidate();
    var13.setNextFocusableComponent((java.awt.Component)var19);
    bierse.view.RunningMessagePanel var26 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var27 = var26.getPreferredSize();
    boolean var30 = var26.contains(10, 1);
    java.awt.Insets var31 = var26.getInsets();
    javax.swing.JToolTip var32 = var26.createToolTip();
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var36 = var35.isMaximumSizeSet();
    var35.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var41 = var35.getTransferHandler();
    boolean var42 = var35.hasFocus();
    var35.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var45 = var35.getPreferredSize();
    java.awt.ComponentOrientation var46 = var35.getComponentOrientation();
    bierse.view.RunningMessagePanel var49 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var50 = var49.isMaximumSizeSet();
    var49.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var55 = var49.getTransferHandler();
    boolean var56 = var49.hasFocus();
    javax.swing.event.AncestorListener[] var57 = var49.getAncestorListeners();
    bierse.view.RunningMessagePanel var60 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var61 = var60.isMaximumSizeSet();
    var60.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var66 = var60.getTransferHandler();
    boolean var67 = var60.hasFocus();
    var60.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var70 = var60.getPreferredSize();
    java.awt.ComponentOrientation var71 = var60.getComponentOrientation();
    var35.add((java.awt.Component)var49, (java.lang.Object)var60);
    bierse.view.RunningMessagePanel var75 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var76 = var75.getPreferredSize();
    java.awt.Dimension var77 = var75.getMaximumSize();
    var60.resize(var77);
    var32.setPreferredSize(var77);
    java.awt.Dimension var80 = var13.getSize(var77);
    var2.setPreferredSize(var77);
    var2.resize(10, 24);
    java.awt.Component var87 = var2.locate(10, 0);
    boolean var88 = var2.isBackgroundSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);

  }

  public void test453() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test453");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var2.invalidate();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var20 = var19.isMaximumSizeSet();
    var19.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var25 = var19.getWidth();
    java.awt.Component[] var26 = var19.getComponents();
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var26);
    boolean var29 = var2.requestFocus(false);
    javax.swing.InputMap var30 = var2.getInputMap();
    var2.reshape(996, 100, 12, 996);
    var2.show();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test454() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test454");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    var2.revalidate();
    var2.enable(true);
    java.awt.Point var11 = var2.location();
    var2.paintImmediately(10, 13, 996, 996);
    var2.repaint(10L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test455() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test455");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    var2.enableInputMethods(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test456() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test456");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    java.awt.Rectangle var5 = var2.bounds();
    var2.setSize(0, 24);
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    var11.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var17 = var11.getTransferHandler();
    boolean var18 = var11.hasFocus();
    javax.swing.event.AncestorListener[] var19 = var11.getAncestorListeners();
    java.awt.Dimension var20 = var11.getMinimumSize();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var25 = var24.getPreferredSize();
    java.awt.Dimension var26 = var24.getMaximumSize();
    var24.disable();
    var11.putClientProperty((java.lang.Object)100, (java.lang.Object)var24);
    javax.swing.InputVerifier var29 = var24.getInputVerifier();
    boolean var30 = var24.getInheritsPopupMenu();
    var24.setLocation(0, 100);
    boolean var34 = var24.isFocusTraversalPolicyProvider();
    var24.list();
    javax.swing.event.AncestorListener[] var36 = var24.getAncestorListeners();
    var24.repaint(100L);
    int var39 = var2.getComponentZOrder((java.awt.Component)var24);
    bierse.view.RunningMessagePanel var42 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var43 = var42.isMaximumSizeSet();
    var42.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var48 = var42.getTransferHandler();
    boolean var49 = var42.hasFocus();
    javax.swing.event.AncestorListener[] var50 = var42.getAncestorListeners();
    java.awt.Dimension var51 = var42.getMinimumSize();
    bierse.view.RunningMessagePanel var55 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var56 = var55.getPreferredSize();
    java.awt.Dimension var57 = var55.getMaximumSize();
    var55.disable();
    var42.putClientProperty((java.lang.Object)100, (java.lang.Object)var55);
    javax.swing.InputVerifier var60 = var55.getInputVerifier();
    bierse.view.RunningMessagePanel var64 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var65 = var64.isMaximumSizeSet();
    var64.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var64.invalidate();
    java.awt.Dimension var71 = var64.getPreferredSize();
    int var72 = var64.getWidth();
    java.awt.Component var73 = var55.add("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var64);
    java.awt.Rectangle var74 = var64.getVisibleRect();
    var24.setBounds(var74);
    var24.list();
    var24.repaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test457() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test457");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    var2.enable();
    javax.accessibility.AccessibleContext var6 = var2.getAccessibleContext();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var9.transferFocus();
    var9.show();
    float var12 = var9.getAlignmentX();
    var9.repaint(0L, 10, 0, 10, (-1));
    boolean var19 = var9.isEnabled();
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var23 = var22.getPreferredSize();
    javax.swing.JPopupMenu var24 = var22.getComponentPopupMenu();
    java.awt.Rectangle var25 = var22.bounds();
    java.awt.Rectangle var26 = var9.getBounds(var25);
    var2.computeVisibleRect(var26);
    boolean var29 = var2.requestFocus(false);
    java.awt.Rectangle var30 = var2.getVisibleRect();
    java.awt.Component.BaselineResizeBehavior var31 = var2.getBaselineResizeBehavior();
    javax.swing.border.Border var32 = var2.getBorder();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);

  }

  public void test458() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test458");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    boolean var5 = var2.isEnabled();
    javax.swing.JRootPane var6 = var2.getRootPane();
    var2.requestFocus();
    int var10 = var2.getBaseline(0, 12);
    var2.setMessage("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=41,maximumSize=,minimumSize=,preferredSize=]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));

  }

  public void test459() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test459");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    java.awt.image.VolatileImage var22 = var15.createVolatileImage(100, 24);
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var26 = var25.getPreferredSize();
    var15.setMinimumSize(var26);
    var15.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", (byte)0, (byte)1);
    var15.revalidate();
    java.awt.Component[] var33 = var15.getComponents();
    javax.swing.JToolTip var34 = var15.createToolTip();
    bierse.view.RunningMessagePanel var37 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var38 = var37.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var41 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var41.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var48 = var41.location();
    java.awt.Component var49 = var37.findComponentAt(var48);
    var37.setEnabled(true);
    var37.show();
    float var53 = var37.getAlignmentY();
    bierse.view.RunningMessagePanel var56 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var57 = var56.getPreferredSize();
    boolean var60 = var56.contains(10, 1);
    java.awt.im.InputMethodRequests var61 = var56.getInputMethodRequests();
    boolean var62 = var56.getInheritsPopupMenu();
    java.awt.Dimension var63 = var56.getSize();
    java.awt.Dimension var64 = var37.getSize(var63);
    var15.setSize(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test460() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test460");


    bierse.view.MyKeyMap var2 = new bierse.view.MyKeyMap("bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", 996);

  }

  public void test461() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test461");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    java.awt.peer.ComponentPeer var6 = var2.getPeer();
    var2.transferFocus();
    java.lang.String var8 = var2.getToolTipText();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    boolean var13 = var11.isOpaque();
    java.beans.PropertyChangeListener[] var14 = var11.getPropertyChangeListeners();
    var11.setOpaque(true);
    java.awt.Insets var17 = var11.insets();
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var21 = var20.isMaximumSizeSet();
    var20.layout();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    var25.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var31 = var25.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var35 = var34.getPreferredSize();
    boolean var36 = var34.isPreferredSizeSet();
    var34.enable();
    var34.transferFocusBackward();
    int var39 = var25.getComponentZOrder((java.awt.Component)var34);
    var25.setEnabled(false);
    java.awt.Graphics var42 = var25.getGraphics();
    var20.remove((java.awt.Component)var25);
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var47 = var46.getPreferredSize();
    boolean var50 = var46.contains(10, 1);
    java.awt.Insets var51 = var46.getInsets();
    javax.swing.JToolTip var52 = var46.createToolTip();
    var46.invalidate();
    var20.remove((java.awt.Component)var46);
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var46);
    boolean var56 = var46.isFocusOwner();
    var46.setEnabled(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);

  }

  public void test462() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test462");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    javax.swing.event.ListDataListener[] var1 = var0.getListDataListeners();
    bierse.view.RunningMessagePanel var4 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var4.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var11 = var4.location();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    var14.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var20 = var14.getTransferHandler();
    boolean var21 = var14.hasFocus();
    javax.swing.event.AncestorListener[] var22 = var14.getAncestorListeners();
    java.awt.Dimension var23 = var14.getMinimumSize();
    var4.resize(var23);
    int var25 = var0.getIndexOf((java.lang.Object)var23);
    var0.removeElementAt(1);
    java.lang.Object var29 = var0.getElementAt(11);
    bierse.view.RunningMessagePanel var32 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var33 = var32.getPreferredSize();
    javax.swing.JPopupMenu var34 = var32.getComponentPopupMenu();
    java.awt.Rectangle var35 = var32.bounds();
    var32.setSize(0, 24);
    javax.swing.TransferHandler var39 = var32.getTransferHandler();
    var32.setFocusTraversalPolicyProvider(false);
    var0.addElement((java.lang.Object)false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);

  }

  public void test463() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test463");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    java.awt.Rectangle var5 = var2.bounds();
    java.awt.Insets var6 = var2.insets();
    int var9 = var2.getBaseline(996, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));

  }

  public void test464() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test464");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.requestFocusInWindow();
    boolean var12 = var2.contains(12, 12);
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    boolean var19 = var15.contains(10, 1);
    java.awt.im.InputMethodRequests var20 = var15.getInputMethodRequests();
    var15.revalidate();
    var15.enable(true);
    java.awt.Point var24 = var15.location();
    java.awt.Dimension var25 = var15.preferredSize();
    java.awt.Font var26 = var15.getFont();
    java.awt.FontMetrics var27 = var2.getFontMetrics(var26);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      javax.swing.InputMap var29 = var2.getInputMap(24);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test465() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test465");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    var2.enable();
    javax.accessibility.AccessibleContext var6 = var2.getAccessibleContext();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var10 = var9.isMaximumSizeSet();
    var9.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var15 = var9.getTransferHandler();
    boolean var16 = var9.hasFocus();
    var9.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var19 = var9.getPreferredSize();
    java.awt.ComponentOrientation var20 = var9.getComponentOrientation();
    bierse.view.RunningMessagePanel var23 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var24 = var23.isMaximumSizeSet();
    var23.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var29 = var23.getTransferHandler();
    boolean var30 = var23.hasFocus();
    javax.swing.event.AncestorListener[] var31 = var23.getAncestorListeners();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var35 = var34.isMaximumSizeSet();
    var34.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var40 = var34.getTransferHandler();
    boolean var41 = var34.hasFocus();
    var34.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var44 = var34.getPreferredSize();
    java.awt.ComponentOrientation var45 = var34.getComponentOrientation();
    var9.add((java.awt.Component)var23, (java.lang.Object)var34);
    boolean var47 = var34.isDoubleBuffered();
    bierse.view.RunningMessagePanel var50 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var50.transferFocus();
    var50.show();
    bierse.view.RunningMessagePanel var55 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var56 = var55.getPreferredSize();
    boolean var59 = var55.contains(10, 1);
    java.awt.im.InputMethodRequests var60 = var55.getInputMethodRequests();
    java.awt.Font var61 = var55.getFont();
    var50.setFont(var61);
    var34.setFont(var61);
    java.awt.FontMetrics var64 = var2.getFontMetrics(var61);
    boolean var65 = var2.isFocusTraversalPolicyProvider();
    java.awt.Container var66 = var2.getTopLevelAncestor();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);

  }

  public void test466() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test466");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    var2.transferFocus();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var18 = var17.isMaximumSizeSet();
    var17.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var23 = var17.getTransferHandler();
    boolean var24 = var17.hasFocus();
    javax.swing.event.AncestorListener[] var25 = var17.getAncestorListeners();
    java.awt.Dimension var26 = var17.getMinimumSize();
    boolean var27 = var17.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var31 = var30.isMaximumSizeSet();
    var30.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var36 = var30.getTransferHandler();
    boolean var37 = var30.hasFocus();
    var30.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var40 = var30.getPreferredSize();
    java.awt.Dimension var41 = var17.getSize(var40);
    var2.setSize(var40);
    var2.nextFocus();
    boolean var44 = var2.isManagingFocus();
    var2.show(false);
    bierse.view.RunningMessagePanel var49 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var50 = var49.getPreferredSize();
    boolean var51 = var49.isPreferredSizeSet();
    bierse.view.RunningMessagePanel var54 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var55 = var54.isMaximumSizeSet();
    boolean var56 = var54.isOpaque();
    java.beans.PropertyChangeListener[] var57 = var54.getPropertyChangeListeners();
    var54.setOpaque(true);
    java.awt.Insets var60 = var54.insets();
    java.awt.Insets var61 = var49.getInsets(var60);
    var49.resetKeyboardActions();
    java.awt.im.InputContext var63 = var49.getInputContext();
    java.awt.Component var64 = var2.add((java.awt.Component)var49);
    var49.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", 0.0f, 10.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test467() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test467");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    java.awt.event.MouseWheelListener[] var3 = var2.getMouseWheelListeners();
    bierse.view.RunningMessagePanel var6 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var6.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var13 = var6.location();
    java.awt.Component var14 = var2.findComponentAt(var13);
    var2.setEnabled(true);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var19.transferFocus();
    var19.show();
    float var22 = var19.getAlignmentX();
    boolean var25 = var19.contains(0, 24);
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var29 = var28.getPreferredSize();
    java.awt.Dimension var30 = var28.getMaximumSize();
    java.awt.event.FocusListener[] var31 = var28.getFocusListeners();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var35 = var34.getPreferredSize();
    boolean var38 = var34.contains(10, 1);
    java.awt.im.InputMethodRequests var39 = var34.getInputMethodRequests();
    java.awt.Font var40 = var34.getFont();
    var28.setFont(var40);
    java.awt.FontMetrics var42 = var19.getFontMetrics(var40);
    java.awt.FontMetrics var43 = var2.getFontMetrics(var40);
    java.awt.FocusTraversalPolicy var44 = var2.getFocusTraversalPolicy();
    boolean var45 = var2.getIgnoreRepaint();
    bierse.view.RunningMessagePanel var48 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var49 = var48.isMaximumSizeSet();
    var48.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var54 = var48.getTransferHandler();
    boolean var55 = var48.hasFocus();
    var48.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var58 = var48.getPreferredSize();
    java.awt.ComponentOrientation var59 = var48.getComponentOrientation();
    bierse.view.RunningMessagePanel var62 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var63 = var62.isMaximumSizeSet();
    var62.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var68 = var62.getTransferHandler();
    boolean var69 = var62.hasFocus();
    var62.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var72 = var62.getPreferredSize();
    java.awt.Dimension var73 = var48.getSize(var72);
    var48.repaint(100L, 1, 0, 100, 24);
    var2.setNextFocusableComponent((java.awt.Component)var48);
    bierse.view.RunningMessagePanel var83 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var84 = var83.isMaximumSizeSet();
    boolean var85 = var83.isOpaque();
    javax.accessibility.AccessibleContext var86 = var83.getAccessibleContext();
    var83.hide();
    boolean var88 = var48.isAncestorOf((java.awt.Component)var83);
    var83.enable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);

  }

  public void test468() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test468");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    var2.setAlignmentY(10.0f);
    var2.setInheritsPopupMenu(false);
    javax.accessibility.AccessibleContext var18 = var2.getAccessibleContext();
    boolean var19 = var2.isEnabled();
    java.awt.Font var20 = var2.getFont();
    java.awt.Image var23 = var2.createImage(1, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test469() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test469");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.setDebugGraphicsOptions(10);
    java.lang.Object var5 = var2.getTreeLock();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var9 = var8.isMaximumSizeSet();
    var8.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var14 = var8.getTransferHandler();
    boolean var15 = var8.hasFocus();
    javax.swing.event.AncestorListener[] var16 = var8.getAncestorListeners();
    java.awt.Dimension var17 = var8.getMinimumSize();
    var2.setPreferredSize(var17);
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isMaximumSizeSet();
    var21.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var27 = var21.getTransferHandler();
    boolean var28 = var21.hasFocus();
    var21.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var31 = var21.getPreferredSize();
    java.awt.ComponentOrientation var32 = var21.getComponentOrientation();
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var36 = var35.isMaximumSizeSet();
    var35.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var41 = var35.getTransferHandler();
    boolean var42 = var35.hasFocus();
    var35.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var45 = var35.getPreferredSize();
    java.awt.Dimension var46 = var21.getSize(var45);
    java.awt.image.VolatileImage var49 = var21.createVolatileImage((-1), (-1));
    var21.repaint(100L);
    javax.swing.InputMap var52 = var21.getInputMap();
    bierse.view.RunningMessagePanel var55 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var56 = var55.isMaximumSizeSet();
    bierse.view.RunningMessagePanel var59 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var60 = var59.isMaximumSizeSet();
    boolean var61 = var59.isOpaque();
    java.awt.event.HierarchyListener[] var62 = var59.getHierarchyListeners();
    int var63 = var59.countComponents();
    java.awt.event.HierarchyBoundsListener[] var64 = var59.getHierarchyBoundsListeners();
    bierse.view.RunningMessagePanel var67 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var68 = var67.isMaximumSizeSet();
    boolean var69 = var67.isOpaque();
    java.awt.event.HierarchyListener[] var70 = var67.getHierarchyListeners();
    int var71 = var67.getWidth();
    java.awt.event.ContainerListener[] var72 = var67.getContainerListeners();
    java.awt.Dimension var73 = var67.getMaximumSize();
    var59.setMinimumSize(var73);
    java.awt.Dimension var75 = var55.getSize(var73);
    bierse.view.RunningMessagePanel var78 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var78.repaint(1L, (-1), (-1), 0, 100);
    boolean var85 = var78.isFocusTraversable();
    javax.swing.ActionMap var86 = var78.getActionMap();
    var55.setActionMap(var86);
    boolean var88 = var55.isMaximumSizeSet();
    java.awt.Dimension var89 = var55.size();
    java.awt.Dimension var90 = var21.getSize(var89);
    var2.setMaximumSize(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test470() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test470");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.countComponents();
    java.awt.event.HierarchyBoundsListener[] var7 = var2.getHierarchyBoundsListeners();
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var11 = var10.getPreferredSize();
    boolean var12 = var10.isPreferredSizeSet();
    var10.enable();
    javax.accessibility.AccessibleContext var14 = var10.getAccessibleContext();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var17.transferFocus();
    var17.show();
    float var20 = var17.getAlignmentX();
    var17.repaint(0L, 10, 0, 10, (-1));
    boolean var27 = var17.isEnabled();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var31 = var30.getPreferredSize();
    javax.swing.JPopupMenu var32 = var30.getComponentPopupMenu();
    java.awt.Rectangle var33 = var30.bounds();
    java.awt.Rectangle var34 = var17.getBounds(var33);
    var10.computeVisibleRect(var34);
    var2.scrollRectToVisible(var34);
    var2.resetKeyboardActions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test471() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test471");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.im.InputMethodRequests var7 = var2.getInputMethodRequests();
    java.awt.event.FocusListener[] var8 = var2.getFocusListeners();
    java.awt.Font var9 = var2.getFont();
    java.beans.PropertyChangeListener[] var11 = var2.getPropertyChangeListeners("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    boolean var12 = var2.isValidateRoot();
    java.awt.Toolkit var13 = var2.getToolkit();
    javax.swing.KeyStroke[] var14 = var2.getRegisteredKeyStrokes();
    bierse.view.RunningMessagePanel var17 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var18 = var17.isMaximumSizeSet();
    var17.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var23 = var17.getTransferHandler();
    boolean var24 = var17.hasFocus();
    var17.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var27 = var17.getPreferredSize();
    java.awt.ComponentOrientation var28 = var17.getComponentOrientation();
    java.lang.String var29 = var17.getName();
    java.awt.Font var30 = var17.getFont();
    javax.swing.ActionMap var31 = var17.getActionMap();
    java.awt.Component var33 = var2.add((java.awt.Component)var17, (-1));
    boolean var34 = var2.isOpaque();
    float var35 = var2.getAlignmentY();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0.5f);

  }

  public void test472() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test472");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    java.awt.peer.ComponentPeer var6 = var2.getPeer();
    var2.transferFocus();
    java.lang.String var8 = var2.getToolTipText();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    boolean var13 = var11.isOpaque();
    java.beans.PropertyChangeListener[] var14 = var11.getPropertyChangeListeners();
    var11.setOpaque(true);
    java.awt.Insets var17 = var11.insets();
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var21 = var20.isMaximumSizeSet();
    var20.layout();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    var25.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var31 = var25.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var35 = var34.getPreferredSize();
    boolean var36 = var34.isPreferredSizeSet();
    var34.enable();
    var34.transferFocusBackward();
    int var39 = var25.getComponentZOrder((java.awt.Component)var34);
    var25.setEnabled(false);
    java.awt.Graphics var42 = var25.getGraphics();
    var20.remove((java.awt.Component)var25);
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var47 = var46.getPreferredSize();
    boolean var50 = var46.contains(10, 1);
    java.awt.Insets var51 = var46.getInsets();
    javax.swing.JToolTip var52 = var46.createToolTip();
    var46.invalidate();
    var20.remove((java.awt.Component)var46);
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var46);
    var46.addNotify();
    java.awt.Insets var57 = var46.getInsets();
    javax.swing.event.AncestorListener[] var58 = var46.getAncestorListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test473() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test473");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    boolean var40 = var2.isDoubleBuffered();
    int var41 = var2.getHeight();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      javax.swing.InputMap var43 = var2.getInputMap(12);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);

  }

  public void test474() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test474");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.repaint(1L, (-1), (-1), 0, 100);
    boolean var9 = var2.isFocusTraversable();
    var2.show(false);
    var2.setIgnoreRepaint(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test475() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test475");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var8 = var2.getWidth();
    boolean var11 = var2.inside(24, 1);
    java.awt.image.VolatileImage var14 = var2.createVolatileImage(0, 1);
    java.lang.String var15 = var2.getUIClassID();
    bierse.view.RunningMessagePanel var18 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var19 = var18.isMaximumSizeSet();
    boolean var20 = var18.isOpaque();
    java.awt.event.HierarchyListener[] var21 = var18.getHierarchyListeners();
    int var22 = var18.getWidth();
    var18.firePropertyChange("hi!", ' ', ' ');
    javax.accessibility.AccessibleContext var27 = var18.getAccessibleContext();
    var18.resize(100, 0);
    java.awt.Dimension var31 = var18.getMaximumSize();
    var2.setMaximumSize(var31);
    int var33 = var2.getHeight();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "PanelUI"+ "'", var15.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);

  }

  public void test476() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test476");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    int var6 = var2.getWidth();
    int var7 = var2.countComponents();
    java.awt.Point var9 = var2.getMousePosition(true);
    var2.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    var2.requestFocus();
    java.awt.Color var13 = var2.getForeground();
    javax.swing.KeyStroke[] var14 = var2.getRegisteredKeyStrokes();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test477() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test477");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var8 = var7.isMaximumSizeSet();
    var7.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var13 = var7.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var17 = var16.getPreferredSize();
    boolean var18 = var16.isPreferredSizeSet();
    var16.enable();
    var16.transferFocusBackward();
    int var21 = var7.getComponentZOrder((java.awt.Component)var16);
    var7.setEnabled(false);
    java.awt.Graphics var24 = var7.getGraphics();
    var2.remove((java.awt.Component)var7);
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var29 = var28.getPreferredSize();
    boolean var32 = var28.contains(10, 1);
    java.awt.Insets var33 = var28.getInsets();
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var37 = var36.getPreferredSize();
    java.awt.Point var38 = var36.getMousePosition();
    var36.revalidate();
    java.awt.Component[] var40 = var36.getComponents();
    java.awt.event.KeyListener[] var41 = var36.getKeyListeners();
    var2.putClientProperty((java.lang.Object)var28, (java.lang.Object)var41);
    bierse.view.RunningMessagePanel var45 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var46 = var45.getPreferredSize();
    boolean var47 = var45.isPreferredSizeSet();
    bierse.view.RunningMessagePanel var50 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var51 = var50.isMaximumSizeSet();
    boolean var52 = var50.isOpaque();
    java.beans.PropertyChangeListener[] var53 = var50.getPropertyChangeListeners();
    var50.setOpaque(true);
    java.awt.Insets var56 = var50.insets();
    java.awt.Insets var57 = var45.getInsets(var56);
    var45.resetKeyboardActions();
    java.awt.im.InputContext var59 = var45.getInputContext();
    bierse.view.RunningMessagePanel var62 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var63 = var62.getPreferredSize();
    java.awt.Dimension var64 = var45.getSize(var63);
    var28.setPreferredSize(var64);
    int var66 = var28.getStringHeight();
    var28.setAlignmentX((-1.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 24);

  }

  public void test478() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test478");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.revalidate();
    var2.invalidate();
    java.awt.Insets var7 = var2.insets();
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var11 = var10.isMaximumSizeSet();
    var10.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var10.invalidate();
    java.awt.Dimension var17 = var10.getPreferredSize();
    int var18 = var10.getWidth();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isMaximumSizeSet();
    var21.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var27 = var21.getTransferHandler();
    boolean var28 = var21.hasFocus();
    var21.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var31 = var21.getPreferredSize();
    java.awt.ComponentOrientation var32 = var21.getComponentOrientation();
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var36 = var35.isMaximumSizeSet();
    var35.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var41 = var35.getTransferHandler();
    boolean var42 = var35.hasFocus();
    javax.swing.event.AncestorListener[] var43 = var35.getAncestorListeners();
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var47 = var46.isMaximumSizeSet();
    var46.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var52 = var46.getTransferHandler();
    boolean var53 = var46.hasFocus();
    var46.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var56 = var46.getPreferredSize();
    java.awt.ComponentOrientation var57 = var46.getComponentOrientation();
    var21.add((java.awt.Component)var35, (java.lang.Object)var46);
    bierse.view.RunningMessagePanel var61 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var62 = var61.getPreferredSize();
    java.awt.Dimension var63 = var61.getMaximumSize();
    var10.add((java.awt.Component)var35, (java.lang.Object)var61, (-1));
    bierse.view.RunningMessagePanel var68 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var68.transferFocus();
    var68.show();
    float var71 = var68.getAlignmentX();
    boolean var74 = var68.contains(0, 24);
    java.awt.Color var75 = var68.getForeground();
    var10.setForeground(var75);
    var2.setBackground(var75);
    javax.swing.JRootPane var78 = var2.getRootPane();
    var2.nextFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);

  }

  public void test479() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test479");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var2.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var9 = var2.location();
    var2.setAlignmentX(0.5f);
    var2.removeNotify();
    boolean var13 = var2.isShowing();
    boolean var14 = var2.isFocusTraversalPolicyProvider();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test480() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test480");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var6 = var2.contains(10, 1);
    java.awt.Insets var7 = var2.getInsets();
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var11 = var10.isMaximumSizeSet();
    var10.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var16 = var10.getTransferHandler();
    boolean var17 = var10.hasFocus();
    var10.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var20 = var10.getPreferredSize();
    java.awt.ComponentOrientation var21 = var10.getComponentOrientation();
    var10.transferFocus();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    var25.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var31 = var25.getTransferHandler();
    boolean var32 = var25.hasFocus();
    javax.swing.event.AncestorListener[] var33 = var25.getAncestorListeners();
    java.awt.Dimension var34 = var25.getMinimumSize();
    boolean var35 = var25.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var39 = var38.isMaximumSizeSet();
    var38.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var44 = var38.getTransferHandler();
    boolean var45 = var38.hasFocus();
    var38.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var48 = var38.getPreferredSize();
    java.awt.Dimension var49 = var25.getSize(var48);
    var10.setSize(var48);
    var2.setSize(var48);
    int var52 = var2.getHeight();
    var2.disable();
    bierse.view.RunningMessagePanel var56 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var57 = var56.isMaximumSizeSet();
    boolean var58 = var56.isOpaque();
    javax.swing.InputMap var59 = var56.getInputMap();
    java.beans.PropertyChangeListener[] var61 = var56.getPropertyChangeListeners("");
    java.awt.ComponentOrientation var62 = var56.getComponentOrientation();
    var56.transferFocusBackward();
    int var64 = var2.getComponentZOrder((java.awt.Component)var56);
    int var65 = var56.getY();
    var56.doLayout();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);

  }

  public void test481() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test481");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    javax.swing.InputVerifier var20 = var15.getInputVerifier();
    boolean var21 = var15.getInheritsPopupMenu();
    var15.setLocation(0, 100);
    boolean var25 = var15.isFocusTraversalPolicyProvider();
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var29 = var28.isMaximumSizeSet();
    var28.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var34 = var28.getTransferHandler();
    boolean var35 = var28.hasFocus();
    javax.swing.event.AncestorListener[] var36 = var28.getAncestorListeners();
    java.awt.Dimension var37 = var28.getMinimumSize();
    boolean var38 = var28.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var41 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var42 = var41.isMaximumSizeSet();
    var41.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var47 = var41.getTransferHandler();
    boolean var48 = var41.hasFocus();
    var41.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var51 = var41.getPreferredSize();
    java.awt.Dimension var52 = var28.getSize(var51);
    var15.setSize(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test482() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test482");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 10);
    var2.reshape(100, 100, 1, 0);
    java.awt.Dimension var8 = var2.getMaximumSize();
    java.awt.Point var10 = var2.getMousePosition(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test483() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test483");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    javax.swing.event.AncestorListener[] var10 = var2.getAncestorListeners();
    java.awt.Dimension var11 = var2.getMinimumSize();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var15.getMaximumSize();
    var15.disable();
    var2.putClientProperty((java.lang.Object)100, (java.lang.Object)var15);
    var15.setEnabled(false);
    boolean var22 = var15.isMinimumSizeSet();
    javax.swing.KeyStroke[] var23 = var15.getRegisteredKeyStrokes();
    var15.show();
    javax.swing.TransferHandler var25 = var15.getTransferHandler();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test484() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test484");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.layout();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var8 = var7.isMaximumSizeSet();
    var7.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var13 = var7.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var17 = var16.getPreferredSize();
    boolean var18 = var16.isPreferredSizeSet();
    var16.enable();
    var16.transferFocusBackward();
    int var21 = var7.getComponentZOrder((java.awt.Component)var16);
    var7.setEnabled(false);
    java.awt.Graphics var24 = var7.getGraphics();
    var2.remove((java.awt.Component)var7);
    bierse.view.RunningMessagePanel var28 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var29 = var28.getPreferredSize();
    boolean var32 = var28.contains(10, 1);
    java.awt.Insets var33 = var28.getInsets();
    bierse.view.RunningMessagePanel var36 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var37 = var36.getPreferredSize();
    java.awt.Point var38 = var36.getMousePosition();
    var36.revalidate();
    java.awt.Component[] var40 = var36.getComponents();
    java.awt.event.KeyListener[] var41 = var36.getKeyListeners();
    var2.putClientProperty((java.lang.Object)var28, (java.lang.Object)var41);
    bierse.view.RunningMessagePanel var45 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var46 = var45.getPreferredSize();
    boolean var47 = var45.isPreferredSizeSet();
    bierse.view.RunningMessagePanel var50 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var51 = var50.isMaximumSizeSet();
    boolean var52 = var50.isOpaque();
    java.beans.PropertyChangeListener[] var53 = var50.getPropertyChangeListeners();
    var50.setOpaque(true);
    java.awt.Insets var56 = var50.insets();
    java.awt.Insets var57 = var45.getInsets(var56);
    var45.resetKeyboardActions();
    java.awt.im.InputContext var59 = var45.getInputContext();
    bierse.view.RunningMessagePanel var62 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var63 = var62.getPreferredSize();
    java.awt.Dimension var64 = var45.getSize(var63);
    var28.setPreferredSize(var64);
    int var66 = var28.getStringHeight();
    var28.transferFocusDownCycle();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 24);

  }

  public void test485() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test485");


    bierse.view.MyKeyMap var1 = bierse.view.KeyMapComboBoxModel.getMyKeyMapForKeyCode(996);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test486() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test486");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    bierse.view.RunningMessagePanel var3 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var4 = var3.getPreferredSize();
    javax.swing.JPopupMenu var5 = var3.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var8 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var9 = var8.getPreferredSize();
    javax.swing.JPopupMenu var10 = var8.getComponentPopupMenu();
    java.awt.Rectangle var11 = var8.bounds();
    var3.computeVisibleRect(var11);
    int var13 = var0.getIndexOf((java.lang.Object)var3);
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    java.awt.Dimension var25 = var16.getMinimumSize();
    bierse.view.RunningMessagePanel var29 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var30 = var29.getPreferredSize();
    java.awt.Dimension var31 = var29.getMaximumSize();
    var29.disable();
    var16.putClientProperty((java.lang.Object)100, (java.lang.Object)var29);
    javax.swing.InputVerifier var34 = var29.getInputVerifier();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var39 = var38.isMaximumSizeSet();
    var38.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var38.invalidate();
    java.awt.Dimension var45 = var38.getPreferredSize();
    int var46 = var38.getWidth();
    java.awt.Component var47 = var29.add("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var38);
    java.awt.Rectangle var48 = var38.getVisibleRect();
    java.awt.Rectangle var49 = var3.getBounds(var48);
    var3.resetKeyboardActions();
    var3.setEnabled(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test487() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test487");


    bierse.view.KeyMapComboBoxModel var0 = new bierse.view.KeyMapComboBoxModel();
    javax.swing.event.ListDataListener[] var1 = var0.getListDataListeners();
    bierse.view.RunningMessagePanel var4 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var4.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var11 = var4.location();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    var14.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var20 = var14.getTransferHandler();
    boolean var21 = var14.hasFocus();
    javax.swing.event.AncestorListener[] var22 = var14.getAncestorListeners();
    java.awt.Dimension var23 = var14.getMinimumSize();
    var4.resize(var23);
    int var25 = var0.getIndexOf((java.lang.Object)var23);
    java.lang.Object var26 = var0.getSelectedItem();
    bierse.view.RunningMessagePanel var29 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var30 = var29.isMaximumSizeSet();
    var29.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var35 = var29.getWidth();
    java.awt.Image var38 = var29.createImage(24, 24);
    boolean var39 = var29.getInheritsPopupMenu();
    var0.setSelectedItem((java.lang.Object)var39);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.removeElementAt(996);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test488() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test488");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    int var12 = var2.getDebugGraphicsOptions();
    java.awt.Component var15 = var2.locate(24, 100);
    bierse.view.RunningMessagePanel var18 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var19 = var18.getPreferredSize();
    boolean var22 = var18.contains(10, 1);
    java.awt.im.InputMethodRequests var23 = var18.getInputMethodRequests();
    java.awt.event.FocusListener[] var24 = var18.getFocusListeners();
    java.awt.Font var25 = var18.getFont();
    javax.swing.plaf.PanelUI var26 = var18.getUI();
    var2.setUI(var26);
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var31 = var30.isMaximumSizeSet();
    boolean var32 = var30.isOpaque();
    java.awt.event.HierarchyListener[] var33 = var30.getHierarchyListeners();
    int var34 = var30.getWidth();
    int var35 = var30.countComponents();
    java.awt.Point var37 = var30.getMousePosition(true);
    var30.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var40 = var30.toString();
    java.awt.Font var41 = var30.getFont();
    bierse.view.RunningMessagePanel var44 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var45 = var44.getPreferredSize();
    boolean var48 = var44.contains(10, 1);
    java.awt.im.InputMethodRequests var49 = var44.getInputMethodRequests();
    boolean var50 = var44.getInheritsPopupMenu();
    java.lang.String var51 = var44.toString();
    java.awt.Rectangle var52 = var44.bounds();
    var30.setBounds(var52);
    var2.paintImmediately(var52);
    var2.firePropertyChange("hi!", 10.0f, 0.0f);
    boolean var59 = var2.getIgnoreRepaint();
    java.awt.Color var60 = var2.getBackground();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var40,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var40.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var40,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var51,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var51.equals("bierse.view.RunningMessagePanel[,0,0,0var51,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test489() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test489");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPopupMenu var4 = var2.getComponentPopupMenu();
    bierse.view.RunningMessagePanel var7 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var8 = var7.getPreferredSize();
    javax.swing.JPopupMenu var9 = var7.getComponentPopupMenu();
    java.awt.Rectangle var10 = var7.bounds();
    var2.computeVisibleRect(var10);
    java.awt.event.ComponentListener[] var12 = var2.getComponentListeners();
    var2.setDebugGraphicsOptions(10);
    var2.setAlignmentY(0.5f);
    bierse.view.RunningMessagePanel var19 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var19.repaint(1L, (-1), (-1), 0, 100);
    boolean var26 = var19.isFocusTraversable();
    bierse.view.RunningMessagePanel var29 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var30 = var29.isMaximumSizeSet();
    boolean var31 = var29.isOpaque();
    java.awt.event.HierarchyListener[] var32 = var29.getHierarchyListeners();
    boolean var33 = var29.isValid();
    var2.add((java.awt.Component)var19, (java.lang.Object)var33, 0);
    java.awt.event.MouseListener[] var36 = var2.getMouseListeners();
    var2.move((-1), 0);
    var2.firePropertyChange("hi!", (-1.0d), (-1.0d));
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var47 = var46.isMaximumSizeSet();
    var46.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var52 = var46.getTransferHandler();
    boolean var53 = var46.hasFocus();
    javax.swing.event.AncestorListener[] var54 = var46.getAncestorListeners();
    var46.enable(false);
    java.awt.Dimension var57 = var46.minimumSize();
    java.awt.GraphicsConfiguration var58 = var46.getGraphicsConfiguration();
    java.awt.event.MouseMotionListener[] var59 = var46.getMouseMotionListeners();
    bierse.view.RunningMessagePanel var62 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var63 = var62.isMaximumSizeSet();
    boolean var64 = var62.isOpaque();
    java.awt.event.HierarchyListener[] var65 = var62.getHierarchyListeners();
    int var66 = var62.getWidth();
    int var67 = var62.countComponents();
    bierse.view.RunningMessagePanel var70 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var71 = var70.getPreferredSize();
    boolean var74 = var70.contains(10, 1);
    java.awt.im.InputMethodRequests var75 = var70.getInputMethodRequests();
    boolean var78 = var70.inside((-1), 100);
    bierse.view.RunningMessagePanel var81 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var82 = var81.getPreferredSize();
    boolean var85 = var81.contains(10, 1);
    var81.setAlignmentX((-1.0f));
    java.awt.Point var88 = var81.getLocation();
    java.awt.Point var89 = var70.getLocation(var88);
    boolean var90 = var62.contains(var89);
    java.awt.Component var91 = var46.getComponentAt(var89);
    boolean var92 = var2.contains(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);

  }

  public void test490() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test490");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    bierse.view.RunningMessagePanel var6 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var7 = var6.isMaximumSizeSet();
    boolean var8 = var6.isOpaque();
    java.awt.event.HierarchyListener[] var9 = var6.getHierarchyListeners();
    int var10 = var6.countComponents();
    java.awt.event.HierarchyBoundsListener[] var11 = var6.getHierarchyBoundsListeners();
    bierse.view.RunningMessagePanel var14 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var15 = var14.isMaximumSizeSet();
    boolean var16 = var14.isOpaque();
    java.awt.event.HierarchyListener[] var17 = var14.getHierarchyListeners();
    int var18 = var14.getWidth();
    java.awt.event.ContainerListener[] var19 = var14.getContainerListeners();
    java.awt.Dimension var20 = var14.getMaximumSize();
    var6.setMinimumSize(var20);
    java.awt.Dimension var22 = var2.getSize(var20);
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var25.repaint(1L, (-1), (-1), 0, 100);
    boolean var32 = var25.isFocusTraversable();
    javax.swing.ActionMap var33 = var25.getActionMap();
    var2.setActionMap(var33);
    boolean var35 = var2.isMaximumSizeSet();
    java.awt.Dimension var36 = var2.size();
    javax.swing.KeyStroke[] var37 = var2.getRegisteredKeyStrokes();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var39 = var2.getComponent(11);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test491() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test491");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    var16.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var26 = var16.getPreferredSize();
    java.awt.Dimension var27 = var2.getSize(var26);
    var2.repaint(100L, 1, 0, 100, 24);
    var2.updateUI();
    var2.removeNotify();
    float var36 = var2.getAlignmentX();
    javax.swing.event.AncestorListener[] var37 = var2.getAncestorListeners();
    bierse.view.RunningMessagePanel var40 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var41 = var40.getPreferredSize();
    boolean var44 = var40.contains(10, 1);
    java.awt.Insets var45 = var40.getInsets();
    javax.swing.JToolTip var46 = var40.createToolTip();
    var40.invalidate();
    bierse.view.RunningMessagePanel var50 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var51 = var50.getPreferredSize();
    java.awt.Point var52 = var50.getMousePosition();
    var50.revalidate();
    boolean var54 = var40.isFocusCycleRoot((java.awt.Container)var50);
    java.awt.Point var55 = var40.location();
    java.awt.Point var56 = var2.getLocation(var55);
    var2.setMessage("bierse.view.RunningMessagePanel[,0,0,0x0,invalid,disabled,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test492() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test492");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    java.lang.String var14 = var2.getName();
    var2.repaint();
    bierse.view.RunningMessagePanel var18 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var19 = var18.isMaximumSizeSet();
    var18.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var24 = var18.getTransferHandler();
    boolean var25 = var18.hasFocus();
    var18.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var28 = var18.getPreferredSize();
    java.awt.GraphicsConfiguration var29 = var18.getGraphicsConfiguration();
    var18.firePropertyChange("", 1L, 10L);
    java.awt.Component var36 = var18.findComponentAt((-1), 996);
    java.awt.Point var37 = var18.getLocation();
    var2.setLocation(var37);
    var2.setVisible(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test493() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test493");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.beans.PropertyChangeListener[] var5 = var2.getPropertyChangeListeners();
    boolean var6 = var2.isFocusCycleRoot();
    boolean var7 = var2.getIgnoreRepaint();
    java.awt.Component[] var8 = var2.getComponents();
    java.awt.Component var11 = var2.findComponentAt(11, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test494() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test494");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var8 = var2.getTransferHandler();
    boolean var9 = var2.hasFocus();
    var2.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var12 = var2.getPreferredSize();
    java.awt.ComponentOrientation var13 = var2.getComponentOrientation();
    bierse.view.RunningMessagePanel var16 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var17 = var16.isMaximumSizeSet();
    var16.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var22 = var16.getTransferHandler();
    boolean var23 = var16.hasFocus();
    javax.swing.event.AncestorListener[] var24 = var16.getAncestorListeners();
    bierse.view.RunningMessagePanel var27 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var28 = var27.isMaximumSizeSet();
    var27.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var33 = var27.getTransferHandler();
    boolean var34 = var27.hasFocus();
    var27.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var37 = var27.getPreferredSize();
    java.awt.ComponentOrientation var38 = var27.getComponentOrientation();
    var2.add((java.awt.Component)var16, (java.lang.Object)var27);
    var2.setAlignmentY(0.5f);
    bierse.view.RunningMessagePanel var44 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var45 = var44.isMaximumSizeSet();
    var44.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var44.invalidate();
    bierse.view.RunningMessagePanel var53 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var54 = var53.isMaximumSizeSet();
    boolean var55 = var53.isOpaque();
    java.awt.event.HierarchyListener[] var56 = var53.getHierarchyListeners();
    int var57 = var53.countComponents();
    java.awt.event.HierarchyBoundsListener[] var58 = var53.getHierarchyBoundsListeners();
    boolean var60 = var53.areFocusTraversalKeysSet(1);
    boolean var61 = var44.isAncestorOf((java.awt.Component)var53);
    var44.enable();
    var44.setInheritsPopupMenu(true);
    var44.setName("hi!");
    bierse.view.RunningMessagePanel var69 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var70 = var69.getPreferredSize();
    boolean var73 = var69.contains(10, 1);
    var69.setFocusTraversalPolicyProvider(false);
    float var76 = var69.getAlignmentX();
    java.awt.Component.BaselineResizeBehavior var77 = var69.getBaselineResizeBehavior();
    java.awt.dnd.DropTarget var78 = var69.getDropTarget();
    var69.layout();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.add((java.awt.Component)var44, (java.lang.Object)var69, 24);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);

  }

  public void test495() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test495");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.beans.PropertyChangeListener[] var5 = var2.getPropertyChangeListeners();
    boolean var6 = var2.isFocusCycleRoot();
    int var7 = var2.getWidth();
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var11 = var10.isMaximumSizeSet();
    var10.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var16 = var10.getTransferHandler();
    boolean var17 = var10.hasFocus();
    var10.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var20 = var10.getPreferredSize();
    java.awt.ComponentOrientation var21 = var10.getComponentOrientation();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    var24.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var30 = var24.getTransferHandler();
    boolean var31 = var24.hasFocus();
    javax.swing.event.AncestorListener[] var32 = var24.getAncestorListeners();
    bierse.view.RunningMessagePanel var35 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var36 = var35.isMaximumSizeSet();
    var35.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var41 = var35.getTransferHandler();
    boolean var42 = var35.hasFocus();
    var35.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var45 = var35.getPreferredSize();
    java.awt.ComponentOrientation var46 = var35.getComponentOrientation();
    var10.add((java.awt.Component)var24, (java.lang.Object)var35);
    bierse.view.RunningMessagePanel var50 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var51 = var50.isMaximumSizeSet();
    var50.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var56 = var50.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var59 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var60 = var59.getPreferredSize();
    boolean var61 = var59.isPreferredSizeSet();
    var59.enable();
    var59.transferFocusBackward();
    int var64 = var50.getComponentZOrder((java.awt.Component)var59);
    bierse.view.RunningMessagePanel var67 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var67.repaint(1L, (-1), (-1), 0, 100);
    java.awt.Point var74 = var67.location();
    boolean var75 = var59.contains(var74);
    java.awt.Component var76 = var24.findComponentAt(var74);
    java.util.Set var78 = var24.getFocusTraversalKeys(0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setComponentZOrder((java.awt.Component)var24, 1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test496() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test496");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    java.awt.peer.ComponentPeer var6 = var2.getPeer();
    var2.transferFocus();
    java.lang.String var8 = var2.getToolTipText();
    bierse.view.RunningMessagePanel var11 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var12 = var11.isMaximumSizeSet();
    boolean var13 = var11.isOpaque();
    java.beans.PropertyChangeListener[] var14 = var11.getPropertyChangeListeners();
    var11.setOpaque(true);
    java.awt.Insets var17 = var11.insets();
    bierse.view.RunningMessagePanel var20 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var21 = var20.isMaximumSizeSet();
    var20.layout();
    bierse.view.RunningMessagePanel var25 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var26 = var25.isMaximumSizeSet();
    var25.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    boolean var31 = var25.isFocusTraversalPolicySet();
    bierse.view.RunningMessagePanel var34 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var35 = var34.getPreferredSize();
    boolean var36 = var34.isPreferredSizeSet();
    var34.enable();
    var34.transferFocusBackward();
    int var39 = var25.getComponentZOrder((java.awt.Component)var34);
    var25.setEnabled(false);
    java.awt.Graphics var42 = var25.getGraphics();
    var20.remove((java.awt.Component)var25);
    bierse.view.RunningMessagePanel var46 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var47 = var46.getPreferredSize();
    boolean var50 = var46.contains(10, 1);
    java.awt.Insets var51 = var46.getInsets();
    javax.swing.JToolTip var52 = var46.createToolTip();
    var46.invalidate();
    var20.remove((java.awt.Component)var46);
    var2.putClientProperty((java.lang.Object)var11, (java.lang.Object)var46);
    boolean var56 = var2.isValid();
    int var57 = var2.getWidth();
    var2.firePropertyChange("PanelUI", 1, 0);
    bierse.view.RunningMessagePanel var64 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var65 = var64.isMaximumSizeSet();
    var64.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var70 = var64.getTransferHandler();
    boolean var71 = var64.hasFocus();
    javax.swing.event.AncestorListener[] var72 = var64.getAncestorListeners();
    java.awt.Dimension var73 = var64.getMinimumSize();
    bierse.view.RunningMessagePanel var77 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var78 = var77.getPreferredSize();
    java.awt.Dimension var79 = var77.getMaximumSize();
    var77.disable();
    var64.putClientProperty((java.lang.Object)100, (java.lang.Object)var77);
    javax.swing.InputVerifier var82 = var77.getInputVerifier();
    bierse.view.RunningMessagePanel var86 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var87 = var86.isMaximumSizeSet();
    var86.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var86.invalidate();
    java.awt.Dimension var93 = var86.getPreferredSize();
    int var94 = var86.getWidth();
    java.awt.Component var95 = var77.add("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (java.awt.Component)var86);
    java.awt.Rectangle var96 = var86.getVisibleRect();
    java.awt.peer.ComponentPeer var97 = var86.getPeer();
    java.awt.Point var98 = var86.location();
    var2.setLocation(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test497() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test497");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.Point var4 = var2.getMousePosition();
    var2.setDoubleBuffered(false);
    java.awt.GraphicsConfiguration var7 = var2.getGraphicsConfiguration();
    java.awt.Component var10 = var2.locate((-1), (-1));
    java.awt.Font var11 = var2.getFont();
    javax.swing.KeyStroke[] var12 = var2.getRegisteredKeyStrokes();
    bierse.view.RunningMessagePanel var15 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var16 = var15.isLightweight();
    java.beans.VetoableChangeListener[] var17 = var15.getVetoableChangeListeners();
    float var18 = var15.getAlignmentY();
    bierse.view.RunningMessagePanel var21 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var22 = var21.isMaximumSizeSet();
    var21.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    var21.invalidate();
    bierse.view.RunningMessagePanel var30 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var31 = var30.isMaximumSizeSet();
    var30.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var39 = var38.isMaximumSizeSet();
    var38.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    int var44 = var38.getWidth();
    java.awt.Component[] var45 = var38.getComponents();
    var21.putClientProperty((java.lang.Object)var30, (java.lang.Object)var45);
    java.util.Locale var47 = var30.getLocale();
    javax.swing.JComponent.setDefaultLocale(var47);
    var15.setLocale(var47);
    var15.repaint();
    java.awt.Component var51 = var2.add((java.awt.Component)var15);
    bierse.view.RunningMessagePanel var54 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var55 = var54.isMaximumSizeSet();
    var54.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var60 = var54.getTransferHandler();
    boolean var61 = var54.hasFocus();
    var54.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var64 = var54.getPreferredSize();
    java.awt.ComponentOrientation var65 = var54.getComponentOrientation();
    bierse.view.RunningMessagePanel var68 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var69 = var68.isMaximumSizeSet();
    var68.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var74 = var68.getTransferHandler();
    boolean var75 = var68.hasFocus();
    var68.setVerifyInputWhenFocusTarget(false);
    java.awt.Dimension var78 = var68.getPreferredSize();
    java.awt.Dimension var79 = var54.getSize(var78);
    java.awt.image.VolatileImage var82 = var54.createVolatileImage((-1), (-1));
    javax.swing.TransferHandler var83 = var54.getTransferHandler();
    java.awt.Dimension var84 = var54.preferredSize();
    var15.resize(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test498() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test498");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    boolean var4 = var2.isOpaque();
    java.awt.event.HierarchyListener[] var5 = var2.getHierarchyListeners();
    java.awt.peer.ComponentPeer var6 = var2.getPeer();
    var2.transferFocusDownCycle();
    var2.transferFocusUpCycle();
    boolean var9 = var2.isEnabled();
    boolean var12 = var2.contains(1, 12);
    java.awt.im.InputContext var13 = var2.getInputContext();
    var2.repaint(100L, 996, 10, 13, (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test499() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test499");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var3 = var2.isMaximumSizeSet();
    var2.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    bierse.view.RunningMessagePanel var10 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var11 = var10.getPreferredSize();
    boolean var14 = var10.contains(10, 1);
    var10.setAlignmentX((-1.0f));
    java.awt.Point var17 = var10.getLocation();
    java.awt.Point var18 = var10.getLocation();
    boolean var19 = var2.contains(var18);
    var2.enable();
    boolean var21 = var2.isBackgroundSet();
    bierse.view.RunningMessagePanel var24 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var25 = var24.isMaximumSizeSet();
    boolean var26 = var24.isOpaque();
    java.awt.event.HierarchyListener[] var27 = var24.getHierarchyListeners();
    int var28 = var24.getWidth();
    int var29 = var24.countComponents();
    java.awt.Point var31 = var24.getMousePosition(true);
    var24.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var34 = var24.toString();
    java.awt.Font var35 = var24.getFont();
    bierse.view.RunningMessagePanel var38 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var39 = var38.getPreferredSize();
    boolean var42 = var38.contains(10, 1);
    java.awt.im.InputMethodRequests var43 = var38.getInputMethodRequests();
    boolean var44 = var38.getInheritsPopupMenu();
    java.lang.String var45 = var38.toString();
    java.awt.Rectangle var46 = var38.bounds();
    var24.setBounds(var46);
    bierse.view.RunningMessagePanel var50 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var51 = var50.isMaximumSizeSet();
    var50.firePropertyChange("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100.0d, 1.0d);
    javax.swing.TransferHandler var56 = var50.getTransferHandler();
    boolean var57 = var50.hasFocus();
    javax.swing.event.AncestorListener[] var58 = var50.getAncestorListeners();
    java.awt.Dimension var59 = var50.getMinimumSize();
    bierse.view.RunningMessagePanel var63 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var64 = var63.getPreferredSize();
    java.awt.Dimension var65 = var63.getMaximumSize();
    var63.disable();
    var50.putClientProperty((java.lang.Object)100, (java.lang.Object)var63);
    javax.swing.InputVerifier var68 = var63.getInputVerifier();
    boolean var69 = var63.getInheritsPopupMenu();
    var63.setLocation(0, 100);
    javax.swing.plaf.PanelUI var73 = var63.getUI();
    var24.setUI(var73);
    var2.setUI(var73);
    var2.requestFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var34,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var34.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var34,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var45,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var45.equals("bierse.view.RunningMessagePanel[,0,0,0var45,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test500() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test500");


    bierse.view.RunningMessagePanel var2 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var3 = var2.getPreferredSize();
    boolean var4 = var2.isPreferredSizeSet();
    var2.enable();
    javax.accessibility.AccessibleContext var6 = var2.getAccessibleContext();
    bierse.view.RunningMessagePanel var9 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    var9.transferFocus();
    var9.show();
    float var12 = var9.getAlignmentX();
    var9.repaint(0L, 10, 0, 10, (-1));
    boolean var19 = var9.isEnabled();
    bierse.view.RunningMessagePanel var22 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var23 = var22.getPreferredSize();
    javax.swing.JPopupMenu var24 = var22.getComponentPopupMenu();
    java.awt.Rectangle var25 = var22.bounds();
    java.awt.Rectangle var26 = var9.getBounds(var25);
    var2.computeVisibleRect(var26);
    boolean var29 = var2.requestFocus(false);
    bierse.view.RunningMessagePanel var32 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var33 = var32.getPreferredSize();
    boolean var36 = var32.contains(10, 1);
    java.awt.im.InputMethodRequests var37 = var32.getInputMethodRequests();
    boolean var40 = var32.inside((-1), 100);
    bierse.view.RunningMessagePanel var43 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var44 = var43.getPreferredSize();
    boolean var47 = var43.contains(10, 1);
    var43.setAlignmentX((-1.0f));
    java.awt.Point var50 = var43.getLocation();
    java.awt.Point var51 = var32.getLocation(var50);
    bierse.view.RunningMessagePanel var54 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    boolean var55 = var54.isMaximumSizeSet();
    boolean var56 = var54.isOpaque();
    java.awt.event.HierarchyListener[] var57 = var54.getHierarchyListeners();
    int var58 = var54.getWidth();
    int var59 = var54.countComponents();
    java.awt.Point var61 = var54.getMousePosition(true);
    var54.setName("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD");
    java.lang.String var64 = var54.toString();
    java.awt.Font var65 = var54.getFont();
    bierse.view.RunningMessagePanel var68 = new bierse.view.RunningMessagePanel("NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD", 100);
    java.awt.Dimension var69 = var68.getPreferredSize();
    boolean var72 = var68.contains(10, 1);
    java.awt.im.InputMethodRequests var73 = var68.getInputMethodRequests();
    boolean var74 = var68.getInheritsPopupMenu();
    java.lang.String var75 = var68.toString();
    java.awt.Rectangle var76 = var68.bounds();
    var54.setBounds(var76);
    java.awt.Rectangle var78 = var32.getBounds(var76);
    java.awt.Rectangle var79 = var2.getBounds(var76);
    var2.firePropertyChange("bierse.view.RunningMessagePanel[,0,0,32767x32767,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", (-1.0d), (-1.0d));
    var2.firePropertyChange("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]", '#', '4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var64,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var64.equals("bierse.view.RunningMessagePanel[NAME;MIN_PRICE;START_PRICE;MAX_PRICE;AVG_AMOUNT;AVG_PRICE;AVG_SOLD_PRICE;TOTAL_SOLD,0,0,0var64,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "bierse.view.RunningMessagePanel[,0,0,0var75,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"+ "'", var75.equals("bierse.view.RunningMessagePanel[,0,0,0var75,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

}
